{
  "address": "0x6e4F34c5a111978FeBb377462Da97D0CBFcEed17",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_WETH",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_roles",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "borrowToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "borrowAmount",
          "type": "uint256"
        }
      ],
      "name": "CrossBorrow",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "depositToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "depositAmount",
          "type": "uint256"
        }
      ],
      "name": "CrossDeposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "inToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "inTokenAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "inTokenBorrow",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "outToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "outTokenAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "outTokenExtinguish",
          "type": "uint256"
        }
      ],
      "name": "CrossTrade",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "withdrawToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "withdrawAmount",
          "type": "uint256"
        }
      ],
      "name": "CrossWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "SUSHI",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UNI",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WETH",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "ammFactory",
          "type": "address"
        }
      ],
      "name": "authorizeAMM",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        }
      ],
      "name": "authorizedSwapExactT4T",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountInMax",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        }
      ],
      "name": "authorizedSwapT4ExactT",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "claimIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "borrowToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "borrowAmount",
          "type": "uint256"
        }
      ],
      "name": "crossBorrow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "crossCloseAccount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "depositToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "depositAmount",
          "type": "uint256"
        }
      ],
      "name": "crossDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "crossDepositETH",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "ammFactory",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "crossSwapExactTokensForTokens",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "ammFactory",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountInMax",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "crossSwapTokensForExactTokens",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "withdrawToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "withdrawAmount",
          "type": "uint256"
        }
      ],
      "name": "crossWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "withdrawAmount",
          "type": "uint256"
        }
      ],
      "name": "crossWithdrawETH",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "factories",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "outAmount",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        }
      ],
      "name": "getAmountsIn",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "factory",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "inAmount",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        }
      ],
      "name": "getAmountsOut",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "incentiveTranches",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "mainCharacterCache",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "roleCache",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "roles",
      "outputs": [
        {
          "internalType": "contract Roles",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "tranche",
          "type": "uint8"
        }
      ],
      "name": "setIncentiveTranche",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "role",
          "type": "uint256"
        }
      ],
      "name": "updateMainCharacterCache",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "role",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "contr",
          "type": "address"
        }
      ],
      "name": "updateRoleCache",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc2e4dafc3524a15382872bc830e331aa8a68c11488785cd483b7bf76d61fc6d5",
  "receipt": {
    "to": null,
    "from": "0x23292e9BA8434e59E6BAC1907bA7425211c4DE27",
    "contractAddress": "0x6e4F34c5a111978FeBb377462Da97D0CBFcEed17",
    "transactionIndex": 9,
    "gasUsed": "3657379",
    "logsBloom": "0x
    "blockHash": "0xd62b4387237668ed3b56bae9f269f14b982741e98724cf3f4238c69a026cc4d6",
    "transactionHash": "0xc2e4dafc3524a15382872bc830e331aa8a68c11488785cd483b7bf76d61fc6d5",
    "logs": [
      {
        "transactionIndex": 9,
        "blockNumber": 24104708,
        "transactionHash": "0xc2e4dafc3524a15382872bc830e331aa8a68c11488785cd483b7bf76d61fc6d5",
        "address": "0x6e4F34c5a111978FeBb377462Da97D0CBFcEed17",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000023292e9ba8434e59e6bac1907ba7425211c4de27"
        ],
        "data": "0x",
        "logIndex": 7,
        "blockHash": "0xd62b4387237668ed3b56bae9f269f14b982741e98724cf3f4238c69a026cc4d6"
      }
    ],
    "blockNumber": 24104708,
    "cumulativeGasUsed": "4054052",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
    "0xC95531a7f6C57456718BCd69a5f64829C7973f11"
  ],
  "solcInputHash": "ec45310c1ebd228212cbc01f9840ea7e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.1+commit.df193b15\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_WETH\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_roles\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"borrowToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"}],\"name\":\"CrossBorrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"depositToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"}],\"name\":\"CrossDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"inToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"inTokenBorrow\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"outToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"outTokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"outTokenExtinguish\",\"type\":\"uint256\"}],\"name\":\"CrossTrade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"withdrawToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"withdrawAmount\",\"type\":\"uint256\"}],\"name\":\"CrossWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"SUSHI\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNI\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ammFactory\",\"type\":\"address\"}],\"name\":\"authorizeAMM\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"authorizedSwapExactT4T\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"authorizedSwapT4ExactT\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrowToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"}],\"name\":\"crossBorrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crossCloseAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"depositToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"}],\"name\":\"crossDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"crossDepositETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ammFactory\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"crossSwapExactTokensForTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ammFactory\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"crossSwapTokensForExactTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"withdrawToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"withdrawAmount\",\"type\":\"uint256\"}],\"name\":\"crossWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"withdrawAmount\",\"type\":\"uint256\"}],\"name\":\"crossWithdrawETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"factories\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"outAmount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"getAmountsIn\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inAmount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"getAmountsOut\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"incentiveTranches\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mainCharacterCache\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"roleCache\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roles\",\"outputs\":[{\"internalType\":\"contract Roles\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"tranche\",\"type\":\"uint8\"}],\"name\":\"setIncentiveTranche\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"role\",\"type\":\"uint256\"}],\"name\":\"updateMainCharacterCache\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"role\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"contr\",\"type\":\"address\"}],\"name\":\"updateRoleCache\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"authorizedSwapExactT4T(address,uint256,uint256,address[])\":{\"details\":\"external function to make swaps on AMM using protocol funds, only for authorized contracts\"},\"crossBorrow(address,uint256)\":{\"details\":\"borrow into cross margin trading account\"},\"crossCloseAccount()\":{\"details\":\"close an account that is no longer borrowing and return gains\"},\"crossDeposit(address,uint256)\":{\"details\":\"traders call this to deposit funds on cross margin\"},\"crossDepositETH()\":{\"details\":\"deposit wrapped ehtereum into cross margin account\"},\"crossSwapExactTokensForTokens(address,uint256,uint256,address[],uint256)\":{\"details\":\"entry point for swapping tokens held in cross margin account\"},\"crossSwapTokensForExactTokens(address,uint256,uint256,address[],uint256)\":{\"details\":\"entry point for swapping tokens held in cross margin account\"},\"crossWithdraw(address,uint256)\":{\"details\":\"withdraw deposits/earnings from cross margin account\"},\"crossWithdrawETH(uint256)\":{\"details\":\"withdraw ethereum from cross margin account\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"events\":{\"CrossBorrow(address,address,uint256)\":{\"notice\":\"emitted upon sucessfully borrowing\"},\"CrossDeposit(address,address,uint256)\":{\"notice\":\"emitted when a trader depoits on cross margin\"},\"CrossTrade(address,address,uint256,uint256,address,uint256,uint256)\":{\"notice\":\"emitted whenever a trade happens\"},\"CrossWithdraw(address,address,uint256)\":{\"notice\":\"emitted when a trader withdraws funds\"}},\"kind\":\"user\",\"methods\":{\"WETH()\":{\"notice\":\"wrapped ETH ERC20 contract\"},\"factories(address)\":{\"notice\":\"different uniswap compatible factories to talk to\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MarginRouter.sol\":\"MarginRouter\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x1cae4f85f114ff17b90414f5da67365b1d00337abb5bce9bf944eb78a2c0673c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x99f5c21018d796db7833a2100bb0e7411999e248a3c950fb526eee5d2bf47cb7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\",\"keccak256\":\"0xe5905c0989cf5a865ed9bb7b9252536ca011c5b744017a82a7d4443b9c00a891\"},\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x7c9bc70e5996c763e02ff38905282bc24fb242b0ef2519a003b36824fc524a4b\"},\"contracts/Admin.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./IncentiveDistribution.sol\\\";\\nimport \\\"./RoleAware.sol\\\";\\nimport \\\"./Fund.sol\\\";\\nimport \\\"./CrossMarginTrading.sol\\\";\\n\\n/// @dev Here we support staking for MFI incentives as well as\\n/// staking to perform the maintenance role.\\ncontract Admin is RoleAware, Ownable {\\n    address public immutable MFI;\\n    mapping(address => uint256) public stakes;\\n    uint256 public totalStakes;\\n    mapping(address => uint256) public claimIds;\\n\\n    uint256 public immutable feesPer10k;\\n    mapping(address => uint256) public collectedFees;\\n\\n    uint256 public maintenanceStakePerBlock = 10 ether;\\n    mapping(address => address) public nextMaintenanceStaker;\\n    mapping(address => mapping(address => bool)) public maintenanceDelegateTo;\\n    address public currentMaintenanceStaker;\\n    address public prevMaintenanceStaker;\\n    uint256 public currentMaintenanceStakerStartBlock;\\n    address public immutable lockedMFI;\\n\\n    constructor(\\n        uint256 _feesPer10k,\\n        address _MFI,\\n        address _lockedMFI,\\n        address lockedMFIDelegate,\\n        address _roles\\n    ) RoleAware(_roles) Ownable() {\\n        MFI = _MFI;\\n        feesPer10k = _feesPer10k;\\n        maintenanceStakePerBlock = 1 ether;\\n        lockedMFI = _lockedMFI;\\n\\n        // for initialization purposes and to ensure availability of service\\n        // the team's locked MFI participate in maintenance staking only\\n        // (not in the incentive staking part)\\n        // this implies some trust of the team to execute, which we deem reasonable\\n        // since the locked stake is temporary and diminishing as well as the fact\\n        // that the team is heavily invested in the protocol and incentivized\\n        // by fees like any other maintainer\\n        // furthermore others could step in to liquidate via the attacker route\\n        // and take away the team fees if they were delinquent\\n        nextMaintenanceStaker[_lockedMFI] = _lockedMFI;\\n        currentMaintenanceStaker = _lockedMFI;\\n        prevMaintenanceStaker = _lockedMFI;\\n        maintenanceDelegateTo[_lockedMFI][lockedMFIDelegate];\\n        currentMaintenanceStakerStartBlock = block.number;\\n    }\\n\\n    function setMaintenanceStakePerBlock(uint256 amount) external onlyOwner {\\n        maintenanceStakePerBlock = amount;\\n    }\\n\\n    function _stake(address holder, uint256 amount) internal {\\n        Fund(fund()).depositFor(holder, MFI, amount);\\n\\n        stakes[holder] += amount;\\n        totalStakes += amount;\\n\\n        if (claimIds[holder] > 0) {\\n            IncentiveDistribution(incentiveDistributor()).addToClaimAmount(\\n                0,\\n                claimIds[holder],\\n                amount\\n            );\\n        } else {\\n            uint256 claimId =\\n                IncentiveDistribution(incentiveDistributor()).startClaim(\\n                    0,\\n                    holder,\\n                    amount\\n                );\\n            claimIds[holder] = claimId;\\n            require(claimId > 0, \\\"Distribution is over or paused\\\");\\n        }\\n    }\\n\\n    function depositStake(uint256 amount) external {\\n        _stake(msg.sender, amount);\\n    }\\n\\n    function _withdrawStake(\\n        address holder,\\n        uint256 amount,\\n        address recipient\\n    ) internal {\\n        uint256 stakeAmount = stakes[holder];\\n        // overflow failure desirable\\n        stakes[holder] -= amount;\\n        totalStakes -= amount;\\n        Fund(fund()).withdraw(MFI, recipient, amount);\\n\\n        if (stakeAmount == amount) {\\n            IncentiveDistribution(incentiveDistributor()).endClaim(\\n                0,\\n                claimIds[holder]\\n            );\\n            claimIds[holder] = 0;\\n        } else {\\n            IncentiveDistribution(incentiveDistributor())\\n                .subtractFromClaimAmount(0, claimIds[holder], amount);\\n        }\\n    }\\n\\n    function withdrawStake(uint256 amount) external {\\n        require(\\n            !isAuthorizedStaker(msg.sender),\\n            \\\"You can't withdraw while you're authorized staker\\\"\\n        );\\n        _withdrawStake(msg.sender, amount, msg.sender);\\n    }\\n\\n    function takeFeesFromOutput(address token, uint256 amount)\\n        external\\n        returns (uint256 fees)\\n    {\\n        require(isFeeSource(msg.sender), \\\"Not authorized to source fees\\\");\\n        fees = (feesPer10k * amount) / 10_000;\\n        collectedFees[token] += fees;\\n    }\\n\\n    function takeFeesFromInput(address token, uint256 amount)\\n        external\\n        returns (uint256 fees)\\n    {\\n        require(isFeeSource(msg.sender), \\\"Not authorized to source fees\\\");\\n        fees = (feesPer10k * amount) / (10_000 + feesPer10k);\\n        collectedFees[token] += fees;\\n    }\\n\\n    function depositMaintenanceStake(uint256 amount) external {\\n        require(\\n            amount + stakes[msg.sender] >= maintenanceStakePerBlock,\\n            \\\"Insufficient stake to call even one block\\\"\\n        );\\n        _stake(msg.sender, amount);\\n        if (nextMaintenanceStaker[msg.sender] == address(0)) {\\n            nextMaintenanceStaker[msg.sender] = getUpdatedCurrentStaker();\\n            nextMaintenanceStaker[prevMaintenanceStaker] = msg.sender;\\n        }\\n    }\\n\\n    function getMaintenanceStakerStake(address staker)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        if (staker == lockedMFI) {\\n            return IERC20(MFI).balanceOf(lockedMFI) / 2;\\n        } else {\\n            return stakes[staker];\\n        }\\n    }\\n\\n    function getUpdatedCurrentStaker() public returns (address) {\\n        uint256 currentStake =\\n            getMaintenanceStakerStake(currentMaintenanceStaker);\\n        while (\\n            (block.number - currentMaintenanceStakerStartBlock) *\\n                maintenanceStakePerBlock >=\\n            currentStake\\n        ) {\\n            if (maintenanceStakePerBlock > currentStake) {\\n                // delete current from daisy chain\\n                address nextOne =\\n                    nextMaintenanceStaker[currentMaintenanceStaker];\\n                nextMaintenanceStaker[prevMaintenanceStaker] = nextOne;\\n                nextMaintenanceStaker[currentMaintenanceStaker] = address(0);\\n\\n                currentMaintenanceStaker = nextOne;\\n            } else {\\n                currentMaintenanceStakerStartBlock +=\\n                    currentStake /\\n                    maintenanceStakePerBlock;\\n\\n                prevMaintenanceStaker = currentMaintenanceStaker;\\n                currentMaintenanceStaker = nextMaintenanceStaker[\\n                    currentMaintenanceStaker\\n                ];\\n            }\\n            currentStake = getMaintenanceStakerStake(currentMaintenanceStaker);\\n        }\\n        return currentMaintenanceStaker;\\n    }\\n\\n    function viewCurrentMaintenanceStaker()\\n        public\\n        view\\n        returns (address staker, uint256 startBlock)\\n    {\\n        staker = currentMaintenanceStaker;\\n        uint256 currentStake = getMaintenanceStakerStake(staker);\\n        startBlock = currentMaintenanceStakerStartBlock;\\n        while (\\n            (block.number - startBlock) * maintenanceStakePerBlock >=\\n            currentStake\\n        ) {\\n            if (maintenanceStakePerBlock > currentStake) {\\n                // skip\\n                staker = nextMaintenanceStaker[staker];\\n                currentStake = getMaintenanceStakerStake(staker);\\n            } else {\\n                startBlock +=\\n                    currentStake /\\n                    maintenanceStakePerBlock;\\n                staker = nextMaintenanceStaker[staker];\\n                currentStake = getMaintenanceStakerStake(staker);\\n            }\\n        }\\n    }\\n\\n    function addDelegate(address forStaker, address delegate) external {\\n        require(\\n            msg.sender == forStaker ||\\n                maintenanceDelegateTo[forStaker][msg.sender],\\n            \\\"msg.sender not authorized to delegate for staker\\\"\\n        );\\n        maintenanceDelegateTo[forStaker][delegate] = true;\\n    }\\n\\n    function removeDelegate(address forStaker, address delegate) external {\\n        require(\\n            msg.sender == forStaker ||\\n                maintenanceDelegateTo[forStaker][msg.sender],\\n            \\\"msg.sender not authorized to delegate for staker\\\"\\n        );\\n        maintenanceDelegateTo[forStaker][delegate] = false;\\n    }\\n\\n    function isAuthorizedStaker(address caller)\\n        public\\n        returns (bool isAuthorized)\\n    {\\n        address currentStaker = getUpdatedCurrentStaker();\\n        isAuthorized =\\n            currentStaker == caller ||\\n            maintenanceDelegateTo[currentStaker][caller];\\n    }\\n\\n    function penalizeMaintenanceStake(\\n        address maintainer,\\n        uint256 penalty,\\n        address recipient\\n    ) external returns (uint256 stakeTaken) {\\n        require(\\n            isStakePenalizer(msg.sender),\\n            \\\"msg.sender not authorized to penalize stakers\\\"\\n        );\\n        if (penalty > stakes[maintainer]) {\\n            stakeTaken = stakes[maintainer];\\n        } else {\\n            stakeTaken = penalty;\\n        }\\n        _withdrawStake(maintainer, stakeTaken, recipient);\\n    }\\n}\\n\",\"keccak256\":\"0x5c7bc64ff6757e40c414a1495ae90fe5450854fb18b24ab82814960b6a3aaca1\",\"license\":\"BUSL-1.1\"},\"contracts/BaseLending.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\nimport \\\"./RoleAware.sol\\\";\\n\\nabstract contract BaseLending is RoleAware, Ownable {\\n    uint256 constant FP32 = 2**32;\\n    uint256 constant ACCUMULATOR_INIT = 10**18;\\n\\n    struct LendingMetadata {\\n        uint256 totalLending;\\n        uint256 totalBorrowed;\\n        uint256 lendingBuffer;\\n        uint256 lendingCap;\\n    }\\n    mapping(address => LendingMetadata) public lendingMeta;\\n\\n    uint256 public maxHourlyYieldFP;\\n    uint256 public yieldChangePerSecondFP;\\n\\n    /// @dev simple formula for calculating interest relative to accumulator\\n    function applyInterest(\\n        uint256 balance,\\n        uint256 accumulatorFP,\\n        uint256 yieldQuotientFP\\n    ) internal pure returns (uint256) {\\n        // 1 * FP / FP = 1\\n        return (balance * accumulatorFP) / yieldQuotientFP;\\n    }\\n\\n    /// update the yield for an asset based on recent supply and demand\\n    function updatedYieldFP(\\n        // previous yield\\n        uint256 _yieldFP,\\n        // timestamp\\n        uint256 lastUpdated,\\n        uint256 totalLendingInBucket,\\n        uint256 bucketTarget,\\n        uint256 buyingSpeed,\\n        uint256 withdrawingSpeed,\\n        uint256 bucketMaxYield\\n    ) internal view returns (uint256 yieldFP) {\\n        yieldFP = _yieldFP;\\n        uint256 timeDiff = block.timestamp - lastUpdated;\\n        uint256 yieldDiff = timeDiff * yieldChangePerSecondFP;\\n\\n        if (\\n            totalLendingInBucket >= bucketTarget ||\\n            buyingSpeed >= withdrawingSpeed\\n        ) {\\n            yieldFP -= min(yieldFP, yieldDiff);\\n        } else {\\n            yieldFP += yieldDiff;\\n            if (yieldFP > bucketMaxYield) {\\n                yieldFP = bucketMaxYield;\\n            }\\n        }\\n    }\\n\\n    /// @dev minimum\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a > b) {\\n            return b;\\n        } else {\\n            return a;\\n        }\\n    }\\n\\n    function _makeFallbackBond(\\n        address token,\\n        address holder,\\n        uint256 amount\\n    ) internal virtual;\\n\\n    function lendingTarget(LendingMetadata storage meta) internal view returns (uint256) {\\n        return\\n            min(meta.lendingCap, meta.totalBorrowed + meta.lendingBuffer);\\n    }\\n\\n    function viewLendingTarget(address token) external view returns (uint256) {\\n        LendingMetadata storage meta = lendingMeta[token];\\n        return lendingTarget(meta);\\n    }\\n\\n    function setLendingCap(address token, uint256 cap) external {\\n        require(\\n            isTokenActivator(msg.sender),\\n            \\\"not authorized to set lending cap\\\"\\n        );\\n        lendingMeta[token].lendingCap = cap;\\n    }\\n\\n    function setLendingBuffer(address token, uint256 buffer) external {\\n        require(\\n            isTokenActivator(msg.sender),\\n            \\\"not autorized to set lending buffer\\\"\\n        );\\n        lendingMeta[token].lendingBuffer = buffer;\\n    }\\n\\n    function setMaxHourlyYieldFP(uint256 maxYieldFP) external onlyOwner {\\n        maxHourlyYieldFP = maxYieldFP;\\n    }\\n\\n    function setYieldChangePerSecondFP(uint256 changePerSecondFP)\\n        external\\n        onlyOwner\\n    {\\n        yieldChangePerSecondFP = changePerSecondFP;\\n    }\\n}\\n\",\"keccak256\":\"0x0852d01fba3ef0a9513b3b12f94b8a1735d0b53c31d073681bf7d3c469130df2\",\"license\":\"BUSL-1.1\"},\"contracts/BondLending.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\nimport \\\"./BaseLending.sol\\\";\\nimport \\\"./Fund.sol\\\";\\n\\nstruct Bond {\\n    address holder;\\n    address token;\\n    uint256 originalPrice;\\n    uint256 returnAmount;\\n    uint256 maturityTimestamp;\\n    uint256 runtime;\\n    uint256 yieldFP;\\n}\\n\\n/// @dev Lending for fixed runtime, fixed interest\\n/// Lenders can pick their own bond maturity date --\\n/// In order to manage interest rates for the different\\n/// maturities and create a yield curve we bucket\\n/// bond runtimes into weighted baskets and adjust\\n/// rates individually per bucket, based on supply and demand.\\nabstract contract BondLending is BaseLending {\\n    uint256 public minRuntime = 30 days;\\n    uint256 public maxRuntime = 365 days;\\n    uint256 public diffMaxMinRuntime;\\n    // this is the numerator under runtimeWeights.\\n    // any excess left over is the weight of hourly bonds\\n    uint256 public constant WEIGHT_TOTAL_10k = 10_000;\\n    uint256 public borrowingMarkupFP;\\n\\n    mapping(address => uint256[]) public runtimeWeights;\\n    mapping(address => uint256[]) public buyingSpeed;\\n    mapping(address => uint256[]) public lastBought;\\n    mapping(address => uint256[]) public withdrawingSpeed;\\n    mapping(address => uint256[]) public lastWithdrawn;\\n    mapping(address => uint256[]) public yieldLastUpdated;\\n\\n    mapping(uint256 => Bond) public bonds;\\n\\n    mapping(address => uint256[]) public totalLendingPerRuntime;\\n    mapping(address => uint256[]) runtimeYieldsFP;\\n    uint256 public nextBondIndex = 1;\\n\\n    event LiquidityWarning(\\n        address indexed token,\\n        address indexed holder,\\n        uint256 value\\n    );\\n\\n    function _makeBond(\\n        address holder,\\n        address token,\\n        uint256 runtime,\\n        uint256 amount,\\n        uint256 minReturn\\n    ) internal returns (uint256 bondIndex) {\\n        uint256 bucketIndex = getBucketIndex(token, runtime);\\n        uint256 yieldFP =\\n            calcBondYieldFP(\\n                token,\\n                amount + totalLendingPerRuntime[token][bucketIndex],\\n                bucketIndex\\n            );\\n        uint256 bondReturn = (yieldFP * amount) / FP32;\\n        if (bondReturn >= minReturn) {\\n            Fund(fund()).depositFor(holder, token, amount);\\n            uint256 interpolatedAmount = (amount + bondReturn) / 2;\\n            lendingMeta[token].totalLending += interpolatedAmount;\\n\\n            totalLendingPerRuntime[token][\\n                    bucketIndex\\n            ] += interpolatedAmount;\\n\\n            bondIndex = nextBondIndex;\\n            nextBondIndex++;\\n\\n            bonds[bondIndex] = Bond({\\n                holder: holder,\\n                token: token,\\n                originalPrice: amount,\\n                returnAmount: bondReturn,\\n                maturityTimestamp: block.timestamp + runtime,\\n                runtime: runtime,\\n                yieldFP: yieldFP\\n            });\\n\\n            updateSpeed(\\n                buyingSpeed[token],\\n                lastBought[token],\\n                bucketIndex,\\n                amount\\n            );\\n        }\\n    }\\n\\n    function _withdrawBond(uint256 bondId, Bond storage bond) internal {\\n        address token = bond.token;\\n        uint256 bucketIndex = getBucketIndex(token, bond.runtime);\\n        uint256 returnAmount = bond.returnAmount;\\n        address holder = bond.holder;\\n\\n        uint256 interpolatedAmount =\\n            (bond.originalPrice + returnAmount) / 2;\\n\\n        LendingMetadata storage meta = lendingMeta[token];\\n        meta.totalLending -= interpolatedAmount;\\n        totalLendingPerRuntime[token][bucketIndex] -= interpolatedAmount;\\n\\n        updateSpeed(\\n            withdrawingSpeed[token],\\n            lastWithdrawn[token],\\n            bucketIndex,\\n            bond.originalPrice\\n        );\\n\\n        delete bonds[bondId];\\n        if (\\n            meta.totalBorrowed > meta.totalLending ||\\n            IERC20(token).balanceOf(fund()) < returnAmount\\n        ) {\\n            // apparently there is a liquidity issue\\n            emit LiquidityWarning(token, holder, returnAmount);\\n            _makeFallbackBond(token, holder, returnAmount);\\n        } else {\\n            Fund(fund()).withdraw(token, holder, returnAmount);\\n        }\\n    }\\n\\n    function getUpdatedBondYieldFP(\\n        address token,\\n        uint256 runtime,\\n        uint256 amount\\n    ) internal returns (uint256 yieldFP, uint256 bucketIndex) {\\n        bucketIndex = getBucketIndex(token, runtime);\\n        yieldFP = calcBondYieldFP(\\n            token,\\n            amount + totalLendingPerRuntime[token][bucketIndex],\\n            bucketIndex\\n        );\\n        runtimeYieldsFP[token][bucketIndex] = yieldFP;\\n        yieldLastUpdated[token][bucketIndex] = block.timestamp;\\n    }\\n\\n    function calcBondYieldFP(\\n        address token,\\n        uint256 totalLendingInBucket,\\n        uint256 bucketIndex\\n    ) internal view returns (uint256 yieldFP) {\\n        yieldFP = runtimeYieldsFP[token][bucketIndex];\\n        uint256 lastUpdated = yieldLastUpdated[token][bucketIndex];\\n\\n        LendingMetadata storage meta = lendingMeta[token];\\n        uint256 bucketTarget =\\n            (lendingTarget(meta) * runtimeWeights[token][bucketIndex]) /\\n                WEIGHT_TOTAL_10k;\\n\\n        uint256 buying = buyingSpeed[token][bucketIndex];\\n        uint256 withdrawing = withdrawingSpeed[token][bucketIndex];\\n\\n        uint256 runtime = minRuntime + bucketIndex * diffMaxMinRuntime;\\n        uint256 bucketMaxYield = maxHourlyYieldFP * (runtime / (1 hours));\\n\\n        yieldFP = updatedYieldFP(\\n            yieldFP,\\n            lastUpdated,\\n            totalLendingInBucket,\\n            bucketTarget,\\n            buying,\\n            withdrawing,\\n            bucketMaxYield\\n        );\\n    }\\n\\n    function viewBondReturn(\\n        address token,\\n        uint256 runtime,\\n        uint256 amount\\n    ) external view returns (uint256) {\\n        uint256 bucketIndex = getBucketIndex(token, runtime);\\n        uint256 yieldFP =\\n            calcBondYieldFP(\\n                token,\\n                amount + totalLendingPerRuntime[token][bucketIndex],\\n                bucketIndex\\n            );\\n        return (yieldFP * amount) / FP32;\\n    }\\n\\n    function getBucketIndex(address token, uint256 runtime)\\n        internal\\n        view\\n        returns (uint256 bucketIndex)\\n    {\\n        uint256[] storage yieldsFP = runtimeYieldsFP[token];\\n        uint256 bucketSize = diffMaxMinRuntime / yieldsFP.length;\\n        bucketIndex = (runtime - minRuntime) / bucketSize;\\n    }\\n\\n    function updateSpeed(\\n        uint256[] storage speedRegister,\\n        uint256[] storage lastAction,\\n        uint256 bucketIndex,\\n        uint256 amount\\n    ) internal {\\n        uint256 bucketSize = diffMaxMinRuntime / speedRegister.length;\\n        uint256 runtime = minRuntime + bucketSize * bucketIndex;\\n        uint256 timeDiff = block.timestamp - lastAction[bucketIndex];\\n        uint256 currentSpeed = (amount * runtime) / (timeDiff + 1);\\n\\n        uint256 runtimeScale = runtime / (10 minutes);\\n        // scale adjustment relative togit  runtime\\n        speedRegister[bucketIndex] =\\n            (speedRegister[bucketIndex] *\\n                runtimeScale +\\n                currentSpeed *\\n                timeDiff) /\\n            (runtimeScale + timeDiff);\\n        lastAction[bucketIndex] = block.timestamp;\\n    }\\n\\n    function setRuntimeYieldsFP(address token, uint256[] memory yieldsFP)\\n        external\\n        onlyOwner\\n    {\\n        runtimeYieldsFP[token] = yieldsFP;\\n    }\\n\\n    function setRuntimeWeights(address token, uint256[] memory weights)\\n        external\\n    {\\n        require(\\n            isTokenActivator(msg.sender),\\n            \\\"not autorized to set runtime weights\\\"\\n        );\\n        require(\\n            runtimeWeights[token].length == 0 ||\\n                runtimeWeights[token].length == weights.length,\\n            \\\"Cannot change size of weight array\\\"\\n        );\\n        if (runtimeWeights[token].length == 0) {\\n            // we are initializing\\n\\n            runtimeYieldsFP[token] = new uint256[](weights.length);\\n            lastBought[token] = new uint256[](weights.length);\\n            lastWithdrawn[token] = new uint256[](weights.length);\\n            yieldLastUpdated[token] = new uint256[](weights.length);\\n            buyingSpeed[token] = new uint256[](weights.length);\\n            withdrawingSpeed[token] = new uint256[](weights.length);\\n\\n            uint256 hourlyYieldFP = (110 * FP32) / 100 / (24 * 365);\\n            uint256 bucketSize = diffMaxMinRuntime / weights.length;\\n\\n            for (uint256 i = 0; weights.length > i; i++) {\\n                uint256 runtime = minRuntime + bucketSize * i;\\n                // Do a best guess of initializing\\n                runtimeYieldsFP[token][i] =\\n                    hourlyYieldFP *\\n                    (runtime / (1 hours));\\n\\n                lastBought[token][i] = block.timestamp;\\n                lastWithdrawn[token][i] = block.timestamp;\\n                yieldLastUpdated[token][i] = block.timestamp;\\n            }\\n        }\\n\\n        runtimeWeights[token] = weights;\\n    }\\n\\n    function setMinRuntime(uint256 runtime) external onlyOwner {\\n        require(runtime > 1 hours, \\\"Min runtime needs to be at least 1 hour\\\");\\n        require(maxRuntime > runtime, \\\"Min runtime must be smaller than max runtime\\\");\\n        minRuntime = runtime;\\n    }\\n\\n    function setMaxRuntime(uint256 runtime) external onlyOwner {\\n        require(\\n            runtime > minRuntime,\\n            \\\"Max runtime must be greater than min runtime\\\"\\n        );\\n        maxRuntime = runtime;\\n    }\\n}\\n\",\"keccak256\":\"0xc10d722fa3be64bf756fe1acaf0798707fcb1c619cdafd64870db059a1048b7f\",\"license\":\"BUSL-1.1\"},\"contracts/CrossMarginAccounts.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"./Fund.sol\\\";\\nimport \\\"./Lending.sol\\\";\\nimport \\\"./RoleAware.sol\\\";\\nimport \\\"./MarginRouter.sol\\\";\\nimport \\\"./PriceAware.sol\\\";\\n\\n// Goal: all external functions only accessible to margintrader role\\n// except for view functions of course\\n\\nstruct CrossMarginAccount {\\n    uint256 lastDepositBlock;\\n    address[] borrowTokens;\\n    // borrowed token address => amount\\n    mapping(address => uint256) borrowed;\\n    // borrowed token => yield quotient\\n    mapping(address => uint256) borrowedYieldQuotientsFP;\\n    address[] holdingTokens;\\n    // token held in portfolio => amount\\n    mapping(address => uint256) holdings;\\n    // boolean value of whether an account holds a token\\n    mapping(address => bool) holdsToken;\\n}\\n\\nabstract contract CrossMarginAccounts is RoleAware, PriceAware {\\n    /// @dev gets used in calculating how much accounts can borrow\\n    uint256 public leverage;\\n\\n    /// @dev percentage of assets held per assets borrowed at which to liquidate\\n    uint256 public liquidationThresholdPercent;\\n\\n    /// @dev record of all cross margin accounts\\n    mapping(address => CrossMarginAccount) internal marginAccounts;\\n    /// @dev total token caps\\n    mapping(address => uint256) public tokenCaps;\\n    /// @dev tracks total of short positions per token\\n    mapping(address => uint256) public totalShort;\\n    /// @dev tracks total of long positions per token\\n    mapping(address => uint256) public totalLong;\\n    uint256 public coolingOffPeriod;\\n\\n    /// @dev last time this account deposited\\n    /// relevant for withdrawal window\\n    function getLastDepositBlock(address trader)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return marginAccounts[trader].lastDepositBlock;\\n    }\\n\\n    /// @dev add an asset to be held by account\\n    function addHolding(\\n        CrossMarginAccount storage account,\\n        address token,\\n        uint256 depositAmount\\n    ) internal {\\n        if (!hasHoldingToken(account, token)) {\\n            account.holdingTokens.push(token);\\n        }\\n\\n        account.holdings[token] += depositAmount;\\n    }\\n\\n    /// @dev adjust account to reflect borrowing of token amount\\n    function borrow(\\n        CrossMarginAccount storage account,\\n        address borrowToken,\\n        uint256 borrowAmount\\n    ) internal {\\n        if (!hasBorrowedToken(account, borrowToken)) {\\n            account.borrowTokens.push(borrowToken);\\n        } else {\\n            account.borrowed[borrowToken] = Lending(lending())\\n                .applyBorrowInterest(\\n                account.borrowed[borrowToken],\\n                borrowToken,\\n                account.borrowedYieldQuotientsFP[borrowToken]\\n            );\\n        }\\n        account.borrowedYieldQuotientsFP[borrowToken] = Lending(lending())\\n            .viewBorrowingYieldFP(borrowToken);\\n\\n        account.borrowed[borrowToken] += borrowAmount;\\n        addHolding(account, borrowToken, borrowAmount);\\n\\n        require(positiveBalance(account), \\\"Can't borrow: insufficient balance\\\");\\n    }\\n\\n    /// @dev checks whether account is in the black, deposit + earnings relative to borrowed\\n    function positiveBalance(CrossMarginAccount storage account)\\n        internal\\n        returns (bool)\\n    {\\n        uint256 loan = loanInPeg(account, false);\\n        uint256 holdings = holdingsInPeg(account, false);\\n        // The following condition should hold:\\n        // holdings / loan >= leverage / (leverage - 1)\\n        // =>\\n        return holdings * (leverage - 1) >= loan * leverage;\\n    }\\n\\n    /// @dev internal function adjusting holding and borrow balances when debt extinguished\\n    function extinguishDebt(\\n        CrossMarginAccount storage account,\\n        address debtToken,\\n        uint256 extinguishAmount\\n    ) internal {\\n        // will throw if insufficient funds\\n        account.borrowed[debtToken] = Lending(lending()).applyBorrowInterest(\\n            account.borrowed[debtToken],\\n            debtToken,\\n            account.borrowedYieldQuotientsFP[debtToken]\\n        );\\n\\n        account.borrowed[debtToken] =\\n            account.borrowed[debtToken] -\\n            extinguishAmount;\\n        account.holdings[debtToken] =\\n            account.holdings[debtToken] -\\n            extinguishAmount;\\n\\n        if (account.borrowed[debtToken] > 0) {\\n            account.borrowedYieldQuotientsFP[debtToken] = Lending(lending())\\n                .viewBorrowingYieldFP(debtToken);\\n        } else {\\n            delete account.borrowedYieldQuotientsFP[debtToken];\\n\\n            bool decrement = false;\\n            for (uint256 i = 0; account.borrowTokens.length > i; i++) {\\n                address currToken = account.borrowTokens[i];\\n                if (currToken == debtToken) {\\n                    decrement = true;\\n                } else if (decrement) {\\n                    account.borrowTokens[i - 1] = currToken;\\n                }\\n            }\\n            account.borrowTokens.pop();\\n        }\\n    }\\n\\n    /// @dev checks whether an account holds a token\\n    function hasHoldingToken(CrossMarginAccount storage account, address token)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return account.holdsToken[token];\\n    }\\n\\n    /// @dev checks whether an account has borrowed a token\\n    function hasBorrowedToken(CrossMarginAccount storage account, address token)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return account.borrowedYieldQuotientsFP[token] > 0;\\n    }\\n\\n    /// @dev calculate total loan in reference currency, including compound interest\\n    function loanInPeg(CrossMarginAccount storage account, bool forceCurBlock)\\n        internal\\n        returns (uint256)\\n    {\\n        return\\n            sumTokensInPegWithYield(\\n                account.borrowTokens,\\n                account.borrowed,\\n                account.borrowedYieldQuotientsFP,\\n                forceCurBlock\\n            );\\n    }\\n\\n    /// @dev total of assets of account, expressed in reference currency\\n    function holdingsInPeg(\\n        CrossMarginAccount storage account,\\n        bool forceCurBlock\\n    ) internal returns (uint256) {\\n        return\\n            sumTokensInPeg(\\n                account.holdingTokens,\\n                account.holdings,\\n                forceCurBlock\\n            );\\n    }\\n\\n    /// @dev check whether an account can/should be liquidated\\n    function belowMaintenanceThreshold(CrossMarginAccount storage account)\\n        internal\\n        returns (bool)\\n    {\\n        uint256 loan = loanInPeg(account, true);\\n        uint256 holdings = holdingsInPeg(account, true);\\n        // The following should hold:\\n        // holdings / loan >= 1.1\\n        // => holdings >= loan * 1.1\\n        return 100 * holdings >= liquidationThresholdPercent * loan;\\n    }\\n\\n    /// @dev go through list of tokens and their amounts, summing up\\n    function sumTokensInPeg(\\n        address[] storage tokens,\\n        mapping(address => uint256) storage amounts,\\n        bool forceCurBlock\\n    ) internal returns (uint256 totalPeg) {\\n        for (uint256 tokenId = 0; tokenId < tokens.length; tokenId++) {\\n            address token = tokens[tokenId];\\n            totalPeg += PriceAware.getCurrentPriceInPeg(\\n                token,\\n                amounts[token],\\n                forceCurBlock\\n            );\\n        }\\n    }\\n\\n    /// @dev go through list of tokens and their amounts, summing up\\n    function viewTokensInPeg(\\n        address[] storage tokens,\\n        mapping(address => uint256) storage amounts\\n    ) internal view returns (uint256 totalPeg) {\\n        for (uint256 tokenId = 0; tokenId < tokens.length; tokenId++) {\\n            address token = tokens[tokenId];\\n            totalPeg += PriceAware.viewCurrentPriceInPeg(token, amounts[token]);\\n        }\\n    }\\n\\n    /// @dev go through list of tokens and ammounts, summing up with interest\\n    function sumTokensInPegWithYield(\\n        address[] storage tokens,\\n        mapping(address => uint256) storage amounts,\\n        mapping(address => uint256) storage yieldQuotientsFP,\\n        bool forceCurBlock\\n    ) internal returns (uint256 totalPeg) {\\n        for (uint256 tokenId = 0; tokenId < tokens.length; tokenId++) {\\n            address token = tokens[tokenId];\\n            totalPeg += yieldTokenInPeg(\\n                token,\\n                amounts[token],\\n                yieldQuotientsFP,\\n                forceCurBlock\\n            );\\n        }\\n    }\\n\\n    /// @dev go through list of tokens and ammounts, summing up with interest\\n    function viewTokensInPegWithYield(\\n        address[] storage tokens,\\n        mapping(address => uint256) storage amounts,\\n        mapping(address => uint256) storage yieldQuotientsFP\\n    ) internal view returns (uint256 totalPeg) {\\n        for (uint256 tokenId = 0; tokenId < tokens.length; tokenId++) {\\n            address token = tokens[tokenId];\\n            totalPeg += viewYieldTokenInPeg(\\n                token,\\n                amounts[token],\\n                yieldQuotientsFP\\n            );\\n        }\\n    }\\n\\n    /// @dev calculate yield for token amount and convert to reference currency\\n    function yieldTokenInPeg(\\n        address token,\\n        uint256 amount,\\n        mapping(address => uint256) storage yieldQuotientsFP,\\n        bool forceCurBlock\\n    ) internal returns (uint256) {\\n        uint256 yieldFP = Lending(lending()).viewBorrowingYieldFP(token);\\n        // 1 * FP / FP = 1\\n        uint256 amountInToken = (amount * yieldFP) / yieldQuotientsFP[token];\\n        return\\n            PriceAware.getCurrentPriceInPeg(\\n                token,\\n                amountInToken,\\n                forceCurBlock\\n            );\\n    }\\n\\n    /// @dev calculate yield for token amount and convert to reference currency\\n    function viewYieldTokenInPeg(\\n        address token,\\n        uint256 amount,\\n        mapping(address => uint256) storage yieldQuotientsFP\\n    ) internal view returns (uint256) {\\n        uint256 yieldFP = Lending(lending()).viewBorrowingYieldFP(token);\\n        // 1 * FP / FP = 1\\n        uint256 amountInToken = (amount * yieldFP) / yieldQuotientsFP[token];\\n        return PriceAware.viewCurrentPriceInPeg(token, amountInToken);\\n    }\\n\\n    /// @dev move tokens from one holding to another\\n    function adjustAmounts(\\n        CrossMarginAccount storage account,\\n        address fromToken,\\n        address toToken,\\n        uint256 soldAmount,\\n        uint256 boughtAmount\\n    ) internal {\\n        account.holdings[fromToken] = account.holdings[fromToken] - soldAmount;\\n        addHolding(account, toToken, boughtAmount);\\n    }\\n\\n    /// sets borrow and holding to zero\\n    function deleteAccount(CrossMarginAccount storage account) internal {\\n        for (\\n            uint256 borrowIdx = 0;\\n            account.borrowTokens.length > borrowIdx;\\n            borrowIdx++\\n        ) {\\n            address borrowToken = account.borrowTokens[borrowIdx];\\n            totalShort[borrowToken] -= account.borrowed[borrowToken];\\n            account.borrowed[borrowToken] = 0;\\n            account.borrowedYieldQuotientsFP[borrowToken] = 0;\\n        }\\n        for (\\n            uint256 holdingIdx = 0;\\n            account.holdingTokens.length > holdingIdx;\\n            holdingIdx++\\n        ) {\\n            address holdingToken = account.holdingTokens[holdingIdx];\\n            totalLong[holdingToken] -= account.holdings[holdingToken];\\n            account.holdings[holdingToken] = 0;\\n            account.holdsToken[holdingToken] = false;\\n        }\\n        delete account.borrowTokens;\\n        delete account.holdingTokens;\\n    }\\n\\n    /// @dev minimum\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a > b) {\\n            return b;\\n        } else {\\n            return a;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7822e3737f77a6712e21a77192cc40c9e8337dc966807500a927a32eb9ef39a9\",\"license\":\"BUSL-1.1\"},\"contracts/CrossMarginLiquidation.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./CrossMarginAccounts.sol\\\";\\n\\n/// @dev Handles liquidation of accounts below maintenance threshold\\n/// Liquidation can be called by the authorized staker, as determined\\n/// in the Admin contract.\\n/// If the authorized staker is delinquent, other participants can jump\\n/// in and attack, taking their fees and potentially even their stake,\\n/// depending how delinquent the responsible authorized staker is.\\nabstract contract CrossMarginLiquidation is CrossMarginAccounts {\\n    event LiquidationShortfall(uint256 amount);\\n    event AccountLiquidated(address account);\\n\\n    struct Liquidation {\\n        uint256 buy;\\n        uint256 sell;\\n        uint256 blockNum;\\n    }\\n\\n    /// record kept around until a stake attacker can claim their reward\\n    struct AccountLiqRecord {\\n        uint256 blockNum;\\n        address loser;\\n        uint256 amount;\\n        address stakeAttacker;\\n    }\\n\\n    mapping(address => Liquidation) liquidationAmounts;\\n    address[] internal sellTokens;\\n    address[] internal buyTokens;\\n    address[] internal tradersToLiquidate;\\n\\n    mapping(address => uint256) public maintenanceFailures;\\n    mapping(address => AccountLiqRecord) public stakeAttackRecords;\\n    uint256 public avgLiquidationPerCall = 10;\\n\\n    uint256 public liqStakeAttackWindow = 5;\\n    uint256 public MAINTAINER_CUT_PERCENT = 5;\\n\\n    uint256 public failureThreshold = 10;\\n\\n    function setFailureThreshold(uint256 threshFactor) external onlyOwner {\\n        failureThreshold = threshFactor;\\n    }\\n\\n    function setLiqStakeAttackWindow(uint256 window) external onlyOwner {\\n        liqStakeAttackWindow = window;\\n    }\\n\\n    function setMaintainerCutPercent(uint256 cut) external onlyOwner {\\n        MAINTAINER_CUT_PERCENT = cut;\\n    }\\n\\n    /// @dev calcLiquidationamounts does a number of tasks in this contract\\n    /// and some of them are not straightforward.\\n    /// First of all it aggregates liquidation amounts in storage (not in memory)\\n    /// owing to the fact that arrays can't be pushed to and hash maps don't\\n    /// exist in memory.\\n    /// Then it also returns any stake attack funds if the stake was unsuccessful\\n    /// (i.e. current caller is authorized). Also see context below.\\n    function calcLiquidationAmounts(\\n        address[] memory liquidationCandidates,\\n        bool isAuthorized\\n    ) internal returns (uint256 attackReturns) {\\n        sellTokens = new address[](0);\\n        buyTokens = new address[](0);\\n        tradersToLiquidate = new address[](0);\\n\\n        for (\\n            uint256 traderIndex = 0;\\n            liquidationCandidates.length > traderIndex;\\n            traderIndex++\\n        ) {\\n            address traderAddress = liquidationCandidates[traderIndex];\\n            CrossMarginAccount storage account = marginAccounts[traderAddress];\\n            if (belowMaintenanceThreshold(account)) {\\n                tradersToLiquidate.push(traderAddress);\\n                for (\\n                    uint256 sellIdx = 0;\\n                    account.holdingTokens.length > sellIdx;\\n                    sellIdx++\\n                ) {\\n                    address token = account.holdingTokens[sellIdx];\\n                    Liquidation storage liquidation = liquidationAmounts[token];\\n\\n                    if (liquidation.blockNum != block.number) {\\n                        liquidation.sell = account.holdings[token];\\n                        liquidation.buy = 0;\\n                        liquidation.blockNum = block.number;\\n                        sellTokens.push(token);\\n                    } else {\\n                        liquidation.sell += account.holdings[token];\\n                    }\\n                }\\n                for (\\n                    uint256 buyIdx = 0;\\n                    account.borrowTokens.length > buyIdx;\\n                    buyIdx++\\n                ) {\\n                    address token = account.borrowTokens[buyIdx];\\n                    Liquidation storage liquidation = liquidationAmounts[token];\\n\\n                    uint256 loanAmount =\\n                        Lending(lending()).applyBorrowInterest(\\n                            account.borrowed[token],\\n                            token,\\n                            account.borrowedYieldQuotientsFP[token]\\n                        );\\n\\n                    Lending(lending()).payOff(token, loanAmount);\\n\\n                    if (liquidation.blockNum != block.number) {\\n                        liquidation.sell = 0;\\n                        liquidation.buy = loanAmount;\\n                        liquidation.blockNum = block.number;\\n                        buyTokens.push(token);\\n                    } else {\\n                        liquidation.buy += loanAmount;\\n                    }\\n                }\\n            }\\n\\n            AccountLiqRecord storage liqAttackRecord =\\n                stakeAttackRecords[traderAddress];\\n            if (isAuthorized) {\\n                attackReturns += _disburseLiqAttack(liqAttackRecord);\\n            }\\n        }\\n    }\\n\\n    function _disburseLiqAttack(AccountLiqRecord storage liqAttackRecord)\\n        internal\\n        returns (uint256 returnAmount)\\n    {\\n        if (liqAttackRecord.amount > 0) {\\n            // validate attack records, if any\\n            uint256 blockDiff =\\n                min(\\n                    block.number - liqAttackRecord.blockNum,\\n                    liqStakeAttackWindow\\n                );\\n\\n            uint256 attackerCut =\\n                (liqAttackRecord.amount * blockDiff) / liqStakeAttackWindow;\\n\\n            Fund(fund()).withdraw(\\n                PriceAware.peg,\\n                liqAttackRecord.stakeAttacker,\\n                attackerCut\\n            );\\n\\n            Admin a = Admin(admin());\\n            uint256 penalty =\\n                (a.maintenanceStakePerBlock() * attackerCut) /\\n                    avgLiquidationPerCall;\\n            a.penalizeMaintenanceStake(\\n                liqAttackRecord.loser,\\n                penalty,\\n                liqAttackRecord.stakeAttacker\\n            );\\n\\n            // return remainder, after cut was taken to authorized stakekr\\n            returnAmount = liqAttackRecord.amount - attackerCut;\\n        }\\n    }\\n\\n    function disburseLiqStakeAttacks(address[] memory liquidatedAccounts)\\n        external\\n    {\\n        for (uint256 i = 0; liquidatedAccounts.length > i; i++) {\\n            address liqAccount = liquidatedAccounts[i];\\n            AccountLiqRecord storage liqAttackRecord =\\n                stakeAttackRecords[liqAccount];\\n            if (\\n                block.number > liqAttackRecord.blockNum + liqStakeAttackWindow\\n            ) {\\n                _disburseLiqAttack(liqAttackRecord);\\n                delete stakeAttackRecords[liqAccount];\\n            }\\n        }\\n    }\\n\\n    function liquidateFromPeg() internal returns (uint256 pegAmount) {\\n        for (uint256 tokenIdx = 0; buyTokens.length > tokenIdx; tokenIdx++) {\\n            address buyToken = buyTokens[tokenIdx];\\n            Liquidation storage liq = liquidationAmounts[buyToken];\\n            if (liq.buy > liq.sell) {\\n                pegAmount += PriceAware.liquidateFromPeg(\\n                    buyToken,\\n                    liq.buy - liq.sell\\n                );\\n                delete liquidationAmounts[buyToken];\\n            }\\n        }\\n        delete buyTokens;\\n    }\\n\\n    function liquidateToPeg() internal returns (uint256 pegAmount) {\\n        for (\\n            uint256 tokenIndex = 0;\\n            sellTokens.length > tokenIndex;\\n            tokenIndex++\\n        ) {\\n            address token = sellTokens[tokenIndex];\\n            Liquidation storage liq = liquidationAmounts[token];\\n            if (liq.sell > liq.buy) {\\n                uint256 sellAmount = liq.sell - liq.buy;\\n                pegAmount += PriceAware.liquidateToPeg(token, sellAmount);\\n                delete liquidationAmounts[token];\\n            }\\n        }\\n        delete sellTokens;\\n    }\\n\\n    function maintainerIsFailing() internal view returns (bool) {\\n        (address currentMaintainer, ) =\\n            Admin(admin()).viewCurrentMaintenanceStaker();\\n        return\\n            maintenanceFailures[currentMaintainer] >\\n            failureThreshold * avgLiquidationPerCall;\\n    }\\n\\n    /// called by maintenance stakers to liquidate accounts below liquidation threshold\\n    function liquidate(address[] memory liquidationCandidates)\\n        external\\n        noIntermediary\\n        returns (uint256 maintainerCut)\\n    {\\n        bool isAuthorized = Admin(admin()).isAuthorizedStaker(msg.sender);\\n        bool canTakeNow = isAuthorized || maintainerIsFailing();\\n\\n        // calcLiquidationAmounts does a lot of the work here\\n        // * aggregates both sell and buy side targets to be liquidated\\n        // * returns attacker cuts to them\\n        // * aggregates any returned fees from unauthorized (attacking) attempts\\n        maintainerCut = calcLiquidationAmounts(liquidationCandidates, isAuthorized);\\n\\n        uint256 sale2pegAmount = liquidateToPeg();\\n        uint256 peg2targetCost = liquidateFromPeg();\\n\\n        // this may be a bit imprecise, since individual shortfalls may be obscured\\n        // by overall returns and the maintainer cut is taken out of the net total,\\n        // but it gives us the general picture\\n        if (\\n            (peg2targetCost * (100 + MAINTAINER_CUT_PERCENT)) / 100 >\\n            sale2pegAmount\\n        ) {\\n            emit LiquidationShortfall(peg2targetCost - sale2pegAmount);\\n        }\\n\\n        address loser = address(0);\\n        if (!canTakeNow) {\\n            // whoever is the current responsible maintenance staker\\n            // and liable to lose their stake\\n            loser = Admin(admin()).getUpdatedCurrentStaker();\\n        }\\n\\n        // iterate over traders and send back their money\\n        // as well as giving attackers their due, in case caller isn't authorized\\n        for (\\n            uint256 traderIdx = 0;\\n            tradersToLiquidate.length > traderIdx;\\n            traderIdx++\\n        ) {\\n            address traderAddress = tradersToLiquidate[traderIdx];\\n            CrossMarginAccount storage account = marginAccounts[traderAddress];\\n\\n            uint256 holdingsValue = holdingsInPeg(account, true);\\n            uint256 borrowValue = loanInPeg(account, true);\\n            // 5% of value borrowed\\n            uint256 maintainerCut4Account =\\n                (borrowValue * MAINTAINER_CUT_PERCENT) / 100;\\n            maintainerCut += maintainerCut4Account;\\n\\n            if (!canTakeNow) {\\n                // This could theoretically lead to a previous attackers\\n                // record being overwritten, but only if the trader restarts\\n                // their account and goes back into the red within the short time window\\n                // which would be a costly attack requiring collusion without upside\\n                AccountLiqRecord storage liqAttackRecord =\\n                    stakeAttackRecords[traderAddress];\\n                liqAttackRecord.amount = maintainerCut4Account;\\n                liqAttackRecord.stakeAttacker = msg.sender;\\n                liqAttackRecord.blockNum = block.number;\\n                liqAttackRecord.loser = loser;\\n            }\\n\\n            // send back trader money\\n            if (holdingsValue >= maintainerCut4Account + borrowValue) {\\n                // send remaining funds back to trader\\n                Fund(fund()).withdraw(\\n                    PriceAware.peg,\\n                    traderAddress,\\n                    holdingsValue - borrowValue - maintainerCut4Account\\n                );\\n            }\\n\\n            emit AccountLiquidated(traderAddress);\\n            deleteAccount(account);\\n        }\\n\\n        avgLiquidationPerCall =\\n            (avgLiquidationPerCall * 99 + maintainerCut) /\\n            100;\\n\\n        if (canTakeNow) {\\n            Fund(fund()).withdraw(PriceAware.peg, msg.sender, maintainerCut);\\n        }\\n\\n        address currentMaintainer = Admin(admin()).getUpdatedCurrentStaker();\\n        if (isAuthorized) {\\n            if (maintenanceFailures[currentMaintainer] > maintainerCut) {\\n                maintenanceFailures[currentMaintainer] -= maintainerCut;\\n            } else {\\n                maintenanceFailures[currentMaintainer] = 0;\\n            }\\n        } else {\\n            maintenanceFailures[currentMaintainer] += maintainerCut;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcd0bbd2c23d0b4232ef3961d94c5747ca57f9e606224ac72ca521501dc88f8fe\",\"license\":\"BUSL-1.1\"},\"contracts/CrossMarginTrading.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"./Fund.sol\\\";\\nimport \\\"./Lending.sol\\\";\\nimport \\\"./RoleAware.sol\\\";\\nimport \\\"./MarginRouter.sol\\\";\\nimport \\\"./CrossMarginLiquidation.sol\\\";\\n\\n// Goal: all external functions only accessible to margintrader role\\n// except for view functions of course\\n\\ncontract CrossMarginTrading is CrossMarginLiquidation, IMarginTrading {\\n    constructor(address _peg, address _roles)\\n        RoleAware(_roles)\\n        PriceAware(_peg)\\n    {\\n        liquidationThresholdPercent = 110;\\n        coolingOffPeriod = 20;\\n    }\\n\\n    /// @dev admin function to set the token cap\\n    function setTokenCap(address token, uint256 cap) external {\\n        require(\\n            isTokenActivator(msg.sender),\\n            \\\"Caller not authorized to set token cap\\\"\\n        );\\n        tokenCaps[token] = cap;\\n    }\\n\\n    /// @dev setter for cooling off period for withdrawing funds after deposit\\n    function setCoolingOffPeriod(uint256 blocks) external onlyOwner {\\n        coolingOffPeriod = blocks;\\n    }\\n\\n    /// @dev admin function to set leverage\\n    function setLeverage(uint256 _leverage) external onlyOwner {\\n        leverage = _leverage;\\n    }\\n\\n    /// @dev admin function to set liquidation threshold\\n    function setLiquidationThresholdPercent(uint256 threshold)\\n        external\\n        onlyOwner\\n    {\\n        liquidationThresholdPercent = threshold;\\n    }\\n\\n    /// @dev gets called by router to affirm a deposit to an account\\n    function registerDeposit(\\n        address trader,\\n        address token,\\n        uint256 depositAmount\\n    ) external override returns (uint256 extinguishableDebt) {\\n        require(\\n            isMarginTrader(msg.sender),\\n            \\\"Calling contract not authorized to deposit\\\"\\n        );\\n\\n        CrossMarginAccount storage account = marginAccounts[trader];\\n        if (account.borrowed[token] > 0) {\\n            extinguishableDebt = min(depositAmount, account.borrowed[token]);\\n            extinguishDebt(account, token, extinguishableDebt);\\n            totalShort[token] -= extinguishableDebt;\\n        }\\n        // no overflow because depositAmount >= extinguishableDebt\\n        uint256 addedHolding = depositAmount - extinguishableDebt;\\n        addHolding(account, token, addedHolding);\\n\\n        totalLong[token] += addedHolding;\\n        require(\\n            tokenCaps[token] >= totalLong[token],\\n            \\\"Exceeding global exposure cap to token -- try again later\\\"\\n        );\\n\\n        account.lastDepositBlock = block.number;\\n    }\\n\\n    /// @dev gets called by router to affirm isolated borrowing event\\n    function registerBorrow(\\n        address trader,\\n        address borrowToken,\\n        uint256 borrowAmount\\n    ) external override {\\n        require(\\n            isMarginTrader(msg.sender),\\n            \\\"Calling contract not authorized to deposit\\\"\\n        );\\n        totalShort[borrowToken] += borrowAmount;\\n        totalLong[borrowToken] += borrowAmount;\\n        require(\\n            tokenCaps[borrowToken] >= totalShort[borrowToken] &&\\n                tokenCaps[borrowToken] >= totalLong[borrowToken],\\n            \\\"Exceeding global exposure cap to token -- try again later\\\"\\n        );\\n\\n        CrossMarginAccount storage account = marginAccounts[trader];\\n        borrow(account, borrowToken, borrowAmount);\\n    }\\n\\n    /// @dev gets called by router to affirm withdrawal of tokens from account\\n    function registerWithdrawal(\\n        address trader,\\n        address withdrawToken,\\n        uint256 withdrawAmount\\n    ) external override {\\n        require(\\n            isMarginTrader(msg.sender),\\n            \\\"Calling contract not authorized to deposit\\\"\\n        );\\n        CrossMarginAccount storage account = marginAccounts[trader];\\n        require(\\n            block.number > account.lastDepositBlock + coolingOffPeriod,\\n            \\\"To prevent attacks you must wait until your cooling off period is over to withdraw\\\"\\n        );\\n\\n        totalLong[withdrawToken] -= withdrawAmount;\\n        // throws on underflow\\n        account.holdings[withdrawToken] =\\n            account.holdings[withdrawToken] -\\n            withdrawAmount;\\n        require(\\n            positiveBalance(account),\\n            \\\"Account balance is too low to withdraw\\\"\\n        );\\n    }\\n\\n    /// @dev gets callled by router to register a trade and borrow and extinguis as necessary\\n    function registerTradeAndBorrow(\\n        address trader,\\n        address tokenFrom,\\n        address tokenTo,\\n        uint256 inAmount,\\n        uint256 outAmount\\n    )\\n        external\\n        override\\n        returns (uint256 extinguishableDebt, uint256 borrowAmount)\\n    {\\n        require(\\n            isMarginTrader(msg.sender),\\n            \\\"Calling contract is not an authorized margin trader agent\\\"\\n        );\\n\\n        CrossMarginAccount storage account = marginAccounts[trader];\\n\\n        if (account.borrowed[tokenTo] > 0) {\\n            extinguishableDebt = min(outAmount, account.borrowed[tokenTo]);\\n            extinguishDebt(account, tokenTo, extinguishableDebt);\\n            totalShort[tokenTo] -= extinguishableDebt;\\n        }\\n        totalLong[tokenFrom] -= inAmount;\\n        totalLong[tokenTo] += outAmount - extinguishableDebt;\\n        require(\\n            tokenCaps[tokenTo] >= totalLong[tokenTo],\\n            \\\"Exceeding global exposure cap to token -- try again later\\\"\\n        );\\n\\n        uint256 sellAmount = inAmount;\\n        if (inAmount > account.holdings[tokenFrom]) {\\n            sellAmount = account.holdings[tokenFrom];\\n            /// won't overflow\\n            borrowAmount = inAmount - sellAmount;\\n\\n            totalShort[tokenFrom] += borrowAmount;\\n            require(\\n                tokenCaps[tokenFrom] >= totalShort[tokenFrom],\\n                \\\"Exceeding global exposure cap to token -- try again later\\\"\\n            );\\n\\n            borrow(account, tokenFrom, borrowAmount);\\n        }\\n        adjustAmounts(account, tokenFrom, tokenTo, sellAmount, outAmount);\\n    }\\n\\n    /// @dev can get called by router to register the dissolution of an account\\n    function registerLiquidation(address trader) external override {\\n        require(\\n            isMarginTrader(msg.sender),\\n            \\\"Calling contract is not an authorized margin trader agent\\\"\\n        );\\n        CrossMarginAccount storage account = marginAccounts[trader];\\n        require(loanInPeg(account, false) == 0, \\\"Can't liquidate currently borrowing account\\\");\\n\\n        deleteAccount(account);\\n    }\\n\\n    /// @dev view function to display account held assets state\\n    function getHoldingAmounts(address trader)\\n        external\\n        override\\n        view\\n        returns (\\n            address[] memory holdingTokens,\\n            uint256[] memory holdingAmounts\\n        )\\n    {\\n        CrossMarginAccount storage account = marginAccounts[trader];\\n        holdingTokens = account.holdingTokens;\\n\\n        holdingAmounts = new uint256[](account.holdingTokens.length);\\n        for (uint256 idx = 0; holdingTokens.length > idx; idx++) {\\n            address tokenAddress = holdingTokens[idx];\\n            holdingAmounts[idx] = account.holdings[tokenAddress];\\n        }\\n    }\\n\\n    /// @dev view function to display account borrowing state\\n    function getBorrowAmounts(address trader)\\n        external\\n        override\\n        view\\n        returns (address[] memory borrowTokens, uint256[] memory borrowAmounts)\\n    {\\n        CrossMarginAccount storage account = marginAccounts[trader];\\n        borrowTokens = account.borrowTokens;\\n\\n        borrowAmounts = new uint256[](account.borrowTokens.length);\\n        for (uint256 idx = 0; borrowTokens.length > idx; idx++) {\\n            address tokenAddress = borrowTokens[idx];\\n            borrowAmounts[idx] = Lending(lending()).viewBorrowInterest(\\n                account.borrowed[tokenAddress],\\n                tokenAddress,\\n                account.borrowedYieldQuotientsFP[tokenAddress]\\n            );\\n        }\\n    }\\n\\n    /// @dev view function to get loan amount in peg\\n    function viewLoanInPeg(address trader)\\n        external\\n        view\\n        returns (uint256 amount)\\n    {\\n        CrossMarginAccount storage account = marginAccounts[trader];\\n        return\\n            viewTokensInPegWithYield(\\n                account.borrowTokens,\\n                account.borrowed,\\n                account.borrowedYieldQuotientsFP\\n            );\\n    }\\n\\n    /// @dev total of assets of account, expressed in reference currency\\n    function viewHoldingsInPeg(address trader) external view returns (uint256) {\\n        CrossMarginAccount storage account = marginAccounts[trader];\\n        return viewTokensInPeg(account.holdingTokens, account.holdings);\\n    }\\n}\\n\",\"keccak256\":\"0x6ce0de2000121950a3672fb060deb96c680a2f778d43468256c47c2259730c80\",\"license\":\"BUSL-1.1\"},\"contracts/Fund.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"../interfaces/IWETH.sol\\\";\\nimport \\\"./RoleAware.sol\\\";\\n\\ncontract Fund is RoleAware, Ownable {\\n    using SafeERC20 for IERC20;\\n    address public immutable WETH;\\n    mapping(address => bool) public activeTokens;\\n\\n    constructor(address _WETH, address _roles) Ownable() RoleAware(_roles) {\\n        WETH = _WETH;\\n    }\\n\\n    function activateToken(address token) external {\\n        require(\\n            isTokenActivator(msg.sender),\\n            \\\"Address not authorized to activate tokens\\\"\\n        );\\n        activeTokens[token] = true;\\n    }\\n\\n    function deactivateToken(address token) external {\\n        require(\\n            isTokenActivator(msg.sender),\\n            \\\"Address not authorized to activate tokens\\\"\\n        );\\n        activeTokens[token] = false;\\n    }\\n\\n    function deposit(address depositToken, uint256 depositAmount)\\n        external\\n    {\\n        require(activeTokens[depositToken], \\\"Deposit token is not active\\\");\\n            IERC20(depositToken).safeTransferFrom(\\n                msg.sender,\\n                address(this),\\n                depositAmount\\n            );\\n    }\\n\\n    function depositFor(\\n        address sender,\\n        address depositToken,\\n        uint256 depositAmount\\n    ) external {\\n        require(activeTokens[depositToken], \\\"Deposit token is not active\\\");\\n        require(isFundTransferer(msg.sender), \\\"Contract not authorized to deposit for user\\\");\\n            IERC20(depositToken).safeTransferFrom(\\n                sender,\\n                address(this),\\n                depositAmount\\n            );\\n    }\\n\\n    function depositToWETH() external payable {\\n        IWETH(WETH).deposit{value: msg.value}();\\n    }\\n\\n    // withdrawers role\\n    function withdraw(\\n        address withdrawalToken,\\n        address recipient,\\n        uint256 withdrawalAmount\\n    ) external {\\n        require(\\n            isFundTransferer(msg.sender),\\n            \\\"Contract not authorized to withdraw\\\"\\n        );\\n        IERC20(withdrawalToken).safeTransfer(recipient, withdrawalAmount);\\n    }\\n\\n    // withdrawers role\\n    function withdrawETH(address recipient, uint256 withdrawalAmount) external {\\n        require(isFundTransferer(msg.sender), \\\"Not authorized to withdraw\\\");\\n        IWETH(WETH).withdraw(withdrawalAmount);\\n        Address.sendValue(payable(recipient), withdrawalAmount);\\n    }\\n}\\n\",\"keccak256\":\"0x3ea9e58e85778d375cf370373e30e09ab783c2c6116ff733c8f8d35c3cc65464\",\"license\":\"BUSL-1.1\"},\"contracts/HourlyBondSubscriptionLending.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./BaseLending.sol\\\";\\nimport \\\"./Fund.sol\\\";\\n\\nstruct YieldAccumulator {\\n    uint256 accumulatorFP;\\n    uint256 lastUpdated;\\n    uint256 hourlyYieldFP;\\n}\\n\\nstruct HourlyBond {\\n    uint256 amount;\\n    uint256 yieldQuotientFP;\\n    uint256 moduloHour;\\n}\\n\\n/// @dev Here we offer subscriptions to auto-renewing hourly bonds\\n/// Funds are locked in for an 50 minutes per hour, while interest rates float\\nabstract contract HourlyBondSubscriptionLending is BaseLending {\\n    uint256 public withdrawalWindow = 10 minutes;\\n    // token => holder => bond record\\n    mapping(address => mapping(address => HourlyBond))\\n        public hourlyBondAccounts;\\n\\n    mapping(address => YieldAccumulator) public hourlyBondYieldAccumulators;\\n    /// @dev accumulate interest per token (like compound indices)\\n    mapping(address => YieldAccumulator) public borrowYieldAccumulators;\\n\\n    uint256 public borrowingFactorPercent = 200;\\n\\n    mapping(address => uint256) public hourlyBondBuyingSpeed;\\n    mapping(address => uint256) public hourlyBondWithdrawingSpeed;\\n\\n    function setHourlyYieldAPR(address token, uint256 aprPercent) external {\\n        require(\\n            isTokenActivator(msg.sender),\\n            \\\"not authorized to set hourly yield\\\"\\n        );\\n        if (hourlyBondYieldAccumulators[token].accumulatorFP == 0) {\\n            hourlyBondYieldAccumulators[token] = YieldAccumulator({\\n                accumulatorFP: FP32,\\n                lastUpdated: block.timestamp,\\n                hourlyYieldFP: (FP32 * (100 + aprPercent)) / 100 / (24 * 365)\\n            });\\n        } else {\\n            YieldAccumulator storage yA = getUpdatedHourlyYield(token);\\n            yA.hourlyYieldFP =\\n                (FP32 * (100 + aprPercent)) /\\n                100 /\\n                (24 * 365);\\n        }\\n    }\\n\\n    function setWithdrawalWindow(uint256 window) external onlyOwner {\\n        withdrawalWindow = window;\\n    }\\n\\n    function _makeHourlyBond(\\n        address token,\\n        address holder,\\n        uint256 amount\\n    ) internal {\\n        HourlyBond storage bond = hourlyBondAccounts[token][holder];\\n        updateHourlyBondAmount(token, bond);\\n        bond.yieldQuotientFP = hourlyBondYieldAccumulators[token].accumulatorFP;\\n        bond.moduloHour = block.timestamp % (1 hours);\\n        bond.amount += amount;\\n        lendingMeta[token].totalLending += amount;\\n    }\\n\\n    function updateHourlyBondAmount(address token, HourlyBond storage bond)\\n        internal\\n    {\\n        uint256 yieldQuotientFP = bond.yieldQuotientFP;\\n        if (yieldQuotientFP > 0) {\\n            YieldAccumulator storage yA = getUpdatedHourlyYield(token);\\n\\n            uint256 oldAmount = bond.amount;\\n            bond.amount = applyInterest(\\n                bond.amount,\\n                yA.accumulatorFP,\\n                yieldQuotientFP\\n            );\\n\\n            uint256 deltaAmount = bond.amount - oldAmount;\\n            lendingMeta[token].totalLending += deltaAmount;\\n        }\\n    }\\n\\n    // Retrieves bond balance for token and holder\\n    function viewHourlyBondAmount(address token, address holder)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        HourlyBond storage bond = hourlyBondAccounts[token][holder];\\n        uint256 yieldQuotientFP = bond.yieldQuotientFP;\\n        if (yieldQuotientFP > 0) {\\n            return\\n                bond.amount +\\n                applyInterest(\\n                    bond.amount,\\n                    viewCumulativeYieldFP(\\n                        token,\\n                        hourlyBondYieldAccumulators,\\n                        block.timestamp\\n                    ),\\n                    yieldQuotientFP\\n                );\\n        }\\n        return bond.amount + 0;\\n    }\\n\\n    function _withdrawHourlyBond(\\n        address token,\\n        HourlyBond storage bond,\\n        address recipient,\\n        uint256 amount\\n    ) internal {\\n        // how far the current hour has advanced (relative to acccount hourly clock)\\n        uint256 currentOffset = (block.timestamp - bond.moduloHour) % (1 hours);\\n\\n        require(\\n            withdrawalWindow >= currentOffset,\\n            \\\"Tried withdrawing outside subscription cancellation time window\\\"\\n        );\\n\\n        Fund(fund()).withdraw(token, recipient, amount);\\n\\n        bond.amount -= amount;\\n        lendingMeta[token].totalLending -= amount;\\n    }\\n\\n    function closeHourlyBondAccount(address token) external {\\n        HourlyBond storage bond = hourlyBondAccounts[token][msg.sender];\\n        // apply all interest\\n        updateHourlyBondAmount(token, bond);\\n        _withdrawHourlyBond(token, bond, msg.sender, bond.amount);\\n\\n        bond.amount = 0;\\n        bond.yieldQuotientFP = 0;\\n        bond.moduloHour = 0;\\n    }\\n\\n    function calcCumulativeYieldFP(\\n        YieldAccumulator storage yieldAccumulator,\\n        uint256 timeDelta\\n    ) internal view returns (uint256 accumulatorFP) {\\n        uint256 secondsDelta = timeDelta % (1 hours);\\n        // linearly interpolate interest for seconds\\n        // accumulator * hourly_yield == seconds_per_hour * accumulator * hourly_yield / seconds_per_hour\\n        // FP * FP * 1 / (FP * 1) = FP\\n        accumulatorFP =\\n            (yieldAccumulator.accumulatorFP *\\n                yieldAccumulator.hourlyYieldFP *\\n                secondsDelta) /\\n            (FP32 * 1 hours);\\n\\n        uint256 hoursDelta = timeDelta / (1 hours);\\n        if (hoursDelta > 0) {\\n            // This loop should hardly ever 1 or more unless something bad happened\\n            // In which case it costs gas but there isn't overflow\\n            for (uint256 i = 0; hoursDelta > i; i++) {\\n                // FP32 * FP32 / FP32 = FP32\\n                accumulatorFP =\\n                    (accumulatorFP * yieldAccumulator.hourlyYieldFP) /\\n                    FP32;\\n            }\\n        }\\n    }\\n\\n    /// @dev updates yield accumulators for both borrowing and lending\\n    function getUpdatedHourlyYield(address token)\\n        internal\\n        returns (YieldAccumulator storage accumulator)\\n    {\\n        accumulator = hourlyBondYieldAccumulators[token];\\n        uint256 timeDelta = (block.timestamp - accumulator.lastUpdated);\\n\\n        accumulator.accumulatorFP = calcCumulativeYieldFP(\\n            accumulator,\\n            timeDelta\\n        );\\n\\n        LendingMetadata storage meta = lendingMeta[token];\\n        accumulator.hourlyYieldFP = updatedYieldFP(\\n            accumulator.hourlyYieldFP,\\n            accumulator.lastUpdated,\\n            meta.totalLending,\\n            lendingTarget(meta),\\n            hourlyBondBuyingSpeed[token],\\n            hourlyBondWithdrawingSpeed[token],\\n            maxHourlyYieldFP\\n        );\\n\\n        YieldAccumulator storage borrowAccumulator =\\n            borrowYieldAccumulators[token];\\n        timeDelta = block.timestamp - borrowAccumulator.lastUpdated;\\n        borrowAccumulator.accumulatorFP = calcCumulativeYieldFP(\\n            borrowAccumulator,\\n            timeDelta\\n        );\\n\\n        borrowYieldAccumulators[token].hourlyYieldFP =\\n            (borrowingFactorPercent * accumulator.hourlyYieldFP) /\\n            100;\\n\\n        accumulator.lastUpdated = block.timestamp;\\n        borrowAccumulator.lastUpdated = block.timestamp;\\n    }\\n\\n    function viewCumulativeYieldFP(\\n        address token,\\n        mapping(address => YieldAccumulator) storage yieldAccumulators,\\n        uint256 timestamp\\n    ) internal view returns (uint256) {\\n        uint256 timeDelta = (timestamp - yieldAccumulators[token].lastUpdated);\\n        return calcCumulativeYieldFP(yieldAccumulators[token], timeDelta);\\n    }\\n}\\n\",\"keccak256\":\"0x1d521d38622b20bb6a53cb1376515e74fce3c14ff5caa23e092057b71a5d1755\",\"license\":\"BUSL-1.1\"},\"contracts/IncentiveDistribution.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./RoleAware.sol\\\";\\nimport \\\"./Fund.sol\\\";\\n\\nstruct Claim {\\n    uint256 startingRewardRateFP;\\n    address recipient;\\n    uint256 amount;\\n}\\n\\ncontract IncentiveDistribution is RoleAware, Ownable {\\n    // fixed point number factor\\n    uint256 constant internal FP32 = 2**32;\\n    // the amount of contraction per thousand, per day\\n    // of the overal daily incentive distribution\\n    // https://en.wikipedia.org/wiki/Per_mil\\n    uint256 constant public contractionPerMil = 999;\\n    // the period for which claims are batch updated\\n    uint256 constant public period = 4 hours;\\n    uint256 constant public periodsPerDay = 24 hours / period;\\n    address immutable public MFI;\\n\\n    constructor(\\n        address _MFI,\\n        uint256 startingDailyDistributionWithoutDecimals,\\n        address _roles\\n    ) RoleAware(_roles) Ownable() {\\n        MFI = _MFI;\\n        currentDailyDistribution =\\n            startingDailyDistributionWithoutDecimals *\\n            (1 ether);\\n        lastDailyDistributionUpdate = block.timestamp / (1 days);\\n    }\\n\\n    // how much is going to be distributed, contracts every day\\n    uint256 public currentDailyDistribution;\\n    // last day on which we updated currentDailyDistribution\\n    uint256 lastDailyDistributionUpdate;\\n    // portion of daily distribution per each tranche\\n    mapping(uint8 => uint256) public trancheShare;\\n    uint256 public trancheShareTotal;\\n\\n    // tranche => claim totals for the period we're currently aggregating\\n    mapping(uint8 => uint256) public currentPeriodTotals;\\n    // tranche => timestamp / period of last update\\n    mapping(uint8 => uint256) public lastUpdatedPeriods;\\n\\n    // how each claim unit would get if they had staked from the dawn of time\\n    // expressed as fixed point number\\n    // claim amounts are expressed relative to this ongoing aggregate\\n    mapping(uint8 => uint256) public aggregatePeriodicRewardRateFP;\\n    // claim records\\n    mapping(uint256 => Claim) public claims;\\n    uint256 public nextClaimId = 1;\\n\\n    function setTrancheShare(uint8 tranche, uint256 share) external onlyOwner {\\n        require(\\n            lastUpdatedPeriods[tranche] > 0,\\n            \\\"Tranche is not initialized, please initialize first\\\"\\n        );\\n        _setTrancheShare(tranche, share);\\n    }\\n\\n    function _setTrancheShare(uint8 tranche, uint256 share) internal {\\n        if (share > trancheShare[tranche]) {\\n            trancheShareTotal += share - trancheShare[tranche];\\n        } else {\\n            trancheShareTotal -= trancheShare[tranche] - share;\\n        }\\n        trancheShare[tranche] = share;\\n    }\\n\\n    function initTranche(uint8 tranche, uint256 share) external onlyOwner {\\n        _setTrancheShare(tranche, share);\\n\\n        lastUpdatedPeriods[tranche] = block.timestamp / period;\\n        // simply initialize to 1.0\\n        aggregatePeriodicRewardRateFP[tranche] = FP32;\\n    }\\n\\n    function updatePeriodTotals(uint8 tranche) internal {\\n        uint256 currentPeriod = block.timestamp / period;\\n\\n        // update the amount that gets distributed per day, if there has been\\n        // a day transition\\n        updateCurrentDailyDistribution();\\n        // Do a bunch of updating of periodic variables when the period changes\\n        uint256 lU = lastUpdatedPeriods[tranche];\\n        uint256 periodDiff = currentPeriod - lU;\\n\\n        if (periodDiff > 0) {\\n            aggregatePeriodicRewardRateFP[tranche] +=\\n                currentPeriodicRewardRateFP(tranche) *\\n                periodDiff;\\n        }\\n\\n        lastUpdatedPeriods[tranche] = currentPeriod;\\n    }\\n\\n    // @dev can be called by anyone, if they want to ensure rewards\\n    // are distributed to a high level of accuracy (if several days\\n    // pass without update rewards will be slightly underestimated)\\n    function forcePeriodTotalUpdate(uint8 tranche) external {\\n        updatePeriodTotals(tranche);\\n    }\\n\\n    function updateCurrentDailyDistribution() internal {\\n        uint256 nowDay = block.timestamp / (1 days);\\n        uint256 dayDiff = nowDay - lastDailyDistributionUpdate;\\n\\n        // shrink the daily distribution for every day that has passed\\n        for (uint256 i = 0; i < dayDiff; i++) {\\n            currentDailyDistribution =\\n                (currentDailyDistribution * contractionPerMil) /\\n                1000;\\n        }\\n        // now update this memo\\n        lastDailyDistributionUpdate = nowDay;\\n    }\\n\\n    function currentPeriodicRewardRateFP(uint8 tranche)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        // scale daily distribution down to tranche share\\n        uint256 tranchePeriodDistributionFP =\\n            (FP32 * currentDailyDistribution * trancheShare[tranche]) /\\n                trancheShareTotal /\\n                periodsPerDay;\\n\\n        // rate = (total_reward / total_claims) per period\\n        return tranchePeriodDistributionFP / currentPeriodTotals[tranche];\\n    }\\n\\n    function startClaim(\\n        uint8 tranche,\\n        address recipient,\\n        uint256 claimAmount\\n    ) external returns (uint256) {\\n        require(\\n            isIncentiveReporter(msg.sender),\\n            \\\"Contract not authorized to report incentives\\\"\\n        );\\n        if (currentDailyDistribution > 0) {\\n            updatePeriodTotals(tranche);\\n\\n            currentPeriodTotals[tranche] += claimAmount;\\n\\n            claims[nextClaimId] = Claim({\\n                startingRewardRateFP: aggregatePeriodicRewardRateFP[tranche],\\n                recipient: recipient,\\n                amount: claimAmount\\n            });\\n            nextClaimId += 1;\\n            return nextClaimId - 1;\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    function addToClaimAmount(\\n        uint8 tranche,\\n        uint256 claimId,\\n        uint256 additionalAmount\\n    ) external {\\n        require(\\n            isIncentiveReporter(msg.sender),\\n            \\\"Contract not authorized to report incentives\\\"\\n        );\\n        if (currentDailyDistribution > 0) {\\n            updatePeriodTotals(tranche);\\n\\n            currentPeriodTotals[tranche] += additionalAmount;\\n\\n            Claim storage claim = claims[claimId];\\n            require(\\n                claim.startingRewardRateFP > 0,\\n                \\\"Trying to add to non-existant claim\\\"\\n            );\\n            _withdrawReward(tranche, claim);\\n            claim.amount += additionalAmount;\\n        }\\n    }\\n\\n    function subtractFromClaimAmount(\\n        uint8 tranche,\\n        uint256 claimId,\\n        uint256 subtractAmount\\n    ) external {\\n        require(\\n            isIncentiveReporter(msg.sender),\\n            \\\"Contract not authorized to report incentives\\\"\\n        );\\n        updatePeriodTotals(tranche);\\n\\n        currentPeriodTotals[tranche] -= subtractAmount;\\n\\n        Claim storage claim = claims[claimId];\\n        _withdrawReward((tranche), claim);\\n        claim.amount -= subtractAmount;\\n    }\\n\\n    function endClaim(uint8 tranche, uint256 claimId) external {\\n        require(\\n            isIncentiveReporter(msg.sender),\\n            \\\"Contract not authorized to report incentives\\\"\\n        );\\n        updatePeriodTotals(tranche);\\n        Claim storage claim = claims[claimId];\\n\\n        if (claim.startingRewardRateFP > 0) {\\n            _withdrawReward(tranche, claim);\\n            delete claims[claimId];\\n        }\\n    }\\n\\n    function calcRewardAmount(uint8 tranche, Claim storage claim)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return\\n            (claim.amount *\\n                (aggregatePeriodicRewardRateFP[tranche] -\\n                    claim.startingRewardRateFP)) / FP32;\\n    }\\n\\n    function viewRewardAmount(uint8 tranche, uint256 claimId)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return calcRewardAmount(tranche, claims[claimId]);\\n    }\\n\\n    function withdrawReward(uint8 tranche, uint256 claimId)\\n        external\\n        returns (uint256)\\n    {\\n        require(\\n            isIncentiveReporter(msg.sender),\\n            \\\"Contract not authorized to report incentives\\\"\\n        );\\n        updatePeriodTotals(tranche);\\n        Claim storage claim = claims[claimId];\\n        return _withdrawReward(tranche, claim);\\n    }\\n\\n    function _withdrawReward(uint8 tranche, Claim storage claim)\\n        internal\\n        returns (uint256 rewardAmount)\\n    {\\n        rewardAmount = calcRewardAmount(tranche, claim);\\n        claim.startingRewardRateFP = aggregatePeriodicRewardRateFP[tranche];\\n\\n        Fund(fund()).withdraw(MFI, claim.recipient, rewardAmount);\\n    }\\n}\\n\",\"keccak256\":\"0xd2f26d41445d5467bc6493b9f839d9d98863556f3f1689a7cd33276c83075f05\",\"license\":\"BUSL-1.1\"},\"contracts/IncentivizedHolder.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IncentiveDistribution.sol\\\";\\nimport \\\"./RoleAware.sol\\\";\\n\\n/// @dev helper class to facilitate staking and unstaking\\n/// within the incentive system.\\nabstract contract IncentivizedHolder is RoleAware {\\n    // here we cache incentive tranches to save on a bit of gas\\n    mapping(address => uint8) public incentiveTranches;\\n    // claimant => token => claimId\\n    mapping(address => mapping(address => uint256)) public claimIds;\\n\\n    function setIncentiveTranche(address token, uint8 tranche) external {\\n        require(\\n            isTokenActivator(msg.sender),\\n            \\\"Caller not authorized to set incentive tranche\\\"\\n        );\\n        incentiveTranches[token] = tranche;\\n    }\\n\\n    function stakeClaim(\\n        address claimant,\\n        address token,\\n        uint256 amount\\n    ) internal {\\n        IncentiveDistribution iD =\\n            IncentiveDistribution(incentiveDistributor());\\n        uint256 claimId = claimIds[claimant][token];\\n        uint8 tranche = incentiveTranches[token];\\n        if (claimId > 0) {\\n            iD.addToClaimAmount(tranche, claimId, amount);\\n        } else {\\n            claimId = iD.startClaim(tranche, claimant, amount);\\n\\n            // check that distribution hasn't ended yet\\n            if(claimId > 0) {\\n                claimIds[claimant][token] = claimId;\\n            }\\n        }\\n    }\\n\\n    function withdrawClaim(\\n        address claimant,\\n        address token,\\n        uint256 amount\\n    ) internal {\\n        uint256 claimId = claimIds[claimant][token];\\n        if (claimId > 0) {\\n            uint8 tranche = incentiveTranches[token];\\n            // this does not end claims if they zero out, but we are willing\\n            // to sacrifice the gas refund from zeroing out for simplicity\\n            // sake and saving storage cost wwhen starting a claim\\n            IncentiveDistribution(incentiveDistributor()).subtractFromClaimAmount(\\n                tranche,\\n                claimId,\\n                amount\\n            );\\n        }\\n    }\\n\\n    function endClaim(address claimant, address token) internal {\\n        uint256 claimId = claimIds[claimant][token];\\n        uint8 tranche = incentiveTranches[token];\\n        IncentiveDistribution(incentiveDistributor()).endClaim(tranche, claimId);\\n        claimIds[claimant][token] = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x7e78e8d2bdf7f6cc6b19849383293003bcecdc86e4e73fa92a1a6bb7c164f828\",\"license\":\"BUSL-1.1\"},\"contracts/Lending.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Fund.sol\\\";\\nimport \\\"./HourlyBondSubscriptionLending.sol\\\";\\nimport \\\"./BondLending.sol\\\";\\nimport \\\"./IncentivizedHolder.sol\\\";\\n\\ncontract Lending is\\n    BaseLending,\\n    HourlyBondSubscriptionLending,\\n    BondLending,\\n    IncentivizedHolder\\n{\\n    /// @dev IDs for all bonds held by an address\\n    mapping(address => uint256[]) public bondIds;\\n\\n    constructor(address _roles) RoleAware(_roles) Ownable() {\\n        uint256 APR = 899;\\n        maxHourlyYieldFP = (FP32 * APR) / 100 / (24 * 365);\\n\\n        uint256 aprChangePerMil = 3;\\n        yieldChangePerSecondFP = (FP32 * aprChangePerMil) / 1000;\\n    }\\n\\n    /// @dev how much interest has accrued to a borrowed balance over time\\n    function applyBorrowInterest(\\n        uint256 balance,\\n        address token,\\n        uint256 yieldQuotientFP\\n    ) external returns (uint256 balanceWithInterest) {\\n        require(isBorrower(msg.sender), \\\"Not an approved borrower\\\");\\n\\n        YieldAccumulator storage yA = borrowYieldAccumulators[token];\\n        balanceWithInterest = applyInterest(\\n            balance,\\n            yA.accumulatorFP,\\n            yieldQuotientFP\\n        );\\n\\n        uint256 deltaAmount = balanceWithInterest - balance;\\n        LendingMetadata storage meta = lendingMeta[token];\\n        meta.totalBorrowed += deltaAmount;\\n    }\\n\\n    /// @dev view function to get current borrowing interest\\n    function viewBorrowInterest(\\n        uint256 balance,\\n        address token,\\n        uint256 yieldQuotientFP\\n    ) external view returns (uint256) {\\n        uint256 accumulatorFP =\\n            viewCumulativeYieldFP(\\n                token,\\n                borrowYieldAccumulators,\\n                block.timestamp\\n            );\\n        return applyInterest(balance, accumulatorFP, yieldQuotientFP);\\n    }\\n\\n    /// @dev gets called by router to register if a trader borrows tokens\\n    function registerBorrow(address token, uint256 amount) external {\\n        require(isBorrower(msg.sender), \\\"Not an approved borrower\\\");\\n        require(Fund(fund()).activeTokens(token), \\\"Not an approved token\\\");\\n        LendingMetadata storage meta = lendingMeta[token];\\n        meta.totalBorrowed += amount;\\n        require(\\n            meta.totalLending >= meta.totalBorrowed,\\n            \\\"Insufficient capital to lend, try again later!\\\"\\n        );\\n    }\\n\\n    /// @dev gets called by router if loan is extinguished\\n    function payOff(address token, uint256 amount) external {\\n        require(isBorrower(msg.sender), \\\"Not an approved borrower\\\");\\n        lendingMeta[token].totalBorrowed -= amount;\\n    }\\n\\n    /// @dev get the borrow yield\\n    function viewBorrowingYieldFP(address token)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return\\n            viewCumulativeYieldFP(\\n                token,\\n                borrowYieldAccumulators,\\n                block.timestamp\\n            );\\n    }\\n\\n    /// @dev In a liquidity crunch make a fallback bond until liquidity is good again\\n    function _makeFallbackBond(\\n        address token,\\n        address holder,\\n        uint256 amount\\n    ) internal override {\\n        _makeHourlyBond(token, holder, amount);\\n    }\\n\\n    /// @dev withdraw an hour bond\\n    function withdrawHourlyBond(address token, uint256 amount) external {\\n        HourlyBond storage bond = hourlyBondAccounts[token][msg.sender];\\n        // apply all interest\\n        updateHourlyBondAmount(token, bond);\\n        super._withdrawHourlyBond(token, bond, msg.sender, amount);\\n\\n        withdrawClaim(msg.sender, token, amount);\\n    }\\n\\n    /// @dev buy hourly bond subscription\\n    function buyHourlyBondSubscription(address token, uint256 amount) external {\\n        LendingMetadata storage meta = lendingMeta[token];\\n        if (lendingTarget(meta) >= meta.totalLending + amount) {\\n            Fund(fund()).depositFor(msg.sender, token, amount);\\n\\n            super._makeHourlyBond(token, msg.sender, amount);\\n\\n            stakeClaim(msg.sender, token, amount);\\n        }\\n    }\\n\\n    /// @dev buy fixed term bond that does not renew\\n    function buyBond(\\n        address token,\\n        uint256 runtime,\\n        uint256 amount,\\n        uint256 minReturn\\n    ) external returns (uint256 bondIndex) {\\n        LendingMetadata storage meta = lendingMeta[token];\\n        if (\\n            lendingTarget(meta) >= meta.totalLending + amount &&\\n            maxRuntime >= runtime &&\\n            runtime >= minRuntime\\n        ) {\\n            bondIndex = super._makeBond(\\n                msg.sender,\\n                token,\\n                runtime,\\n                amount,\\n                minReturn\\n            );\\n            if (bondIndex > 0) {\\n                bondIds[msg.sender].push(bondIndex);\\n\\n                stakeClaim(msg.sender, token, amount);\\n            }\\n        }\\n    }\\n\\n    /// @dev send back funds of bond after maturity\\n    function withdrawBond(uint256 bondId) external {\\n        Bond storage bond = bonds[bondId];\\n        require(msg.sender == bond.holder, \\\"Not holder of bond\\\");\\n        require(\\n            block.timestamp > bond.maturityTimestamp,\\n            \\\"bond is still immature\\\"\\n        );\\n        // in case of a shortfall, governance can step in to provide\\n        // additonal compensation beyond the usual incentive which\\n        // gets withdrawn here\\n        withdrawClaim(msg.sender, bond.token, bond.originalPrice);\\n\\n        super._withdrawBond(bondId, bond);\\n    }\\n\\n    function initBorrowYieldAccumulator(address token) external {\\n        require(\\n            isTokenActivator(msg.sender),\\n            \\\"not autorized to init yield accumulator\\\"\\n        );\\n        require(borrowYieldAccumulators[token].accumulatorFP == 0,\\n                \\\"trying to re-initialize yield accumulator\\\");\\n\\n        borrowYieldAccumulators[token].accumulatorFP = FP32;\\n    }\\n\\n    function setBorrowingFactorPercent(uint256 borrowingFactor)\\n        external\\n        onlyOwner\\n    {\\n        borrowingFactorPercent = borrowingFactor;\\n    }\\n}\\n\",\"keccak256\":\"0x5249776c20bd509543893fd38b9de018412e7fab2c50215b87a625593dd9ea03\",\"license\":\"BUSL-1.1\"},\"contracts/MarginRouter.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\\\";\\nimport \\\"../libraries/UniswapV2Library.sol\\\";\\n\\nimport \\\"./RoleAware.sol\\\";\\nimport \\\"./Fund.sol\\\";\\nimport \\\"../interfaces/IMarginTrading.sol\\\";\\nimport \\\"./Lending.sol\\\";\\nimport \\\"./Admin.sol\\\";\\nimport \\\"./IncentivizedHolder.sol\\\";\\n\\ncontract MarginRouter is RoleAware, IncentivizedHolder, Ownable {\\n    /// different uniswap compatible factories to talk to\\n    mapping(address => bool) public factories;\\n    /// wrapped ETH ERC20 contract\\n    address public immutable WETH;\\n    address public constant UNI = 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f;\\n    address public constant SUSHI = 0xC0AEe478e3658e2610c5F7A4A2E1777cE9e4f2Ac;\\n    /// emitted when a trader depoits on cross margin\\n    event CrossDeposit(\\n        address trader,\\n        address depositToken,\\n        uint256 depositAmount\\n    );\\n    /// emitted whenever a trade happens\\n    event CrossTrade(\\n        address trader,\\n        address inToken,\\n        uint256 inTokenAmount,\\n        uint256 inTokenBorrow,\\n        address outToken,\\n        uint256 outTokenAmount,\\n        uint256 outTokenExtinguish\\n    );\\n    /// emitted when a trader withdraws funds\\n    event CrossWithdraw(\\n        address trader,\\n        address withdrawToken,\\n        uint256 withdrawAmount\\n    );\\n    /// emitted upon sucessfully borrowing\\n    event CrossBorrow(\\n        address trader,\\n        address borrowToken,\\n        uint256 borrowAmount\\n    );\\n\\n    modifier ensure(uint256 deadline) {\\n        require(deadline >= block.timestamp, \\\"Trade has expired\\\");\\n        _;\\n    }\\n\\n    constructor(address _WETH, address _roles) RoleAware(_roles) {\\n        factories[UNI] = true;\\n        factories[SUSHI] = true;\\n\\n        WETH = _WETH;\\n    }\\n\\n    function authorizeAMM(address ammFactory) external onlyOwner {\\n        factories[ammFactory] = true;\\n    }\\n\\n    /// @dev traders call this to deposit funds on cross margin\\n    function crossDeposit(address depositToken, uint256 depositAmount)\\n        external\\n    {\\n        Fund(fund()).depositFor(msg.sender, depositToken, depositAmount);\\n\\n        uint256 extinguishAmount =\\n            IMarginTrading(marginTrading()).registerDeposit(\\n                msg.sender,\\n                depositToken,\\n                depositAmount\\n            );\\n        if (extinguishAmount > 0) {\\n            Lending(lending()).payOff(depositToken, extinguishAmount);\\n            withdrawClaim(msg.sender, depositToken, extinguishAmount);\\n        }\\n        emit CrossDeposit(msg.sender, depositToken, depositAmount);\\n    }\\n\\n    /// @dev deposit wrapped ehtereum into cross margin account\\n    function crossDepositETH() external payable {\\n        Fund(fund()).depositToWETH{value: msg.value}();\\n        uint256 extinguishAmount =\\n            IMarginTrading(marginTrading()).registerDeposit(\\n                msg.sender,\\n                WETH,\\n                msg.value\\n            );\\n        if (extinguishAmount > 0) {\\n            Lending(lending()).payOff(WETH, extinguishAmount);\\n            withdrawClaim(msg.sender, WETH, extinguishAmount);\\n        }\\n        emit CrossDeposit(msg.sender, WETH, msg.value);\\n    }\\n\\n    /// @dev withdraw deposits/earnings from cross margin account\\n    function crossWithdraw(address withdrawToken, uint256 withdrawAmount)\\n        external\\n    {\\n        IMarginTrading(marginTrading()).registerWithdrawal(\\n            msg.sender,\\n            withdrawToken,\\n            withdrawAmount\\n        );\\n        Fund(fund()).withdraw(withdrawToken, msg.sender, withdrawAmount);\\n        emit CrossWithdraw(msg.sender, withdrawToken, withdrawAmount);\\n    }\\n\\n    /// @dev withdraw ethereum from cross margin account\\n    function crossWithdrawETH(uint256 withdrawAmount) external {\\n        IMarginTrading(marginTrading()).registerWithdrawal(\\n            msg.sender,\\n            WETH,\\n            withdrawAmount\\n        );\\n        Fund(fund()).withdrawETH(msg.sender, withdrawAmount);\\n    }\\n\\n    /// @dev borrow into cross margin trading account\\n    function crossBorrow(address borrowToken, uint256 borrowAmount) external {\\n        Lending(lending()).registerBorrow(borrowToken, borrowAmount);\\n        IMarginTrading(marginTrading()).registerBorrow(\\n            msg.sender,\\n            borrowToken,\\n            borrowAmount\\n        );\\n\\n        stakeClaim(msg.sender, borrowToken, borrowAmount);\\n        emit CrossBorrow(msg.sender, borrowToken, borrowAmount);\\n    }\\n\\n    /// @dev close an account that is no longer borrowing and return gains\\n    function crossCloseAccount() external {\\n        (address[] memory holdingTokens,\\n         uint256[] memory holdingAmounts) = IMarginTrading(marginTrading()).getHoldingAmounts(msg.sender);\\n\\n        // requires all debts paid off\\n        IMarginTrading(marginTrading()).registerLiquidation(msg.sender);\\n\\n        for (uint256 i = 0; holdingTokens.length > i; i++) {\\n            Fund(fund()).withdraw(holdingTokens[i], msg.sender, holdingAmounts[i]);\\n        }\\n    }\\n\\n    // **** SWAP ****\\n    // requires the initial amount to have already been sent to the first pair\\n    function _swap(\\n        address factory,\\n        uint256[] memory amounts,\\n        address[] memory path,\\n        address _to\\n    ) internal virtual {\\n        for (uint256 i; i < path.length - 1; i++) {\\n            (address input, address output) = (path[i], path[i + 1]);\\n            (address token0, ) = UniswapV2Library.sortTokens(input, output);\\n            uint256 amountOut = amounts[i + 1];\\n            (uint256 amount0Out, uint256 amount1Out) =\\n                input == token0\\n                    ? (uint256(0), amountOut)\\n                    : (amountOut, uint256(0));\\n            address to =\\n                i < path.length - 2\\n                    ? UniswapV2Library.pairFor(factory, output, path[i + 2])\\n                    : _to;\\n            IUniswapV2Pair(UniswapV2Library.pairFor(factory, input, output))\\n                .swap(amount0Out, amount1Out, to, new bytes(0));\\n        }\\n    }\\n\\n    /// @dev internal helper swapping exact token for token on AMM\\n    function _swapExactT4T(\\n        address factory,\\n        uint256[] memory amounts,\\n        uint256 amountOutMin,\\n        address[] calldata path\\n    ) internal {\\n        require(\\n            amounts[amounts.length - 1] >= amountOutMin,\\n            \\\"MarginRouter: INSUFFICIENT_OUTPUT_AMOUNT\\\"\\n        );\\n        Fund(fund()).withdraw(\\n                path[0],\\n                UniswapV2Library.pairFor(factory, path[0], path[1]),\\n                amounts[0]\\n        );\\n        _swap(factory, amounts, path, fund());\\n    }\\n\\n    /// @dev external function to make swaps on AMM using protocol funds, only for authorized contracts\\n    function authorizedSwapExactT4T(\\n        address factory,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path\\n    ) external returns (uint256[] memory amounts) {\\n        require(\\n            isAuthorizedFundTrader(msg.sender),\\n            \\\"Calling contract is not authorized to trade with protocl funds\\\"\\n        );\\n        amounts = UniswapV2Library.getAmountsOut(factory, amountIn, path);\\n        _swapExactT4T(factory, amounts, amountOutMin, path);\\n    }\\n\\n    // @dev internal helper swapping exact token for token on on AMM\\n    function _swapT4ExactT(\\n        address factory,\\n        uint256[] memory amounts,\\n        uint256 amountInMax,\\n        address[] calldata path\\n    ) internal {\\n        // TODO minimum trade?\\n        require(\\n            amounts[0] <= amountInMax,\\n            \\\"MarginRouter: EXCESSIVE_INPUT_AMOUNT\\\"\\n        );\\n        Fund(fund()).withdraw(\\n                path[0],\\n                UniswapV2Library.pairFor(factory, path[0], path[1]),\\n                amounts[0]\\n        );\\n        _swap(factory, amounts, path, fund());\\n    }\\n\\n    //// @dev external function for swapping protocol funds on AMM, only for authorized\\n    function authorizedSwapT4ExactT(\\n        address factory,\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path\\n    ) external returns (uint256[] memory amounts) {\\n        require(\\n            isAuthorizedFundTrader(msg.sender),\\n            \\\"Calling contract is not authorized to trade with protocl funds\\\"\\n        );\\n        amounts = UniswapV2Library.getAmountsIn(factory, amountOut, path);\\n        _swapT4ExactT(factory, amounts, amountInMax, path);\\n    }\\n\\n    /// @dev entry point for swapping tokens held in cross margin account\\n    function crossSwapExactTokensForTokens(\\n        address ammFactory,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        uint256 deadline\\n    ) external ensure(deadline) returns (uint256[] memory amounts) {\\n        // calc fees\\n        uint256 fees =\\n            Admin(feeController()).takeFeesFromInput(path[0], amountIn);\\n\\n        requireAuthorizedAMM(ammFactory);\\n\\n        // swap\\n        amounts = UniswapV2Library.getAmountsOut(ammFactory, amountIn - fees, path);\\n\\n        // checks that trader is within allowed lending bounds\\n        registerTrade(\\n            msg.sender,\\n            path[0],\\n            path[path.length - 1],\\n            amountIn,\\n            amounts[amounts.length - 1]\\n        );\\n\\n        _swapExactT4T(\\n            ammFactory,\\n            amounts,\\n            amountOutMin,\\n            path\\n        );\\n\\n    }\\n\\n    /// @dev entry point for swapping tokens held in cross margin account\\n    function crossSwapTokensForExactTokens(\\n        address ammFactory,\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        uint256 deadline\\n    ) external ensure(deadline) returns (uint256[] memory amounts) {\\n        // calc fees\\n        uint256 fees =\\n            Admin(feeController()).takeFeesFromOutput(\\n                path[path.length - 1],\\n                amountOut\\n            );\\n\\n        requireAuthorizedAMM(ammFactory);\\n        // swap\\n        amounts = UniswapV2Library.getAmountsIn(ammFactory, amountOut + fees, path);\\n\\n        // checks that trader is within allowed lending bounds\\n        registerTrade(\\n            msg.sender,\\n            path[0],\\n            path[path.length - 1],\\n            amounts[0],\\n            amountOut\\n        );\\n\\n        _swapT4ExactT(\\n            ammFactory,\\n            amounts,\\n            amountInMax,\\n            path\\n        );\\n    }\\n\\n    /// @dev helper function does all the work of telling other contracts\\n    /// about a trade\\n    function registerTrade(\\n        address trader,\\n        address inToken,\\n        address outToken,\\n        uint256 inAmount,\\n        uint256 outAmount\\n    ) internal {\\n        (uint256 extinguishAmount, uint256 borrowAmount) =\\n            IMarginTrading(marginTrading()).registerTradeAndBorrow(\\n                trader,\\n                inToken,\\n                outToken,\\n                inAmount,\\n                outAmount\\n            );\\n        if (extinguishAmount > 0) {\\n            Lending(lending()).payOff(outToken, extinguishAmount);\\n            withdrawClaim(trader, outToken, extinguishAmount);\\n        }\\n        if (borrowAmount > 0) {\\n            Lending(lending()).registerBorrow(inToken, borrowAmount);\\n            stakeClaim(trader, inToken, borrowAmount);\\n        }\\n\\n        emit CrossTrade(\\n            trader,\\n            inToken,\\n            inAmount,\\n            borrowAmount,\\n            outToken,\\n            outAmount,\\n            extinguishAmount\\n        );\\n    }\\n\\n    function getAmountsOut(\\n        address factory,\\n        uint256 inAmount,\\n        address[] calldata path\\n    ) external view returns (uint256[] memory) {\\n        return UniswapV2Library.getAmountsOut(factory, inAmount, path);\\n    }\\n\\n    function getAmountsIn(\\n        address factory,\\n        uint256 outAmount,\\n        address[] calldata path\\n    ) external view returns (uint256[] memory) {\\n        return UniswapV2Library.getAmountsIn(factory, outAmount, path);\\n    }\\n\\n    function requireAuthorizedAMM(address ammFactory) internal view {\\n        require(\\n            ammFactory == UNI || ammFactory == SUSHI || factories[ammFactory],\\n            \\\"Not using an authorized AMM\\\"\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xeddb2b097faf83c7bbf077a231309f791c896596a666f1fe9cfb27c989767145\",\"license\":\"BUSL-1.1\"},\"contracts/PriceAware.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./RoleAware.sol\\\";\\nimport \\\"./MarginRouter.sol\\\";\\n\\n/// Stores how many of token you could get for 1k of peg\\nstruct TokenPrice {\\n    uint256 blockLastUpdated;\\n    uint256 tokenPer1k;\\n    address[] liquidationPath;\\n    address[] inverseLiquidationPath;\\n}\\n\\n/// @dev The protocol features several mechanisms to prevent vulnerability to\\n/// price manipulation:\\n/// 1) global exposure caps on all tokens which need to be raised gradually\\n///    during the process of introducing a new token, making attacks unprofitable\\n///    due to lack  of scale\\n/// 2) Exponential moving average with cautious price update. Prices for estimating\\n///    how much a trader can borrow need not be extremely current and precise, mainly\\n///    they must be resilient against extreme manipulation\\n/// 3) Liquidators may not call from a contract address, to prevent extreme forms of\\n///    of front-running and other price manipulation.\\nabstract contract PriceAware is Ownable, RoleAware {\\n    address public constant UNI = 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f;\\n    address public immutable peg;\\n    mapping(address => TokenPrice) public tokenPrices;\\n    /// update window in blocks\\n    uint16 public priceUpdateWindow = 8;\\n    uint256 public UPDATE_RATE_PERMIL = 80;\\n    uint256 public UPDATE_MAX_PEG_AMOUNT = 50_000;\\n    uint256 public UPDATE_MIN_PEG_AMOUNT = 1_000;\\n\\n    constructor(address _peg) Ownable() {\\n        peg = _peg;\\n    }\\n\\n    function setPriceUpdateWindow(uint16 window) external onlyOwner {\\n        priceUpdateWindow = window;\\n    }\\n\\n    function setConfidentUpdateRate(uint256 rate) external onlyOwner {\\n        UPDATE_RATE_PERMIL = rate;\\n    }\\n\\n    function encouragePriceUpdate(address token, uint256 inAmount)\\n        external\\n        returns (uint256)\\n    {\\n        return getCurrentPriceInPeg(token, inAmount, true);\\n    }\\n\\n    function setUpdateMaxPegAmount(uint256 amount) external onlyOwner {\\n        UPDATE_MAX_PEG_AMOUNT = amount;\\n    }\\n\\n    function setUpdateMinPegAmount(uint256 amount) external onlyOwner {\\n        UPDATE_MIN_PEG_AMOUNT = amount;\\n    }\\n\\n    function getCurrentPriceInPeg(\\n        address token,\\n        uint256 inAmount,\\n        bool forceCurBlock\\n    ) internal returns (uint256) {\\n        TokenPrice storage tokenPrice = tokenPrices[token];\\n        if (forceCurBlock) {\\n            if (block.number - tokenPrice.blockLastUpdated > priceUpdateWindow) {\\n                // update the currently cached price\\n                return getUpdatedPriceInPeg(token, inAmount);\\n            } else {\\n                // just get the current price from AMM\\n                return viewCurrentPriceInPeg(token, inAmount);\\n            }\\n        } else if (tokenPrice.tokenPer1k == 0) {\\n            // do the best we can if it's at zero\\n            return getUpdatedPriceInPeg(token, inAmount);\\n        }\\n\\n        if (block.number - tokenPrice.blockLastUpdated > priceUpdateWindow) {\\n            // update the price somewhat\\n            getUpdatedPriceInPeg(token, inAmount);\\n        }\\n\\n        return (inAmount * 1000 ether) / tokenPrice.tokenPer1k;\\n    }\\n\\n    function viewCurrentPriceInPeg(address token, uint256 inAmount)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        if (token == peg) {\\n            return inAmount;\\n        } else {\\n            TokenPrice storage tokenPrice = tokenPrices[token];\\n            uint256[] memory pathAmounts =\\n                MarginRouter(router()).getAmountsOut(\\n                    UNI,\\n                    inAmount,\\n                    tokenPrice.liquidationPath\\n                );\\n            uint256 outAmount = pathAmounts[pathAmounts.length - 1];\\n            return outAmount;\\n        }\\n    }\\n\\n    function getUpdatedPriceInPeg(address token, uint256 inAmount)\\n        internal\\n        virtual\\n        returns (uint256)\\n    {\\n        if (token == peg) {\\n            return inAmount;\\n        } else {\\n            TokenPrice storage tokenPrice = tokenPrices[token];\\n            uint256[] memory pathAmounts =\\n                MarginRouter(router()).getAmountsOut(\\n                    UNI,\\n                    inAmount,\\n                    tokenPrice.liquidationPath\\n                );\\n            uint256 outAmount = pathAmounts[pathAmounts.length - 1];\\n\\n            if (\\n                outAmount > UPDATE_MIN_PEG_AMOUNT &&\\n                outAmount < UPDATE_MAX_PEG_AMOUNT\\n            ) {\\n                updatePriceInPeg(tokenPrice, inAmount, outAmount);\\n            }\\n\\n            return outAmount;\\n        }\\n    }\\n\\n    function updatePriceInPeg(\\n        TokenPrice storage tokenPrice,\\n        uint256 inAmount,\\n        uint256 outAmount\\n    ) internal {\\n        _updatePriceInPeg(\\n            tokenPrice,\\n            inAmount,\\n            outAmount,\\n            UPDATE_RATE_PERMIL\\n        );\\n        tokenPrice.blockLastUpdated = block.number;\\n    }\\n\\n    function _updatePriceInPeg(\\n        TokenPrice storage tokenPrice,\\n        uint256 inAmount,\\n        uint256 outAmount,\\n        uint256 weightPerMil\\n    ) internal {\\n        uint256 updatePer1k = (1000 ether * inAmount) / (outAmount + 1);\\n        tokenPrice.tokenPer1k =\\n            (tokenPrice.tokenPer1k *\\n                (1000 - weightPerMil) +\\n                updatePer1k *\\n                weightPerMil) /\\n            1000;\\n    }\\n\\n    // add path from token to current liquidation peg\\n    function setLiquidationPath(address[] memory path) external {\\n        require(\\n            isTokenActivator(msg.sender),\\n            \\\"not authorized to set lending cap\\\"\\n        );\\n        address token = path[0];\\n        tokenPrices[token].liquidationPath = new address[](path.length);\\n        tokenPrices[token].inverseLiquidationPath = new address[](path.length);\\n\\n        for (uint16 i = 0; path.length > i; i++) {\\n            tokenPrices[token].liquidationPath[i] = path[i];\\n            tokenPrices[token].inverseLiquidationPath[i] = path[\\n                path.length - i - 1\\n            ];\\n        }\\n        uint256[] memory pathAmounts =\\n            MarginRouter(router()).getAmountsIn(UNI, 1000 ether, path);\\n        uint256 inAmount = pathAmounts[0];\\n        _updatePriceInPeg(tokenPrices[token], inAmount, 1000 ether, 1000);\\n    }\\n\\n    function liquidateToPeg(address token, uint256 amount)\\n        internal\\n        returns (uint256)\\n    {\\n        if (token == peg) {\\n            return amount;\\n        } else {\\n            TokenPrice storage tP = tokenPrices[token];\\n            uint256[] memory amounts =\\n                MarginRouter(router()).authorizedSwapExactT4T(\\n                    UNI,\\n                    amount,\\n                    0,\\n                    tP.liquidationPath\\n                );\\n\\n            uint256 outAmount = amounts[amounts.length - 1];\\n\\n            return outAmount;\\n        }\\n    }\\n\\n    function liquidateFromPeg(address token, uint256 targetAmount)\\n        internal\\n        returns (uint256)\\n    {\\n        if (token == peg) {\\n            return targetAmount;\\n        } else {\\n            TokenPrice storage tP = tokenPrices[token];\\n            uint256[] memory amounts =\\n                MarginRouter(router()).authorizedSwapT4ExactT(\\n                    UNI,\\n                    targetAmount,\\n                    type(uint256).max,\\n                    tP.inverseLiquidationPath\\n                );\\n\\n            return amounts[0];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x487cb79daba4c346193612d67c9403145c3df35aea8132962716651f51a1c30b\",\"license\":\"BUSL-1.1\"},\"contracts/RoleAware.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Roles.sol\\\";\\n\\n/// Main characters are for service discovery\\n/// Whereas roles are for access control\\ncontract RoleAware {\\n    // we chose not to go with an enum\\n    // to make this list easy to extend\\n    uint256 constant FUND_TRANSFERER = 1;\\n    uint256 constant MARGIN_CALLER = 2;\\n    uint256 constant BORROWER = 3;\\n    uint256 constant MARGIN_TRADER = 4;\\n    uint256 constant FEE_SOURCE = 5;\\n    uint256 constant LIQUIDATOR = 6;\\n    uint256 constant AUTHORIZED_FUND_TRADER = 7;\\n    uint256 constant INCENTIVE_REPORTER = 8;\\n    uint256 constant TOKEN_ACTIVATOR = 9;\\n    uint256 constant STAKE_PENALIZER = 10;\\n\\n    uint256 constant FUND = 101;\\n    uint256 constant LENDING = 102;\\n    uint256 constant ROUTER = 103;\\n    uint256 constant MARGIN_TRADING = 104;\\n    uint256 constant FEE_CONTROLLER = 105;\\n    uint256 constant PRICE_CONTROLLER = 106;\\n    uint256 constant ADMIN = 107;\\n    uint256 constant INCENTIVE_DISTRIBUTION = 108;\\n    uint256 constant TOKEN_ADMIN = 109;\\n\\n    Roles public immutable roles;\\n    mapping(uint256 => address) public mainCharacterCache;\\n    mapping(address => mapping(uint256 => bool)) public roleCache;\\n\\n    constructor(address _roles) {\\n        require(_roles != address(0), \\\"Please provide valid roles address\\\");\\n        roles = Roles(_roles);\\n    }\\n\\n    modifier noIntermediary() {\\n        require(\\n            msg.sender == tx.origin,\\n            \\\"Currently no intermediaries allowed for this function call\\\"\\n        );\\n        _;\\n    }\\n\\n    function updateRoleCache(uint256 role, address contr) public virtual {\\n        roleCache[contr][role] = roles.getRole(role, contr);\\n    }\\n\\n    function updateMainCharacterCache(uint256 role) public virtual {\\n        mainCharacterCache[role] = roles.mainCharacters(role);\\n    }\\n\\n    function fund() internal view returns (address) {\\n        return mainCharacterCache[FUND];\\n    }\\n\\n    function lending() internal view returns (address) {\\n        return mainCharacterCache[LENDING];\\n    }\\n\\n    function router() internal view returns (address) {\\n        return mainCharacterCache[ROUTER];\\n    }\\n\\n    function marginTrading() internal view returns (address) {\\n        return mainCharacterCache[MARGIN_TRADING];\\n    }\\n\\n    function feeController() internal view returns (address) {\\n        return mainCharacterCache[FEE_CONTROLLER];\\n    }\\n\\n    function price() internal view returns (address) {\\n        return mainCharacterCache[PRICE_CONTROLLER];\\n    }\\n\\n    function admin() internal view returns (address) {\\n        return mainCharacterCache[ADMIN];\\n    }\\n\\n    function incentiveDistributor() internal view returns (address) {\\n        return mainCharacterCache[INCENTIVE_DISTRIBUTION];\\n    }\\n\\n    function isBorrower(address contr) internal view returns (bool) {\\n        return roleCache[contr][BORROWER];\\n    }\\n\\n    function isFundTransferer(address contr) internal view returns (bool) {\\n        return roleCache[contr][FUND_TRANSFERER];\\n    }\\n\\n    function isMarginTrader(address contr) internal view returns (bool) {\\n        return roleCache[contr][MARGIN_TRADER];\\n    }\\n\\n    function isFeeSource(address contr) internal view returns (bool) {\\n        return roleCache[contr][FEE_SOURCE];\\n    }\\n\\n    function isMarginCaller(address contr) internal view returns (bool) {\\n        return roleCache[contr][MARGIN_CALLER];\\n    }\\n\\n    function isLiquidator(address contr) internal view returns (bool) {\\n        return roleCache[contr][LIQUIDATOR];\\n    }\\n\\n    function isAuthorizedFundTrader(address contr)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return roleCache[contr][AUTHORIZED_FUND_TRADER];\\n    }\\n\\n    function isIncentiveReporter(address contr) internal view returns (bool) {\\n        return roleCache[contr][INCENTIVE_REPORTER];\\n    }\\n\\n    function isTokenActivator(address contr) internal view returns (bool) {\\n        return roleCache[contr][TOKEN_ACTIVATOR];\\n    }\\n\\n    function isStakePenalizer(address contr) internal view returns (bool) {\\n        return roles.getRole(STAKE_PENALIZER, contr);\\n    }\\n}\\n\",\"keccak256\":\"0xba5b7e4d15436a2307bf02f00e4e1a59e0f533e15499040d9a29cb23c9036a52\",\"license\":\"BUSL-1.1\"},\"contracts/Roles.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract Roles is Ownable {\\n    mapping(address => mapping(uint256 => bool)) public roles;\\n    mapping(uint256 => address) public mainCharacters;\\n\\n    constructor() Ownable() {\\n        // token activation from the get-go\\n        roles[msg.sender][9] = true;\\n    }\\n\\n    function giveRole(uint256 role, address actor) external onlyOwner {\\n        roles[actor][role] = true;\\n    }\\n\\n    function removeRole(uint256 role, address actor) external onlyOwner {\\n        roles[actor][role] = false;\\n    }\\n\\n    function setMainCharacter(uint256 role, address actor) external onlyOwner {\\n        mainCharacters[role] = actor;\\n    }\\n\\n    function getRole(uint256 role, address contr) external view returns (bool) {\\n        return roles[contr][role];\\n    }\\n}\\n\",\"keccak256\":\"0x0ef6b1f76dbd1a4688d2649df96cf6107bda3bb59edd6db1804ff59d16fa1566\",\"license\":\"BUSL-1.1\"},\"interfaces/IMarginTrading.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\ninterface IMarginTrading {\\n    function registerDeposit(\\n        address trader,\\n        address token,\\n        uint256 amount\\n    ) external returns (uint256 extinguishAmount);\\n\\n    function registerWithdrawal(\\n        address trader,\\n        address token,\\n        uint256 amount\\n    ) external;\\n\\n    function registerBorrow(\\n        address trader,\\n        address token,\\n        uint256 amount\\n    ) external;\\n\\n    function registerTradeAndBorrow(\\n        address trader,\\n        address inToken,\\n        address outToken,\\n        uint256 inAmount,\\n        uint256 outAmount\\n    ) external returns (uint256 extinguishAmount, uint256 borrowAmount);\\n\\n    function registerLiquidation(address trader) external;\\n\\n    function getHoldingAmounts(address trader)\\n        external\\n        view\\n        returns (\\n            address[] memory holdingTokens,\\n            uint256[] memory holdingAmounts\\n                 );\\n\\n     function getBorrowAmounts(address trader)\\n        external\\n        view\\n         returns (address[] memory borrowTokens, uint256[] memory borrowAmounts);\\n}\\n\",\"keccak256\":\"0x99feedf7545d9bc5da505e7082ab8455d23f02edc349302de0dd82950e0a9453\",\"license\":\"BUSL-1.1\"},\"interfaces/IWETH.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function withdraw(uint256) external;\\n}\\n\",\"keccak256\":\"0xf85de70a597a9f21052bd1ad25c755cda197102f4aebdb3c3c20f2405bd7442b\"},\"libraries/UniswapV2Library.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\n\\nlibrary UniswapV2Library {\\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\\n    function sortTokens(address tokenA, address tokenB)\\n        internal\\n        pure\\n        returns (address token0, address token1)\\n    {\\n        require(tokenA != tokenB, \\\"UniswapV2Library: IDENTICAL_ADDRESSES\\\");\\n        (token0, token1) = tokenA < tokenB\\n            ? (tokenA, tokenB)\\n            : (tokenB, tokenA);\\n        require(token0 != address(0), \\\"UniswapV2Library: ZERO_ADDRESS\\\");\\n    }\\n\\n    // calculates the CREATE2 address for a pair without making any external calls\\n    function pairFor(\\n        address factory,\\n        address tokenA,\\n        address tokenB\\n    ) internal pure returns (address pair) {\\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\\n        pair = address(\\n            bytes20(\\n                keccak256(\\n                    abi.encodePacked(\\n                        hex\\\"ff\\\",\\n                        factory,\\n                        keccak256(abi.encodePacked(token0, token1)),\\n                        hex\\\"96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f\\\" // init code hash\\n                    )\\n                )\\n            )\\n        );\\n    }\\n\\n    // fetches and sorts the reserves for a pair\\n    function getReserves(\\n        address factory,\\n        address tokenA,\\n        address tokenB\\n    ) internal view returns (uint256 reserveA, uint256 reserveB) {\\n        (address token0, ) = sortTokens(tokenA, tokenB);\\n        (uint256 reserve0, uint256 reserve1, ) =\\n            IUniswapV2Pair(pairFor(factory, tokenA, tokenB)).getReserves();\\n        (reserveA, reserveB) = tokenA == token0\\n            ? (reserve0, reserve1)\\n            : (reserve1, reserve0);\\n    }\\n\\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) internal pure returns (uint256 amountB) {\\n        require(amountA > 0, \\\"UniswapV2Library: INSUFFICIENT_AMOUNT\\\");\\n        require(\\n            reserveA > 0 && reserveB > 0,\\n            \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\"\\n        );\\n        amountB = (amountA * reserveB) / reserveA;\\n    }\\n\\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) internal pure returns (uint256 amountOut) {\\n        require(amountIn > 0, \\\"UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT\\\");\\n        require(\\n            reserveIn > 0 && reserveOut > 0,\\n            \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\"\\n        );\\n        uint256 amountInWithFee = amountIn * 997;\\n        uint256 numerator = amountInWithFee * reserveOut;\\n        uint256 denominator = reserveIn * 1000 + amountInWithFee;\\n        amountOut = numerator / denominator;\\n    }\\n\\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) internal pure returns (uint256 amountIn) {\\n        require(amountOut > 0, \\\"UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n        require(\\n            reserveIn > 0 && reserveOut > 0,\\n            \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\"\\n        );\\n        uint256 numerator = reserveIn * amountOut * 1000;\\n        uint256 denominator = (reserveOut - amountOut) - 997;\\n        amountIn = (numerator / denominator) + 1;\\n    }\\n\\n    // performs chained getAmountOut calculations on any number of pairs\\n    function getAmountsOut(\\n        address factory,\\n        uint256 amountIn,\\n        address[] memory path\\n    ) internal view returns (uint256[] memory amounts) {\\n        require(path.length >= 2, \\\"UniswapV2Library: INVALID_PATH\\\");\\n        amounts = new uint256[](path.length);\\n        amounts[0] = amountIn;\\n        for (uint256 i; i < path.length - 1; i++) {\\n            (uint256 reserveIn, uint256 reserveOut) =\\n                getReserves(factory, path[i], path[i + 1]);\\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\\n        }\\n    }\\n\\n    // performs chained getAmountIn calculations on any number of pairs\\n    function getAmountsIn(\\n        address factory,\\n        uint256 amountOut,\\n        address[] memory path\\n    ) internal view returns (uint256[] memory amounts) {\\n        require(path.length >= 2, \\\"UniswapV2Library: INVALID_PATH\\\");\\n        amounts = new uint256[](path.length);\\n        amounts[amounts.length - 1] = amountOut;\\n        for (uint256 i = path.length - 1; i > 0; i--) {\\n            (uint256 reserveIn, uint256 reserveOut) =\\n                getReserves(factory, path[i - 1], path[i]);\\n            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8d78664942fa3474ad9b20e71a55c0b55cf2cf8e86ecabdc7261dc1c76c95005\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b50604051620042ad380380620042ad833981016040819052620000349162000181565b806001600160a01b038116620000675760405162461bcd60e51b81526004016200005e90620001b8565b60405180910390fd5b60601b6001600160601b03191660805260006200008362000160565b600480546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3505060056020527f537021d9dfb727ce5191413e87a94a4e343eabd778ac8b2a89ded0b4b2b9a47b8054600160ff19918216811790925573c0aee478e3658e2610c5f7a4a2e1777ce9e4f2ac6000527f5fd1cb0dd0cf0ae36b78e699a0bd1886c0a6d0dfe27df081bf43ee87af44b4e38054909116909117905560601b6001600160601b03191660a052620001fa565b3390565b80516001600160a01b03811681146200017c57600080fd5b919050565b6000806040838503121562000194578182fd5b6200019f8362000164565b9150620001af6020840162000164565b90509250929050565b60208082526022908201527f506c656173652070726f766964652076616c696420726f6c6573206164647265604082015261737360f01b606082015260800190565b60805160601c60a05160601c61405662000257600039600081816109130152818161167401528181611731015281816117a6015281816117ef015261184301526000818161056001528181610a930152610af201526140566000f3fe6080604052600436106101b75760003560e01c8063715018a6116100ec578063ad5c46481161008a578063e9c3f77d11610064578063e9c3f77d146104a3578063eedb97c7146104c3578063f2fde38b146104e3578063fab5268914610503576101b7565b8063ad5c46481461044e578063bb7b9c7614610463578063e3e0626b14610483576101b7565b80638824cbba116100c65780638824cbba146103ef5780638da5cb5b1461041c57806394427b2014610431578063ab560e1014610439576101b7565b8063715018a61461038d5780637a1a04df146103a25780637fa82de4146103cf576101b7565b8063447d52ba116101595780635821eae5116101335780635821eae51461030b5780635adbeb151461032b57806369698670146103585780636fdcb2b91461036d576101b7565b8063447d52ba146102b6578063541bcb76146102d657806355696b1a146102eb576101b7565b8063192128b211610195578063192128b2146102345780631dce3baa146102545780632864f40114610274578063392f5f6414610294576101b7565b8063071060a6146101bc5780630d873d5e146101de5780631306d90214610214575b600080fd5b3480156101c857600080fd5b506101dc6101d7366004613616565b610523565b005b3480156101ea57600080fd5b506101fe6101f93660046133db565b610638565b60405161020b9190613851565b60405180910390f35b34801561022057600080fd5b506101dc61022f366004613356565b6106d8565b34801561024057600080fd5b506101fe61024f366004613381565b6108ad565b34801561026057600080fd5b506101dc61026f366004613616565b6108ed565b34801561028057600080fd5b506101dc61028f3660046134b3565b6109fa565b3480156102a057600080fd5b506102a9610a91565b60405161020b9190613748565b3480156102c257600080fd5b506101dc6102d1366004613646565b610ab5565b3480156102e257600080fd5b506102a9610bdc565b3480156102f757600080fd5b506101fe610306366004613443565b610bf4565b34801561031757600080fd5b506101fe610326366004613443565b610e81565b34801561033757600080fd5b5061034b61034636600461331e565b6110ff565b60405161020b9190613cf6565b34801561036457600080fd5b506101dc61111c565b34801561037957600080fd5b506101fe6103883660046133db565b611361565b34801561039957600080fd5b506101dc6113ef565b3480156103ae57600080fd5b506103c26103bd366004613356565b6114d1565b60405161020b9190613895565b3480156103db57600080fd5b506101dc6103ea3660046132df565b6114f1565b3480156103fb57600080fd5b5061040f61040a3660046132df565b6115b3565b60405161020b9190613dc0565b34801561042857600080fd5b506102a96115c8565b6101dc6115e4565b34801561044557600080fd5b506102a9611829565b34801561045a57600080fd5b506102a9611841565b34801561046f57600080fd5b506101fe61047e366004613381565b611865565b34801561048f57600080fd5b506101dc61049e366004613356565b6118a5565b3480156104af57600080fd5b506102a96104be366004613616565b6119d0565b3480156104cf57600080fd5b506101dc6104de366004613356565b6119f8565b3480156104ef57600080fd5b506101dc6104fe3660046132df565b611b20565b34801561050f57600080fd5b506103c261051e3660046132df565b611c6e565b6040517fb4ed0b6d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063b4ed0b6d90610595908490600401613cf6565b60206040518083038186803b1580156105ad57600080fd5b505afa1580156105c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105e59190613302565b60009182526020829052604090912080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff909216919091179055565b606061064333611c83565b610682576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610679906138fd565b60405180910390fd5b6106c08686858580806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250611cbe92505050565b90506106cf8682868686611f1d565b95945050505050565b6106e0612196565b73ffffffffffffffffffffffffffffffffffffffff1663b3db428b3384846040518463ffffffff1660e01b815260040161071c939291906137aa565b600060405180830381600087803b15801561073657600080fd5b505af115801561074a573d6000803e3d6000fd5b5050505060006107586121db565b73ffffffffffffffffffffffffffffffffffffffff166352a664d93385856040518463ffffffff1660e01b8152600401610794939291906137aa565b602060405180830381600087803b1580156107ae57600080fd5b505af11580156107c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107e6919061362e565b9050801561086d576107f6612220565b73ffffffffffffffffffffffffffffffffffffffff16632a6a897b84836040518363ffffffff1660e01b815260040161083092919061382b565b600060405180830381600087803b15801561084a57600080fd5b505af115801561085e573d6000803e3d6000fd5b5050505061086d338483612265565b7f2f7971a38b280a622029ac616d8d562df278b4b5839a7b124c33a1715ae092993384846040516108a0939291906137aa565b60405180910390a1505050565b60606106cf858585858080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061234592505050565b6108f56121db565b73ffffffffffffffffffffffffffffffffffffffff1663d0eb6653337f0000000000000000000000000000000000000000000000000000000000000000846040518463ffffffff1660e01b8152600401610951939291906137aa565b600060405180830381600087803b15801561096b57600080fd5b505af115801561097f573d6000803e3d6000fd5b5050505061098b612196565b73ffffffffffffffffffffffffffffffffffffffff16634782f77933836040518363ffffffff1660e01b81526004016109c592919061382b565b600060405180830381600087803b1580156109df57600080fd5b505af11580156109f3573d6000803e3d6000fd5b5050505050565b610a033361259a565b610a39576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610679906138a0565b73ffffffffffffffffffffffffffffffffffffffff91909116600090815260026020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660ff909216919091179055565b7f000000000000000000000000000000000000000000000000000000000000000081565b6040517f93552a3d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016906393552a3d90610b299085908590600401613cff565b60206040518083038186803b158015610b4157600080fd5b505afa158015610b55573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b7991906135a8565b73ffffffffffffffffffffffffffffffffffffffff9190911660009081526001602090815260408083209483529390529190912080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055565b735c69bee701ef814a2b6a3edd4b1652cb9cc5aa6f81565b60608142811015610c31576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067990613b97565b6000610c3b6125d1565b73ffffffffffffffffffffffffffffffffffffffff1663fa8b2f6a87876000818110610c90577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002016020810190610ca591906132df565b8a6040518363ffffffff1660e01b8152600401610cc392919061382b565b602060405180830381600087803b158015610cdd57600080fd5b505af1158015610cf1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d15919061362e565b9050610d2089612616565b610d6789610d2e838b613f1b565b888880806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250611cbe92505050565b9250610e683387876000818110610da7577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002016020810190610dbc91906132df565b8888610dc9600182613f1b565b818110610dff577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002016020810190610e1491906132df565b8b8760018951610e249190613f1b565b81518110610e5b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516126e0565b610e758984898989611f1d565b50509695505050505050565b60608142811015610ebe576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067990613b97565b6000610ec86125d1565b73ffffffffffffffffffffffffffffffffffffffff1663d7c82c4f8787610ef0600182613f1b565b818110610f26577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002016020810190610f3b91906132df565b8a6040518363ffffffff1660e01b8152600401610f5992919061382b565b602060405180830381600087803b158015610f7357600080fd5b505af1158015610f87573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fab919061362e565b9050610fb689612616565b610ffd89610fc4838b613e8d565b88888080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061234592505050565b92506110f2338787600081811061103d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200201602081019061105291906132df565b888861105f600182613f1b565b818110611095577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020160208101906110aa91906132df565b866000815181106110e4577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101518c6126e0565b610e7589848989896128d7565b600360209081526000928352604080842090915290825290205481565b6000806111276121db565b73ffffffffffffffffffffffffffffffffffffffff1663409fdb72336040518263ffffffff1660e01b815260040161115f9190613748565b60006040518083038186803b15801561117757600080fd5b505afa15801561118b573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526111d191908101906134e5565b915091506111dd6121db565b73ffffffffffffffffffffffffffffffffffffffff1663db2d904d336040518263ffffffff1660e01b81526004016112159190613748565b600060405180830381600087803b15801561122f57600080fd5b505af1158015611243573d6000803e3d6000fd5b5050505060005b808351111561135c5761125b612196565b73ffffffffffffffffffffffffffffffffffffffff1663d9caed128483815181106112af577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151338585815181106112f1577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516040518463ffffffff1660e01b8152600401611317939291906137aa565b600060405180830381600087803b15801561133157600080fd5b505af1158015611345573d6000803e3d6000fd5b50505050808061135490613f67565b91505061124a565b505050565b606061136c33611c83565b6113a2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610679906138fd565b6113e0868685858080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061234592505050565b90506106cf86828686866128d7565b6113f7612952565b73ffffffffffffffffffffffffffffffffffffffff166114156115c8565b73ffffffffffffffffffffffffffffffffffffffff1614611462576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067990613b62565b60045460405160009173ffffffffffffffffffffffffffffffffffffffff16907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600480547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055565b600160209081526000928352604080842090915290825290205460ff1681565b6114f9612952565b73ffffffffffffffffffffffffffffffffffffffff166115176115c8565b73ffffffffffffffffffffffffffffffffffffffff1614611564576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067990613b62565b73ffffffffffffffffffffffffffffffffffffffff16600090815260056020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055565b60026020526000908152604090205460ff1681565b60045473ffffffffffffffffffffffffffffffffffffffff1690565b6115ec612196565b73ffffffffffffffffffffffffffffffffffffffff1663a6a5f9fe346040518263ffffffff1660e01b81526004016000604051808303818588803b15801561163357600080fd5b505af1158015611647573d6000803e3d6000fd5b505050505060006116566121db565b73ffffffffffffffffffffffffffffffffffffffff166352a664d9337f0000000000000000000000000000000000000000000000000000000000000000346040518463ffffffff1660e01b81526004016116b2939291906137aa565b602060405180830381600087803b1580156116cc57600080fd5b505af11580156116e0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611704919061362e565b905080156117cb57611714612220565b73ffffffffffffffffffffffffffffffffffffffff16632a6a897b7f0000000000000000000000000000000000000000000000000000000000000000836040518363ffffffff1660e01b815260040161176e92919061382b565b600060405180830381600087803b15801561178857600080fd5b505af115801561179c573d6000803e3d6000fd5b505050506117cb337f000000000000000000000000000000000000000000000000000000000000000083612265565b7f2f7971a38b280a622029ac616d8d562df278b4b5839a7b124c33a1715ae09299337f00000000000000000000000000000000000000000000000000000000000000003460405161181e939291906137aa565b60405180910390a150565b73c0aee478e3658e2610c5f7a4a2e1777ce9e4f2ac81565b7f000000000000000000000000000000000000000000000000000000000000000081565b60606106cf8585858580806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250611cbe92505050565b6118ad6121db565b73ffffffffffffffffffffffffffffffffffffffff1663d0eb66533384846040518463ffffffff1660e01b81526004016118e9939291906137aa565b600060405180830381600087803b15801561190357600080fd5b505af1158015611917573d6000803e3d6000fd5b50505050611923612196565b73ffffffffffffffffffffffffffffffffffffffff1663d9caed128333846040518463ffffffff1660e01b815260040161195f939291906137aa565b600060405180830381600087803b15801561197957600080fd5b505af115801561198d573d6000803e3d6000fd5b505050507f69725482a69b3feb662528aa4b8028c1f9f6288b9ef746d5c84a847e05ad0d6b3383836040516119c4939291906137aa565b60405180910390a15050565b60006020819052908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b611a00612220565b73ffffffffffffffffffffffffffffffffffffffff1663ee0862bf83836040518363ffffffff1660e01b8152600401611a3a92919061382b565b600060405180830381600087803b158015611a5457600080fd5b505af1158015611a68573d6000803e3d6000fd5b50505050611a746121db565b73ffffffffffffffffffffffffffffffffffffffff1663498d55eb3384846040518463ffffffff1660e01b8152600401611ab0939291906137aa565b600060405180830381600087803b158015611aca57600080fd5b505af1158015611ade573d6000803e3d6000fd5b50505050611aed338383612956565b7fd160a035f47ba1f22446570a0c0f33960590c1e03b5ae81e67f8fdc4c721f4da3383836040516119c4939291906137aa565b611b28612952565b73ffffffffffffffffffffffffffffffffffffffff16611b466115c8565b73ffffffffffffffffffffffffffffffffffffffff1614611b93576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067990613b62565b73ffffffffffffffffffffffffffffffffffffffff8116611be0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106799061395a565b60045460405173ffffffffffffffffffffffffffffffffffffffff8084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600480547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60056020526000908152604090205460ff1681565b73ffffffffffffffffffffffffffffffffffffffff811660009081526001602090815260408083206007845290915290205460ff165b919050565b6060600282511015611cfc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067990613a71565b815167ffffffffffffffff811115611d3d577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015611d66578160200160208202803683370190505b5090508281600081518110611da4577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101818152505060005b60018351611dc19190613f1b565b811015611f1557600080611e6287868581518110611e08577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015187866001611e1e9190613e8d565b81518110611e55577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151612b26565b91509150611eb1848481518110611ea2577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101518383612c34565b84611ebd856001613e8d565b81518110611ef4577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101818152505050508080611f0d90613f67565b915050611db3565b509392505050565b828460018651611f2d9190613f1b565b81518110611f64577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101511015611fa4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067990613c99565b611fac612196565b73ffffffffffffffffffffffffffffffffffffffff1663d9caed1283836000818110612001577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200201602081019061201691906132df565b6120bd8886866000818110612054577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200201602081019061206991906132df565b878760018181106120a3577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020160208101906120b891906132df565b612d03565b876000815181106120f7577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516040518463ffffffff1660e01b815260040161211d939291906137aa565b600060405180830381600087803b15801561213757600080fd5b505af115801561214b573d6000803e3d6000fd5b505050506109f385858484808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506121919250612196915050565b612d75565b606560009081526020527f4a7203f705e51df4a56139a9b86b4a0970bed7ab7a3446eaffe2289989c1645c5473ffffffffffffffffffffffffffffffffffffffff1690565b606860009081526020527faa071f48f62aaaa1f6320aaa7bd2ad2d552d05160892c14d699d38c9920d5f995473ffffffffffffffffffffffffffffffffffffffff1690565b606660009081526020527f422cccb7cea5c0e46f340bb7b21b81debac329f72e31669c20ff0f3a05cc2b5b5473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff808416600090815260036020908152604080832093861683529290522054801561233f5773ffffffffffffffffffffffffffffffffffffffff831660009081526002602052604090205460ff166122cf612ffa565b73ffffffffffffffffffffffffffffffffffffffff1663a80167118284866040518463ffffffff1660e01b815260040161230b93929190613dff565b600060405180830381600087803b15801561232557600080fd5b505af1158015612339573d6000803e3d6000fd5b50505050505b50505050565b6060600282511015612383576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067990613a71565b815167ffffffffffffffff8111156123c4577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156123ed578160200160208202803683370190505b5090508281600183516124009190613f1b565b81518110612437577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181815250506000600183516124539190613f1b565b90505b8015611f15576000806124e7878661246f600187613f1b565b815181106124a6577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151878681518110611e55577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b91509150612536848481518110612527577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151838361303f565b84612542600186613f1b565b81518110612579577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181815250505050808061259290613f32565b915050612456565b73ffffffffffffffffffffffffffffffffffffffff1660009081526001602090815260408083206009845290915290205460ff1690565b606960009081526020527f366a7b92acda364086cc991f618bf9f10b629ec0f7ae94543f96b691b69ec9925473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff8116735c69bee701ef814a2b6a3edd4b1652cb9cc5aa6f1480612677575073ffffffffffffffffffffffffffffffffffffffff811673c0aee478e3658e2610c5f7a4a2e1777ce9e4f2ac145b806126a7575073ffffffffffffffffffffffffffffffffffffffff811660009081526005602052604090205460ff165b6126dd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067990613c05565b50565b6000806126eb6121db565b73ffffffffffffffffffffffffffffffffffffffff16633500aa0b88888888886040518663ffffffff1660e01b815260040161272b959493929190613769565b6040805180830381600087803b15801561274457600080fd5b505af1158015612758573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061277c919061366a565b909250905081156128065761278f612220565b73ffffffffffffffffffffffffffffffffffffffff16632a6a897b86846040518363ffffffff1660e01b81526004016127c992919061382b565b600060405180830381600087803b1580156127e357600080fd5b505af11580156127f7573d6000803e3d6000fd5b50505050612806878684612265565b801561288b57612814612220565b73ffffffffffffffffffffffffffffffffffffffff1663ee0862bf87836040518363ffffffff1660e01b815260040161284e92919061382b565b600060405180830381600087803b15801561286857600080fd5b505af115801561287c573d6000803e3d6000fd5b5050505061288b878783612956565b7ffda7842105bd0ae9d4c9616a1d48b1e9f17e2d97cb890d021c291e7d1b53929f878786848988886040516128c697969594939291906137db565b60405180910390a150505050505050565b8284600081518110612912577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101511115611fa4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067990613b05565b3390565b6000612960612ffa565b73ffffffffffffffffffffffffffffffffffffffff80861660009081526003602090815260408083209388168352928152828220546002909152919020549192509060ff168115612a38576040517ff542808700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84169063f542808790612a0190849086908990600401613dff565b600060405180830381600087803b158015612a1b57600080fd5b505af1158015612a2f573d6000803e3d6000fd5b50505050612b1e565b6040517f583d861600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84169063583d861690612a8e9084908a908990600401613dce565b602060405180830381600087803b158015612aa857600080fd5b505af1158015612abc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ae0919061362e565b91508115612b1e5773ffffffffffffffffffffffffffffffffffffffff80871660009081526003602090815260408083209389168352929052208290555b505050505050565b6000806000612b358585613114565b509050600080612b46888888612d03565b73ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b158015612b8b57600080fd5b505afa158015612b9f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bc391906135c8565b506dffffffffffffffffffffffffffff1691506dffffffffffffffffffffffffffff1691508273ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff1614612c22578082612c25565b81815b90999098509650505050505050565b6000808411612c6f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067990613c3c565b600083118015612c7f5750600082115b612cb5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067990613aa8565b6000612cc3856103e5613ede565b90506000612cd18483613ede565b9050600082612ce2876103e8613ede565b612cec9190613e8d565b9050612cf88183613ea5565b979650505050505050565b6000806000612d128585613114565b91509150858282604051602001612d2a92919061368d565b60405160208183030381529060405280519060200120604051602001612d519291906136c7565b6040516020818303038152906040528051906020012060601c925050509392505050565b60005b60018351612d869190613f1b565b8110156109f357600080848381518110612dc9577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015185846001612ddf9190613e8d565b81518110612e16577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151915091506000612e2e8383613114565b509050600087612e3f866001613e8d565b81518110612e76577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015190506000808373ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614612ebe57826000612ec2565b6000835b91509150600060028a51612ed69190613f1b565b8810612ee25788612f37565b612f378c878c612ef38c6002613e8d565b81518110612f2a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151612d03565b9050612f448c8888612d03565b73ffffffffffffffffffffffffffffffffffffffff1663022c0d9f84848460006040519080825280601f01601f191660200182016040528015612f8e576020820181803683370190505b506040518563ffffffff1660e01b8152600401612fae9493929190613d23565b600060405180830381600087803b158015612fc857600080fd5b505af1158015612fdc573d6000803e3d6000fd5b50505050505050505050508080612ff290613f67565b915050612d78565b606c60009081526020527f3c1fcba39712202dbd455253568bf32dd0a3bedb5c3ff0de4b22d4e45e50dc925473ffffffffffffffffffffffffffffffffffffffff1690565b600080841161307a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610679906139b7565b60008311801561308a5750600082115b6130c0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067990613aa8565b60006130cc8585613ede565b6130d8906103e8613ede565b905060006103e56130e98786613f1b565b6130f39190613f1b565b90506130ff8183613ea5565b61310a906001613e8d565b9695505050505050565b6000808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141561317d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067990613a14565b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16106131b75782846131ba565b83835b909250905073ffffffffffffffffffffffffffffffffffffffff821661320c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067990613bce565b9250929050565b60008083601f840112613224578182fd5b50813567ffffffffffffffff81111561323b578182fd5b602083019150836020808302850101111561320c57600080fd5b600082601f830112613265578081fd5b8151602061327a61327583613e69565b613e1a565b8281528181019085830183850287018401881015613296578586fd5b855b858110156132b457815184529284019290840190600101613298565b5090979650505050505050565b80516dffffffffffffffffffffffffffff81168114611cb957600080fd5b6000602082840312156132f0578081fd5b81356132fb81613ffe565b9392505050565b600060208284031215613313578081fd5b81516132fb81613ffe565b60008060408385031215613330578081fd5b823561333b81613ffe565b9150602083013561334b81613ffe565b809150509250929050565b60008060408385031215613368578182fd5b823561337381613ffe565b946020939093013593505050565b60008060008060608587031215613396578182fd5b84356133a181613ffe565b935060208501359250604085013567ffffffffffffffff8111156133c3578283fd5b6133cf87828801613213565b95989497509550505050565b6000806000806000608086880312156133f2578081fd5b85356133fd81613ffe565b94506020860135935060408601359250606086013567ffffffffffffffff811115613426578182fd5b61343288828901613213565b969995985093965092949392505050565b60008060008060008060a0878903121561345b578081fd5b863561346681613ffe565b95506020870135945060408701359350606087013567ffffffffffffffff81111561348f578182fd5b61349b89828a01613213565b979a9699509497949695608090950135949350505050565b600080604083850312156134c5578182fd5b82356134d081613ffe565b9150602083013560ff8116811461334b578182fd5b600080604083850312156134f7578182fd5b825167ffffffffffffffff8082111561350e578384fd5b818501915085601f830112613521578384fd5b8151602061353161327583613e69565b82815281810190858301838502870184018b101561354d578889fd5b8896505b8487101561357857805161356481613ffe565b835260019690960195918301918301613551565b5091880151919650909350505080821115613591578283fd5b5061359e85828601613255565b9150509250929050565b6000602082840312156135b9578081fd5b815180151581146132fb578182fd5b6000806000606084860312156135dc578081fd5b6135e5846132c1565b92506135f3602085016132c1565b9150604084015163ffffffff8116811461360b578182fd5b809150509250925092565b600060208284031215613627578081fd5b5035919050565b60006020828403121561363f578081fd5b5051919050565b60008060408385031215613658578182fd5b82359150602083013561334b81613ffe565b6000806040838503121561367c578182fd5b505080516020909101519092909150565b7fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606093841b811682529190921b16601482015260280190565b7fff00000000000000000000000000000000000000000000000000000000000000815260609290921b7fffffffffffffffffffffffffffffffffffffffff00000000000000000000000016600183015260158201527f96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f603582015260550190565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff958616815293851660208501529190931660408301526060820192909252608081019190915260a00190565b73ffffffffffffffffffffffffffffffffffffffff9384168152919092166020820152604081019190915260600190565b73ffffffffffffffffffffffffffffffffffffffff9788168152958716602087015260408601949094526060850192909252909316608083015260a082019290925260c081019190915260e00190565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b6020808252825182820181905260009190848201906040850190845b818110156138895783518352928401929184019160010161386d565b50909695505050505050565b901515815260200190565b6020808252602e908201527f43616c6c6572206e6f7420617574686f72697a656420746f2073657420696e6360408201527f656e74697665207472616e636865000000000000000000000000000000000000606082015260800190565b6020808252603e908201527f43616c6c696e6720636f6e7472616374206973206e6f7420617574686f72697a60408201527f656420746f20747261646520776974682070726f746f636c2066756e64730000606082015260800190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201527f6464726573730000000000000000000000000000000000000000000000000000606082015260800190565b6020808252602c908201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4f60408201527f55545055545f414d4f554e540000000000000000000000000000000000000000606082015260800190565b60208082526025908201527f556e697377617056324c6962726172793a204944454e544943414c5f4144445260408201527f4553534553000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601e908201527f556e697377617056324c6962726172793a20494e56414c49445f504154480000604082015260600190565b60208082526028908201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4c60408201527f4951554944495459000000000000000000000000000000000000000000000000606082015260800190565b60208082526024908201527f4d617267696e526f757465723a204558434553534956455f494e5055545f414d60408201527f4f554e5400000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526011908201527f5472616465206861732065787069726564000000000000000000000000000000604082015260600190565b6020808252601e908201527f556e697377617056324c6962726172793a205a45524f5f414444524553530000604082015260600190565b6020808252601b908201527f4e6f74207573696e6720616e20617574686f72697a656420414d4d0000000000604082015260600190565b6020808252602b908201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4960408201527f4e5055545f414d4f554e54000000000000000000000000000000000000000000606082015260800190565b60208082526028908201527f4d617267696e526f757465723a20494e53554646494349454e545f4f5554505560408201527f545f414d4f554e54000000000000000000000000000000000000000000000000606082015260800190565b90815260200190565b91825273ffffffffffffffffffffffffffffffffffffffff16602082015260400190565b60008582526020858184015273ffffffffffffffffffffffffffffffffffffffff85166040840152608060608401528351806080850152825b81811015613d785785810183015185820160a001528201613d5c565b81811115613d89578360a083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160a0019695505050505050565b60ff91909116815260200190565b60ff93909316835273ffffffffffffffffffffffffffffffffffffffff919091166020830152604082015260600190565b60ff9390931683526020830191909152604082015260600190565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715613e6157613e61613fcf565b604052919050565b600067ffffffffffffffff821115613e8357613e83613fcf565b5060209081020190565b60008219821115613ea057613ea0613fa0565b500190565b600082613ed9577f4e487b710000000000000000000000000000000000000000000000000000000081526012600452602481fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613f1657613f16613fa0565b500290565b600082821015613f2d57613f2d613fa0565b500390565b600081613f4157613f41613fa0565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613f9957613f99613fa0565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff811681146126dd57600080fdfea2646970667358221220a9a50ac32ceca34ba2d7982d2a1a5c8410412491397a41ba69678bc1bbe407f764736f6c63430008010033",
  "deployedBytecode": "0x6080604052600436106101b75760003560e01c8063715018a6116100ec578063ad5c46481161008a578063e9c3f77d11610064578063e9c3f77d146104a3578063eedb97c7146104c3578063f2fde38b146104e3578063fab5268914610503576101b7565b8063ad5c46481461044e578063bb7b9c7614610463578063e3e0626b14610483576101b7565b80638824cbba116100c65780638824cbba146103ef5780638da5cb5b1461041c57806394427b2014610431578063ab560e1014610439576101b7565b8063715018a61461038d5780637a1a04df146103a25780637fa82de4146103cf576101b7565b8063447d52ba116101595780635821eae5116101335780635821eae51461030b5780635adbeb151461032b57806369698670146103585780636fdcb2b91461036d576101b7565b8063447d52ba146102b6578063541bcb76146102d657806355696b1a146102eb576101b7565b8063192128b211610195578063192128b2146102345780631dce3baa146102545780632864f40114610274578063392f5f6414610294576101b7565b8063071060a6146101bc5780630d873d5e146101de5780631306d90214610214575b600080fd5b3480156101c857600080fd5b506101dc6101d7366004613616565b610523565b005b3480156101ea57600080fd5b506101fe6101f93660046133db565b610638565b60405161020b9190613851565b60405180910390f35b34801561022057600080fd5b506101dc61022f366004613356565b6106d8565b34801561024057600080fd5b506101fe61024f366004613381565b6108ad565b34801561026057600080fd5b506101dc61026f366004613616565b6108ed565b34801561028057600080fd5b506101dc61028f3660046134b3565b6109fa565b3480156102a057600080fd5b506102a9610a91565b60405161020b9190613748565b3480156102c257600080fd5b506101dc6102d1366004613646565b610ab5565b3480156102e257600080fd5b506102a9610bdc565b3480156102f757600080fd5b506101fe610306366004613443565b610bf4565b34801561031757600080fd5b506101fe610326366004613443565b610e81565b34801561033757600080fd5b5061034b61034636600461331e565b6110ff565b60405161020b9190613cf6565b34801561036457600080fd5b506101dc61111c565b34801561037957600080fd5b506101fe6103883660046133db565b611361565b34801561039957600080fd5b506101dc6113ef565b3480156103ae57600080fd5b506103c26103bd366004613356565b6114d1565b60405161020b9190613895565b3480156103db57600080fd5b506101dc6103ea3660046132df565b6114f1565b3480156103fb57600080fd5b5061040f61040a3660046132df565b6115b3565b60405161020b9190613dc0565b34801561042857600080fd5b506102a96115c8565b6101dc6115e4565b34801561044557600080fd5b506102a9611829565b34801561045a57600080fd5b506102a9611841565b34801561046f57600080fd5b506101fe61047e366004613381565b611865565b34801561048f57600080fd5b506101dc61049e366004613356565b6118a5565b3480156104af57600080fd5b506102a96104be366004613616565b6119d0565b3480156104cf57600080fd5b506101dc6104de366004613356565b6119f8565b3480156104ef57600080fd5b506101dc6104fe3660046132df565b611b20565b34801561050f57600080fd5b506103c261051e3660046132df565b611c6e565b6040517fb4ed0b6d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063b4ed0b6d90610595908490600401613cf6565b60206040518083038186803b1580156105ad57600080fd5b505afa1580156105c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105e59190613302565b60009182526020829052604090912080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff909216919091179055565b606061064333611c83565b610682576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610679906138fd565b60405180910390fd5b6106c08686858580806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250611cbe92505050565b90506106cf8682868686611f1d565b95945050505050565b6106e0612196565b73ffffffffffffffffffffffffffffffffffffffff1663b3db428b3384846040518463ffffffff1660e01b815260040161071c939291906137aa565b600060405180830381600087803b15801561073657600080fd5b505af115801561074a573d6000803e3d6000fd5b5050505060006107586121db565b73ffffffffffffffffffffffffffffffffffffffff166352a664d93385856040518463ffffffff1660e01b8152600401610794939291906137aa565b602060405180830381600087803b1580156107ae57600080fd5b505af11580156107c2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107e6919061362e565b9050801561086d576107f6612220565b73ffffffffffffffffffffffffffffffffffffffff16632a6a897b84836040518363ffffffff1660e01b815260040161083092919061382b565b600060405180830381600087803b15801561084a57600080fd5b505af115801561085e573d6000803e3d6000fd5b5050505061086d338483612265565b7f2f7971a38b280a622029ac616d8d562df278b4b5839a7b124c33a1715ae092993384846040516108a0939291906137aa565b60405180910390a1505050565b60606106cf858585858080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061234592505050565b6108f56121db565b73ffffffffffffffffffffffffffffffffffffffff1663d0eb6653337f0000000000000000000000000000000000000000000000000000000000000000846040518463ffffffff1660e01b8152600401610951939291906137aa565b600060405180830381600087803b15801561096b57600080fd5b505af115801561097f573d6000803e3d6000fd5b5050505061098b612196565b73ffffffffffffffffffffffffffffffffffffffff16634782f77933836040518363ffffffff1660e01b81526004016109c592919061382b565b600060405180830381600087803b1580156109df57600080fd5b505af11580156109f3573d6000803e3d6000fd5b5050505050565b610a033361259a565b610a39576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610679906138a0565b73ffffffffffffffffffffffffffffffffffffffff91909116600090815260026020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660ff909216919091179055565b7f000000000000000000000000000000000000000000000000000000000000000081565b6040517f93552a3d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016906393552a3d90610b299085908590600401613cff565b60206040518083038186803b158015610b4157600080fd5b505afa158015610b55573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b7991906135a8565b73ffffffffffffffffffffffffffffffffffffffff9190911660009081526001602090815260408083209483529390529190912080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055565b735c69bee701ef814a2b6a3edd4b1652cb9cc5aa6f81565b60608142811015610c31576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067990613b97565b6000610c3b6125d1565b73ffffffffffffffffffffffffffffffffffffffff1663fa8b2f6a87876000818110610c90577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002016020810190610ca591906132df565b8a6040518363ffffffff1660e01b8152600401610cc392919061382b565b602060405180830381600087803b158015610cdd57600080fd5b505af1158015610cf1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d15919061362e565b9050610d2089612616565b610d6789610d2e838b613f1b565b888880806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250611cbe92505050565b9250610e683387876000818110610da7577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002016020810190610dbc91906132df565b8888610dc9600182613f1b565b818110610dff577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002016020810190610e1491906132df565b8b8760018951610e249190613f1b565b81518110610e5b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516126e0565b610e758984898989611f1d565b50509695505050505050565b60608142811015610ebe576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067990613b97565b6000610ec86125d1565b73ffffffffffffffffffffffffffffffffffffffff1663d7c82c4f8787610ef0600182613f1b565b818110610f26577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9050602002016020810190610f3b91906132df565b8a6040518363ffffffff1660e01b8152600401610f5992919061382b565b602060405180830381600087803b158015610f7357600080fd5b505af1158015610f87573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fab919061362e565b9050610fb689612616565b610ffd89610fc4838b613e8d565b88888080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061234592505050565b92506110f2338787600081811061103d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200201602081019061105291906132df565b888861105f600182613f1b565b818110611095577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020160208101906110aa91906132df565b866000815181106110e4577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101518c6126e0565b610e7589848989896128d7565b600360209081526000928352604080842090915290825290205481565b6000806111276121db565b73ffffffffffffffffffffffffffffffffffffffff1663409fdb72336040518263ffffffff1660e01b815260040161115f9190613748565b60006040518083038186803b15801561117757600080fd5b505afa15801561118b573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526111d191908101906134e5565b915091506111dd6121db565b73ffffffffffffffffffffffffffffffffffffffff1663db2d904d336040518263ffffffff1660e01b81526004016112159190613748565b600060405180830381600087803b15801561122f57600080fd5b505af1158015611243573d6000803e3d6000fd5b5050505060005b808351111561135c5761125b612196565b73ffffffffffffffffffffffffffffffffffffffff1663d9caed128483815181106112af577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151338585815181106112f1577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516040518463ffffffff1660e01b8152600401611317939291906137aa565b600060405180830381600087803b15801561133157600080fd5b505af1158015611345573d6000803e3d6000fd5b50505050808061135490613f67565b91505061124a565b505050565b606061136c33611c83565b6113a2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610679906138fd565b6113e0868685858080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061234592505050565b90506106cf86828686866128d7565b6113f7612952565b73ffffffffffffffffffffffffffffffffffffffff166114156115c8565b73ffffffffffffffffffffffffffffffffffffffff1614611462576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067990613b62565b60045460405160009173ffffffffffffffffffffffffffffffffffffffff16907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600480547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055565b600160209081526000928352604080842090915290825290205460ff1681565b6114f9612952565b73ffffffffffffffffffffffffffffffffffffffff166115176115c8565b73ffffffffffffffffffffffffffffffffffffffff1614611564576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067990613b62565b73ffffffffffffffffffffffffffffffffffffffff16600090815260056020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055565b60026020526000908152604090205460ff1681565b60045473ffffffffffffffffffffffffffffffffffffffff1690565b6115ec612196565b73ffffffffffffffffffffffffffffffffffffffff1663a6a5f9fe346040518263ffffffff1660e01b81526004016000604051808303818588803b15801561163357600080fd5b505af1158015611647573d6000803e3d6000fd5b505050505060006116566121db565b73ffffffffffffffffffffffffffffffffffffffff166352a664d9337f0000000000000000000000000000000000000000000000000000000000000000346040518463ffffffff1660e01b81526004016116b2939291906137aa565b602060405180830381600087803b1580156116cc57600080fd5b505af11580156116e0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611704919061362e565b905080156117cb57611714612220565b73ffffffffffffffffffffffffffffffffffffffff16632a6a897b7f0000000000000000000000000000000000000000000000000000000000000000836040518363ffffffff1660e01b815260040161176e92919061382b565b600060405180830381600087803b15801561178857600080fd5b505af115801561179c573d6000803e3d6000fd5b505050506117cb337f000000000000000000000000000000000000000000000000000000000000000083612265565b7f2f7971a38b280a622029ac616d8d562df278b4b5839a7b124c33a1715ae09299337f00000000000000000000000000000000000000000000000000000000000000003460405161181e939291906137aa565b60405180910390a150565b73c0aee478e3658e2610c5f7a4a2e1777ce9e4f2ac81565b7f000000000000000000000000000000000000000000000000000000000000000081565b60606106cf8585858580806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250611cbe92505050565b6118ad6121db565b73ffffffffffffffffffffffffffffffffffffffff1663d0eb66533384846040518463ffffffff1660e01b81526004016118e9939291906137aa565b600060405180830381600087803b15801561190357600080fd5b505af1158015611917573d6000803e3d6000fd5b50505050611923612196565b73ffffffffffffffffffffffffffffffffffffffff1663d9caed128333846040518463ffffffff1660e01b815260040161195f939291906137aa565b600060405180830381600087803b15801561197957600080fd5b505af115801561198d573d6000803e3d6000fd5b505050507f69725482a69b3feb662528aa4b8028c1f9f6288b9ef746d5c84a847e05ad0d6b3383836040516119c4939291906137aa565b60405180910390a15050565b60006020819052908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b611a00612220565b73ffffffffffffffffffffffffffffffffffffffff1663ee0862bf83836040518363ffffffff1660e01b8152600401611a3a92919061382b565b600060405180830381600087803b158015611a5457600080fd5b505af1158015611a68573d6000803e3d6000fd5b50505050611a746121db565b73ffffffffffffffffffffffffffffffffffffffff1663498d55eb3384846040518463ffffffff1660e01b8152600401611ab0939291906137aa565b600060405180830381600087803b158015611aca57600080fd5b505af1158015611ade573d6000803e3d6000fd5b50505050611aed338383612956565b7fd160a035f47ba1f22446570a0c0f33960590c1e03b5ae81e67f8fdc4c721f4da3383836040516119c4939291906137aa565b611b28612952565b73ffffffffffffffffffffffffffffffffffffffff16611b466115c8565b73ffffffffffffffffffffffffffffffffffffffff1614611b93576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067990613b62565b73ffffffffffffffffffffffffffffffffffffffff8116611be0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106799061395a565b60045460405173ffffffffffffffffffffffffffffffffffffffff8084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600480547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60056020526000908152604090205460ff1681565b73ffffffffffffffffffffffffffffffffffffffff811660009081526001602090815260408083206007845290915290205460ff165b919050565b6060600282511015611cfc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067990613a71565b815167ffffffffffffffff811115611d3d577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015611d66578160200160208202803683370190505b5090508281600081518110611da4577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101818152505060005b60018351611dc19190613f1b565b811015611f1557600080611e6287868581518110611e08577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015187866001611e1e9190613e8d565b81518110611e55577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151612b26565b91509150611eb1848481518110611ea2577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101518383612c34565b84611ebd856001613e8d565b81518110611ef4577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101818152505050508080611f0d90613f67565b915050611db3565b509392505050565b828460018651611f2d9190613f1b565b81518110611f64577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101511015611fa4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067990613c99565b611fac612196565b73ffffffffffffffffffffffffffffffffffffffff1663d9caed1283836000818110612001577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200201602081019061201691906132df565b6120bd8886866000818110612054577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b905060200201602081019061206991906132df565b878760018181106120a3577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020160208101906120b891906132df565b612d03565b876000815181106120f7577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516040518463ffffffff1660e01b815260040161211d939291906137aa565b600060405180830381600087803b15801561213757600080fd5b505af115801561214b573d6000803e3d6000fd5b505050506109f385858484808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152506121919250612196915050565b612d75565b606560009081526020527f4a7203f705e51df4a56139a9b86b4a0970bed7ab7a3446eaffe2289989c1645c5473ffffffffffffffffffffffffffffffffffffffff1690565b606860009081526020527faa071f48f62aaaa1f6320aaa7bd2ad2d552d05160892c14d699d38c9920d5f995473ffffffffffffffffffffffffffffffffffffffff1690565b606660009081526020527f422cccb7cea5c0e46f340bb7b21b81debac329f72e31669c20ff0f3a05cc2b5b5473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff808416600090815260036020908152604080832093861683529290522054801561233f5773ffffffffffffffffffffffffffffffffffffffff831660009081526002602052604090205460ff166122cf612ffa565b73ffffffffffffffffffffffffffffffffffffffff1663a80167118284866040518463ffffffff1660e01b815260040161230b93929190613dff565b600060405180830381600087803b15801561232557600080fd5b505af1158015612339573d6000803e3d6000fd5b50505050505b50505050565b6060600282511015612383576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067990613a71565b815167ffffffffffffffff8111156123c4577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156123ed578160200160208202803683370190505b5090508281600183516124009190613f1b565b81518110612437577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181815250506000600183516124539190613f1b565b90505b8015611f15576000806124e7878661246f600187613f1b565b815181106124a6577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151878681518110611e55577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b91509150612536848481518110612527577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151838361303f565b84612542600186613f1b565b81518110612579577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010181815250505050808061259290613f32565b915050612456565b73ffffffffffffffffffffffffffffffffffffffff1660009081526001602090815260408083206009845290915290205460ff1690565b606960009081526020527f366a7b92acda364086cc991f618bf9f10b629ec0f7ae94543f96b691b69ec9925473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff8116735c69bee701ef814a2b6a3edd4b1652cb9cc5aa6f1480612677575073ffffffffffffffffffffffffffffffffffffffff811673c0aee478e3658e2610c5f7a4a2e1777ce9e4f2ac145b806126a7575073ffffffffffffffffffffffffffffffffffffffff811660009081526005602052604090205460ff165b6126dd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067990613c05565b50565b6000806126eb6121db565b73ffffffffffffffffffffffffffffffffffffffff16633500aa0b88888888886040518663ffffffff1660e01b815260040161272b959493929190613769565b6040805180830381600087803b15801561274457600080fd5b505af1158015612758573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061277c919061366a565b909250905081156128065761278f612220565b73ffffffffffffffffffffffffffffffffffffffff16632a6a897b86846040518363ffffffff1660e01b81526004016127c992919061382b565b600060405180830381600087803b1580156127e357600080fd5b505af11580156127f7573d6000803e3d6000fd5b50505050612806878684612265565b801561288b57612814612220565b73ffffffffffffffffffffffffffffffffffffffff1663ee0862bf87836040518363ffffffff1660e01b815260040161284e92919061382b565b600060405180830381600087803b15801561286857600080fd5b505af115801561287c573d6000803e3d6000fd5b5050505061288b878783612956565b7ffda7842105bd0ae9d4c9616a1d48b1e9f17e2d97cb890d021c291e7d1b53929f878786848988886040516128c697969594939291906137db565b60405180910390a150505050505050565b8284600081518110612912577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101511115611fa4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067990613b05565b3390565b6000612960612ffa565b73ffffffffffffffffffffffffffffffffffffffff80861660009081526003602090815260408083209388168352928152828220546002909152919020549192509060ff168115612a38576040517ff542808700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84169063f542808790612a0190849086908990600401613dff565b600060405180830381600087803b158015612a1b57600080fd5b505af1158015612a2f573d6000803e3d6000fd5b50505050612b1e565b6040517f583d861600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84169063583d861690612a8e9084908a908990600401613dce565b602060405180830381600087803b158015612aa857600080fd5b505af1158015612abc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ae0919061362e565b91508115612b1e5773ffffffffffffffffffffffffffffffffffffffff80871660009081526003602090815260408083209389168352929052208290555b505050505050565b6000806000612b358585613114565b509050600080612b46888888612d03565b73ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b158015612b8b57600080fd5b505afa158015612b9f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612bc391906135c8565b506dffffffffffffffffffffffffffff1691506dffffffffffffffffffffffffffff1691508273ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff1614612c22578082612c25565b81815b90999098509650505050505050565b6000808411612c6f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067990613c3c565b600083118015612c7f5750600082115b612cb5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067990613aa8565b6000612cc3856103e5613ede565b90506000612cd18483613ede565b9050600082612ce2876103e8613ede565b612cec9190613e8d565b9050612cf88183613ea5565b979650505050505050565b6000806000612d128585613114565b91509150858282604051602001612d2a92919061368d565b60405160208183030381529060405280519060200120604051602001612d519291906136c7565b6040516020818303038152906040528051906020012060601c925050509392505050565b60005b60018351612d869190613f1b565b8110156109f357600080848381518110612dc9577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015185846001612ddf9190613e8d565b81518110612e16577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151915091506000612e2e8383613114565b509050600087612e3f866001613e8d565b81518110612e76577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015190506000808373ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614612ebe57826000612ec2565b6000835b91509150600060028a51612ed69190613f1b565b8810612ee25788612f37565b612f378c878c612ef38c6002613e8d565b81518110612f2a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151612d03565b9050612f448c8888612d03565b73ffffffffffffffffffffffffffffffffffffffff1663022c0d9f84848460006040519080825280601f01601f191660200182016040528015612f8e576020820181803683370190505b506040518563ffffffff1660e01b8152600401612fae9493929190613d23565b600060405180830381600087803b158015612fc857600080fd5b505af1158015612fdc573d6000803e3d6000fd5b50505050505050505050508080612ff290613f67565b915050612d78565b606c60009081526020527f3c1fcba39712202dbd455253568bf32dd0a3bedb5c3ff0de4b22d4e45e50dc925473ffffffffffffffffffffffffffffffffffffffff1690565b600080841161307a576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610679906139b7565b60008311801561308a5750600082115b6130c0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067990613aa8565b60006130cc8585613ede565b6130d8906103e8613ede565b905060006103e56130e98786613f1b565b6130f39190613f1b565b90506130ff8183613ea5565b61310a906001613e8d565b9695505050505050565b6000808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16141561317d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067990613a14565b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16106131b75782846131ba565b83835b909250905073ffffffffffffffffffffffffffffffffffffffff821661320c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067990613bce565b9250929050565b60008083601f840112613224578182fd5b50813567ffffffffffffffff81111561323b578182fd5b602083019150836020808302850101111561320c57600080fd5b600082601f830112613265578081fd5b8151602061327a61327583613e69565b613e1a565b8281528181019085830183850287018401881015613296578586fd5b855b858110156132b457815184529284019290840190600101613298565b5090979650505050505050565b80516dffffffffffffffffffffffffffff81168114611cb957600080fd5b6000602082840312156132f0578081fd5b81356132fb81613ffe565b9392505050565b600060208284031215613313578081fd5b81516132fb81613ffe565b60008060408385031215613330578081fd5b823561333b81613ffe565b9150602083013561334b81613ffe565b809150509250929050565b60008060408385031215613368578182fd5b823561337381613ffe565b946020939093013593505050565b60008060008060608587031215613396578182fd5b84356133a181613ffe565b935060208501359250604085013567ffffffffffffffff8111156133c3578283fd5b6133cf87828801613213565b95989497509550505050565b6000806000806000608086880312156133f2578081fd5b85356133fd81613ffe565b94506020860135935060408601359250606086013567ffffffffffffffff811115613426578182fd5b61343288828901613213565b969995985093965092949392505050565b60008060008060008060a0878903121561345b578081fd5b863561346681613ffe565b95506020870135945060408701359350606087013567ffffffffffffffff81111561348f578182fd5b61349b89828a01613213565b979a9699509497949695608090950135949350505050565b600080604083850312156134c5578182fd5b82356134d081613ffe565b9150602083013560ff8116811461334b578182fd5b600080604083850312156134f7578182fd5b825167ffffffffffffffff8082111561350e578384fd5b818501915085601f830112613521578384fd5b8151602061353161327583613e69565b82815281810190858301838502870184018b101561354d578889fd5b8896505b8487101561357857805161356481613ffe565b835260019690960195918301918301613551565b5091880151919650909350505080821115613591578283fd5b5061359e85828601613255565b9150509250929050565b6000602082840312156135b9578081fd5b815180151581146132fb578182fd5b6000806000606084860312156135dc578081fd5b6135e5846132c1565b92506135f3602085016132c1565b9150604084015163ffffffff8116811461360b578182fd5b809150509250925092565b600060208284031215613627578081fd5b5035919050565b60006020828403121561363f578081fd5b5051919050565b60008060408385031215613658578182fd5b82359150602083013561334b81613ffe565b6000806040838503121561367c578182fd5b505080516020909101519092909150565b7fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606093841b811682529190921b16601482015260280190565b7fff00000000000000000000000000000000000000000000000000000000000000815260609290921b7fffffffffffffffffffffffffffffffffffffffff00000000000000000000000016600183015260158201527f96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f603582015260550190565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff958616815293851660208501529190931660408301526060820192909252608081019190915260a00190565b73ffffffffffffffffffffffffffffffffffffffff9384168152919092166020820152604081019190915260600190565b73ffffffffffffffffffffffffffffffffffffffff9788168152958716602087015260408601949094526060850192909252909316608083015260a082019290925260c081019190915260e00190565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b6020808252825182820181905260009190848201906040850190845b818110156138895783518352928401929184019160010161386d565b50909695505050505050565b901515815260200190565b6020808252602e908201527f43616c6c6572206e6f7420617574686f72697a656420746f2073657420696e6360408201527f656e74697665207472616e636865000000000000000000000000000000000000606082015260800190565b6020808252603e908201527f43616c6c696e6720636f6e7472616374206973206e6f7420617574686f72697a60408201527f656420746f20747261646520776974682070726f746f636c2066756e64730000606082015260800190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201527f6464726573730000000000000000000000000000000000000000000000000000606082015260800190565b6020808252602c908201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4f60408201527f55545055545f414d4f554e540000000000000000000000000000000000000000606082015260800190565b60208082526025908201527f556e697377617056324c6962726172793a204944454e544943414c5f4144445260408201527f4553534553000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252601e908201527f556e697377617056324c6962726172793a20494e56414c49445f504154480000604082015260600190565b60208082526028908201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4c60408201527f4951554944495459000000000000000000000000000000000000000000000000606082015260800190565b60208082526024908201527f4d617267696e526f757465723a204558434553534956455f494e5055545f414d60408201527f4f554e5400000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526011908201527f5472616465206861732065787069726564000000000000000000000000000000604082015260600190565b6020808252601e908201527f556e697377617056324c6962726172793a205a45524f5f414444524553530000604082015260600190565b6020808252601b908201527f4e6f74207573696e6720616e20617574686f72697a656420414d4d0000000000604082015260600190565b6020808252602b908201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4960408201527f4e5055545f414d4f554e54000000000000000000000000000000000000000000606082015260800190565b60208082526028908201527f4d617267696e526f757465723a20494e53554646494349454e545f4f5554505560408201527f545f414d4f554e54000000000000000000000000000000000000000000000000606082015260800190565b90815260200190565b91825273ffffffffffffffffffffffffffffffffffffffff16602082015260400190565b60008582526020858184015273ffffffffffffffffffffffffffffffffffffffff85166040840152608060608401528351806080850152825b81811015613d785785810183015185820160a001528201613d5c565b81811115613d89578360a083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160a0019695505050505050565b60ff91909116815260200190565b60ff93909316835273ffffffffffffffffffffffffffffffffffffffff919091166020830152604082015260600190565b60ff9390931683526020830191909152604082015260600190565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715613e6157613e61613fcf565b604052919050565b600067ffffffffffffffff821115613e8357613e83613fcf565b5060209081020190565b60008219821115613ea057613ea0613fa0565b500190565b600082613ed9577f4e487b710000000000000000000000000000000000000000000000000000000081526012600452602481fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613f1657613f16613fa0565b500290565b600082821015613f2d57613f2d613fa0565b500390565b600081613f4157613f41613fa0565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613f9957613f99613fa0565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff811681146126dd57600080fdfea2646970667358221220a9a50ac32ceca34ba2d7982d2a1a5c8410412491397a41ba69678bc1bbe407f764736f6c63430008010033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "authorizedSwapExactT4T(address,uint256,uint256,address[])": {
        "details": "external function to make swaps on AMM using protocol funds, only for authorized contracts"
      },
      "crossBorrow(address,uint256)": {
        "details": "borrow into cross margin trading account"
      },
      "crossCloseAccount()": {
        "details": "close an account that is no longer borrowing and return gains"
      },
      "crossDeposit(address,uint256)": {
        "details": "traders call this to deposit funds on cross margin"
      },
      "crossDepositETH()": {
        "details": "deposit wrapped ehtereum into cross margin account"
      },
      "crossSwapExactTokensForTokens(address,uint256,uint256,address[],uint256)": {
        "details": "entry point for swapping tokens held in cross margin account"
      },
      "crossSwapTokensForExactTokens(address,uint256,uint256,address[],uint256)": {
        "details": "entry point for swapping tokens held in cross margin account"
      },
      "crossWithdraw(address,uint256)": {
        "details": "withdraw deposits/earnings from cross margin account"
      },
      "crossWithdrawETH(uint256)": {
        "details": "withdraw ethereum from cross margin account"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "CrossBorrow(address,address,uint256)": {
        "notice": "emitted upon sucessfully borrowing"
      },
      "CrossDeposit(address,address,uint256)": {
        "notice": "emitted when a trader depoits on cross margin"
      },
      "CrossTrade(address,address,uint256,uint256,address,uint256,uint256)": {
        "notice": "emitted whenever a trade happens"
      },
      "CrossWithdraw(address,address,uint256)": {
        "notice": "emitted when a trader withdraws funds"
      }
    },
    "kind": "user",
    "methods": {
      "WETH()": {
        "notice": "wrapped ETH ERC20 contract"
      },
      "factories(address)": {
        "notice": "different uniswap compatible factories to talk to"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 12289,
        "contract": "contracts/MarginRouter.sol:MarginRouter",
        "label": "mainCharacterCache",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 12295,
        "contract": "contracts/MarginRouter.sol:MarginRouter",
        "label": "roleCache",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 9676,
        "contract": "contracts/MarginRouter.sol:MarginRouter",
        "label": "incentiveTranches",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint8)"
      },
      {
        "astId": 9682,
        "contract": "contracts/MarginRouter.sol:MarginRouter",
        "label": "claimIds",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 381,
        "contract": "contracts/MarginRouter.sol:MarginRouter",
        "label": "_owner",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 10613,
        "contract": "contracts/MarginRouter.sol:MarginRouter",
        "label": "factories",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_address,t_uint8)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint8)",
        "numberOfBytes": "32",
        "value": "t_uint8"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}