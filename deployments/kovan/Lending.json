{
  "address": "0x89fa58De039EBf9d9e19F20f8036cEf2814b269D",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_roles",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "issuer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "holder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "LiquidityWarning",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "WEIGHT_TOTAL_10k",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "issuer",
          "type": "address"
        }
      ],
      "name": "activateIssuer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "issuer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "activateIssuer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "activeIssuers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "issuer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "yieldQuotientFP",
          "type": "uint256"
        }
      ],
      "name": "applyBorrowInterest",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balanceWithInterest",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "bondBucketMetadata",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "runtimeWeight",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "buyingSpeed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastBought",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "withdrawingSpeed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastWithdrawn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "yieldLastUpdated",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalLending",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "runtimeYieldFP",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "bondIds",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "bonds",
      "outputs": [
        {
          "internalType": "address",
          "name": "holder",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "issuer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "originalPrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "returnAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maturityTimestamp",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "runtime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "yieldFP",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "borrowYieldAccumulators",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "accumulatorFP",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastUpdated",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "hourlyYieldFP",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "borrowingFactorPercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "borrowingMarkupFP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "issuer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "runtime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "minReturn",
          "type": "uint256"
        }
      ],
      "name": "buyBond",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "bondIndex",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "issuer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "buyHourlyBondSubscription",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "issuer",
          "type": "address"
        }
      ],
      "name": "closeHourlyBondAccount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "issuer",
          "type": "address"
        }
      ],
      "name": "deactivateIssuer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "diffMaxMinRuntime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "haircut",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "haircuts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "hourlyBondAccounts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "yieldQuotientFP",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "moduloHour",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "incentiveTranches",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "issuer",
          "type": "address"
        }
      ],
      "name": "initBorrowYieldAccumulator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "issuerTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lendingMeta",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalLending",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalBorrowed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lendingBuffer",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lendingCap",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "mainCharacterCache",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxHourlyYieldFP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxRuntime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minRuntime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextBondIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "issuer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "payOff",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "issuer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "registerBorrow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "roleCache",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "roles",
      "outputs": [
        {
          "internalType": "contract Roles",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "borrowingFactor",
          "type": "uint256"
        }
      ],
      "name": "setBorrowingFactorPercent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "issuer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "aprPercent",
          "type": "uint256"
        }
      ],
      "name": "setHourlyYieldAPR",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "tranche",
          "type": "uint8"
        }
      ],
      "name": "setIncentiveTranche",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "issuer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "buffer",
          "type": "uint256"
        }
      ],
      "name": "setLendingBuffer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "issuer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "cap",
          "type": "uint256"
        }
      ],
      "name": "setLendingCap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "maxYieldFP",
          "type": "uint256"
        }
      ],
      "name": "setMaxHourlyYieldFP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "runtime",
          "type": "uint256"
        }
      ],
      "name": "setMaxRuntime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "runtime",
          "type": "uint256"
        }
      ],
      "name": "setMinRuntime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "issuer",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "weights",
          "type": "uint256[]"
        }
      ],
      "name": "setRuntimeWeights",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "issuer",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "yieldsFP",
          "type": "uint256[]"
        }
      ],
      "name": "setRuntimeYieldsFP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "window",
          "type": "uint256"
        }
      ],
      "name": "setWithdrawalWindow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "changePerSecondFP",
          "type": "uint256"
        }
      ],
      "name": "setYieldChangePerSecondFP",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "role",
          "type": "uint256"
        }
      ],
      "name": "updateMainCharacterCache",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "role",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "contr",
          "type": "address"
        }
      ],
      "name": "updateRoleCache",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "issuer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "runtime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "viewBondReturn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "issuer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "yieldQuotientFP",
          "type": "uint256"
        }
      ],
      "name": "viewBorrowInterest",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "issuer",
          "type": "address"
        }
      ],
      "name": "viewBorrowingYieldFP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "issuer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "holder",
          "type": "address"
        }
      ],
      "name": "viewHourlyBondAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "issuer",
          "type": "address"
        }
      ],
      "name": "viewLendingTarget",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "bondId",
          "type": "uint256"
        }
      ],
      "name": "withdrawBond",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "issuer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawHourlyBond",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawalWindow",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "yieldChangePerSecondFP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x2ab52d6dfd266a7ffb3dd05803d553d518dd1c2b69351a7eb76df3f35889f5be",
  "receipt": {
    "to": null,
    "from": "0x23292e9BA8434e59E6BAC1907bA7425211c4DE27",
    "contractAddress": "0x89fa58De039EBf9d9e19F20f8036cEf2814b269D",
    "transactionIndex": 2,
    "gasUsed": "3500544",
    "logsBloom": "0x
    "blockHash": "0xd4dfccf11e35f93de6e296767f0aa37f8a77b274a1c7fc5add3859cfb33a937a",
    "transactionHash": "0x2ab52d6dfd266a7ffb3dd05803d553d518dd1c2b69351a7eb76df3f35889f5be",
    "logs": [],
    "blockNumber": 24139007,
    "cumulativeGasUsed": "3725513",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x67DceCCe970011547817a5A4dad9A86eF9a2AB63"
  ],
  "solcInputHash": "844ad074ee2713a040ed8b727b202f61",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_roles\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"LiquidityWarning\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"WEIGHT_TOTAL_10k\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"}],\"name\":\"activateIssuer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"activateIssuer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"activeIssuers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"yieldQuotientFP\",\"type\":\"uint256\"}],\"name\":\"applyBorrowInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balanceWithInterest\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bondBucketMetadata\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"runtimeWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"buyingSpeed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastBought\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"withdrawingSpeed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastWithdrawn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yieldLastUpdated\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalLending\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"runtimeYieldFP\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bondIds\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"bonds\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"originalPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"returnAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maturityTimestamp\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"runtime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yieldFP\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"borrowYieldAccumulators\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"accumulatorFP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdated\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hourlyYieldFP\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowingFactorPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowingMarkupFP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"runtime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minReturn\",\"type\":\"uint256\"}],\"name\":\"buyBond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"bondIndex\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buyHourlyBondSubscription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"}],\"name\":\"closeHourlyBondAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"}],\"name\":\"deactivateIssuer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"diffMaxMinRuntime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"haircut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"haircuts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hourlyBondAccounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yieldQuotientFP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"moduloHour\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"incentiveTranches\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"}],\"name\":\"initBorrowYieldAccumulator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"issuerTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lendingMeta\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalLending\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBorrowed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lendingBuffer\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lendingCap\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mainCharacterCache\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxHourlyYieldFP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxRuntime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minRuntime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextBondIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"payOff\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"registerBorrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"roleCache\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roles\",\"outputs\":[{\"internalType\":\"contract Roles\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"borrowingFactor\",\"type\":\"uint256\"}],\"name\":\"setBorrowingFactorPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"aprPercent\",\"type\":\"uint256\"}],\"name\":\"setHourlyYieldAPR\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"tranche\",\"type\":\"uint8\"}],\"name\":\"setIncentiveTranche\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"buffer\",\"type\":\"uint256\"}],\"name\":\"setLendingBuffer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cap\",\"type\":\"uint256\"}],\"name\":\"setLendingCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"maxYieldFP\",\"type\":\"uint256\"}],\"name\":\"setMaxHourlyYieldFP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"runtime\",\"type\":\"uint256\"}],\"name\":\"setMaxRuntime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"runtime\",\"type\":\"uint256\"}],\"name\":\"setMinRuntime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"weights\",\"type\":\"uint256[]\"}],\"name\":\"setRuntimeWeights\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"yieldsFP\",\"type\":\"uint256[]\"}],\"name\":\"setRuntimeYieldsFP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"window\",\"type\":\"uint256\"}],\"name\":\"setWithdrawalWindow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"changePerSecondFP\",\"type\":\"uint256\"}],\"name\":\"setYieldChangePerSecondFP\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"role\",\"type\":\"uint256\"}],\"name\":\"updateMainCharacterCache\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"role\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"contr\",\"type\":\"address\"}],\"name\":\"updateRoleCache\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"runtime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"viewBondReturn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"yieldQuotientFP\",\"type\":\"uint256\"}],\"name\":\"viewBorrowInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"}],\"name\":\"viewBorrowingYieldFP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"viewHourlyBondAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"}],\"name\":\"viewLendingTarget\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"bondId\",\"type\":\"uint256\"}],\"name\":\"withdrawBond\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawHourlyBond\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalWindow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"yieldChangePerSecondFP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"applyBorrowInterest(uint256,address,uint256)\":{\"details\":\"how much interest has accrued to a borrowed balance over time\"},\"buyBond(address,uint256,uint256,uint256)\":{\"details\":\"buy fixed term bond that does not renew\"},\"buyHourlyBondSubscription(address,uint256)\":{\"details\":\"buy hourly bond subscription\"},\"payOff(address,uint256)\":{\"details\":\"gets called by router if loan is extinguished\"},\"registerBorrow(address,uint256)\":{\"details\":\"gets called by router to register if a trader borrows issuers\"},\"viewBorrowInterest(uint256,address,uint256)\":{\"details\":\"view function to get current borrowing interest\"},\"viewBorrowingYieldFP(address)\":{\"details\":\"get the borrow yield\"},\"withdrawBond(uint256)\":{\"details\":\"send back funds of bond after maturity\"},\"withdrawHourlyBond(address,uint256)\":{\"details\":\"withdraw an hour bond\"}},\"stateVariables\":{\"bondIds\":{\"details\":\"IDs for all bonds held by an address\"}},\"title\":\"Manage lending for a variety of bond issuers\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"activateIssuer(address)\":{\"notice\":\"Make a issuer available for protocol\"},\"activateIssuer(address,address)\":{\"notice\":\"Make issuer != token available for protocol (isol. margin)\"},\"activeIssuers(address)\":{\"notice\":\"map of available issuers\"},\"closeHourlyBondAccount(address)\":{\"notice\":\"Shut down hourly bond account for `issuer`\"},\"deactivateIssuer(address)\":{\"notice\":\"Remove a issuer from trading availability\"},\"haircuts(address)\":{\"notice\":\"In case of shortfall, adjust debt\"},\"issuerTokens(address)\":{\"notice\":\"mapping issuers to tokens (in crossmargin, the issuers are tokens  themselves)\"},\"setHourlyYieldAPR(address,uint256)\":{\"notice\":\"Set hourly yield APR for issuer\"},\"setIncentiveTranche(address,uint8)\":{\"notice\":\"Set incentive tranche\"},\"setLendingBuffer(address,uint256)\":{\"notice\":\"Set lending buffer\"},\"setLendingCap(address,uint256)\":{\"notice\":\"Set lending cap\"},\"setMaxHourlyYieldFP(uint256)\":{\"notice\":\"Set maximum hourly yield in floating point\"},\"setMaxRuntime(uint256)\":{\"notice\":\"Set maximum runtime\"},\"setMinRuntime(uint256)\":{\"notice\":\"Set miniumum runtime\"},\"setRuntimeWeights(address,uint256[])\":{\"notice\":\"Set runtime weights in floating point\"},\"setRuntimeYieldsFP(address,uint256[])\":{\"notice\":\"Set runtime yields in floating point\"},\"setWithdrawalWindow(uint256)\":{\"notice\":\"Set withdrawal window\"},\"setYieldChangePerSecondFP(uint256)\":{\"notice\":\"Set yield change per second in floating point\"},\"viewBondReturn(address,uint256,uint256)\":{\"notice\":\"Get view of returns on bond\"},\"viewLendingTarget(address)\":{\"notice\":\"View lending target\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Lending.sol\":\"Lending\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":9900},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x1cae4f85f114ff17b90414f5da67365b1d00337abb5bce9bf944eb78a2c0673c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x99f5c21018d796db7833a2100bb0e7411999e248a3c950fb526eee5d2bf47cb7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"contracts/BaseLending.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\nimport \\\"./RoleAware.sol\\\";\\n\\n/// @title Base lending behavior\\nabstract contract BaseLending {\\n    uint256 constant FP32 = 2**32;\\n    uint256 constant ACCUMULATOR_INIT = 10**18;\\n\\n    struct YieldAccumulator {\\n        uint256 accumulatorFP;\\n        uint256 lastUpdated;\\n        uint256 hourlyYieldFP;\\n    }\\n\\n    struct LendingMetadata {\\n        uint256 totalLending;\\n        uint256 totalBorrowed;\\n        uint256 lendingBuffer;\\n        uint256 lendingCap;\\n    }\\n    mapping(address => LendingMetadata) public lendingMeta;\\n\\n    /// @dev accumulate interest per issuer (like compound indices)\\n    mapping(address => YieldAccumulator) public borrowYieldAccumulators;\\n\\n    uint256 public maxHourlyYieldFP;\\n    uint256 public yieldChangePerSecondFP;\\n\\n    /// @dev simple formula for calculating interest relative to accumulator\\n    function applyInterest(\\n        uint256 balance,\\n        uint256 accumulatorFP,\\n        uint256 yieldQuotientFP\\n    ) internal pure returns (uint256) {\\n        // 1 * FP / FP = 1\\n        return (balance * accumulatorFP) / yieldQuotientFP;\\n    }\\n\\n    /// update the yield for an asset based on recent supply and demand\\n    function updatedYieldFP(\\n        // previous yield\\n        uint256 _yieldFP,\\n        // timestamp\\n        uint256 lastUpdated,\\n        uint256 totalLendingInBucket,\\n        uint256 bucketTarget,\\n        uint256 buyingSpeed,\\n        uint256 withdrawingSpeed,\\n        uint256 bucketMaxYield\\n    ) internal view returns (uint256 yieldFP) {\\n        yieldFP = _yieldFP;\\n        uint256 timeDiff = block.timestamp - lastUpdated;\\n        uint256 yieldDiff = timeDiff * yieldChangePerSecondFP;\\n\\n        if (\\n            totalLendingInBucket >= bucketTarget ||\\n            buyingSpeed >= withdrawingSpeed\\n        ) {\\n            yieldFP -= min(yieldFP, yieldDiff);\\n        } else {\\n            yieldFP += yieldDiff;\\n            if (yieldFP > bucketMaxYield) {\\n                yieldFP = bucketMaxYield;\\n            }\\n        }\\n    }\\n\\n    function updateSpeed(\\n        uint256 speed,\\n        uint256 lastAction,\\n        uint256 amount,\\n        uint256 runtime\\n    ) internal view returns (uint256 newSpeed, uint256 newLastAction) {\\n        uint256 timeDiff = block.timestamp - lastAction;\\n        uint256 updateAmount = (amount * runtime) / (timeDiff + 1);\\n\\n        uint256 oldSpeedWeight = (runtime + 120 minutes) / 3;\\n        uint256 updateWeight = timeDiff + 1;\\n        // scale adjustment relative to runtime\\n        newSpeed =\\n            (speed * oldSpeedWeight + updateAmount * updateWeight) /\\n            (oldSpeedWeight + updateWeight);\\n        newLastAction = block.timestamp;\\n    }\\n\\n    /// @dev minimum\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a > b) {\\n            return b;\\n        } else {\\n            return a;\\n        }\\n    }\\n\\n    function _makeFallbackBond(\\n        address issuer,\\n        address holder,\\n        uint256 amount\\n    ) internal virtual;\\n\\n    function lendingTarget(LendingMetadata storage meta)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return min(meta.lendingCap, meta.totalBorrowed + meta.lendingBuffer);\\n    }\\n\\n    /// View lending target\\n    function viewLendingTarget(address issuer) external view returns (uint256) {\\n        LendingMetadata storage meta = lendingMeta[issuer];\\n        return lendingTarget(meta);\\n    }\\n\\n    /// Available tokens to this issuance\\n    function issuanceBalance(address issuance)\\n        internal\\n        view\\n        virtual\\n        returns (uint256);\\n}\\n\",\"keccak256\":\"0xe949439417190fbd5af9e3e05147c4e7775ea532f2b74a6449d2e7d1044afe33\",\"license\":\"BUSL-1.1\"},\"contracts/BondLending.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\nimport \\\"./BaseLending.sol\\\";\\n\\nstruct Bond {\\n    address holder;\\n    address issuer;\\n    uint256 originalPrice;\\n    uint256 returnAmount;\\n    uint256 maturityTimestamp;\\n    uint256 runtime;\\n    uint256 yieldFP;\\n}\\n\\n/** \\n@title Lending for fixed runtime, fixed interest\\nLenders can pick their own bond maturity date\\n@dev In order to manage interest rates for the different\\nmaturities and create a yield curve we bucket\\nbond runtimes into weighted baskets and adjust\\nrates individually per bucket, based on supply and demand.\\n*/\\nabstract contract BondLending is BaseLending {\\n    uint256 public minRuntime = 30 days;\\n    uint256 public maxRuntime = 365 days;\\n    uint256 public diffMaxMinRuntime;\\n    /** \\n    @dev this is the numerator under runtimeWeights.\\n    any excess left over is the weight of hourly bonds\\n    */\\n    uint256 public constant WEIGHT_TOTAL_10k = 10_000;\\n    uint256 public borrowingMarkupFP;\\n\\n    struct BondBucketMetadata {\\n        uint256 runtimeWeight;\\n        uint256 buyingSpeed;\\n        uint256 lastBought;\\n        uint256 withdrawingSpeed;\\n        uint256 lastWithdrawn;\\n        uint256 yieldLastUpdated;\\n        uint256 totalLending;\\n        uint256 runtimeYieldFP;\\n    }\\n\\n    mapping(uint256 => Bond) public bonds;\\n\\n    mapping(address => BondBucketMetadata[]) public bondBucketMetadata;\\n\\n    uint256 public nextBondIndex = 1;\\n\\n    event LiquidityWarning(\\n        address indexed issuer,\\n        address indexed holder,\\n        uint256 value\\n    );\\n\\n    function _makeBond(\\n        address holder,\\n        address issuer,\\n        uint256 runtime,\\n        uint256 amount,\\n        uint256 minReturn\\n    ) internal returns (uint256 bondIndex) {\\n        uint256 bucketIndex = getBucketIndex(issuer, runtime);\\n        BondBucketMetadata storage bondMeta =\\n            bondBucketMetadata[issuer][bucketIndex];\\n\\n        uint256 yieldFP = calcBondYieldFP(issuer, amount, runtime, bondMeta);\\n\\n        uint256 bondReturn = (yieldFP * amount) / FP32;\\n        if (bondReturn >= minReturn) {\\n            uint256 interpolatedAmount = (amount + bondReturn) / 2;\\n            lendingMeta[issuer].totalLending += interpolatedAmount;\\n\\n            bondMeta.totalLending += interpolatedAmount;\\n\\n            bondIndex = nextBondIndex;\\n            nextBondIndex++;\\n\\n            bonds[bondIndex] = Bond({\\n                holder: holder,\\n                issuer: issuer,\\n                originalPrice: amount,\\n                returnAmount: bondReturn,\\n                maturityTimestamp: block.timestamp + runtime,\\n                runtime: runtime,\\n                yieldFP: yieldFP\\n            });\\n\\n            (bondMeta.buyingSpeed, bondMeta.lastBought) = updateSpeed(\\n                bondMeta.buyingSpeed,\\n                bondMeta.lastBought,\\n                amount,\\n                runtime\\n            );\\n        }\\n    }\\n\\n    function _withdrawBond(uint256 bondId, Bond storage bond)\\n        internal\\n        returns (uint256 withdrawAmount)\\n    {\\n        address issuer = bond.issuer;\\n        uint256 bucketIndex = getBucketIndex(issuer, bond.runtime);\\n        BondBucketMetadata storage bondMeta =\\n            bondBucketMetadata[issuer][bucketIndex];\\n\\n        uint256 returnAmount = bond.returnAmount;\\n        address holder = bond.holder;\\n\\n        uint256 interpolatedAmount = (bond.originalPrice + returnAmount) / 2;\\n\\n        LendingMetadata storage meta = lendingMeta[issuer];\\n        meta.totalLending -= interpolatedAmount;\\n        bondMeta.totalLending -= interpolatedAmount;\\n\\n        (bondMeta.withdrawingSpeed, bondMeta.lastWithdrawn) = updateSpeed(\\n            bondMeta.withdrawingSpeed,\\n            bondMeta.lastWithdrawn,\\n            bond.originalPrice,\\n            bond.runtime\\n        );\\n\\n        delete bonds[bondId];\\n        if (\\n            meta.totalBorrowed > meta.totalLending ||\\n            issuanceBalance(issuer) < returnAmount\\n        ) {\\n            // apparently there is a liquidity issue\\n            emit LiquidityWarning(issuer, holder, returnAmount);\\n            _makeFallbackBond(issuer, holder, returnAmount);\\n        } else {\\n            withdrawAmount = returnAmount;\\n        }\\n    }\\n\\n    function calcBondYieldFP(\\n        address issuer,\\n        uint256 addedAmount,\\n        uint256 runtime,\\n        BondBucketMetadata storage bucketMeta\\n    ) internal view returns (uint256 yieldFP) {\\n        uint256 totalLendingInBucket = addedAmount + bucketMeta.totalLending;\\n\\n        yieldFP = bucketMeta.runtimeYieldFP;\\n        uint256 lastUpdated = bucketMeta.yieldLastUpdated;\\n\\n        LendingMetadata storage meta = lendingMeta[issuer];\\n        uint256 bucketTarget =\\n            (lendingTarget(meta) * bucketMeta.runtimeWeight) / WEIGHT_TOTAL_10k;\\n\\n        uint256 buying = bucketMeta.buyingSpeed;\\n        uint256 withdrawing = bucketMeta.withdrawingSpeed;\\n\\n        YieldAccumulator storage borrowAccumulator =\\n            borrowYieldAccumulators[issuer];\\n\\n        uint256 yieldGeneratedFP =\\n            (borrowAccumulator.hourlyYieldFP * meta.totalBorrowed) /\\n                (1 + meta.totalLending);\\n        uint256 _maxHourlyYieldFP = min(maxHourlyYieldFP, yieldGeneratedFP);\\n\\n        uint256 bucketMaxYield = _maxHourlyYieldFP * (runtime / (1 hours));\\n\\n        yieldFP = updatedYieldFP(\\n            yieldFP,\\n            lastUpdated,\\n            totalLendingInBucket,\\n            bucketTarget,\\n            buying,\\n            withdrawing,\\n            bucketMaxYield\\n        );\\n    }\\n\\n    /// Get view of returns on bond\\n    function viewBondReturn(\\n        address issuer,\\n        uint256 runtime,\\n        uint256 amount\\n    ) external view returns (uint256) {\\n        uint256 bucketIndex = getBucketIndex(issuer, runtime);\\n        uint256 yieldFP =\\n            calcBondYieldFP(\\n                issuer,\\n                amount + bondBucketMetadata[issuer][bucketIndex].totalLending,\\n                runtime,\\n                bondBucketMetadata[issuer][bucketIndex]\\n            );\\n        return (yieldFP * amount) / FP32;\\n    }\\n\\n    function getBucketIndex(address issuer, uint256 runtime)\\n        internal\\n        view\\n        returns (uint256 bucketIndex)\\n    {\\n        uint256 bucketSize =\\n            diffMaxMinRuntime / bondBucketMetadata[issuer].length;\\n        bucketIndex = (runtime - minRuntime) / bucketSize;\\n    }\\n}\\n\",\"keccak256\":\"0xee2781021cafc9e28553768678b85cf9687cded3d8f5da4f2d5bc5944263c89d\",\"license\":\"BUSL-1.1\"},\"contracts/Fund.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"../interfaces/IWETH.sol\\\";\\nimport \\\"./RoleAware.sol\\\";\\n\\n/// @title Manage funding\\ncontract Fund is RoleAware {\\n    using SafeERC20 for IERC20;\\n    /// wrapped ether\\n    address public immutable WETH;\\n\\n    constructor(address _WETH, address _roles) RoleAware(_roles) {\\n        WETH = _WETH;\\n    }\\n\\n    /// Deposit an active token\\n    function deposit(address depositToken, uint256 depositAmount) external {\\n        IERC20(depositToken).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            depositAmount\\n        );\\n    }\\n\\n    /// Deposit token on behalf of `sender`\\n    function depositFor(\\n        address sender,\\n        address depositToken,\\n        uint256 depositAmount\\n    ) external {\\n        require(\\n            isFundTransferer(msg.sender),\\n            \\\"Contract not authorized to deposit for user\\\"\\n        );\\n        IERC20(depositToken).safeTransferFrom(\\n            sender,\\n            address(this),\\n            depositAmount\\n        );\\n    }\\n\\n    /// Deposit to wrapped ether\\n    function depositToWETH() external payable {\\n        IWETH(WETH).deposit{value: msg.value}();\\n    }\\n\\n    // withdrawers role\\n    function withdraw(\\n        address withdrawalToken,\\n        address recipient,\\n        uint256 withdrawalAmount\\n    ) external {\\n        require(\\n            isFundTransferer(msg.sender),\\n            \\\"Contract not authorized to withdraw\\\"\\n        );\\n        IERC20(withdrawalToken).safeTransfer(recipient, withdrawalAmount);\\n    }\\n\\n    // withdrawers role\\n    function withdrawETH(address recipient, uint256 withdrawalAmount) external {\\n        require(isFundTransferer(msg.sender), \\\"Not authorized to withdraw\\\");\\n        IWETH(WETH).withdraw(withdrawalAmount);\\n        Address.sendValue(payable(recipient), withdrawalAmount);\\n    }\\n}\\n\",\"keccak256\":\"0x52f9f08048d3fbc3214259051c0fbfd5e6a6247542deb50c088af3d8aff9ff03\",\"license\":\"BUSL-1.1\"},\"contracts/HourlyBondSubscriptionLending.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./BaseLending.sol\\\";\\n\\nstruct HourlyBond {\\n    uint256 amount;\\n    uint256 yieldQuotientFP;\\n    uint256 moduloHour;\\n}\\n\\n/// @title Here we offer subscriptions to auto-renewing hourly bonds\\n/// Funds are locked in for an 50 minutes per hour, while interest rates float\\nabstract contract HourlyBondSubscriptionLending is BaseLending {\\n    struct HourlyBondMetadata {\\n        YieldAccumulator yieldAccumulator;\\n        uint256 buyingSpeed;\\n        uint256 withdrawingSpeed;\\n        uint256 lastBought;\\n        uint256 lastWithdrawn;\\n    }\\n\\n    mapping(address => HourlyBondMetadata) hourlyBondMetadata;\\n\\n    uint256 public withdrawalWindow = 10 minutes;\\n    // issuer => holder => bond record\\n    mapping(address => mapping(address => HourlyBond))\\n        public hourlyBondAccounts;\\n\\n    uint256 public borrowingFactorPercent = 200;\\n\\n    function _makeHourlyBond(\\n        address issuer,\\n        address holder,\\n        uint256 amount\\n    ) internal {\\n        HourlyBond storage bond = hourlyBondAccounts[issuer][holder];\\n        updateHourlyBondAmount(issuer, bond);\\n\\n        HourlyBondMetadata storage bondMeta = hourlyBondMetadata[issuer];\\n        bond.yieldQuotientFP = bondMeta.yieldAccumulator.accumulatorFP;\\n        bond.moduloHour = block.timestamp % (1 hours);\\n        bond.amount += amount;\\n        lendingMeta[issuer].totalLending += amount;\\n\\n        (bondMeta.buyingSpeed, bondMeta.lastBought) = updateSpeed(\\n            bondMeta.buyingSpeed,\\n            bondMeta.lastBought,\\n            amount,\\n            1 hours\\n        );\\n    }\\n\\n    function updateHourlyBondAmount(address issuer, HourlyBond storage bond)\\n        internal\\n    {\\n        uint256 yieldQuotientFP = bond.yieldQuotientFP;\\n        if (yieldQuotientFP > 0) {\\n            YieldAccumulator storage yA =\\n                getUpdatedHourlyYield(issuer, hourlyBondMetadata[issuer]);\\n\\n            uint256 oldAmount = bond.amount;\\n            bond.amount = applyInterest(\\n                bond.amount,\\n                yA.accumulatorFP,\\n                yieldQuotientFP\\n            );\\n\\n            uint256 deltaAmount = bond.amount - oldAmount;\\n            lendingMeta[issuer].totalLending += deltaAmount;\\n        }\\n    }\\n\\n    // Retrieves bond balance for issuer and holder\\n    function viewHourlyBondAmount(address issuer, address holder)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        HourlyBond storage bond = hourlyBondAccounts[issuer][holder];\\n        uint256 yieldQuotientFP = bond.yieldQuotientFP;\\n\\n        uint256 cumulativeYield =\\n            viewCumulativeYieldFP(\\n                hourlyBondMetadata[issuer].yieldAccumulator,\\n                block.timestamp\\n            );\\n\\n        if (yieldQuotientFP > 0) {\\n            return\\n                bond.amount +\\n                applyInterest(bond.amount, cumulativeYield, yieldQuotientFP);\\n        }\\n        return bond.amount + 0;\\n    }\\n\\n    function _withdrawHourlyBond(\\n        address issuer,\\n        HourlyBond storage bond,\\n        uint256 amount\\n    ) internal {\\n        // how far the current hour has advanced (relative to acccount hourly clock)\\n        uint256 currentOffset = (block.timestamp - bond.moduloHour) % (1 hours);\\n\\n        require(\\n            withdrawalWindow >= currentOffset,\\n            \\\"Tried withdrawing outside subscription cancellation time window\\\"\\n        );\\n\\n        bond.amount -= amount;\\n        lendingMeta[issuer].totalLending -= amount;\\n\\n        HourlyBondMetadata storage bondMeta = hourlyBondMetadata[issuer];\\n        (bondMeta.withdrawingSpeed, bondMeta.lastWithdrawn) = updateSpeed(\\n            bondMeta.withdrawingSpeed,\\n            bondMeta.lastWithdrawn,\\n            bond.amount,\\n            1 hours\\n        );\\n    }\\n\\n    function calcCumulativeYieldFP(\\n        YieldAccumulator storage yieldAccumulator,\\n        uint256 timeDelta\\n    ) internal view returns (uint256 accumulatorFP) {\\n        uint256 secondsDelta = timeDelta % (1 hours);\\n        // linearly interpolate interest for seconds\\n        // accumulator * hourly_yield == seconds_per_hour * accumulator * hourly_yield / seconds_per_hour\\n        // FP * FP * 1 / (FP * 1) = FP\\n        accumulatorFP =\\n            (yieldAccumulator.accumulatorFP *\\n                yieldAccumulator.hourlyYieldFP *\\n                secondsDelta) /\\n            (FP32 * 1 hours);\\n\\n        uint256 hoursDelta = timeDelta / (1 hours);\\n        if (hoursDelta > 0) {\\n            // This loop should hardly ever 1 or more unless something bad happened\\n            // In which case it costs gas but there isn't overflow\\n            for (uint256 i = 0; hoursDelta > i; i++) {\\n                // FP32 * FP32 / FP32 = FP32\\n                accumulatorFP =\\n                    (accumulatorFP * yieldAccumulator.hourlyYieldFP) /\\n                    FP32;\\n            }\\n        }\\n    }\\n\\n    /// @dev updates yield accumulators for both borrowing and lending\\n    function getUpdatedHourlyYield(\\n        address issuer,\\n        HourlyBondMetadata storage bondMeta\\n    ) internal returns (YieldAccumulator storage accumulator) {\\n        accumulator = bondMeta.yieldAccumulator;\\n        uint256 timeDelta = (block.timestamp - accumulator.lastUpdated);\\n\\n        accumulator.accumulatorFP = calcCumulativeYieldFP(\\n            accumulator,\\n            timeDelta\\n        );\\n\\n        LendingMetadata storage meta = lendingMeta[issuer];\\n        YieldAccumulator storage borrowAccumulator =\\n            borrowYieldAccumulators[issuer];\\n\\n        uint256 yieldGeneratedFP =\\n            (borrowAccumulator.hourlyYieldFP * meta.totalBorrowed) /\\n                (1 + meta.totalLending);\\n        uint256 _maxHourlyYieldFP = min(maxHourlyYieldFP, yieldGeneratedFP);\\n\\n        accumulator.hourlyYieldFP = updatedYieldFP(\\n            accumulator.hourlyYieldFP,\\n            accumulator.lastUpdated,\\n            meta.totalLending,\\n            lendingTarget(meta),\\n            bondMeta.buyingSpeed,\\n            bondMeta.withdrawingSpeed,\\n            _maxHourlyYieldFP\\n        );\\n\\n        timeDelta = block.timestamp - borrowAccumulator.lastUpdated;\\n        borrowAccumulator.accumulatorFP = calcCumulativeYieldFP(\\n            borrowAccumulator,\\n            timeDelta\\n        );\\n\\n        borrowAccumulator.hourlyYieldFP =\\n            1 +\\n            (borrowingFactorPercent * accumulator.hourlyYieldFP) /\\n            100;\\n\\n        accumulator.lastUpdated = block.timestamp;\\n        borrowAccumulator.lastUpdated = block.timestamp;\\n    }\\n\\n    function viewCumulativeYieldFP(\\n        YieldAccumulator storage yA,\\n        uint256 timestamp\\n    ) internal view returns (uint256) {\\n        uint256 timeDelta = (timestamp - yA.lastUpdated);\\n        return calcCumulativeYieldFP(yA, timeDelta);\\n    }\\n}\\n\",\"keccak256\":\"0x2652367528767f30f2f86ebfa6f117acdd2c7654be1151273d3db2552f596f19\",\"license\":\"BUSL-1.1\"},\"contracts/IncentiveDistribution.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./RoleAware.sol\\\";\\nimport \\\"./Fund.sol\\\";\\n\\nstruct Claim {\\n    uint256 startingRewardRateFP;\\n    uint256 amount;\\n    uint256 intraDayGain;\\n    uint256 intraDayLoss;\\n}\\n\\n/// @title Manage distribution of liquidity stake incentives\\n/// Some efforts have been made to reduce gas cost at claim time\\n/// and shift gas burden onto those who would want to withdraw\\ncontract IncentiveDistribution is RoleAware {\\n    // fixed point number factor\\n    uint256 internal constant FP32 = 2**32;\\n    // the amount of contraction per thousand, per day\\n    // of the overal daily incentive distribution\\n    // https://en.wikipedia.org/wiki/Per_mil\\n    uint256 public constant contractionPerMil = 999;\\n    address public immutable MFI;\\n\\n    constructor(\\n        address _MFI,\\n        uint256 startingDailyDistributionWithoutDecimals,\\n        address _roles\\n    ) RoleAware(_roles) {\\n        MFI = _MFI;\\n        currentDailyDistribution =\\n            startingDailyDistributionWithoutDecimals *\\n            (1 ether);\\n    }\\n\\n    // how much is going to be distributed, contracts every day\\n    uint256 public currentDailyDistribution;\\n\\n    uint256 public trancheShareTotal;\\n    uint256[] public allTranches;\\n\\n    struct TrancheMeta {\\n        // portion of daily distribution per each tranche\\n        uint256 rewardShare;\\n        uint256 currentDayGains;\\n        uint256 currentDayLosses;\\n        uint256 tomorrowOngoingTotals;\\n        uint256 yesterdayOngoingTotals;\\n        // aggregate all the unclaimed intra-days\\n        uint256 intraDayGains;\\n        uint256 intraDayLosses;\\n        uint256 intraDayRewardGains;\\n        uint256 intraDayRewardLosses;\\n        // how much each claim unit would get if they had staked from the dawn of time\\n        // expressed as fixed point number\\n        // claim amounts are expressed relative to this ongoing aggregate\\n        uint256 aggregateDailyRewardRateFP;\\n        uint256 yesterdayRewardRateFP;\\n        mapping(address => Claim) claims;\\n    }\\n\\n    mapping(uint256 => TrancheMeta) public trancheMetadata;\\n\\n    // last updated day\\n    uint256 public lastUpdatedDay;\\n\\n    mapping(address => uint256) public accruedReward;\\n\\n    /// Set share of tranche\\n    function setTrancheShare(uint256 tranche, uint256 share)\\n        external\\n        onlyOwnerExecActivator\\n    {\\n        require(\\n            trancheMetadata[tranche].rewardShare > 0,\\n            \\\"Tranche is not initialized, please initialize first\\\"\\n        );\\n        _setTrancheShare(tranche, share);\\n    }\\n\\n    function _setTrancheShare(uint256 tranche, uint256 share) internal {\\n        TrancheMeta storage tm = trancheMetadata[tranche];\\n\\n        if (share > tm.rewardShare) {\\n            trancheShareTotal += share - tm.rewardShare;\\n        } else {\\n            trancheShareTotal -= tm.rewardShare - share;\\n        }\\n        tm.rewardShare = share;\\n    }\\n\\n    /// Initialize tranche\\n    function initTranche(uint256 tranche, uint256 share) external onlyOwnerExecActivator {\\n        TrancheMeta storage tm = trancheMetadata[tranche];\\n        require(tm.rewardShare == 0, \\\"Tranche already initialized\\\");\\n        _setTrancheShare(tranche, share);\\n\\n        // simply initialize to 1.0\\n        tm.aggregateDailyRewardRateFP = FP32;\\n        allTranches.push(tranche);\\n    }\\n\\n    /// Start / increase amount of claim\\n    function addToClaimAmount(\\n        uint256 tranche,\\n        address recipient,\\n        uint256 claimAmount\\n    ) external {\\n        require(\\n            isIncentiveReporter(msg.sender),\\n            \\\"Contract not authorized to report incentives\\\"\\n        );\\n        if (currentDailyDistribution > 0) {\\n            TrancheMeta storage tm = trancheMetadata[tranche];\\n            Claim storage claim = tm.claims[recipient];\\n\\n            uint256 currentDay =\\n                claimAmount * (1 days - (block.timestamp % (1 days)));\\n\\n            tm.currentDayGains += currentDay;\\n            claim.intraDayGain += currentDay * currentDailyDistribution;\\n\\n            tm.tomorrowOngoingTotals += claimAmount * 1 days;\\n            updateAccruedReward(tm, recipient, claim);\\n\\n            claim.amount += claimAmount * (1 days);\\n        }\\n    }\\n\\n    /// Decrease amount of claim\\n    function subtractFromClaimAmount(\\n        uint256 tranche,\\n        address recipient,\\n        uint256 subtractAmount\\n    ) external {\\n        require(\\n            isIncentiveReporter(msg.sender),\\n            \\\"Contract not authorized to report incentives\\\"\\n        );\\n        uint256 currentDay = subtractAmount * (block.timestamp % (1 days));\\n\\n        TrancheMeta storage tm = trancheMetadata[tranche];\\n        Claim storage claim = tm.claims[recipient];\\n\\n        tm.currentDayLosses += currentDay;\\n        claim.intraDayLoss += currentDay * currentDailyDistribution;\\n\\n        tm.tomorrowOngoingTotals -= subtractAmount * 1 days;\\n\\n        updateAccruedReward(tm, recipient, claim);\\n        claim.amount -= subtractAmount * (1 days);\\n    }\\n\\n    function updateAccruedReward(\\n        TrancheMeta storage tm,\\n        address recipient,\\n        Claim storage claim\\n    ) internal returns (uint256 rewardDelta) {\\n        if (claim.startingRewardRateFP > 0) {\\n            rewardDelta = calcRewardAmount(tm, claim);\\n            accruedReward[recipient] += rewardDelta;\\n        }\\n        // don't reward for current day (approximately)\\n        claim.startingRewardRateFP =\\n            tm.yesterdayRewardRateFP +\\n            tm.aggregateDailyRewardRateFP;\\n    }\\n\\n    /// @dev additional reward accrued since last update\\n    function calcRewardAmount(TrancheMeta storage tm, Claim storage claim)\\n        internal\\n        view\\n        returns (uint256 rewardAmount)\\n    {\\n        uint256 ours = claim.startingRewardRateFP;\\n        uint256 aggregate = tm.aggregateDailyRewardRateFP;\\n        if (aggregate > ours) {\\n            rewardAmount = (claim.amount * (aggregate - ours)) / FP32;\\n        }\\n    }\\n\\n    function applyIntraDay(TrancheMeta storage tm, Claim storage claim)\\n        internal\\n        view\\n        returns (uint256 gainImpact, uint256 lossImpact)\\n    {\\n        uint256 gain = claim.intraDayGain;\\n        uint256 loss = claim.intraDayLoss;\\n\\n        if (gain + loss > 0) {\\n            gainImpact =\\n                (gain * tm.intraDayRewardGains) /\\n                (tm.intraDayGains + 1);\\n            lossImpact =\\n                (loss * tm.intraDayRewardLosses) /\\n                (tm.intraDayLosses + 1);\\n        }\\n    }\\n\\n    /// Get a view of reward amount\\n    function viewRewardAmount(uint256 tranche, address claimant)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        TrancheMeta storage tm = trancheMetadata[tranche];\\n        Claim storage claim = tm.claims[claimant];\\n\\n        uint256 rewardAmount =\\n            accruedReward[claimant] + calcRewardAmount(tm, claim);\\n        (uint256 gainImpact, uint256 lossImpact) = applyIntraDay(tm, claim);\\n\\n        return rewardAmount + gainImpact - lossImpact;\\n    }\\n\\n    /// Withdraw current reward amount\\n    function withdrawReward(uint256[] calldata tranches)\\n        external\\n        returns (uint256 withdrawAmount)\\n    {\\n        require(\\n            isIncentiveReporter(msg.sender),\\n            \\\"Contract not authorized to report incentives\\\"\\n        );\\n\\n        updateDayTotals();\\n\\n        withdrawAmount = accruedReward[msg.sender];\\n        for (uint256 i; tranches.length > i; i++) {\\n            uint256 tranche = tranches[i];\\n\\n            TrancheMeta storage tm = trancheMetadata[tranche];\\n            Claim storage claim = tm.claims[msg.sender];\\n\\n            withdrawAmount += updateAccruedReward(tm, msg.sender, claim);\\n\\n            (uint256 gainImpact, uint256 lossImpact) = applyIntraDay(tm, claim);\\n\\n            withdrawAmount = withdrawAmount + gainImpact - lossImpact;\\n\\n            tm.intraDayGains -= claim.intraDayGain;\\n            tm.intraDayLosses -= claim.intraDayLoss;\\n            tm.intraDayRewardGains -= gainImpact;\\n            tm.intraDayRewardLosses -= lossImpact;\\n\\n            claim.intraDayGain = 0;\\n        }\\n\\n        accruedReward[msg.sender] = 0;\\n\\n        Fund(fund()).withdraw(MFI, msg.sender, withdrawAmount);\\n    }\\n\\n    function updateDayTotals() internal {\\n        uint256 nowDay = block.timestamp / (1 days);\\n        uint256 dayDiff = nowDay - lastUpdatedDay;\\n\\n        // shrink the daily distribution for every day that has passed\\n        for (uint256 i = 0; i < dayDiff; i++) {\\n            _updateTrancheTotals();\\n\\n            currentDailyDistribution =\\n                (currentDailyDistribution * contractionPerMil) /\\n                1000;\\n\\n            lastUpdatedDay += 1;\\n        }\\n    }\\n\\n    function _updateTrancheTotals() internal {\\n        for (uint256 i; allTranches.length > i; i++) {\\n            uint256 tranche = allTranches[i];\\n            TrancheMeta storage tm = trancheMetadata[tranche];\\n\\n            uint256 todayTotal =\\n                tm.yesterdayOngoingTotals +\\n                    tm.currentDayGains -\\n                    tm.currentDayLosses;\\n\\n            uint256 todayRewardRateFP =\\n                (FP32 * (currentDailyDistribution * tm.rewardShare)) /\\n                    trancheShareTotal /\\n                    todayTotal;\\n\\n            tm.yesterdayRewardRateFP = todayRewardRateFP;\\n\\n            tm.aggregateDailyRewardRateFP += todayRewardRateFP;\\n\\n            tm.intraDayGains += tm.currentDayGains * currentDailyDistribution;\\n\\n            tm.intraDayLosses += tm.currentDayLosses * currentDailyDistribution;\\n\\n            tm.intraDayRewardGains +=\\n                (tm.currentDayGains * todayRewardRateFP) /\\n                FP32;\\n\\n            tm.intraDayRewardLosses +=\\n                (tm.currentDayLosses * todayRewardRateFP) /\\n                FP32;\\n\\n            tm.yesterdayOngoingTotals = tm.tomorrowOngoingTotals;\\n            tm.currentDayGains = 0;\\n            tm.currentDayLosses = 0;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x048cbccd9f32e7c9c76728d3fea561d04261529e75f6a8dfa8e5db6f33613956\",\"license\":\"BUSL-1.1\"},\"contracts/IncentivizedHolder.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IncentiveDistribution.sol\\\";\\nimport \\\"./RoleAware.sol\\\";\\n\\n/// @title helper class to facilitate staking and unstaking\\n/// within the incentive system.\\nabstract contract IncentivizedHolder is RoleAware {\\n    /// @dev here we cache incentive tranches to save on a bit of gas\\n    mapping(address => uint256) public incentiveTranches;\\n\\n    /// Set incentive tranche\\n    function setIncentiveTranche(address token, uint8 tranche)\\n        external\\n        onlyOwnerExecActivator\\n    {\\n        incentiveTranches[token] = tranche;\\n    }\\n\\n    function stakeClaim(\\n        address claimant,\\n        address token,\\n        uint256 amount\\n    ) internal {\\n        IncentiveDistribution iD =\\n            IncentiveDistribution(incentiveDistributor());\\n\\n        uint256 tranche = incentiveTranches[token];\\n\\n        iD.addToClaimAmount(tranche, claimant, amount);\\n    }\\n\\n    function withdrawClaim(\\n        address claimant,\\n        address token,\\n        uint256 amount\\n    ) internal {\\n        uint256 tranche = incentiveTranches[token];\\n\\n        IncentiveDistribution(incentiveDistributor()).subtractFromClaimAmount(\\n            tranche,\\n            claimant,\\n            amount\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x48565694d2ec02613f1268df73a9f42576c21a163aadfd75e67d0cc4952a240f\",\"license\":\"BUSL-1.1\"},\"contracts/Lending.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Fund.sol\\\";\\nimport \\\"./HourlyBondSubscriptionLending.sol\\\";\\nimport \\\"./BondLending.sol\\\";\\nimport \\\"./IncentivizedHolder.sol\\\";\\n\\n// TODO activate bonds for lending\\n\\n// TODO disburse token if isolated bond issuer\\n// and if isolated issuer, allow for haircuts\\n\\n/// @title Manage lending for a variety of bond issuers\\ncontract Lending is\\n    RoleAware,\\n    BaseLending,\\n    HourlyBondSubscriptionLending,\\n    BondLending,\\n    IncentivizedHolder\\n{\\n    /// @dev IDs for all bonds held by an address\\n    mapping(address => uint256[]) public bondIds;\\n\\n    /// mapping issuers to tokens\\n    /// (in crossmargin, the issuers are tokens  themselves)\\n    mapping(address => address) public issuerTokens;\\n\\n    /// In case of shortfall, adjust debt\\n    mapping(address => uint256) public haircuts;\\n\\n    /// map of available issuers\\n    mapping(address => bool) public activeIssuers;\\n\\n    constructor(address _roles) RoleAware(_roles) {\\n        uint256 APR = 899;\\n        maxHourlyYieldFP = (FP32 * APR) / 100 / (24 * 365);\\n\\n        uint256 aprChangePerMil = 3;\\n        yieldChangePerSecondFP = (FP32 * aprChangePerMil) / 1000;\\n    }\\n\\n    /// Make a issuer available for protocol\\n    function activateIssuer(address issuer) external {\\n        activateIssuer(issuer, issuer);\\n    }\\n\\n    /// Make issuer != token available for protocol (isol. margin)\\n    function activateIssuer(address issuer, address token)\\n        public\\n        onlyOwnerExecActivator\\n    {\\n        activeIssuers[issuer] = true;\\n        issuerTokens[issuer] = token;\\n    }\\n\\n    /// Remove a issuer from trading availability\\n    function deactivateIssuer(address issuer) external onlyOwnerExecActivator {\\n        activeIssuers[issuer] = false;\\n    }\\n\\n    /// Set lending cap\\n    function setLendingCap(address issuer, uint256 cap)\\n        external\\n        onlyOwnerExecActivator\\n    {\\n        lendingMeta[issuer].lendingCap = cap;\\n    }\\n\\n    /// Set lending buffer\\n    function setLendingBuffer(address issuer, uint256 buffer)\\n        external\\n        onlyOwnerExecActivator\\n    {\\n        lendingMeta[issuer].lendingBuffer = buffer;\\n    }\\n\\n    /// Set withdrawal window\\n    function setWithdrawalWindow(uint256 window) external onlyOwnerExec {\\n        withdrawalWindow = window;\\n    }\\n\\n    /// Set hourly yield APR for issuer\\n    function setHourlyYieldAPR(address issuer, uint256 aprPercent)\\n        external\\n        onlyOwnerExecActivator\\n    {\\n        HourlyBondMetadata storage bondMeta = hourlyBondMetadata[issuer];\\n\\n        if (bondMeta.yieldAccumulator.accumulatorFP == 0) {\\n            bondMeta.yieldAccumulator = YieldAccumulator({\\n                accumulatorFP: FP32,\\n                lastUpdated: block.timestamp,\\n                hourlyYieldFP: (FP32 * (100 + aprPercent)) / 100 / (24 * 365)\\n            });\\n            bondMeta.buyingSpeed = 1;\\n            bondMeta.withdrawingSpeed = 1;\\n            bondMeta.lastBought = block.timestamp;\\n            bondMeta.lastWithdrawn = block.timestamp;\\n        } else {\\n            YieldAccumulator storage yA =\\n                getUpdatedHourlyYield(issuer, bondMeta);\\n            yA.hourlyYieldFP = (FP32 * (100 + aprPercent)) / 100 / (24 * 365);\\n        }\\n    }\\n\\n    /// Set maximum hourly yield in floating point\\n    function setMaxHourlyYieldFP(uint256 maxYieldFP) external onlyOwnerExec {\\n        maxHourlyYieldFP = maxYieldFP;\\n    }\\n\\n    /// Set yield change per second in floating point\\n    function setYieldChangePerSecondFP(uint256 changePerSecondFP)\\n        external\\n        onlyOwnerExec\\n    {\\n        yieldChangePerSecondFP = changePerSecondFP;\\n    }\\n\\n    /// Set runtime yields in floating point\\n    function setRuntimeYieldsFP(address issuer, uint256[] memory yieldsFP)\\n        external\\n        onlyOwnerExec\\n    {\\n        BondBucketMetadata[] storage bondMetas = bondBucketMetadata[issuer];\\n        for (uint256 i; bondMetas.length > i; i++) {\\n            bondMetas[i].runtimeYieldFP = yieldsFP[i];\\n        }\\n    }\\n\\n    /// Set miniumum runtime\\n    function setMinRuntime(uint256 runtime) external onlyOwnerExec {\\n        require(runtime > 1 hours, \\\"Min runtime needs to be at least 1 hour\\\");\\n        require(\\n            maxRuntime > runtime,\\n            \\\"Min runtime must be smaller than max runtime\\\"\\n        );\\n        minRuntime = runtime;\\n    }\\n\\n    /// Set maximum runtime\\n    function setMaxRuntime(uint256 runtime) external onlyOwnerExec {\\n        require(\\n            runtime > minRuntime,\\n            \\\"Max runtime must be greater than min runtime\\\"\\n        );\\n        maxRuntime = runtime;\\n    }\\n\\n    /// Set runtime weights in floating point\\n    function setRuntimeWeights(address issuer, uint256[] memory weights)\\n        external\\n        onlyOwnerExecActivator\\n    {\\n        BondBucketMetadata[] storage bondMetas = bondBucketMetadata[issuer];\\n\\n        if (bondMetas.length == 0) {\\n            // we are initializing\\n\\n            uint256 hourlyYieldFP = (110 * FP32) / 100 / (24 * 365);\\n            uint256 bucketSize = diffMaxMinRuntime / weights.length;\\n\\n            for (uint256 i; weights.length > i; i++) {\\n                uint256 runtime = minRuntime + bucketSize * i;\\n                bondMetas.push(\\n                    BondBucketMetadata({\\n                        runtimeYieldFP: (hourlyYieldFP * runtime) / (1 hours),\\n                        lastBought: block.timestamp,\\n                        lastWithdrawn: block.timestamp,\\n                        yieldLastUpdated: block.timestamp,\\n                        buyingSpeed: 1,\\n                        withdrawingSpeed: 1,\\n                        runtimeWeight: weights[i],\\n                        totalLending: 0\\n                    })\\n                );\\n            }\\n        } else {\\n            require(\\n                weights.length == bondMetas.length,\\n                \\\"Weights don't match buckets\\\"\\n            );\\n            for (uint256 i; weights.length > i; i++) {\\n                bondMetas[i].runtimeWeight = weights[i];\\n            }\\n        }\\n    }\\n\\n    /// @dev how much interest has accrued to a borrowed balance over time\\n    function applyBorrowInterest(\\n        uint256 balance,\\n        address issuer,\\n        uint256 yieldQuotientFP\\n    ) external returns (uint256 balanceWithInterest) {\\n        require(isBorrower(msg.sender), \\\"Not an approved borrower\\\");\\n\\n        YieldAccumulator storage yA = borrowYieldAccumulators[issuer];\\n        balanceWithInterest = applyInterest(\\n            balance,\\n            yA.accumulatorFP,\\n            yieldQuotientFP\\n        );\\n\\n        uint256 deltaAmount = balanceWithInterest - balance;\\n        LendingMetadata storage meta = lendingMeta[issuer];\\n        meta.totalBorrowed += deltaAmount;\\n    }\\n\\n    /// @dev view function to get current borrowing interest\\n    function viewBorrowInterest(\\n        uint256 balance,\\n        address issuer,\\n        uint256 yieldQuotientFP\\n    ) external view returns (uint256) {\\n        uint256 accumulatorFP =\\n            viewCumulativeYieldFP(\\n                borrowYieldAccumulators[issuer],\\n                block.timestamp\\n            );\\n        return applyInterest(balance, accumulatorFP, yieldQuotientFP);\\n    }\\n\\n    /// @dev gets called by router to register if a trader borrows issuers\\n    function registerBorrow(address issuer, uint256 amount) external {\\n        require(isBorrower(msg.sender), \\\"Not an approved borrower\\\");\\n        require(activeIssuers[issuer], \\\"Not an approved issuer\\\");\\n\\n        LendingMetadata storage meta = lendingMeta[issuer];\\n        meta.totalBorrowed += amount;\\n        require(\\n            meta.totalLending >= meta.totalBorrowed,\\n            \\\"Insufficient capital to lend, try again later!\\\"\\n        );\\n    }\\n\\n    /// @dev gets called by router if loan is extinguished\\n    function payOff(address issuer, uint256 amount) external {\\n        require(isBorrower(msg.sender), \\\"Not an approved borrower\\\");\\n        lendingMeta[issuer].totalBorrowed -= amount;\\n    }\\n\\n    /// @dev get the borrow yield\\n    function viewBorrowingYieldFP(address issuer)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return\\n            viewCumulativeYieldFP(\\n                borrowYieldAccumulators[issuer],\\n                block.timestamp\\n            );\\n    }\\n\\n    /// @dev In a liquidity crunch make a fallback bond until liquidity is good again\\n    function _makeFallbackBond(\\n        address issuer,\\n        address holder,\\n        uint256 amount\\n    ) internal override {\\n        _makeHourlyBond(issuer, holder, amount);\\n    }\\n\\n    /// @dev withdraw an hour bond\\n    function withdrawHourlyBond(address issuer, uint256 amount) external {\\n        HourlyBond storage bond = hourlyBondAccounts[issuer][msg.sender];\\n        // apply all interest\\n        updateHourlyBondAmount(issuer, bond);\\n        super._withdrawHourlyBond(issuer, bond, amount);\\n\\n        if (bond.amount == 0) {\\n            delete hourlyBondAccounts[issuer][msg.sender];\\n        }\\n\\n        disburse(issuer, msg.sender, amount);\\n\\n        withdrawClaim(msg.sender, issuer, amount);\\n    }\\n\\n    /// Shut down hourly bond account for `issuer`\\n    function closeHourlyBondAccount(address issuer) external {\\n        HourlyBond storage bond = hourlyBondAccounts[issuer][msg.sender];\\n        // apply all interest\\n        updateHourlyBondAmount(issuer, bond);\\n\\n        uint256 amount = bond.amount;\\n        super._withdrawHourlyBond(issuer, bond, amount);\\n\\n        disburse(issuer, msg.sender, amount);\\n\\n        delete hourlyBondAccounts[issuer][msg.sender];\\n\\n        withdrawClaim(msg.sender, issuer, amount);\\n    }\\n\\n    /// @dev buy hourly bond subscription\\n    function buyHourlyBondSubscription(address issuer, uint256 amount)\\n        external\\n    {\\n        require(activeIssuers[issuer], \\\"Not an approved issuer\\\");\\n\\n        LendingMetadata storage meta = lendingMeta[issuer];\\n        if (lendingTarget(meta) >= meta.totalLending + amount) {\\n            collectToken(issuer, msg.sender, amount);\\n\\n            super._makeHourlyBond(issuer, msg.sender, amount);\\n\\n            stakeClaim(msg.sender, issuer, amount);\\n        }\\n    }\\n\\n    /// @dev buy fixed term bond that does not renew\\n    function buyBond(\\n        address issuer,\\n        uint256 runtime,\\n        uint256 amount,\\n        uint256 minReturn\\n    ) external returns (uint256 bondIndex) {\\n        require(activeIssuers[issuer], \\\"Not an approved issuer\\\");\\n\\n        LendingMetadata storage meta = lendingMeta[issuer];\\n        if (\\n            lendingTarget(meta) >= meta.totalLending + amount &&\\n            maxRuntime >= runtime &&\\n            runtime >= minRuntime\\n        ) {\\n            bondIndex = super._makeBond(\\n                msg.sender,\\n                issuer,\\n                runtime,\\n                amount,\\n                minReturn\\n            );\\n            if (bondIndex > 0) {\\n                Fund(fund()).depositFor(msg.sender, issuer, amount);\\n                bondIds[msg.sender].push(bondIndex);\\n\\n                collectToken(issuer, msg.sender, amount);\\n                stakeClaim(msg.sender, issuer, amount);\\n            }\\n        }\\n    }\\n\\n    /// @dev send back funds of bond after maturity\\n    function withdrawBond(uint256 bondId) external {\\n        Bond storage bond = bonds[bondId];\\n        require(msg.sender == bond.holder, \\\"Not holder of bond\\\");\\n        require(\\n            block.timestamp > bond.maturityTimestamp,\\n            \\\"bond is still immature\\\"\\n        );\\n        // in case of a shortfall, governance can step in to provide\\n        // additonal compensation beyond the usual incentive which\\n        // gets withdrawn here\\n        withdrawClaim(msg.sender, bond.issuer, bond.originalPrice);\\n\\n        uint256 withdrawAmount = super._withdrawBond(bondId, bond);\\n        disburse(bond.issuer, msg.sender, withdrawAmount);\\n    }\\n\\n    function initBorrowYieldAccumulator(address issuer)\\n        external\\n        onlyOwnerExecActivator\\n    {\\n        require(\\n            borrowYieldAccumulators[issuer].accumulatorFP == 0,\\n            \\\"trying to re-initialize yield accumulator\\\"\\n        );\\n\\n        borrowYieldAccumulators[issuer].accumulatorFP = FP32;\\n    }\\n\\n    function setBorrowingFactorPercent(uint256 borrowingFactor)\\n        external\\n        onlyOwnerExec\\n    {\\n        borrowingFactorPercent = borrowingFactor;\\n    }\\n\\n    function issuanceBalance(address issuer)\\n        internal\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        address token = issuerTokens[issuer];\\n        if (token == issuer) {\\n            // cross margin\\n            return IERC20(token).balanceOf(fund());\\n        } else {\\n            return lendingMeta[issuer].totalLending - haircuts[issuer];\\n        }\\n    }\\n\\n    function disburse(\\n        address issuer,\\n        address recipient,\\n        uint256 amount\\n    ) internal {\\n        uint256 haircutAmount = haircuts[issuer];\\n        if (haircutAmount > 0 && amount > 0) {\\n            uint256 totalLending = lendingMeta[issuer].totalLending;\\n            uint256 adjustment =\\n                (amount * min(totalLending, haircutAmount)) / totalLending;\\n            amount = amount - adjustment;\\n            haircuts[issuer] -= adjustment;\\n        }\\n\\n        address token = issuerTokens[issuer];\\n        Fund(fund()).withdraw(token, recipient, amount);\\n    }\\n\\n    function collectToken(\\n        address issuer,\\n        address source,\\n        uint256 amount\\n    ) internal {\\n        Fund(fund()).depositFor(source, issuer, amount);\\n    }\\n\\n    function haircut(uint256 amount) external {\\n        haircuts[msg.sender] += amount;\\n    }\\n}\\n\",\"keccak256\":\"0xf2fef7022574e3302bbb5a8cac21d1016ebf8b4ea45a0dd6e23e70617361c89e\",\"license\":\"BUSL-1.1\"},\"contracts/RoleAware.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Roles.sol\\\";\\n\\n/// @title Role management behavior\\n/// Main characters are for service discovery\\n/// Whereas roles are for access control\\ncontract RoleAware {\\n    Roles public immutable roles;\\n    mapping(uint256 => address) public mainCharacterCache;\\n    mapping(address => mapping(uint256 => bool)) public roleCache;\\n\\n    constructor(address _roles) {\\n        require(_roles != address(0), \\\"Please provide valid roles address\\\");\\n        roles = Roles(_roles);\\n    }\\n\\n    modifier noIntermediary() {\\n        require(\\n            msg.sender == tx.origin,\\n            \\\"Currently no intermediaries allowed for this function call\\\"\\n        );\\n        _;\\n    }\\n\\n    // @dev Throws if called by any account other than the owner or executor\\n    modifier onlyOwnerExec() {\\n        require(\\n            owner() == msg.sender || executor() == msg.sender,\\n            \\\"Roles: caller is not the owner\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyOwnerExecDisabler() {\\n        require(\\n            owner() == msg.sender ||\\n                executor() == msg.sender ||\\n                disabler() == msg.sender,\\n            \\\"Caller is not the owner, executor or authorized disabler\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyOwnerExecActivator() {\\n        require(\\n            owner() == msg.sender ||\\n                executor() == msg.sender ||\\n                isTokenActivator(msg.sender),\\n            \\\"Caller is not the owner, executor or authorized activator\\\"\\n        );\\n        _;\\n    }\\n\\n    function updateRoleCache(uint256 role, address contr) public virtual {\\n        roleCache[contr][role] = roles.getRole(role, contr);\\n    }\\n\\n    function updateMainCharacterCache(uint256 role) public virtual {\\n        mainCharacterCache[role] = roles.mainCharacters(role);\\n    }\\n\\n    function owner() internal view returns (address) {\\n        return roles.owner();\\n    }\\n\\n    function executor() internal returns (address) {\\n        return roles.executor();\\n    }\\n\\n    function disabler() internal view returns (address) {\\n        return mainCharacterCache[DISABLER];\\n    }\\n\\n    function fund() internal view returns (address) {\\n        return mainCharacterCache[FUND];\\n    }\\n\\n    function lending() internal view returns (address) {\\n        return mainCharacterCache[LENDING];\\n    }\\n\\n    function router() internal view returns (address) {\\n        return mainCharacterCache[ROUTER];\\n    }\\n\\n    function marginTrading() internal view returns (address) {\\n        return mainCharacterCache[MARGIN_TRADING];\\n    }\\n\\n    function feeController() internal view returns (address) {\\n        return mainCharacterCache[FEE_CONTROLLER];\\n    }\\n\\n    function price() internal view returns (address) {\\n        return mainCharacterCache[PRICE_CONTROLLER];\\n    }\\n\\n    function admin() internal view returns (address) {\\n        return mainCharacterCache[ADMIN];\\n    }\\n\\n    function incentiveDistributor() internal view returns (address) {\\n        return mainCharacterCache[INCENTIVE_DISTRIBUTION];\\n    }\\n\\n    function tokenAdmin() internal view returns (address) {\\n        return mainCharacterCache[TOKEN_ADMIN];\\n    }\\n\\n    function isBorrower(address contr) internal view returns (bool) {\\n        return roleCache[contr][BORROWER];\\n    }\\n\\n    function isFundTransferer(address contr) internal view returns (bool) {\\n        return roleCache[contr][FUND_TRANSFERER];\\n    }\\n\\n    function isMarginTrader(address contr) internal view returns (bool) {\\n        return roleCache[contr][MARGIN_TRADER];\\n    }\\n\\n    function isFeeSource(address contr) internal view returns (bool) {\\n        return roleCache[contr][FEE_SOURCE];\\n    }\\n\\n    function isMarginCaller(address contr) internal view returns (bool) {\\n        return roleCache[contr][MARGIN_CALLER];\\n    }\\n\\n    function isLiquidator(address contr) internal view returns (bool) {\\n        return roleCache[contr][LIQUIDATOR];\\n    }\\n\\n    function isAuthorizedFundTrader(address contr)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return roleCache[contr][AUTHORIZED_FUND_TRADER];\\n    }\\n\\n    function isIncentiveReporter(address contr) internal view returns (bool) {\\n        return roleCache[contr][INCENTIVE_REPORTER];\\n    }\\n\\n    function isTokenActivator(address contr) internal view returns (bool) {\\n        return roleCache[contr][TOKEN_ACTIVATOR];\\n    }\\n\\n    function isStakePenalizer(address contr) internal view returns (bool) {\\n        return roles.getRole(STAKE_PENALIZER, contr);\\n    }\\n}\\n\",\"keccak256\":\"0xbec30bf7e21852f2d60e7175c676fded93b67ca9f8347a0dbd437c07fbb5aa56\",\"license\":\"BUSL-1.1\"},\"contracts/Roles.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../interfaces/IDependencyController.sol\\\";\\n\\n// we chose not to go with an enum\\n// to make this list easy to extend\\nuint256 constant FUND_TRANSFERER = 1;\\nuint256 constant MARGIN_CALLER = 2;\\nuint256 constant BORROWER = 3;\\nuint256 constant MARGIN_TRADER = 4;\\nuint256 constant FEE_SOURCE = 5;\\nuint256 constant LIQUIDATOR = 6;\\nuint256 constant AUTHORIZED_FUND_TRADER = 7;\\nuint256 constant INCENTIVE_REPORTER = 8;\\nuint256 constant TOKEN_ACTIVATOR = 9;\\nuint256 constant STAKE_PENALIZER = 10;\\n\\nuint256 constant FUND = 101;\\nuint256 constant LENDING = 102;\\nuint256 constant ROUTER = 103;\\nuint256 constant MARGIN_TRADING = 104;\\nuint256 constant FEE_CONTROLLER = 105;\\nuint256 constant PRICE_CONTROLLER = 106;\\nuint256 constant ADMIN = 107;\\nuint256 constant INCENTIVE_DISTRIBUTION = 108;\\nuint256 constant TOKEN_ADMIN = 109;\\n\\nuint256 constant DISABLER = 1001;\\nuint256 constant DEPENDENCY_CONTROLLER = 1002;\\n\\n/// @title Manage permissions of contracts and ownership of everything\\n/// owned by a multisig wallet (0xEED9D1c6B4cdEcB3af070D85bfd394E7aF179CBd) during\\n/// beta and will then be transfered to governance\\n/// https://github.com/marginswap/governance\\ncontract Roles is Ownable {\\n    mapping(address => mapping(uint256 => bool)) public roles;\\n    mapping(uint256 => address) public mainCharacters;\\n\\n    constructor() Ownable() {\\n        // token activation from the get-go\\n        roles[msg.sender][TOKEN_ACTIVATOR] = true;\\n    }\\n\\n    /// @dev Throws if called by any account other than the owner.\\n    modifier onlyOwnerExecDepController() {\\n        require(\\n            owner() == msg.sender ||\\n                executor() == msg.sender ||\\n                mainCharacters[DEPENDENCY_CONTROLLER] == msg.sender,\\n            \\\"Roles: caller is not the owner\\\"\\n        );\\n        _;\\n    }\\n\\n    function giveRole(uint256 role, address actor)\\n        external\\n        onlyOwnerExecDepController\\n    {\\n        roles[actor][role] = true;\\n    }\\n\\n    function removeRole(uint256 role, address actor)\\n        external\\n        onlyOwnerExecDepController\\n    {\\n        roles[actor][role] = false;\\n    }\\n\\n    function setMainCharacter(uint256 role, address actor)\\n        external\\n        onlyOwnerExecDepController\\n    {\\n        mainCharacters[role] = actor;\\n    }\\n\\n    function getRole(uint256 role, address contr) external view returns (bool) {\\n        return roles[contr][role];\\n    }\\n\\n    /// @dev current executor\\n    function executor() public returns (address exec) {\\n        address depController = mainCharacters[DEPENDENCY_CONTROLLER];\\n        if (depController != address(0)) {\\n            exec = IDependencyController(depController).currentExecutor();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa97fcedfdf7d432ed60b49d499292200056d588200784aa412ca424c9213c55f\",\"license\":\"BUSL-1.1\"},\"interfaces/IDependencyController.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\ninterface IDependencyController {\\n    function currentExecutor() external returns (address);\\n}\\n\",\"keccak256\":\"0xc65a455a81ab4bc8e0737d03691c159f28bfd6885ef8b99ddd8dec558ccfeb32\",\"license\":\"BUSL-1.1\"},\"interfaces/IWETH.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function withdraw(uint256) external;\\n}\\n\",\"keccak256\":\"0xf85de70a597a9f21052bd1ad25c755cda197102f4aebdb3c3c20f2405bd7442b\"}},\"version\":1}",
  "bytecode": "0x60a060405261025860075560c860095562278d00600a556301e13380600b5560016010553480156200003057600080fd5b5060405162003db838038062003db883398101604081905262000053916200012d565b806001600160a01b038116620000ba5760405162461bcd60e51b815260206004820152602260248201527f506c656173652070726f766964652076616c696420726f6c6573206164647265604482015261737360f01b606482015260840160405180910390fd5b60601b6001600160601b0319166080526103836122386064620000e3836401000000006200017e565b620000ef91906200015d565b620000fb91906200015d565b60045560036103e862000114826401000000006200017e565b6200012091906200015d565b60055550620001aa915050565b6000602082840312156200013f578081fd5b81516001600160a01b038116811462000156578182fd5b9392505050565b6000826200017957634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615620001a557634e487b7160e01b81526011600452602481fd5b500290565b60805160601c613bd3620001e5600039600081816104c50152818161097501528181610f4501528181612e0a0152612ea20152613bd36000f3fe608060405234801561001057600080fd5b506004361061036d5760003560e01c80637d34e405116101d3578063cd3b5dfb11610104578063ebc22731116100a2578063ef2cd3b81161007c578063ef2cd3b814610904578063f11f979514610917578063f884614b14610920578063f90889c9146109335761036d565b8063ebc22731146108cb578063ebe64bcc146108de578063ee0862bf146108f15761036d565b8063d4437dd8116100de578063d4437dd814610869578063e5ea66061461087c578063e695fa681461088f578063e9c3f77d146108a25761036d565b8063cd3b5dfb1461081e578063d19bd0a71461084d578063d2b48934146108565761036d565b8063a772404b11610171578063b8139c6d1161014b578063b8139c6d146107dc578063c3daab96146107e5578063c94426a0146107f8578063cc4b26a31461080b5761036d565b8063a772404b14610769578063aa7e321d1461077c578063ad037af6146107855761036d565b80638824cbba116101ad5780638824cbba1461071a57806391b46e051461073a5780639229e73f1461074d578063a387832f146107565761036d565b80637d34e4051461069f578063803a99b7146106b257806383a04229146106c55761036d565b8063447d52ba116102ad578063687680ed1161024b578063797384b211610225578063797384b2146106185780637a0091351461064b5780637a1a04df1461065e5780637b8b4ee21461068c5761036d565b8063687680ed146105e95780636e60e249146105fc578063773bbb3b1461060f5761036d565b806358d51f911161028757806358d51f91146105205780635f1c17c01461052957806364f85ab1146105c057806367e2de92146105e05761036d565b8063447d52ba146104e75780634804dd34146104fa5780634b86daab1461050d5761036d565b8063267031b81161031a5780632864f401116102f45780632864f401146104875780632a6a897b1461049a57806336953912146104ad578063392f5f64146104c05761036d565b8063267031b8146103ef57806326e0b353146103f857806328108026146104465761036d565b80630f7c43dc1161034b5780630f7c43dc146103b6578063117b2630146103c957806316de7a43146103dc5761036d565b8063071060a6146103725780630b550546146103875780630bba92b3146103a3575b600080fd5b6103856103803660046139ee565b610946565b005b610390600c5481565b6040519081526020015b60405180910390f35b6103906103b136600461392e565b610a3d565b6103856103c4366004613903565b610b27565b6103906103d7366004613799565b610bb2565b6103856103ea366004613903565b610bdc565b61039060095481565b61040b610406366004613903565b610c9d565b604080519889526020890197909752958701949094526060860192909252608085015260a084015260c083015260e08201526101000161039a565b61046f610454366004613799565b6013602052600090815260409020546001600160a01b031681565b6040516001600160a01b03909116815260200161039a565b61038561049536600461399c565b610d02565b6103856104a8366004613903565b610de9565b6103856104bb3660046139ee565b610e88565b61046f7f000000000000000000000000000000000000000000000000000000000000000081565b6103856104f5366004613a1e565b610f06565b6103856105083660046139ee565b611015565b61038561051b366004613799565b611093565b610390600d5481565b6105806105373660046139ee565b600e6020526000908152604090208054600182015460028301546003840154600485015460058601546006909601546001600160a01b0395861696959094169492939192909187565b604080516001600160a01b039889168152979096166020880152948601939093526060850191909152608084015260a083015260c082015260e00161039a565b6103906105ce366004613799565b60146020526000908152604090205481565b61039060045481565b6103906105f7366004613a42565b6110a0565b61039061060a3660046137d8565b6110da565b610390600a5481565b61063b610626366004613799565b60156020526000908152604090205460ff1681565b604051901515815260200161039a565b610385610659366004613799565b611165565b61063b61066c366004613903565b600160209081526000928352604080842090915290825290205460ff1681565b61039061069a366004613962565b611269565b6103856106ad366004613810565b611431565b6103856106c03660046139ee565b611541565b6106ff6106d33660046137d8565b600860209081526000928352604080842090915290825290208054600182015460029092015490919083565b6040805193845260208401929092529082015260600161039a565b610390610728366004613799565b60116020526000908152604090205481565b6103856107483660046139ee565b6116ad565b610390600b5481565b610385610764366004613903565b61172b565b610385610777366004613810565b611810565b61039060105481565b6107bc610793366004613799565b600260208190526000918252604090912080546001820154928201546003909201549092919084565b60408051948552602085019390935291830152606082015260800161039a565b61039061271081565b6103856107f33660046139ee565b611b1f565b6103856108063660046139ee565b611c22565b610385610819366004613799565b611ca0565b6106ff61082c366004613799565b60036020526000908152604090208054600182015460029092015490919083565b61039060075481565b610385610864366004613903565b611e12565b6103856108773660046139ee565b611ef6565b61039061088a366004613799565b611f1d565b61039061089d366004613a42565b611f3f565b61046f6108b03660046139ee565b6000602081905290815260409020546001600160a01b031681565b6103856108d93660046139ee565b61201f565b6103856108ec3660046137d8565b612114565b6103856108ff366004613903565b612254565b610390610912366004613903565b6123d4565b61039060055481565b61038561092e366004613799565b612405565b610385610941366004613903565b612489565b6040517fb4ed0b6d000000000000000000000000000000000000000000000000000000008152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063b4ed0b6d9060240160206040518083038186803b1580156109bf57600080fd5b505afa1580156109d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109f791906137bc565b60009182526020829052604090912080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03909216919091179055565b600080610a4a8585612641565b90506000610b0186600f6000896001600160a01b03166001600160a01b031681526020019081526020016000208481548110610a9657634e487b7160e01b600052603260045260246000fd5b90600052602060002090600802016006015486610ab39190613a79565b6001600160a01b0389166000908152600f60205260409020805489919087908110610aee57634e487b7160e01b600052603260045260246000fd5b906000526020600020906008020161268b565b9050640100000000610b138583613aa5565b610b1d9190613a91565b9695505050505050565b6001600160a01b03821660009081526008602090815260408083203384529091529020610b548382612790565b610b5f83828461281d565b8054610b97576001600160a01b0383166000908152600860209081526040808320338452909152812081815560018101829055600201555b610ba2833384612944565b610bad338484612ace565b505050565b6001600160a01b0381166000908152600260205260408120610bd381612bac565b9150505b919050565b6001600160a01b03821660009081526015602052604090205460ff16610c495760405162461bcd60e51b815260206004820152601660248201527f4e6f7420616e20617070726f766564206973737565720000000000000000000060448201526064015b60405180910390fd5b6001600160a01b03821660009081526002602052604090208054610c6e908390613a79565b610c7782612bac565b10610bad57610c87833384612bcf565b610c92833384612c8e565b610bad338484612d5c565b600f6020528160005260406000208181548110610cb957600080fd5b9060005260206000209060080201600091509150508060000154908060010154908060020154908060030154908060040154908060050154908060060154908060070154905088565b33610d0b612e06565b6001600160a01b03161480610d2f575033610d24612e9e565b6001600160a01b0316145b80610d5557503360009081526001602090815260408083206009845290915290205460ff165b610dc75760405162461bcd60e51b815260206004820152603960248201527f43616c6c6572206973206e6f7420746865206f776e65722c206578656375746f60448201527f72206f7220617574686f72697a656420616374697661746f72000000000000006064820152608401610c40565b6001600160a01b03909116600090815260116020526040902060ff9091169055565b3360009081526001602090815260408083206003845290915290205460ff16610e545760405162461bcd60e51b815260206004820152601860248201527f4e6f7420616e20617070726f76656420626f72726f77657200000000000000006044820152606401610c40565b6001600160a01b03821660009081526002602052604081206001018054839290610e7f908490613ae2565b90915550505050565b33610e91612e06565b6001600160a01b03161480610eb5575033610eaa612e9e565b6001600160a01b0316145b610f015760405162461bcd60e51b815260206004820152601e60248201527f526f6c65733a2063616c6c6572206973206e6f7420746865206f776e657200006044820152606401610c40565b600755565b6040517f93552a3d000000000000000000000000000000000000000000000000000000008152600481018390526001600160a01b0382811660248301527f000000000000000000000000000000000000000000000000000000000000000016906393552a3d9060440160206040518083038186803b158015610f8757600080fd5b505afa158015610f9b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fbf91906139ce565b6001600160a01b039190911660009081526001602090815260408083209483529390529190912080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055565b3361101e612e06565b6001600160a01b03161480611042575033611037612e9e565b6001600160a01b0316145b61108e5760405162461bcd60e51b815260206004820152601e60248201527f526f6c65733a2063616c6c6572206973206e6f7420746865206f776e657200006044820152606401610c40565b600455565b61109d8182612114565b50565b6001600160a01b038216600090815260036020526040812081906110c49042612f0f565b90506110d1858285612f2e565b95945050505050565b6001600160a01b0380831660008181526008602090815260408083209486168352938152838220600181015493835260069091529281209092919083906111219042612f0f565b9050811561114c578254611136908284612f2e565b83546111429190613a79565b935050505061115f565b8254611159906000613a79565b93505050505b92915050565b3361116e612e06565b6001600160a01b03161480611192575033611187612e9e565b6001600160a01b0316145b806111b857503360009081526001602090815260408083206009845290915290205460ff165b61122a5760405162461bcd60e51b815260206004820152603960248201527f43616c6c6572206973206e6f7420746865206f776e65722c206578656375746f60448201527f72206f7220617574686f72697a656420616374697661746f72000000000000006064820152608401610c40565b6001600160a01b0316600090815260156020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055565b6001600160a01b03841660009081526015602052604081205460ff166112d15760405162461bcd60e51b815260206004820152601660248201527f4e6f7420616e20617070726f76656420697373756572000000000000000000006044820152606401610c40565b6001600160a01b038516600090815260026020526040902080546112f6908590613a79565b6112ff82612bac565b1015801561130f575084600b5410155b801561131d5750600a548510155b156114285761132f3387878787612f3b565b9150811561142857606560009081526020527f4a7203f705e51df4a56139a9b86b4a0970bed7ab7a3446eaffe2289989c1645c546001600160a01b03166040517fb3db428b0000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b03888116602483015260448201879052919091169063b3db428b90606401600060405180830381600087803b1580156113d757600080fd5b505af11580156113eb573d6000803e3d6000fd5b50503360008181526012602090815260408220805460018101825590835291200185905561141d925088915086612bcf565b611428338786612d5c565b50949350505050565b3361143a612e06565b6001600160a01b0316148061145e575033611453612e9e565b6001600160a01b0316145b6114aa5760405162461bcd60e51b815260206004820152601e60248201527f526f6c65733a2063616c6c6572206973206e6f7420746865206f776e657200006044820152606401610c40565b6001600160a01b0382166000908152600f60205260408120905b815481101561153b578281815181106114ed57634e487b7160e01b600052603260045260246000fd5b602002602001015182828154811061151557634e487b7160e01b600052603260045260246000fd5b60009182526020909120600760089092020101558061153381613af9565b9150506114c4565b50505050565b3361154a612e06565b6001600160a01b0316148061156e575033611563612e9e565b6001600160a01b0316145b6115ba5760405162461bcd60e51b815260206004820152601e60248201527f526f6c65733a2063616c6c6572206973206e6f7420746865206f776e657200006044820152606401610c40565b610e1081116116315760405162461bcd60e51b815260206004820152602760248201527f4d696e2072756e74696d65206e6565647320746f206265206174206c6561737460448201527f203120686f7572000000000000000000000000000000000000000000000000006064820152608401610c40565b80600b54116116a85760405162461bcd60e51b815260206004820152602c60248201527f4d696e2072756e74696d65206d75737420626520736d616c6c6572207468616e60448201527f206d61782072756e74696d6500000000000000000000000000000000000000006064820152608401610c40565b600a55565b336116b6612e06565b6001600160a01b031614806116da5750336116cf612e9e565b6001600160a01b0316145b6117265760405162461bcd60e51b815260206004820152601e60248201527f526f6c65733a2063616c6c6572206973206e6f7420746865206f776e657200006044820152606401610c40565b600955565b33611734612e06565b6001600160a01b0316148061175857503361174d612e9e565b6001600160a01b0316145b8061177e57503360009081526001602090815260408083206009845290915290205460ff165b6117f05760405162461bcd60e51b815260206004820152603960248201527f43616c6c6572206973206e6f7420746865206f776e65722c206578656375746f60448201527f72206f7220617574686f72697a656420616374697661746f72000000000000006064820152608401610c40565b6001600160a01b0390911660009081526002602081905260409091200155565b33611819612e06565b6001600160a01b0316148061183d575033611832612e9e565b6001600160a01b0316145b8061186357503360009081526001602090815260408083206009845290915290205460ff165b6118d55760405162461bcd60e51b815260206004820152603960248201527f43616c6c6572206973206e6f7420746865206f776e65722c206578656375746f60448201527f72206f7220617574686f72697a656420616374697661746f72000000000000006064820152608401610c40565b6001600160a01b0382166000908152600f602052604090208054611a57576000612238606461190a640100000000606e613aa5565b6119149190613a91565b61191e9190613a91565b905060008351600c546119319190613a91565b905060005b8085511115611a4f57600061194b8284613aa5565b600a546119589190613a79565b90508460405180610100016040528088858151811061198757634e487b7160e01b600052603260045260246000fd5b60200260200101518152602001600181526020014281526020016001815260200142815260200142815260200160008152602001610e1084886119ca9190613aa5565b6119d49190613a91565b905281546001818101845560009384526020938490208351600890930201918255928201519281019290925560408101516002830155606081015160038301556080810151600483015560a0810151600583015560c0810151600683015560e001516007909101555080611a4781613af9565b915050611936565b505050610bad565b8054825114611aa85760405162461bcd60e51b815260206004820152601b60248201527f5765696768747320646f6e2774206d61746368206275636b65747300000000006044820152606401610c40565b60005b808351111561153b57828181518110611ad457634e487b7160e01b600052603260045260246000fd5b6020026020010151828281548110611afc57634e487b7160e01b600052603260045260246000fd5b600091825260209091206008909102015580611b1781613af9565b915050611aab565b6000818152600e6020526040902080546001600160a01b03163314611b865760405162461bcd60e51b815260206004820152601260248201527f4e6f7420686f6c646572206f6620626f6e6400000000000000000000000000006044820152606401610c40565b80600401544211611bd95760405162461bcd60e51b815260206004820152601660248201527f626f6e64206973207374696c6c20696d6d6174757265000000000000000000006044820152606401610c40565b60018101546002820154611bfa9133916001600160a01b0390911690612ace565b6000611c068383613158565b6001830154909150610bad906001600160a01b03163383612944565b33611c2b612e06565b6001600160a01b03161480611c4f575033611c44612e9e565b6001600160a01b0316145b611c9b5760405162461bcd60e51b815260206004820152601e60248201527f526f6c65733a2063616c6c6572206973206e6f7420746865206f776e657200006044820152606401610c40565b600555565b33611ca9612e06565b6001600160a01b03161480611ccd575033611cc2612e9e565b6001600160a01b0316145b80611cf357503360009081526001602090815260408083206009845290915290205460ff165b611d655760405162461bcd60e51b815260206004820152603960248201527f43616c6c6572206973206e6f7420746865206f776e65722c206578656375746f60448201527f72206f7220617574686f72697a656420616374697661746f72000000000000006064820152608401610c40565b6001600160a01b03811660009081526003602052604090205415611df15760405162461bcd60e51b815260206004820152602960248201527f747279696e6720746f2072652d696e697469616c697a65207969656c6420616360448201527f63756d756c61746f7200000000000000000000000000000000000000000000006064820152608401610c40565b6001600160a01b031660009081526003602052604090206401000000009055565b33611e1b612e06565b6001600160a01b03161480611e3f575033611e34612e9e565b6001600160a01b0316145b80611e6557503360009081526001602090815260408083206009845290915290205460ff165b611ed75760405162461bcd60e51b815260206004820152603960248201527f43616c6c6572206973206e6f7420746865206f776e65722c206578656375746f60448201527f72206f7220617574686f72697a656420616374697661746f72000000000000006064820152608401610c40565b6001600160a01b03909116600090815260026020526040902060030155565b3360009081526014602052604081208054839290611f15908490613a79565b909155505050565b6001600160a01b038116600090815260036020526040812061115f9042612f0f565b3360009081526001602090815260408083206003845290915281205460ff16611faa5760405162461bcd60e51b815260206004820152601860248201527f4e6f7420616e20617070726f76656420626f72726f77657200000000000000006044820152606401610c40565b6001600160a01b03831660009081526003602052604090208054611fd090869085612f2e565b91506000611fde8684613ae2565b6001600160a01b0386166000908152600260205260408120600181018054939450909284929061200f908490613a79565b9091555093979650505050505050565b33612028612e06565b6001600160a01b0316148061204c575033612041612e9e565b6001600160a01b0316145b6120985760405162461bcd60e51b815260206004820152601e60248201527f526f6c65733a2063616c6c6572206973206e6f7420746865206f776e657200006044820152606401610c40565b600a54811161210f5760405162461bcd60e51b815260206004820152602c60248201527f4d61782072756e74696d65206d7573742062652067726561746572207468616e60448201527f206d696e2072756e74696d6500000000000000000000000000000000000000006064820152608401610c40565b600b55565b3361211d612e06565b6001600160a01b03161480612141575033612136612e9e565b6001600160a01b0316145b8061216757503360009081526001602090815260408083206009845290915290205460ff165b6121d95760405162461bcd60e51b815260206004820152603960248201527f43616c6c6572206973206e6f7420746865206f776e65722c206578656375746f60448201527f72206f7220617574686f72697a656420616374697661746f72000000000000006064820152608401610c40565b6001600160a01b03918216600090815260156020908152604080832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055601390915290208054919092167fffffffffffffffffffffffff0000000000000000000000000000000000000000909116179055565b3360009081526001602090815260408083206003845290915290205460ff166122bf5760405162461bcd60e51b815260206004820152601860248201527f4e6f7420616e20617070726f76656420626f72726f77657200000000000000006044820152606401610c40565b6001600160a01b03821660009081526015602052604090205460ff166123275760405162461bcd60e51b815260206004820152601660248201527f4e6f7420616e20617070726f76656420697373756572000000000000000000006044820152606401610c40565b6001600160a01b038216600090815260026020526040812060018101805491928492612354908490613a79565b9091555050600181015481541015610bad5760405162461bcd60e51b815260206004820152602e60248201527f496e73756666696369656e74206361706974616c20746f206c656e642c20747260448201527f7920616761696e206c61746572210000000000000000000000000000000000006064820152608401610c40565b601260205281600052604060002081815481106123f057600080fd5b90600052602060002001600091509150505481565b6001600160a01b038116600090815260086020908152604080832033845290915290206124328282612790565b805461243f83838361281d565b61244a833383612944565b6001600160a01b038316600090815260086020908152604080832033808552925282208281556001810183905560020191909155610bad908483612ace565b33612492612e06565b6001600160a01b031614806124b65750336124ab612e9e565b6001600160a01b0316145b806124dc57503360009081526001602090815260408083206009845290915290205460ff165b61254e5760405162461bcd60e51b815260206004820152603960248201527f43616c6c6572206973206e6f7420746865206f776e65722c206578656375746f60448201527f72206f7220617574686f72697a656420616374697661746f72000000000000006064820152608401610c40565b6001600160a01b038216600090815260066020526040902080546125f65760408051606081018252640100000000815242602082015290810161223860646125968682613a79565b6125a590640100000000613aa5565b6125af9190613a91565b6125b99190613a91565b9052805182556020810151600180840191909155604090910151600283015560038201819055600482015542600582018190556006820155610bad565b6000612602848361336b565b905061223860646126138582613a79565b61262290640100000000613aa5565b61262c9190613a91565b6126369190613a91565b600290910155505050565b6001600160a01b0382166000908152600f6020526040812054600c54829161266891613a91565b905080600a54846126799190613ae2565b6126839190613a91565b949350505050565b60008082600601548561269e9190613a79565b600784015460058501546001600160a01b03891660009081526002602052604081208754939650939450909291612710906126d884612bac565b6126e29190613aa5565b6126ec9190613a91565b6001808801546003808a01546001600160a01b038e166000908152602092909252604082208754959650929490936127249190613a79565b866001015483600201546127389190613aa5565b6127429190613a91565b9050600061275260045483613483565b90506000612762610e108e613a91565b61276c9083613aa5565b905061277d8b8a8c8a8a8a8761349b565b9f9e505050505050505050505050505050565b60018101548015610bad576001600160a01b03831660009081526006602052604081206127be90859061336b565b83548154919250906127d290829085612f2e565b8085556000906127e3908390613ae2565b6001600160a01b038716600090815260026020526040812080549293508392909190612810908490613a79565b9091555050505050505050565b6000610e108360020154426128329190613ae2565b61283c9190613b32565b90508060075410156128b65760405162461bcd60e51b815260206004820152603f60248201527f5472696564207769746864726177696e67206f7574736964652073756273637260448201527f697074696f6e2063616e63656c6c6174696f6e2074696d652077696e646f77006064820152608401610c40565b818360000160008282546128ca9190613ae2565b90915550506001600160a01b038416600090815260026020526040812080548492906128f7908490613ae2565b90915550506001600160a01b03841660009081526006602081905260409091206004810154918101548554919261293392909190610e10613510565b600683015560049091015550505050565b6001600160a01b038316600090815260146020526040902054801580159061296c5750600082115b156129eb576001600160a01b03841660009081526002602052604081205490816129968185613483565b6129a09086613aa5565b6129aa9190613a91565b90506129b68185613ae2565b6001600160a01b0387166000908152601460205260408120805492965083929091906129e3908490613ae2565b909155505050505b6001600160a01b0380851660009081526013602052604090205416612a41606560009081526020527f4a7203f705e51df4a56139a9b86b4a0970bed7ab7a3446eaffe2289989c1645c546001600160a01b031690565b6040517fd9caed120000000000000000000000000000000000000000000000000000000081526001600160a01b038381166004830152868116602483015260448201869052919091169063d9caed12906064015b600060405180830381600087803b158015612aaf57600080fd5b505af1158015612ac3573d6000803e3d6000fd5b505050505050505050565b6001600160a01b038216600090815260116020526040902054612b22606c60009081526020527f3c1fcba39712202dbd455253568bf32dd0a3bedb5c3ff0de4b22d4e45e50dc92546001600160a01b031690565b6040517fc6c9faa1000000000000000000000000000000000000000000000000000000008152600481018390526001600160a01b03868116602483015260448201859052919091169063c6c9faa190606401600060405180830381600087803b158015612b8e57600080fd5b505af1158015612ba2573d6000803e3d6000fd5b5050505050505050565b600061115f826003015483600201548460010154612bca9190613a79565b613483565b606560009081526020527f4a7203f705e51df4a56139a9b86b4a0970bed7ab7a3446eaffe2289989c1645c546001600160a01b03166040517fb3db428b0000000000000000000000000000000000000000000000000000000081526001600160a01b038481166004830152858116602483015260448201849052919091169063b3db428b90606401600060405180830381600087803b158015612c7157600080fd5b505af1158015612c85573d6000803e3d6000fd5b50505050505050565b6001600160a01b038084166000908152600860209081526040808320938616835292905220612cbd8482612790565b6001600160a01b038416600090815260066020526040902080546001830155612ce8610e1042613b32565b6002830155815483908390600090612d01908490613a79565b90915550506001600160a01b03851660009081526002602052604081208054859290612d2e908490613a79565b92505081905550612d4b8160030154826005015485610e10613510565b600583015560039091015550505050565b6000612d99606c60009081526020527f3c1fcba39712202dbd455253568bf32dd0a3bedb5c3ff0de4b22d4e45e50dc92546001600160a01b031690565b6001600160a01b03848116600090815260116020526040908190205490517f2b5de286000000000000000000000000000000000000000000000000000000008152600481018290528783166024820152604481018690529293509190831690632b5de28690606401612a95565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b158015612e6157600080fd5b505afa158015612e75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e9991906137bc565b905090565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c34c08e56040518163ffffffff1660e01b8152600401602060405180830381600087803b158015612efb57600080fd5b505af1158015612e75573d6000803e3d6000fd5b600080836001015483612f229190613ae2565b905061268384826135b0565b6000816126798486613aa5565b600080612f488686612641565b6001600160a01b0387166000908152600f602052604081208054929350909183908110612f8557634e487b7160e01b600052603260045260246000fd5b906000526020600020906008020190506000612fa38887898561268b565b90506000640100000000612fb78884613aa5565b612fc19190613a91565b905085811061314b5760006002612fd8838a613a79565b612fe29190613a91565b6001600160a01b038b1660009081526002602052604081208054929350839290919061300f908490613a79565b925050819055508084600601600082825461302a9190613a79565b90915550506010805496508690600061304283613af9565b91905055506040518060e001604052808c6001600160a01b031681526020018b6001600160a01b031681526020018981526020018381526020018a426130889190613a79565b815260208082018c905260409182018690526000898152600e8252829020835181546001600160a01b039182167fffffffffffffffffffffffff00000000000000000000000000000000000000009182161783559285015160018084018054929093169190941617905591830151600280840191909155606084015160038401556080840151600484015560a0840151600584015560c0909301516006909201919091558501549085015461313f91908a8c613510565b60028601556001850155505b5050505095945050505050565b600181015460058201546000916001600160a01b031690829061317c908390612641565b6001600160a01b0383166000908152600f6020526040812080549293509091839081106131b957634e487b7160e01b600052603260045260246000fd5b600091825260208220600388015488546002808b01546008909502909301955090936001600160a01b03909116929091906131f5908590613a79565b6131ff9190613a91565b6001600160a01b03871660009081526002602052604081208054929350918391839161322c908490613ae2565b92505081905550818560060160008282546132479190613ae2565b9250508190555061326a856003015486600401548b600201548c60050154613510565b60048088019190915560038088019290925560008c8152600e6020526040812080547fffffffffffffffffffffffff0000000000000000000000000000000000000000908116825560018281018054909216909155600282018390559381018290559182018190556005820181905560069091015581549082015411806132f85750836132f688613659565b105b1561335a57826001600160a01b0316876001600160a01b03167fbcab653cf73e12f7bb78aa625dccb002864f5de7de2518796fb5b82fd6e6ab058660405161334291815260200190565b60405180910390a361335587848661378e565b61335e565b8397505b5050505050505092915050565b6001810154819060009061337f9042613ae2565b905061338b82826135b0565b82556001600160a01b0384166000908152600260209081526040808320600390925282208154919290916133c0906001613a79565b836001015483600201546133d49190613aa5565b6133de9190613a91565b905060006133ee60045483613483565b905061341b86600201548760010154866000015461340b88612bac565b8b600301548c600401548761349b565b6002870155600183015461342f9042613ae2565b945061343b83866135b0565b8355600286015460095460649161345191613aa5565b61345b9190613a91565b613466906001613a79565b600284015550504260018086018290559091015550909392505050565b60008183111561349457508061115f565b508161115f565b8660006134a88842613ae2565b90506000600554826134ba9190613aa5565b905086881015806134cb5750848610155b156134eb576134da8382613483565b6134e49084613ae2565b9250613503565b6134f58184613a79565b925083831115613503578392505b5050979650505050505050565b6000808061351e8642613ae2565b9050600061352d826001613a79565b6135378688613aa5565b6135419190613a91565b90506000600361355387611c20613a79565b61355d9190613a91565b9050600061356c846001613a79565b90506135788183613a79565b6135828285613aa5565b61358c848d613aa5565b6135969190613a79565b6135a09190613a91565b9a429a5098505050505050505050565b6000806135bf610e1084613b32565b90506135d2640100000000610e10613aa5565b6002850154855483916135e491613aa5565b6135ee9190613aa5565b6135f89190613a91565b91506000613608610e1085613a91565b905080156136515760005b8082111561364f576401000000008660020154856136319190613aa5565b61363b9190613a91565b93508061364781613af9565b915050613613565b505b505092915050565b6001600160a01b038082166000818152601360205260408120549092169081141561375f57806001600160a01b03166370a082316136c8606560009081526020527f4a7203f705e51df4a56139a9b86b4a0970bed7ab7a3446eaffe2289989c1645c546001600160a01b031690565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b15801561371f57600080fd5b505afa158015613733573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137579190613a06565b915050610bd7565b6001600160a01b0383166000908152601460209081526040808320546002909252909120546137579190613ae2565b610bad838383612c8e565b6000602082840312156137aa578081fd5b81356137b581613b88565b9392505050565b6000602082840312156137cd578081fd5b81516137b581613b88565b600080604083850312156137ea578081fd5b82356137f581613b88565b9150602083013561380581613b88565b809150509250929050565b60008060408385031215613822578182fd5b823561382d81613b88565b915060208381013567ffffffffffffffff8082111561384a578384fd5b818601915086601f83011261385d578384fd5b81358181111561386f5761386f613b72565b8060051b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f830116810181811085821117156138b2576138b2613b72565b604052828152858101935084860182860187018b10156138d0578788fd5b8795505b838610156138f25780358552600195909501949386019386016138d4565b508096505050505050509250929050565b60008060408385031215613915578182fd5b823561392081613b88565b946020939093013593505050565b600080600060608486031215613942578081fd5b833561394d81613b88565b95602085013595506040909401359392505050565b60008060008060808587031215613977578081fd5b843561398281613b88565b966020860135965060408601359560600135945092505050565b600080604083850312156139ae578182fd5b82356139b981613b88565b9150602083013560ff81168114613805578182fd5b6000602082840312156139df578081fd5b815180151581146137b5578182fd5b6000602082840312156139ff578081fd5b5035919050565b600060208284031215613a17578081fd5b5051919050565b60008060408385031215613a30578182fd5b82359150602083013561380581613b88565b600080600060608486031215613a56578283fd5b833592506020840135613a6881613b88565b929592945050506040919091013590565b60008219821115613a8c57613a8c613b46565b500190565b600082613aa057613aa0613b5c565b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613add57613add613b46565b500290565b600082821015613af457613af4613b46565b500390565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613b2b57613b2b613b46565b5060010190565b600082613b4157613b41613b5c565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461109d57600080fdfea2646970667358221220323ce3319ac05b604b9785a352b483ef026081048e2bad2b02cc4ffc6351794a64736f6c63430008030033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061036d5760003560e01c80637d34e405116101d3578063cd3b5dfb11610104578063ebc22731116100a2578063ef2cd3b81161007c578063ef2cd3b814610904578063f11f979514610917578063f884614b14610920578063f90889c9146109335761036d565b8063ebc22731146108cb578063ebe64bcc146108de578063ee0862bf146108f15761036d565b8063d4437dd8116100de578063d4437dd814610869578063e5ea66061461087c578063e695fa681461088f578063e9c3f77d146108a25761036d565b8063cd3b5dfb1461081e578063d19bd0a71461084d578063d2b48934146108565761036d565b8063a772404b11610171578063b8139c6d1161014b578063b8139c6d146107dc578063c3daab96146107e5578063c94426a0146107f8578063cc4b26a31461080b5761036d565b8063a772404b14610769578063aa7e321d1461077c578063ad037af6146107855761036d565b80638824cbba116101ad5780638824cbba1461071a57806391b46e051461073a5780639229e73f1461074d578063a387832f146107565761036d565b80637d34e4051461069f578063803a99b7146106b257806383a04229146106c55761036d565b8063447d52ba116102ad578063687680ed1161024b578063797384b211610225578063797384b2146106185780637a0091351461064b5780637a1a04df1461065e5780637b8b4ee21461068c5761036d565b8063687680ed146105e95780636e60e249146105fc578063773bbb3b1461060f5761036d565b806358d51f911161028757806358d51f91146105205780635f1c17c01461052957806364f85ab1146105c057806367e2de92146105e05761036d565b8063447d52ba146104e75780634804dd34146104fa5780634b86daab1461050d5761036d565b8063267031b81161031a5780632864f401116102f45780632864f401146104875780632a6a897b1461049a57806336953912146104ad578063392f5f64146104c05761036d565b8063267031b8146103ef57806326e0b353146103f857806328108026146104465761036d565b80630f7c43dc1161034b5780630f7c43dc146103b6578063117b2630146103c957806316de7a43146103dc5761036d565b8063071060a6146103725780630b550546146103875780630bba92b3146103a3575b600080fd5b6103856103803660046139ee565b610946565b005b610390600c5481565b6040519081526020015b60405180910390f35b6103906103b136600461392e565b610a3d565b6103856103c4366004613903565b610b27565b6103906103d7366004613799565b610bb2565b6103856103ea366004613903565b610bdc565b61039060095481565b61040b610406366004613903565b610c9d565b604080519889526020890197909752958701949094526060860192909252608085015260a084015260c083015260e08201526101000161039a565b61046f610454366004613799565b6013602052600090815260409020546001600160a01b031681565b6040516001600160a01b03909116815260200161039a565b61038561049536600461399c565b610d02565b6103856104a8366004613903565b610de9565b6103856104bb3660046139ee565b610e88565b61046f7f000000000000000000000000000000000000000000000000000000000000000081565b6103856104f5366004613a1e565b610f06565b6103856105083660046139ee565b611015565b61038561051b366004613799565b611093565b610390600d5481565b6105806105373660046139ee565b600e6020526000908152604090208054600182015460028301546003840154600485015460058601546006909601546001600160a01b0395861696959094169492939192909187565b604080516001600160a01b039889168152979096166020880152948601939093526060850191909152608084015260a083015260c082015260e00161039a565b6103906105ce366004613799565b60146020526000908152604090205481565b61039060045481565b6103906105f7366004613a42565b6110a0565b61039061060a3660046137d8565b6110da565b610390600a5481565b61063b610626366004613799565b60156020526000908152604090205460ff1681565b604051901515815260200161039a565b610385610659366004613799565b611165565b61063b61066c366004613903565b600160209081526000928352604080842090915290825290205460ff1681565b61039061069a366004613962565b611269565b6103856106ad366004613810565b611431565b6103856106c03660046139ee565b611541565b6106ff6106d33660046137d8565b600860209081526000928352604080842090915290825290208054600182015460029092015490919083565b6040805193845260208401929092529082015260600161039a565b610390610728366004613799565b60116020526000908152604090205481565b6103856107483660046139ee565b6116ad565b610390600b5481565b610385610764366004613903565b61172b565b610385610777366004613810565b611810565b61039060105481565b6107bc610793366004613799565b600260208190526000918252604090912080546001820154928201546003909201549092919084565b60408051948552602085019390935291830152606082015260800161039a565b61039061271081565b6103856107f33660046139ee565b611b1f565b6103856108063660046139ee565b611c22565b610385610819366004613799565b611ca0565b6106ff61082c366004613799565b60036020526000908152604090208054600182015460029092015490919083565b61039060075481565b610385610864366004613903565b611e12565b6103856108773660046139ee565b611ef6565b61039061088a366004613799565b611f1d565b61039061089d366004613a42565b611f3f565b61046f6108b03660046139ee565b6000602081905290815260409020546001600160a01b031681565b6103856108d93660046139ee565b61201f565b6103856108ec3660046137d8565b612114565b6103856108ff366004613903565b612254565b610390610912366004613903565b6123d4565b61039060055481565b61038561092e366004613799565b612405565b610385610941366004613903565b612489565b6040517fb4ed0b6d000000000000000000000000000000000000000000000000000000008152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063b4ed0b6d9060240160206040518083038186803b1580156109bf57600080fd5b505afa1580156109d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109f791906137bc565b60009182526020829052604090912080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03909216919091179055565b600080610a4a8585612641565b90506000610b0186600f6000896001600160a01b03166001600160a01b031681526020019081526020016000208481548110610a9657634e487b7160e01b600052603260045260246000fd5b90600052602060002090600802016006015486610ab39190613a79565b6001600160a01b0389166000908152600f60205260409020805489919087908110610aee57634e487b7160e01b600052603260045260246000fd5b906000526020600020906008020161268b565b9050640100000000610b138583613aa5565b610b1d9190613a91565b9695505050505050565b6001600160a01b03821660009081526008602090815260408083203384529091529020610b548382612790565b610b5f83828461281d565b8054610b97576001600160a01b0383166000908152600860209081526040808320338452909152812081815560018101829055600201555b610ba2833384612944565b610bad338484612ace565b505050565b6001600160a01b0381166000908152600260205260408120610bd381612bac565b9150505b919050565b6001600160a01b03821660009081526015602052604090205460ff16610c495760405162461bcd60e51b815260206004820152601660248201527f4e6f7420616e20617070726f766564206973737565720000000000000000000060448201526064015b60405180910390fd5b6001600160a01b03821660009081526002602052604090208054610c6e908390613a79565b610c7782612bac565b10610bad57610c87833384612bcf565b610c92833384612c8e565b610bad338484612d5c565b600f6020528160005260406000208181548110610cb957600080fd5b9060005260206000209060080201600091509150508060000154908060010154908060020154908060030154908060040154908060050154908060060154908060070154905088565b33610d0b612e06565b6001600160a01b03161480610d2f575033610d24612e9e565b6001600160a01b0316145b80610d5557503360009081526001602090815260408083206009845290915290205460ff165b610dc75760405162461bcd60e51b815260206004820152603960248201527f43616c6c6572206973206e6f7420746865206f776e65722c206578656375746f60448201527f72206f7220617574686f72697a656420616374697661746f72000000000000006064820152608401610c40565b6001600160a01b03909116600090815260116020526040902060ff9091169055565b3360009081526001602090815260408083206003845290915290205460ff16610e545760405162461bcd60e51b815260206004820152601860248201527f4e6f7420616e20617070726f76656420626f72726f77657200000000000000006044820152606401610c40565b6001600160a01b03821660009081526002602052604081206001018054839290610e7f908490613ae2565b90915550505050565b33610e91612e06565b6001600160a01b03161480610eb5575033610eaa612e9e565b6001600160a01b0316145b610f015760405162461bcd60e51b815260206004820152601e60248201527f526f6c65733a2063616c6c6572206973206e6f7420746865206f776e657200006044820152606401610c40565b600755565b6040517f93552a3d000000000000000000000000000000000000000000000000000000008152600481018390526001600160a01b0382811660248301527f000000000000000000000000000000000000000000000000000000000000000016906393552a3d9060440160206040518083038186803b158015610f8757600080fd5b505afa158015610f9b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fbf91906139ce565b6001600160a01b039190911660009081526001602090815260408083209483529390529190912080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055565b3361101e612e06565b6001600160a01b03161480611042575033611037612e9e565b6001600160a01b0316145b61108e5760405162461bcd60e51b815260206004820152601e60248201527f526f6c65733a2063616c6c6572206973206e6f7420746865206f776e657200006044820152606401610c40565b600455565b61109d8182612114565b50565b6001600160a01b038216600090815260036020526040812081906110c49042612f0f565b90506110d1858285612f2e565b95945050505050565b6001600160a01b0380831660008181526008602090815260408083209486168352938152838220600181015493835260069091529281209092919083906111219042612f0f565b9050811561114c578254611136908284612f2e565b83546111429190613a79565b935050505061115f565b8254611159906000613a79565b93505050505b92915050565b3361116e612e06565b6001600160a01b03161480611192575033611187612e9e565b6001600160a01b0316145b806111b857503360009081526001602090815260408083206009845290915290205460ff165b61122a5760405162461bcd60e51b815260206004820152603960248201527f43616c6c6572206973206e6f7420746865206f776e65722c206578656375746f60448201527f72206f7220617574686f72697a656420616374697661746f72000000000000006064820152608401610c40565b6001600160a01b0316600090815260156020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055565b6001600160a01b03841660009081526015602052604081205460ff166112d15760405162461bcd60e51b815260206004820152601660248201527f4e6f7420616e20617070726f76656420697373756572000000000000000000006044820152606401610c40565b6001600160a01b038516600090815260026020526040902080546112f6908590613a79565b6112ff82612bac565b1015801561130f575084600b5410155b801561131d5750600a548510155b156114285761132f3387878787612f3b565b9150811561142857606560009081526020527f4a7203f705e51df4a56139a9b86b4a0970bed7ab7a3446eaffe2289989c1645c546001600160a01b03166040517fb3db428b0000000000000000000000000000000000000000000000000000000081523360048201526001600160a01b03888116602483015260448201879052919091169063b3db428b90606401600060405180830381600087803b1580156113d757600080fd5b505af11580156113eb573d6000803e3d6000fd5b50503360008181526012602090815260408220805460018101825590835291200185905561141d925088915086612bcf565b611428338786612d5c565b50949350505050565b3361143a612e06565b6001600160a01b0316148061145e575033611453612e9e565b6001600160a01b0316145b6114aa5760405162461bcd60e51b815260206004820152601e60248201527f526f6c65733a2063616c6c6572206973206e6f7420746865206f776e657200006044820152606401610c40565b6001600160a01b0382166000908152600f60205260408120905b815481101561153b578281815181106114ed57634e487b7160e01b600052603260045260246000fd5b602002602001015182828154811061151557634e487b7160e01b600052603260045260246000fd5b60009182526020909120600760089092020101558061153381613af9565b9150506114c4565b50505050565b3361154a612e06565b6001600160a01b0316148061156e575033611563612e9e565b6001600160a01b0316145b6115ba5760405162461bcd60e51b815260206004820152601e60248201527f526f6c65733a2063616c6c6572206973206e6f7420746865206f776e657200006044820152606401610c40565b610e1081116116315760405162461bcd60e51b815260206004820152602760248201527f4d696e2072756e74696d65206e6565647320746f206265206174206c6561737460448201527f203120686f7572000000000000000000000000000000000000000000000000006064820152608401610c40565b80600b54116116a85760405162461bcd60e51b815260206004820152602c60248201527f4d696e2072756e74696d65206d75737420626520736d616c6c6572207468616e60448201527f206d61782072756e74696d6500000000000000000000000000000000000000006064820152608401610c40565b600a55565b336116b6612e06565b6001600160a01b031614806116da5750336116cf612e9e565b6001600160a01b0316145b6117265760405162461bcd60e51b815260206004820152601e60248201527f526f6c65733a2063616c6c6572206973206e6f7420746865206f776e657200006044820152606401610c40565b600955565b33611734612e06565b6001600160a01b0316148061175857503361174d612e9e565b6001600160a01b0316145b8061177e57503360009081526001602090815260408083206009845290915290205460ff165b6117f05760405162461bcd60e51b815260206004820152603960248201527f43616c6c6572206973206e6f7420746865206f776e65722c206578656375746f60448201527f72206f7220617574686f72697a656420616374697661746f72000000000000006064820152608401610c40565b6001600160a01b0390911660009081526002602081905260409091200155565b33611819612e06565b6001600160a01b0316148061183d575033611832612e9e565b6001600160a01b0316145b8061186357503360009081526001602090815260408083206009845290915290205460ff165b6118d55760405162461bcd60e51b815260206004820152603960248201527f43616c6c6572206973206e6f7420746865206f776e65722c206578656375746f60448201527f72206f7220617574686f72697a656420616374697661746f72000000000000006064820152608401610c40565b6001600160a01b0382166000908152600f602052604090208054611a57576000612238606461190a640100000000606e613aa5565b6119149190613a91565b61191e9190613a91565b905060008351600c546119319190613a91565b905060005b8085511115611a4f57600061194b8284613aa5565b600a546119589190613a79565b90508460405180610100016040528088858151811061198757634e487b7160e01b600052603260045260246000fd5b60200260200101518152602001600181526020014281526020016001815260200142815260200142815260200160008152602001610e1084886119ca9190613aa5565b6119d49190613a91565b905281546001818101845560009384526020938490208351600890930201918255928201519281019290925560408101516002830155606081015160038301556080810151600483015560a0810151600583015560c0810151600683015560e001516007909101555080611a4781613af9565b915050611936565b505050610bad565b8054825114611aa85760405162461bcd60e51b815260206004820152601b60248201527f5765696768747320646f6e2774206d61746368206275636b65747300000000006044820152606401610c40565b60005b808351111561153b57828181518110611ad457634e487b7160e01b600052603260045260246000fd5b6020026020010151828281548110611afc57634e487b7160e01b600052603260045260246000fd5b600091825260209091206008909102015580611b1781613af9565b915050611aab565b6000818152600e6020526040902080546001600160a01b03163314611b865760405162461bcd60e51b815260206004820152601260248201527f4e6f7420686f6c646572206f6620626f6e6400000000000000000000000000006044820152606401610c40565b80600401544211611bd95760405162461bcd60e51b815260206004820152601660248201527f626f6e64206973207374696c6c20696d6d6174757265000000000000000000006044820152606401610c40565b60018101546002820154611bfa9133916001600160a01b0390911690612ace565b6000611c068383613158565b6001830154909150610bad906001600160a01b03163383612944565b33611c2b612e06565b6001600160a01b03161480611c4f575033611c44612e9e565b6001600160a01b0316145b611c9b5760405162461bcd60e51b815260206004820152601e60248201527f526f6c65733a2063616c6c6572206973206e6f7420746865206f776e657200006044820152606401610c40565b600555565b33611ca9612e06565b6001600160a01b03161480611ccd575033611cc2612e9e565b6001600160a01b0316145b80611cf357503360009081526001602090815260408083206009845290915290205460ff165b611d655760405162461bcd60e51b815260206004820152603960248201527f43616c6c6572206973206e6f7420746865206f776e65722c206578656375746f60448201527f72206f7220617574686f72697a656420616374697661746f72000000000000006064820152608401610c40565b6001600160a01b03811660009081526003602052604090205415611df15760405162461bcd60e51b815260206004820152602960248201527f747279696e6720746f2072652d696e697469616c697a65207969656c6420616360448201527f63756d756c61746f7200000000000000000000000000000000000000000000006064820152608401610c40565b6001600160a01b031660009081526003602052604090206401000000009055565b33611e1b612e06565b6001600160a01b03161480611e3f575033611e34612e9e565b6001600160a01b0316145b80611e6557503360009081526001602090815260408083206009845290915290205460ff165b611ed75760405162461bcd60e51b815260206004820152603960248201527f43616c6c6572206973206e6f7420746865206f776e65722c206578656375746f60448201527f72206f7220617574686f72697a656420616374697661746f72000000000000006064820152608401610c40565b6001600160a01b03909116600090815260026020526040902060030155565b3360009081526014602052604081208054839290611f15908490613a79565b909155505050565b6001600160a01b038116600090815260036020526040812061115f9042612f0f565b3360009081526001602090815260408083206003845290915281205460ff16611faa5760405162461bcd60e51b815260206004820152601860248201527f4e6f7420616e20617070726f76656420626f72726f77657200000000000000006044820152606401610c40565b6001600160a01b03831660009081526003602052604090208054611fd090869085612f2e565b91506000611fde8684613ae2565b6001600160a01b0386166000908152600260205260408120600181018054939450909284929061200f908490613a79565b9091555093979650505050505050565b33612028612e06565b6001600160a01b0316148061204c575033612041612e9e565b6001600160a01b0316145b6120985760405162461bcd60e51b815260206004820152601e60248201527f526f6c65733a2063616c6c6572206973206e6f7420746865206f776e657200006044820152606401610c40565b600a54811161210f5760405162461bcd60e51b815260206004820152602c60248201527f4d61782072756e74696d65206d7573742062652067726561746572207468616e60448201527f206d696e2072756e74696d6500000000000000000000000000000000000000006064820152608401610c40565b600b55565b3361211d612e06565b6001600160a01b03161480612141575033612136612e9e565b6001600160a01b0316145b8061216757503360009081526001602090815260408083206009845290915290205460ff165b6121d95760405162461bcd60e51b815260206004820152603960248201527f43616c6c6572206973206e6f7420746865206f776e65722c206578656375746f60448201527f72206f7220617574686f72697a656420616374697661746f72000000000000006064820152608401610c40565b6001600160a01b03918216600090815260156020908152604080832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055601390915290208054919092167fffffffffffffffffffffffff0000000000000000000000000000000000000000909116179055565b3360009081526001602090815260408083206003845290915290205460ff166122bf5760405162461bcd60e51b815260206004820152601860248201527f4e6f7420616e20617070726f76656420626f72726f77657200000000000000006044820152606401610c40565b6001600160a01b03821660009081526015602052604090205460ff166123275760405162461bcd60e51b815260206004820152601660248201527f4e6f7420616e20617070726f76656420697373756572000000000000000000006044820152606401610c40565b6001600160a01b038216600090815260026020526040812060018101805491928492612354908490613a79565b9091555050600181015481541015610bad5760405162461bcd60e51b815260206004820152602e60248201527f496e73756666696369656e74206361706974616c20746f206c656e642c20747260448201527f7920616761696e206c61746572210000000000000000000000000000000000006064820152608401610c40565b601260205281600052604060002081815481106123f057600080fd5b90600052602060002001600091509150505481565b6001600160a01b038116600090815260086020908152604080832033845290915290206124328282612790565b805461243f83838361281d565b61244a833383612944565b6001600160a01b038316600090815260086020908152604080832033808552925282208281556001810183905560020191909155610bad908483612ace565b33612492612e06565b6001600160a01b031614806124b65750336124ab612e9e565b6001600160a01b0316145b806124dc57503360009081526001602090815260408083206009845290915290205460ff165b61254e5760405162461bcd60e51b815260206004820152603960248201527f43616c6c6572206973206e6f7420746865206f776e65722c206578656375746f60448201527f72206f7220617574686f72697a656420616374697661746f72000000000000006064820152608401610c40565b6001600160a01b038216600090815260066020526040902080546125f65760408051606081018252640100000000815242602082015290810161223860646125968682613a79565b6125a590640100000000613aa5565b6125af9190613a91565b6125b99190613a91565b9052805182556020810151600180840191909155604090910151600283015560038201819055600482015542600582018190556006820155610bad565b6000612602848361336b565b905061223860646126138582613a79565b61262290640100000000613aa5565b61262c9190613a91565b6126369190613a91565b600290910155505050565b6001600160a01b0382166000908152600f6020526040812054600c54829161266891613a91565b905080600a54846126799190613ae2565b6126839190613a91565b949350505050565b60008082600601548561269e9190613a79565b600784015460058501546001600160a01b03891660009081526002602052604081208754939650939450909291612710906126d884612bac565b6126e29190613aa5565b6126ec9190613a91565b6001808801546003808a01546001600160a01b038e166000908152602092909252604082208754959650929490936127249190613a79565b866001015483600201546127389190613aa5565b6127429190613a91565b9050600061275260045483613483565b90506000612762610e108e613a91565b61276c9083613aa5565b905061277d8b8a8c8a8a8a8761349b565b9f9e505050505050505050505050505050565b60018101548015610bad576001600160a01b03831660009081526006602052604081206127be90859061336b565b83548154919250906127d290829085612f2e565b8085556000906127e3908390613ae2565b6001600160a01b038716600090815260026020526040812080549293508392909190612810908490613a79565b9091555050505050505050565b6000610e108360020154426128329190613ae2565b61283c9190613b32565b90508060075410156128b65760405162461bcd60e51b815260206004820152603f60248201527f5472696564207769746864726177696e67206f7574736964652073756273637260448201527f697074696f6e2063616e63656c6c6174696f6e2074696d652077696e646f77006064820152608401610c40565b818360000160008282546128ca9190613ae2565b90915550506001600160a01b038416600090815260026020526040812080548492906128f7908490613ae2565b90915550506001600160a01b03841660009081526006602081905260409091206004810154918101548554919261293392909190610e10613510565b600683015560049091015550505050565b6001600160a01b038316600090815260146020526040902054801580159061296c5750600082115b156129eb576001600160a01b03841660009081526002602052604081205490816129968185613483565b6129a09086613aa5565b6129aa9190613a91565b90506129b68185613ae2565b6001600160a01b0387166000908152601460205260408120805492965083929091906129e3908490613ae2565b909155505050505b6001600160a01b0380851660009081526013602052604090205416612a41606560009081526020527f4a7203f705e51df4a56139a9b86b4a0970bed7ab7a3446eaffe2289989c1645c546001600160a01b031690565b6040517fd9caed120000000000000000000000000000000000000000000000000000000081526001600160a01b038381166004830152868116602483015260448201869052919091169063d9caed12906064015b600060405180830381600087803b158015612aaf57600080fd5b505af1158015612ac3573d6000803e3d6000fd5b505050505050505050565b6001600160a01b038216600090815260116020526040902054612b22606c60009081526020527f3c1fcba39712202dbd455253568bf32dd0a3bedb5c3ff0de4b22d4e45e50dc92546001600160a01b031690565b6040517fc6c9faa1000000000000000000000000000000000000000000000000000000008152600481018390526001600160a01b03868116602483015260448201859052919091169063c6c9faa190606401600060405180830381600087803b158015612b8e57600080fd5b505af1158015612ba2573d6000803e3d6000fd5b5050505050505050565b600061115f826003015483600201548460010154612bca9190613a79565b613483565b606560009081526020527f4a7203f705e51df4a56139a9b86b4a0970bed7ab7a3446eaffe2289989c1645c546001600160a01b03166040517fb3db428b0000000000000000000000000000000000000000000000000000000081526001600160a01b038481166004830152858116602483015260448201849052919091169063b3db428b90606401600060405180830381600087803b158015612c7157600080fd5b505af1158015612c85573d6000803e3d6000fd5b50505050505050565b6001600160a01b038084166000908152600860209081526040808320938616835292905220612cbd8482612790565b6001600160a01b038416600090815260066020526040902080546001830155612ce8610e1042613b32565b6002830155815483908390600090612d01908490613a79565b90915550506001600160a01b03851660009081526002602052604081208054859290612d2e908490613a79565b92505081905550612d4b8160030154826005015485610e10613510565b600583015560039091015550505050565b6000612d99606c60009081526020527f3c1fcba39712202dbd455253568bf32dd0a3bedb5c3ff0de4b22d4e45e50dc92546001600160a01b031690565b6001600160a01b03848116600090815260116020526040908190205490517f2b5de286000000000000000000000000000000000000000000000000000000008152600481018290528783166024820152604481018690529293509190831690632b5de28690606401612a95565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b158015612e6157600080fd5b505afa158015612e75573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e9991906137bc565b905090565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c34c08e56040518163ffffffff1660e01b8152600401602060405180830381600087803b158015612efb57600080fd5b505af1158015612e75573d6000803e3d6000fd5b600080836001015483612f229190613ae2565b905061268384826135b0565b6000816126798486613aa5565b600080612f488686612641565b6001600160a01b0387166000908152600f602052604081208054929350909183908110612f8557634e487b7160e01b600052603260045260246000fd5b906000526020600020906008020190506000612fa38887898561268b565b90506000640100000000612fb78884613aa5565b612fc19190613a91565b905085811061314b5760006002612fd8838a613a79565b612fe29190613a91565b6001600160a01b038b1660009081526002602052604081208054929350839290919061300f908490613a79565b925050819055508084600601600082825461302a9190613a79565b90915550506010805496508690600061304283613af9565b91905055506040518060e001604052808c6001600160a01b031681526020018b6001600160a01b031681526020018981526020018381526020018a426130889190613a79565b815260208082018c905260409182018690526000898152600e8252829020835181546001600160a01b039182167fffffffffffffffffffffffff00000000000000000000000000000000000000009182161783559285015160018084018054929093169190941617905591830151600280840191909155606084015160038401556080840151600484015560a0840151600584015560c0909301516006909201919091558501549085015461313f91908a8c613510565b60028601556001850155505b5050505095945050505050565b600181015460058201546000916001600160a01b031690829061317c908390612641565b6001600160a01b0383166000908152600f6020526040812080549293509091839081106131b957634e487b7160e01b600052603260045260246000fd5b600091825260208220600388015488546002808b01546008909502909301955090936001600160a01b03909116929091906131f5908590613a79565b6131ff9190613a91565b6001600160a01b03871660009081526002602052604081208054929350918391839161322c908490613ae2565b92505081905550818560060160008282546132479190613ae2565b9250508190555061326a856003015486600401548b600201548c60050154613510565b60048088019190915560038088019290925560008c8152600e6020526040812080547fffffffffffffffffffffffff0000000000000000000000000000000000000000908116825560018281018054909216909155600282018390559381018290559182018190556005820181905560069091015581549082015411806132f85750836132f688613659565b105b1561335a57826001600160a01b0316876001600160a01b03167fbcab653cf73e12f7bb78aa625dccb002864f5de7de2518796fb5b82fd6e6ab058660405161334291815260200190565b60405180910390a361335587848661378e565b61335e565b8397505b5050505050505092915050565b6001810154819060009061337f9042613ae2565b905061338b82826135b0565b82556001600160a01b0384166000908152600260209081526040808320600390925282208154919290916133c0906001613a79565b836001015483600201546133d49190613aa5565b6133de9190613a91565b905060006133ee60045483613483565b905061341b86600201548760010154866000015461340b88612bac565b8b600301548c600401548761349b565b6002870155600183015461342f9042613ae2565b945061343b83866135b0565b8355600286015460095460649161345191613aa5565b61345b9190613a91565b613466906001613a79565b600284015550504260018086018290559091015550909392505050565b60008183111561349457508061115f565b508161115f565b8660006134a88842613ae2565b90506000600554826134ba9190613aa5565b905086881015806134cb5750848610155b156134eb576134da8382613483565b6134e49084613ae2565b9250613503565b6134f58184613a79565b925083831115613503578392505b5050979650505050505050565b6000808061351e8642613ae2565b9050600061352d826001613a79565b6135378688613aa5565b6135419190613a91565b90506000600361355387611c20613a79565b61355d9190613a91565b9050600061356c846001613a79565b90506135788183613a79565b6135828285613aa5565b61358c848d613aa5565b6135969190613a79565b6135a09190613a91565b9a429a5098505050505050505050565b6000806135bf610e1084613b32565b90506135d2640100000000610e10613aa5565b6002850154855483916135e491613aa5565b6135ee9190613aa5565b6135f89190613a91565b91506000613608610e1085613a91565b905080156136515760005b8082111561364f576401000000008660020154856136319190613aa5565b61363b9190613a91565b93508061364781613af9565b915050613613565b505b505092915050565b6001600160a01b038082166000818152601360205260408120549092169081141561375f57806001600160a01b03166370a082316136c8606560009081526020527f4a7203f705e51df4a56139a9b86b4a0970bed7ab7a3446eaffe2289989c1645c546001600160a01b031690565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b1681526001600160a01b03909116600482015260240160206040518083038186803b15801561371f57600080fd5b505afa158015613733573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137579190613a06565b915050610bd7565b6001600160a01b0383166000908152601460209081526040808320546002909252909120546137579190613ae2565b610bad838383612c8e565b6000602082840312156137aa578081fd5b81356137b581613b88565b9392505050565b6000602082840312156137cd578081fd5b81516137b581613b88565b600080604083850312156137ea578081fd5b82356137f581613b88565b9150602083013561380581613b88565b809150509250929050565b60008060408385031215613822578182fd5b823561382d81613b88565b915060208381013567ffffffffffffffff8082111561384a578384fd5b818601915086601f83011261385d578384fd5b81358181111561386f5761386f613b72565b8060051b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f830116810181811085821117156138b2576138b2613b72565b604052828152858101935084860182860187018b10156138d0578788fd5b8795505b838610156138f25780358552600195909501949386019386016138d4565b508096505050505050509250929050565b60008060408385031215613915578182fd5b823561392081613b88565b946020939093013593505050565b600080600060608486031215613942578081fd5b833561394d81613b88565b95602085013595506040909401359392505050565b60008060008060808587031215613977578081fd5b843561398281613b88565b966020860135965060408601359560600135945092505050565b600080604083850312156139ae578182fd5b82356139b981613b88565b9150602083013560ff81168114613805578182fd5b6000602082840312156139df578081fd5b815180151581146137b5578182fd5b6000602082840312156139ff578081fd5b5035919050565b600060208284031215613a17578081fd5b5051919050565b60008060408385031215613a30578182fd5b82359150602083013561380581613b88565b600080600060608486031215613a56578283fd5b833592506020840135613a6881613b88565b929592945050506040919091013590565b60008219821115613a8c57613a8c613b46565b500190565b600082613aa057613aa0613b5c565b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615613add57613add613b46565b500290565b600082821015613af457613af4613b46565b500390565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415613b2b57613b2b613b46565b5060010190565b600082613b4157613b41613b5c565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b038116811461109d57600080fdfea2646970667358221220323ce3319ac05b604b9785a352b483ef026081048e2bad2b02cc4ffc6351794a64736f6c63430008030033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "applyBorrowInterest(uint256,address,uint256)": {
        "details": "how much interest has accrued to a borrowed balance over time"
      },
      "buyBond(address,uint256,uint256,uint256)": {
        "details": "buy fixed term bond that does not renew"
      },
      "buyHourlyBondSubscription(address,uint256)": {
        "details": "buy hourly bond subscription"
      },
      "payOff(address,uint256)": {
        "details": "gets called by router if loan is extinguished"
      },
      "registerBorrow(address,uint256)": {
        "details": "gets called by router to register if a trader borrows issuers"
      },
      "viewBorrowInterest(uint256,address,uint256)": {
        "details": "view function to get current borrowing interest"
      },
      "viewBorrowingYieldFP(address)": {
        "details": "get the borrow yield"
      },
      "withdrawBond(uint256)": {
        "details": "send back funds of bond after maturity"
      },
      "withdrawHourlyBond(address,uint256)": {
        "details": "withdraw an hour bond"
      }
    },
    "stateVariables": {
      "bondIds": {
        "details": "IDs for all bonds held by an address"
      }
    },
    "title": "Manage lending for a variety of bond issuers",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "activateIssuer(address)": {
        "notice": "Make a issuer available for protocol"
      },
      "activateIssuer(address,address)": {
        "notice": "Make issuer != token available for protocol (isol. margin)"
      },
      "activeIssuers(address)": {
        "notice": "map of available issuers"
      },
      "closeHourlyBondAccount(address)": {
        "notice": "Shut down hourly bond account for `issuer`"
      },
      "deactivateIssuer(address)": {
        "notice": "Remove a issuer from trading availability"
      },
      "haircuts(address)": {
        "notice": "In case of shortfall, adjust debt"
      },
      "issuerTokens(address)": {
        "notice": "mapping issuers to tokens (in crossmargin, the issuers are tokens  themselves)"
      },
      "setHourlyYieldAPR(address,uint256)": {
        "notice": "Set hourly yield APR for issuer"
      },
      "setIncentiveTranche(address,uint8)": {
        "notice": "Set incentive tranche"
      },
      "setLendingBuffer(address,uint256)": {
        "notice": "Set lending buffer"
      },
      "setLendingCap(address,uint256)": {
        "notice": "Set lending cap"
      },
      "setMaxHourlyYieldFP(uint256)": {
        "notice": "Set maximum hourly yield in floating point"
      },
      "setMaxRuntime(uint256)": {
        "notice": "Set maximum runtime"
      },
      "setMinRuntime(uint256)": {
        "notice": "Set miniumum runtime"
      },
      "setRuntimeWeights(address,uint256[])": {
        "notice": "Set runtime weights in floating point"
      },
      "setRuntimeYieldsFP(address,uint256[])": {
        "notice": "Set runtime yields in floating point"
      },
      "setWithdrawalWindow(uint256)": {
        "notice": "Set withdrawal window"
      },
      "setYieldChangePerSecondFP(uint256)": {
        "notice": "Set yield change per second in floating point"
      },
      "viewBondReturn(address,uint256,uint256)": {
        "notice": "Get view of returns on bond"
      },
      "viewLendingTarget(address)": {
        "notice": "View lending target"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 11650,
        "contract": "contracts/Lending.sol:Lending",
        "label": "mainCharacterCache",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 11656,
        "contract": "contracts/Lending.sol:Lending",
        "label": "roleCache",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 1650,
        "contract": "contracts/Lending.sol:Lending",
        "label": "lendingMeta",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_struct(LendingMetadata)1645_storage)"
      },
      {
        "astId": 1656,
        "contract": "contracts/Lending.sol:Lending",
        "label": "borrowYieldAccumulators",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_struct(YieldAccumulator)1636_storage)"
      },
      {
        "astId": 1658,
        "contract": "contracts/Lending.sol:Lending",
        "label": "maxHourlyYieldFP",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 1660,
        "contract": "contracts/Lending.sol:Lending",
        "label": "yieldChangePerSecondFP",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 5856,
        "contract": "contracts/Lending.sol:Lending",
        "label": "hourlyBondMetadata",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_struct(HourlyBondMetadata)5851_storage)"
      },
      {
        "astId": 5859,
        "contract": "contracts/Lending.sol:Lending",
        "label": "withdrawalWindow",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 5866,
        "contract": "contracts/Lending.sol:Lending",
        "label": "hourlyBondAccounts",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_mapping(t_address,t_struct(HourlyBond)5836_storage))"
      },
      {
        "astId": 5869,
        "contract": "contracts/Lending.sol:Lending",
        "label": "borrowingFactorPercent",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 1921,
        "contract": "contracts/Lending.sol:Lending",
        "label": "minRuntime",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 1924,
        "contract": "contracts/Lending.sol:Lending",
        "label": "maxRuntime",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 1926,
        "contract": "contracts/Lending.sol:Lending",
        "label": "diffMaxMinRuntime",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 1932,
        "contract": "contracts/Lending.sol:Lending",
        "label": "borrowingMarkupFP",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 1954,
        "contract": "contracts/Lending.sol:Lending",
        "label": "bonds",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_uint256,t_struct(Bond)1915_storage)"
      },
      {
        "astId": 1960,
        "contract": "contracts/Lending.sol:Lending",
        "label": "bondBucketMetadata",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_array(t_struct(BondBucketMetadata)1949_storage)dyn_storage)"
      },
      {
        "astId": 1963,
        "contract": "contracts/Lending.sol:Lending",
        "label": "nextBondIndex",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 7260,
        "contract": "contracts/Lending.sol:Lending",
        "label": "incentiveTranches",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 8471,
        "contract": "contracts/Lending.sol:Lending",
        "label": "bondIds",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_address,t_array(t_uint256)dyn_storage)"
      },
      {
        "astId": 8476,
        "contract": "contracts/Lending.sol:Lending",
        "label": "issuerTokens",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 8481,
        "contract": "contracts/Lending.sol:Lending",
        "label": "haircuts",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 8486,
        "contract": "contracts/Lending.sol:Lending",
        "label": "activeIssuers",
        "offset": 0,
        "slot": "21",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(BondBucketMetadata)1949_storage)dyn_storage": {
        "base": "t_struct(BondBucketMetadata)1949_storage",
        "encoding": "dynamic_array",
        "label": "struct BondLending.BondBucketMetadata[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_array(t_struct(BondBucketMetadata)1949_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct BondLending.BondBucketMetadata[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(BondBucketMetadata)1949_storage)dyn_storage"
      },
      "t_mapping(t_address,t_array(t_uint256)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256[])",
        "numberOfBytes": "32",
        "value": "t_array(t_uint256)dyn_storage"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_struct(HourlyBond)5836_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => struct HourlyBond))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(HourlyBond)5836_storage)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_address,t_struct(HourlyBond)5836_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct HourlyBond)",
        "numberOfBytes": "32",
        "value": "t_struct(HourlyBond)5836_storage"
      },
      "t_mapping(t_address,t_struct(HourlyBondMetadata)5851_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct HourlyBondSubscriptionLending.HourlyBondMetadata)",
        "numberOfBytes": "32",
        "value": "t_struct(HourlyBondMetadata)5851_storage"
      },
      "t_mapping(t_address,t_struct(LendingMetadata)1645_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct BaseLending.LendingMetadata)",
        "numberOfBytes": "32",
        "value": "t_struct(LendingMetadata)1645_storage"
      },
      "t_mapping(t_address,t_struct(YieldAccumulator)1636_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct BaseLending.YieldAccumulator)",
        "numberOfBytes": "32",
        "value": "t_struct(YieldAccumulator)1636_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_struct(Bond)1915_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct Bond)",
        "numberOfBytes": "32",
        "value": "t_struct(Bond)1915_storage"
      },
      "t_struct(Bond)1915_storage": {
        "encoding": "inplace",
        "label": "struct Bond",
        "members": [
          {
            "astId": 1902,
            "contract": "contracts/Lending.sol:Lending",
            "label": "holder",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 1904,
            "contract": "contracts/Lending.sol:Lending",
            "label": "issuer",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 1906,
            "contract": "contracts/Lending.sol:Lending",
            "label": "originalPrice",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1908,
            "contract": "contracts/Lending.sol:Lending",
            "label": "returnAmount",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 1910,
            "contract": "contracts/Lending.sol:Lending",
            "label": "maturityTimestamp",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 1912,
            "contract": "contracts/Lending.sol:Lending",
            "label": "runtime",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 1914,
            "contract": "contracts/Lending.sol:Lending",
            "label": "yieldFP",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(BondBucketMetadata)1949_storage": {
        "encoding": "inplace",
        "label": "struct BondLending.BondBucketMetadata",
        "members": [
          {
            "astId": 1934,
            "contract": "contracts/Lending.sol:Lending",
            "label": "runtimeWeight",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1936,
            "contract": "contracts/Lending.sol:Lending",
            "label": "buyingSpeed",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1938,
            "contract": "contracts/Lending.sol:Lending",
            "label": "lastBought",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1940,
            "contract": "contracts/Lending.sol:Lending",
            "label": "withdrawingSpeed",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 1942,
            "contract": "contracts/Lending.sol:Lending",
            "label": "lastWithdrawn",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 1944,
            "contract": "contracts/Lending.sol:Lending",
            "label": "yieldLastUpdated",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 1946,
            "contract": "contracts/Lending.sol:Lending",
            "label": "totalLending",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 1948,
            "contract": "contracts/Lending.sol:Lending",
            "label": "runtimeYieldFP",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(HourlyBond)5836_storage": {
        "encoding": "inplace",
        "label": "struct HourlyBond",
        "members": [
          {
            "astId": 5831,
            "contract": "contracts/Lending.sol:Lending",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5833,
            "contract": "contracts/Lending.sol:Lending",
            "label": "yieldQuotientFP",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5835,
            "contract": "contracts/Lending.sol:Lending",
            "label": "moduloHour",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(HourlyBondMetadata)5851_storage": {
        "encoding": "inplace",
        "label": "struct HourlyBondSubscriptionLending.HourlyBondMetadata",
        "members": [
          {
            "astId": 5842,
            "contract": "contracts/Lending.sol:Lending",
            "label": "yieldAccumulator",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(YieldAccumulator)1636_storage"
          },
          {
            "astId": 5844,
            "contract": "contracts/Lending.sol:Lending",
            "label": "buyingSpeed",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 5846,
            "contract": "contracts/Lending.sol:Lending",
            "label": "withdrawingSpeed",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 5848,
            "contract": "contracts/Lending.sol:Lending",
            "label": "lastBought",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 5850,
            "contract": "contracts/Lending.sol:Lending",
            "label": "lastWithdrawn",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(LendingMetadata)1645_storage": {
        "encoding": "inplace",
        "label": "struct BaseLending.LendingMetadata",
        "members": [
          {
            "astId": 1638,
            "contract": "contracts/Lending.sol:Lending",
            "label": "totalLending",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1640,
            "contract": "contracts/Lending.sol:Lending",
            "label": "totalBorrowed",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1642,
            "contract": "contracts/Lending.sol:Lending",
            "label": "lendingBuffer",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 1644,
            "contract": "contracts/Lending.sol:Lending",
            "label": "lendingCap",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(YieldAccumulator)1636_storage": {
        "encoding": "inplace",
        "label": "struct BaseLending.YieldAccumulator",
        "members": [
          {
            "astId": 1631,
            "contract": "contracts/Lending.sol:Lending",
            "label": "accumulatorFP",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1633,
            "contract": "contracts/Lending.sol:Lending",
            "label": "lastUpdated",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1635,
            "contract": "contracts/Lending.sol:Lending",
            "label": "hourlyYieldFP",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}