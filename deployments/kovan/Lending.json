{
  "address": "0x238d240156eF64F099ab5D1a7c0b9BC25DF9045E",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_roles",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "issuer",
          "type": "address"
        }
      ],
      "name": "activateIssuer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "issuer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "activateIssuer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "activeIssuers",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "issuer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "yieldQuotientFP",
          "type": "uint256"
        }
      ],
      "name": "applyBorrowInterest",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balanceWithInterest",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "accumulatorFP",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "borrowYieldAccumulators",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "accumulatorFP",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastUpdated",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "hourlyYieldFP",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "borrowingFactorPercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "issuer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "buyHourlyBondSubscription",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "issuer",
          "type": "address"
        }
      ],
      "name": "closeHourlyBondAccount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "issuer",
          "type": "address"
        }
      ],
      "name": "deactivateIssuer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "issuer",
          "type": "address"
        }
      ],
      "name": "getUpdatedBorrowYieldAccuFP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "haircut",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "haircuts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "highRatePerPercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "hourlyBondAccounts",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "yieldQuotientFP",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "moduloHour",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "incentiveTranches",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "issuer",
          "type": "address"
        }
      ],
      "name": "initBorrowYieldAccumulator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "issuerTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "lendingMeta",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "totalLending",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "totalBorrowed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lendingCap",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "mainCharacterCache",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "normalRatePerPercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "issuer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "payOff",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "issuer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "registerBorrow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "issuer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "registerLend",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "issuer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "registerWithdrawal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "roleCache",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "roles",
      "outputs": [
        {
          "internalType": "contract Roles",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "borrowingFactor",
          "type": "uint256"
        }
      ],
      "name": "setBorrowingFactorPercent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "rate",
          "type": "uint256"
        }
      ],
      "name": "setHighRatePerPercent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "issuer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "aprPercent",
          "type": "uint256"
        }
      ],
      "name": "setHourlyYieldAPR",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint8",
          "name": "tranche",
          "type": "uint8"
        }
      ],
      "name": "setIncentiveTranche",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "issuer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "cap",
          "type": "uint256"
        }
      ],
      "name": "setLendingCap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "rate",
          "type": "uint256"
        }
      ],
      "name": "setNormalRatePerPercent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "window",
          "type": "uint256"
        }
      ],
      "name": "setWithdrawalWindow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "issuer",
          "type": "address"
        }
      ],
      "name": "updateHourlyYield",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "hourlyYield",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "role",
          "type": "uint256"
        }
      ],
      "name": "updateMainCharacterCache",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "role",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "contr",
          "type": "address"
        }
      ],
      "name": "updateRoleCache",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "issuer",
          "type": "address"
        }
      ],
      "name": "viewAccumulatedBorrowingYieldFP",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "issuer",
          "type": "address"
        }
      ],
      "name": "viewBorrowAPRPer10k",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "issuer",
          "type": "address"
        }
      ],
      "name": "viewHourlyBondAPRPer10k",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "issuer",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "holder",
          "type": "address"
        }
      ],
      "name": "viewHourlyBondAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "issuer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "yieldQuotientFP",
          "type": "uint256"
        }
      ],
      "name": "viewWithBorrowInterest",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "issuer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawHourlyBond",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawalWindow",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x05db84ff5e71df694112135685b76b09b8b09b10815c02a977ad049a728d885b",
  "receipt": {
    "to": null,
    "from": "0x23292e9BA8434e59E6BAC1907bA7425211c4DE27",
    "contractAddress": "0x238d240156eF64F099ab5D1a7c0b9BC25DF9045E",
    "transactionIndex": 0,
    "gasUsed": "2696836",
    "logsBloom": "0x
    "blockHash": "0x8f418033b2142b4d0307b2af690ddb7943bdbf690b33cf7dda9e6a23906366ea",
    "transactionHash": "0x05db84ff5e71df694112135685b76b09b8b09b10815c02a977ad049a728d885b",
    "logs": [],
    "blockNumber": 24380953,
    "cumulativeGasUsed": "2696836",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xbAC72a7d51fd994FCdb4412476e5b81eB54b6415"
  ],
  "solcInputHash": "2441184bdbda7f5566a33261673c23e2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_roles\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"}],\"name\":\"activateIssuer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"activateIssuer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"activeIssuers\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"yieldQuotientFP\",\"type\":\"uint256\"}],\"name\":\"applyBorrowInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balanceWithInterest\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"accumulatorFP\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"borrowYieldAccumulators\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"accumulatorFP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdated\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"hourlyYieldFP\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowingFactorPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"buyHourlyBondSubscription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"}],\"name\":\"closeHourlyBondAccount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"}],\"name\":\"deactivateIssuer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"}],\"name\":\"getUpdatedBorrowYieldAccuFP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"haircut\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"haircuts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"highRatePerPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"hourlyBondAccounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yieldQuotientFP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"moduloHour\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"incentiveTranches\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"}],\"name\":\"initBorrowYieldAccumulator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"issuerTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"lendingMeta\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"totalLending\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalBorrowed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lendingCap\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mainCharacterCache\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"normalRatePerPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"payOff\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"registerBorrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"registerLend\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"registerWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"roleCache\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roles\",\"outputs\":[{\"internalType\":\"contract Roles\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"borrowingFactor\",\"type\":\"uint256\"}],\"name\":\"setBorrowingFactorPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"setHighRatePerPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"aprPercent\",\"type\":\"uint256\"}],\"name\":\"setHourlyYieldAPR\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint8\",\"name\":\"tranche\",\"type\":\"uint8\"}],\"name\":\"setIncentiveTranche\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cap\",\"type\":\"uint256\"}],\"name\":\"setLendingCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"setNormalRatePerPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"window\",\"type\":\"uint256\"}],\"name\":\"setWithdrawalWindow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"}],\"name\":\"updateHourlyYield\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"hourlyYield\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"role\",\"type\":\"uint256\"}],\"name\":\"updateMainCharacterCache\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"role\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"contr\",\"type\":\"address\"}],\"name\":\"updateRoleCache\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"}],\"name\":\"viewAccumulatedBorrowingYieldFP\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"}],\"name\":\"viewBorrowAPRPer10k\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"}],\"name\":\"viewHourlyBondAPRPer10k\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"holder\",\"type\":\"address\"}],\"name\":\"viewHourlyBondAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"yieldQuotientFP\",\"type\":\"uint256\"}],\"name\":\"viewWithBorrowInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"issuer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawHourlyBond\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawalWindow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"applyBorrowInterest(uint256,address,uint256)\":{\"details\":\"how much interest has accrued to a borrowed balance over time\"},\"buyHourlyBondSubscription(address,uint256)\":{\"details\":\"buy hourly bond subscription\"},\"payOff(address,uint256)\":{\"details\":\"gets called by router if loan is extinguished\"},\"registerBorrow(address,uint256)\":{\"details\":\"gets called by router to register if a trader borrows issuers\"},\"registerLend(address,uint256)\":{\"details\":\"gets called when external sources provide lending\"},\"registerWithdrawal(address,uint256)\":{\"details\":\"gets called when external sources pay withdraw their bobnd\"},\"updateHourlyYield(address)\":{\"details\":\"updates yield accumulators for both borrowing and lending issuer address represents a token\"},\"viewAccumulatedBorrowingYieldFP(address)\":{\"details\":\"get the borrow yield for a specific issuer/token\"},\"viewBorrowAPRPer10k(address)\":{\"details\":\"get current borrowing interest per 10k for a token / issuer\"},\"viewHourlyBondAPRPer10k(address)\":{\"details\":\"get current lending APR per 10k for a token / issuer\"},\"viewWithBorrowInterest(uint256,address,uint256)\":{\"details\":\"view function to get balance with borrowing interest applied\"},\"withdrawHourlyBond(address,uint256)\":{\"details\":\"withdraw an hour bond\"}},\"title\":\"Manage lending for a variety of bond issuers\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"activateIssuer(address)\":{\"notice\":\"Make a issuer available for protocol\"},\"activateIssuer(address,address)\":{\"notice\":\"Make issuer != token available for protocol (isol. margin)\"},\"activeIssuers(address)\":{\"notice\":\"map of available issuers\"},\"closeHourlyBondAccount(address)\":{\"notice\":\"Shut down hourly bond account for `issuer`\"},\"deactivateIssuer(address)\":{\"notice\":\"Remove a issuer from trading availability\"},\"haircuts(address)\":{\"notice\":\"In case of shortfall, adjust debt\"},\"issuerTokens(address)\":{\"notice\":\"mapping issuers to tokens (in crossmargin, the issuers are tokens  themselves)\"},\"setHourlyYieldAPR(address,uint256)\":{\"notice\":\"Set hourly yield APR for issuer\"},\"setIncentiveTranche(address,uint8)\":{\"notice\":\"Set incentive tranche\"},\"setLendingCap(address,uint256)\":{\"notice\":\"Set lending cap\"},\"setWithdrawalWindow(uint256)\":{\"notice\":\"Set withdrawal window\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Lending.sol\":\"Lending\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":20000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x1cae4f85f114ff17b90414f5da67365b1d00337abb5bce9bf944eb78a2c0673c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x99f5c21018d796db7833a2100bb0e7411999e248a3c950fb526eee5d2bf47cb7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"contracts/BaseLending.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\nimport \\\"./RoleAware.sol\\\";\\n\\n/// @title Base lending behavior\\nabstract contract BaseLending {\\n    uint256 constant FP32 = 2**32;\\n    uint256 constant ACCUMULATOR_INIT = 10**18;\\n\\n    uint256 constant hoursPerYear = 365 days / (1 hours);\\n    uint256 constant CHANGE_POINT = 70;\\n    uint256 public normalRatePerPercent =\\n        (FP32 * 15) / hoursPerYear / CHANGE_POINT;\\n    uint256 public highRatePerPercent =\\n        (FP32 * (75 - 15)) / hoursPerYear / (100 - CHANGE_POINT);\\n\\n    struct YieldAccumulator {\\n        uint256 accumulatorFP;\\n        uint256 lastUpdated;\\n        uint256 hourlyYieldFP;\\n    }\\n\\n    struct LendingMetadata {\\n        uint256 totalLending;\\n        uint256 totalBorrowed;\\n        uint256 lendingCap;\\n    }\\n    mapping(address => LendingMetadata) public lendingMeta;\\n\\n    /// @dev accumulate interest per issuer (like compound indices)\\n    mapping(address => YieldAccumulator) public borrowYieldAccumulators;\\n\\n    /// @dev simple formula for calculating interest relative to accumulator\\n    function applyInterest(\\n        uint256 balance,\\n        uint256 accumulatorFP,\\n        uint256 yieldQuotientFP\\n    ) internal pure returns (uint256) {\\n        // 1 * FP / FP = 1\\n        return (balance * accumulatorFP) / yieldQuotientFP;\\n    }\\n\\n    function currentLendingRateFP(uint256 totalLending, uint256 totalBorrowing)\\n        internal\\n        view\\n        returns (uint256 rate)\\n    {\\n        rate = FP32;\\n        uint256 utilizationPercent = (100 * totalBorrowing) / totalLending;\\n        if (utilizationPercent < CHANGE_POINT) {\\n            rate += utilizationPercent * normalRatePerPercent;\\n        } else {\\n            rate +=\\n                CHANGE_POINT *\\n                normalRatePerPercent +\\n                (utilizationPercent - CHANGE_POINT) *\\n                highRatePerPercent;\\n        }\\n    }\\n\\n    /// @dev minimum\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a > b) {\\n            return b;\\n        } else {\\n            return a;\\n        }\\n    }\\n\\n    /// @dev maximum\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a > b) {\\n            return a;\\n        } else {\\n            return b;\\n        }\\n    }\\n\\n    function _makeFallbackBond(\\n        address issuer,\\n        address holder,\\n        uint256 amount\\n    ) internal virtual;\\n\\n    /// Available tokens to this issuance\\n    function issuanceBalance(address issuance)\\n        internal\\n        view\\n        virtual\\n        returns (uint256);\\n}\\n\",\"keccak256\":\"0x9afc1dfab97d1236f4d19551a16403e835aba5b5f8658979dcf80a78885d79fc\",\"license\":\"BUSL-1.1\"},\"contracts/Fund.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"../interfaces/IWETH.sol\\\";\\nimport \\\"./RoleAware.sol\\\";\\n\\n/// @title Manage funding\\ncontract Fund is RoleAware {\\n    using SafeERC20 for IERC20;\\n    /// wrapped ether\\n    address public immutable WETH;\\n\\n    constructor(address _WETH, address _roles) RoleAware(_roles) {\\n        WETH = _WETH;\\n    }\\n\\n    /// Deposit an active token\\n    function deposit(address depositToken, uint256 depositAmount) external {\\n        IERC20(depositToken).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            depositAmount\\n        );\\n    }\\n\\n    /// Deposit token on behalf of `sender`\\n    function depositFor(\\n        address sender,\\n        address depositToken,\\n        uint256 depositAmount\\n    ) external {\\n        require(isFundTransferer(msg.sender), \\\"Unauthorized deposit\\\");\\n        IERC20(depositToken).safeTransferFrom(\\n            sender,\\n            address(this),\\n            depositAmount\\n        );\\n    }\\n\\n    /// Deposit to wrapped ether\\n    function depositToWETH() external payable {\\n        IWETH(WETH).deposit{value: msg.value}();\\n    }\\n\\n    // withdrawers role\\n    function withdraw(\\n        address withdrawalToken,\\n        address recipient,\\n        uint256 withdrawalAmount\\n    ) external {\\n        require(isFundTransferer(msg.sender), \\\"Unauthorized withdraw\\\");\\n        IERC20(withdrawalToken).safeTransfer(recipient, withdrawalAmount);\\n    }\\n\\n    // withdrawers role\\n    function withdrawETH(address recipient, uint256 withdrawalAmount) external {\\n        require(isFundTransferer(msg.sender), \\\"Unauthorized withdraw\\\");\\n        IWETH(WETH).withdraw(withdrawalAmount);\\n        Address.sendValue(payable(recipient), withdrawalAmount);\\n    }\\n}\\n\",\"keccak256\":\"0x519e45c6eaf2492c479b4bfbb75e6060b1114f528db8087c24c01128003d2e23\",\"license\":\"BUSL-1.1\"},\"contracts/HourlyBondSubscriptionLending.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./BaseLending.sol\\\";\\n\\nstruct HourlyBond {\\n    uint256 amount;\\n    uint256 yieldQuotientFP;\\n    uint256 moduloHour;\\n}\\n\\n/// @title Here we offer subscriptions to auto-renewing hourly bonds\\n/// Funds are locked in for an 50 minutes per hour, while interest rates float\\nabstract contract HourlyBondSubscriptionLending is BaseLending {\\n    mapping(address => YieldAccumulator) hourlyBondYieldAccumulators;\\n\\n    uint256 constant RATE_UPDATE_WINDOW = 20 minutes;\\n    uint256 public withdrawalWindow = 20 minutes;\\n    // issuer => holder => bond record\\n    mapping(address => mapping(address => HourlyBond))\\n        public hourlyBondAccounts;\\n\\n    uint256 public borrowingFactorPercent = 200;\\n\\n    uint256 constant borrowMinAPR = 6;\\n    uint256 constant borrowMinHourlyYield =\\n        FP32 + (borrowMinAPR * FP32) / 100 / hoursPerYear;\\n\\n    function _makeHourlyBond(\\n        address issuer,\\n        address holder,\\n        uint256 amount\\n    ) internal {\\n        HourlyBond storage bond = hourlyBondAccounts[issuer][holder];\\n        updateHourlyBondAmount(issuer, bond);\\n\\n        YieldAccumulator storage yieldAccumulator =\\n            hourlyBondYieldAccumulators[issuer];\\n        bond.yieldQuotientFP = yieldAccumulator.accumulatorFP;\\n        bond.moduloHour = block.timestamp % (1 hours);\\n        bond.amount += amount;\\n        lendingMeta[issuer].totalLending += amount;\\n    }\\n\\n    function updateHourlyBondAmount(address issuer, HourlyBond storage bond)\\n        internal\\n    {\\n        uint256 yieldQuotientFP = bond.yieldQuotientFP;\\n        if (yieldQuotientFP > 0) {\\n            YieldAccumulator storage yA =\\n                getUpdatedHourlyYield(\\n                    issuer,\\n                    hourlyBondYieldAccumulators[issuer],\\n                    RATE_UPDATE_WINDOW\\n                );\\n\\n            uint256 oldAmount = bond.amount;\\n\\n            bond.amount = applyInterest(\\n                bond.amount,\\n                yA.accumulatorFP,\\n                yieldQuotientFP\\n            );\\n\\n            uint256 deltaAmount = bond.amount - oldAmount;\\n            lendingMeta[issuer].totalLending += deltaAmount;\\n        }\\n    }\\n\\n    // Retrieves bond balance for issuer and holder\\n    function viewHourlyBondAmount(address issuer, address holder)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        HourlyBond storage bond = hourlyBondAccounts[issuer][holder];\\n        uint256 yieldQuotientFP = bond.yieldQuotientFP;\\n\\n        uint256 cumulativeYield =\\n            viewCumulativeYieldFP(\\n                hourlyBondYieldAccumulators[issuer],\\n                block.timestamp\\n            );\\n\\n        if (yieldQuotientFP > 0) {\\n            return applyInterest(bond.amount, cumulativeYield, yieldQuotientFP);\\n        } else {\\n            return bond.amount;\\n        }\\n    }\\n\\n    function _withdrawHourlyBond(\\n        address issuer,\\n        HourlyBond storage bond,\\n        uint256 amount\\n    ) internal {\\n        // how far the current hour has advanced (relative to acccount hourly clock)\\n        uint256 currentOffset = (block.timestamp - bond.moduloHour) % (1 hours);\\n\\n        require(\\n            withdrawalWindow >= currentOffset,\\n            \\\"Tried withdrawing outside subscription cancellation time window\\\"\\n        );\\n\\n        bond.amount -= amount;\\n        lendingMeta[issuer].totalLending -= amount;\\n    }\\n\\n    function calcCumulativeYieldFP(\\n        YieldAccumulator storage yieldAccumulator,\\n        uint256 timeDelta\\n    ) internal view returns (uint256 accumulatorFP) {\\n        uint256 secondsDelta = timeDelta % (1 hours);\\n        // linearly interpolate interest for seconds\\n        // FP * FP * 1 / (FP * 1) = FP\\n        accumulatorFP =\\n            yieldAccumulator.accumulatorFP +\\n            (yieldAccumulator.accumulatorFP *\\n                (yieldAccumulator.hourlyYieldFP - FP32) *\\n                secondsDelta) /\\n            (FP32 * 1 hours);\\n\\n        uint256 hoursDelta = timeDelta / (1 hours);\\n        if (hoursDelta > 0) {\\n            // This loop should hardly ever 1 or more unless something bad happened\\n            // In which case it costs gas but there isn't overflow\\n            for (uint256 i = 0; hoursDelta > i; i++) {\\n                // FP32 * FP32 / FP32 = FP32\\n                accumulatorFP =\\n                    (accumulatorFP * yieldAccumulator.hourlyYieldFP) /\\n                    FP32;\\n            }\\n        }\\n    }\\n\\n    /// @dev updates yield accumulators for both borrowing and lending\\n    /// issuer address represents a token\\n    function updateHourlyYield(address issuer)\\n        public\\n        returns (uint256 hourlyYield)\\n    {\\n        return\\n            getUpdatedHourlyYield(\\n                issuer,\\n                hourlyBondYieldAccumulators[issuer],\\n                RATE_UPDATE_WINDOW\\n            )\\n                .hourlyYieldFP;\\n    }\\n\\n    /// @dev updates yield accumulators for both borrowing and lending\\n    function getUpdatedHourlyYield(\\n        address issuer,\\n        YieldAccumulator storage accumulator,\\n        uint256 window\\n    ) internal returns (YieldAccumulator storage) {\\n        uint256 lastUpdated = accumulator.lastUpdated;\\n        uint256 timeDelta = (block.timestamp - lastUpdated);\\n\\n        if (timeDelta > window) {\\n            YieldAccumulator storage borrowAccumulator =\\n                borrowYieldAccumulators[issuer];\\n\\n            accumulator.accumulatorFP = calcCumulativeYieldFP(\\n                accumulator,\\n                timeDelta\\n            );\\n\\n            LendingMetadata storage meta = lendingMeta[issuer];\\n\\n            accumulator.hourlyYieldFP = currentLendingRateFP(\\n                meta.totalLending,\\n                meta.totalBorrowed\\n            );\\n            accumulator.lastUpdated = block.timestamp;\\n\\n            updateBorrowYieldAccu(borrowAccumulator);\\n\\n            borrowAccumulator.hourlyYieldFP = max(\\n                borrowMinHourlyYield,\\n                (borrowingFactorPercent * accumulator.hourlyYieldFP) / 100\\n            );\\n        }\\n\\n        return accumulator;\\n    }\\n\\n    function updateBorrowYieldAccu(YieldAccumulator storage borrowAccumulator)\\n        internal\\n    {\\n        uint256 timeDelta = block.timestamp - borrowAccumulator.lastUpdated;\\n\\n        if (timeDelta > RATE_UPDATE_WINDOW) {\\n            borrowAccumulator.accumulatorFP = calcCumulativeYieldFP(\\n                borrowAccumulator,\\n                timeDelta\\n            );\\n\\n            borrowAccumulator.lastUpdated = block.timestamp;\\n        }\\n    }\\n\\n    function getUpdatedBorrowYieldAccuFP(address issuer)\\n        external\\n        returns (uint256)\\n    {\\n        YieldAccumulator storage yA = borrowYieldAccumulators[issuer];\\n        updateBorrowYieldAccu(yA);\\n        return yA.accumulatorFP;\\n    }\\n\\n    function viewCumulativeYieldFP(\\n        YieldAccumulator storage yA,\\n        uint256 timestamp\\n    ) internal view returns (uint256) {\\n        uint256 timeDelta = (timestamp - yA.lastUpdated);\\n        if (timeDelta > RATE_UPDATE_WINDOW) {\\n            return calcCumulativeYieldFP(yA, timeDelta);\\n        } else {\\n            return yA.accumulatorFP;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0d795f722aacca2ed833546bfd4b2cc0e81927133ccc89fc35afe16733c1cade\",\"license\":\"BUSL-1.1\"},\"contracts/IncentiveDistribution.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./RoleAware.sol\\\";\\nimport \\\"./Fund.sol\\\";\\n\\nstruct Claim {\\n    uint256 startingRewardRateFP;\\n    uint256 amount;\\n    uint256 intraDayGain;\\n    uint256 intraDayLoss;\\n}\\n\\n/// @title Manage distribution of liquidity stake incentives\\n/// Some efforts have been made to reduce gas cost at claim time\\n/// and shift gas burden onto those who would want to withdraw\\ncontract IncentiveDistribution is RoleAware {\\n    event AddToClaim(\\n        uint256 indexed tranche,\\n        address indexed claimant,\\n        uint256 amount\\n    );\\n    event SubtractFromClaim(\\n        uint256 indexed tranche,\\n        address indexed claimant,\\n        uint256 amount\\n    );\\n\\n    mapping(address => uint256) public rewardAmount;\\n    address immutable MFI;\\n\\n    constructor(address _MFI, address _roles) RoleAware(_roles) {\\n        MFI = _MFI;\\n    }\\n\\n    /// Start / increase amount of claim\\n    function addToClaimAmount(\\n        uint256 tranche,\\n        address recipient,\\n        uint256 claimAmount\\n    ) external {\\n        require(\\n            isIncentiveReporter(msg.sender),\\n            \\\"Contract not authorized to report incentives\\\"\\n        );\\n        emit AddToClaim(tranche, recipient, claimAmount);\\n    }\\n\\n    /// Decrease amount of claim\\n    function subtractFromClaimAmount(\\n        uint256 tranche,\\n        address recipient,\\n        uint256 subtractAmount\\n    ) external {\\n        require(\\n            isIncentiveReporter(msg.sender),\\n            \\\"Contract not authorized to report incentives\\\"\\n        );\\n        emit SubtractFromClaim(tranche, recipient, subtractAmount);\\n    }\\n\\n    /// Input rewards\\n    function inputRewards(\\n        address[] calldata claimants,\\n        uint256[] calldata rewards\\n    ) external onlyOwnerExecDisabler {\\n        for (uint256 i; claimants.length > i; i++) {\\n            rewardAmount[claimants[i]] += rewards[i];\\n        }\\n    }\\n\\n    /// Withdraw current reward amount\\n    function withdrawReward() external returns (uint256 withdrawAmount) {\\n        withdrawAmount = rewardAmount[msg.sender];\\n        delete rewardAmount[msg.sender];\\n\\n        Fund(fund()).withdraw(MFI, msg.sender, withdrawAmount);\\n    }\\n}\\n\",\"keccak256\":\"0xdb4474c8a60578e1ee35d8fe5ffb45c054c57c833d0c4bb7c8af42ef79311a06\",\"license\":\"BUSL-1.1\"},\"contracts/IncentivizedHolder.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IncentiveDistribution.sol\\\";\\nimport \\\"./RoleAware.sol\\\";\\n\\n/// @title helper class to facilitate staking and unstaking\\n/// within the incentive system.\\nabstract contract IncentivizedHolder is RoleAware {\\n    /// @dev here we cache incentive tranches to save on a bit of gas\\n    mapping(address => uint256) public incentiveTranches;\\n\\n    /// Set incentive tranche\\n    function setIncentiveTranche(address token, uint8 tranche)\\n        external\\n        onlyOwnerExecActivator\\n    {\\n        incentiveTranches[token] = tranche;\\n    }\\n\\n    function stakeClaim(\\n        address claimant,\\n        address token,\\n        uint256 amount\\n    ) internal {\\n        IncentiveDistribution iD =\\n            IncentiveDistribution(incentiveDistributor());\\n\\n        uint256 tranche = incentiveTranches[token];\\n\\n        iD.addToClaimAmount(tranche, claimant, amount);\\n    }\\n\\n    function withdrawClaim(\\n        address claimant,\\n        address token,\\n        uint256 amount\\n    ) internal {\\n        uint256 tranche = incentiveTranches[token];\\n\\n        IncentiveDistribution(incentiveDistributor()).subtractFromClaimAmount(\\n            tranche,\\n            claimant,\\n            amount\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x48565694d2ec02613f1268df73a9f42576c21a163aadfd75e67d0cc4952a240f\",\"license\":\"BUSL-1.1\"},\"contracts/Lending.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Fund.sol\\\";\\nimport \\\"./HourlyBondSubscriptionLending.sol\\\";\\nimport \\\"./IncentivizedHolder.sol\\\";\\n\\n// TODO activate bonds for lending\\n\\n/// @title Manage lending for a variety of bond issuers\\ncontract Lending is\\n    RoleAware,\\n    HourlyBondSubscriptionLending,\\n    IncentivizedHolder\\n{\\n    /// mapping issuers to tokens\\n    /// (in crossmargin, the issuers are tokens  themselves)\\n    mapping(address => address) public issuerTokens;\\n\\n    /// In case of shortfall, adjust debt\\n    mapping(address => uint256) public haircuts;\\n\\n    /// map of available issuers\\n    mapping(address => bool) public activeIssuers;\\n\\n    uint256 constant BORROW_RATE_UPDATE_WINDOW = 60 minutes;\\n\\n    constructor(address _roles) RoleAware(_roles) {}\\n\\n    /// Make a issuer available for protocol\\n    function activateIssuer(address issuer) external {\\n        activateIssuer(issuer, issuer);\\n    }\\n\\n    /// Make issuer != token available for protocol (isol. margin)\\n    function activateIssuer(address issuer, address token)\\n        public\\n        onlyOwnerExecActivator\\n    {\\n        activeIssuers[issuer] = true;\\n        issuerTokens[issuer] = token;\\n    }\\n\\n    /// Remove a issuer from trading availability\\n    function deactivateIssuer(address issuer) external onlyOwnerExecActivator {\\n        activeIssuers[issuer] = false;\\n    }\\n\\n    /// Set lending cap\\n    function setLendingCap(address issuer, uint256 cap)\\n        external\\n        onlyOwnerExecActivator\\n    {\\n        lendingMeta[issuer].lendingCap = cap;\\n    }\\n\\n    /// Set withdrawal window\\n    function setWithdrawalWindow(uint256 window) external onlyOwnerExec {\\n        withdrawalWindow = window;\\n    }\\n\\n    function setNormalRatePerPercent(uint256 rate) external onlyOwnerExec {\\n        normalRatePerPercent = rate;\\n    }\\n\\n    function setHighRatePerPercent(uint256 rate) external onlyOwnerExec {\\n        highRatePerPercent = rate;\\n    }\\n\\n    /// Set hourly yield APR for issuer\\n    function setHourlyYieldAPR(address issuer, uint256 aprPercent)\\n        external\\n        onlyOwnerExecActivator\\n    {\\n        YieldAccumulator storage yieldAccumulator =\\n            hourlyBondYieldAccumulators[issuer];\\n\\n        if (yieldAccumulator.accumulatorFP == 0) {\\n            uint256 yieldFP = FP32 + (FP32 * aprPercent) / 100 / (24 * 365);\\n            hourlyBondYieldAccumulators[issuer] = YieldAccumulator({\\n                accumulatorFP: FP32,\\n                lastUpdated: block.timestamp,\\n                hourlyYieldFP: yieldFP\\n            });\\n        } else {\\n            YieldAccumulator storage yA =\\n                getUpdatedHourlyYield(\\n                    issuer,\\n                    yieldAccumulator,\\n                    RATE_UPDATE_WINDOW\\n                );\\n            yA.hourlyYieldFP = (FP32 * (100 + aprPercent)) / 100 / (24 * 365);\\n        }\\n    }\\n\\n    /// @dev how much interest has accrued to a borrowed balance over time\\n    function applyBorrowInterest(\\n        uint256 balance,\\n        address issuer,\\n        uint256 yieldQuotientFP\\n    ) external returns (uint256 balanceWithInterest, uint256 accumulatorFP) {\\n        require(isBorrower(msg.sender), \\\"Not approved call\\\");\\n\\n        YieldAccumulator storage yA = borrowYieldAccumulators[issuer];\\n        updateBorrowYieldAccu(yA);\\n        accumulatorFP = yA.accumulatorFP;\\n\\n        balanceWithInterest = applyInterest(\\n            balance,\\n            accumulatorFP,\\n            yieldQuotientFP\\n        );\\n\\n        uint256 deltaAmount = balanceWithInterest - balance;\\n        LendingMetadata storage meta = lendingMeta[issuer];\\n        meta.totalBorrowed += deltaAmount;\\n    }\\n\\n    /// @dev view function to get balance with borrowing interest applied\\n    function viewWithBorrowInterest(\\n        uint256 balance,\\n        address issuer,\\n        uint256 yieldQuotientFP\\n    ) external view returns (uint256) {\\n        uint256 accumulatorFP =\\n            viewCumulativeYieldFP(\\n                borrowYieldAccumulators[issuer],\\n                block.timestamp\\n            );\\n        return applyInterest(balance, accumulatorFP, yieldQuotientFP);\\n    }\\n\\n    /// @dev gets called by router to register if a trader borrows issuers\\n    function registerBorrow(address issuer, uint256 amount) external {\\n        require(isBorrower(msg.sender), \\\"Not approved borrower\\\");\\n        require(activeIssuers[issuer], \\\"Not approved issuer\\\");\\n\\n        LendingMetadata storage meta = lendingMeta[issuer];\\n        meta.totalBorrowed += amount;\\n\\n        getUpdatedHourlyYield(\\n            issuer,\\n            hourlyBondYieldAccumulators[issuer],\\n            BORROW_RATE_UPDATE_WINDOW\\n        );\\n\\n        require(\\n            meta.totalLending >= meta.totalBorrowed,\\n            \\\"Insufficient lending\\\"\\n        );\\n    }\\n\\n    /// @dev gets called when external sources provide lending\\n    function registerLend(address issuer, uint256 amount) external {\\n        require(isLender(msg.sender), \\\"Not an approved lender\\\");\\n        require(activeIssuers[issuer], \\\"Not approved issuer\\\");\\n        LendingMetadata storage meta = lendingMeta[issuer];\\n        meta.totalLending += amount;\\n\\n        getUpdatedHourlyYield(\\n            issuer,\\n            hourlyBondYieldAccumulators[issuer],\\n            RATE_UPDATE_WINDOW\\n        );\\n    }\\n\\n    /// @dev gets called when external sources pay withdraw their bobnd\\n    function registerWithdrawal(address issuer, uint256 amount) external {\\n        require(isLender(msg.sender), \\\"Not an approved lender\\\");\\n        require(activeIssuers[issuer], \\\"Not approved issuer\\\");\\n        LendingMetadata storage meta = lendingMeta[issuer];\\n        meta.totalLending -= amount;\\n\\n        getUpdatedHourlyYield(\\n            issuer,\\n            hourlyBondYieldAccumulators[issuer],\\n            RATE_UPDATE_WINDOW\\n        );\\n    }\\n\\n    /// @dev gets called by router if loan is extinguished\\n    function payOff(address issuer, uint256 amount) external {\\n        require(isBorrower(msg.sender), \\\"Not approved borrower\\\");\\n        lendingMeta[issuer].totalBorrowed -= amount;\\n    }\\n\\n    /// @dev get the borrow yield for a specific issuer/token\\n    function viewAccumulatedBorrowingYieldFP(address issuer)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        YieldAccumulator storage yA = borrowYieldAccumulators[issuer];\\n        return viewCumulativeYieldFP(yA, block.timestamp);\\n    }\\n\\n    function viewAPRPer10k(YieldAccumulator storage yA)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 hourlyYieldFP = yA.hourlyYieldFP;\\n\\n        uint256 aprFP =\\n            ((hourlyYieldFP * 10_000 - FP32 * 10_000) * 365 days) / (1 hours);\\n\\n        return aprFP / FP32;\\n    }\\n\\n    /// @dev get current borrowing interest per 10k for a token / issuer\\n    function viewBorrowAPRPer10k(address issuer)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return viewAPRPer10k(borrowYieldAccumulators[issuer]);\\n    }\\n\\n    /// @dev get current lending APR per 10k for a token / issuer\\n    function viewHourlyBondAPRPer10k(address issuer)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return viewAPRPer10k(hourlyBondYieldAccumulators[issuer]);\\n    }\\n\\n    /// @dev In a liquidity crunch make a fallback bond until liquidity is good again\\n    function _makeFallbackBond(\\n        address issuer,\\n        address holder,\\n        uint256 amount\\n    ) internal override {\\n        _makeHourlyBond(issuer, holder, amount);\\n    }\\n\\n    /// @dev withdraw an hour bond\\n    function withdrawHourlyBond(address issuer, uint256 amount) external {\\n        HourlyBond storage bond = hourlyBondAccounts[issuer][msg.sender];\\n        // apply all interest\\n        updateHourlyBondAmount(issuer, bond);\\n        super._withdrawHourlyBond(issuer, bond, amount);\\n\\n        if (bond.amount == 0) {\\n            delete hourlyBondAccounts[issuer][msg.sender];\\n        }\\n\\n        disburse(issuer, msg.sender, amount);\\n\\n        withdrawClaim(msg.sender, issuer, amount);\\n    }\\n\\n    /// Shut down hourly bond account for `issuer`\\n    function closeHourlyBondAccount(address issuer) external {\\n        HourlyBond storage bond = hourlyBondAccounts[issuer][msg.sender];\\n        // apply all interest\\n        updateHourlyBondAmount(issuer, bond);\\n\\n        uint256 amount = bond.amount;\\n        super._withdrawHourlyBond(issuer, bond, amount);\\n\\n        disburse(issuer, msg.sender, amount);\\n\\n        delete hourlyBondAccounts[issuer][msg.sender];\\n\\n        withdrawClaim(msg.sender, issuer, amount);\\n    }\\n\\n    /// @dev buy hourly bond subscription\\n    function buyHourlyBondSubscription(address issuer, uint256 amount)\\n        external\\n    {\\n        require(activeIssuers[issuer], \\\"Not approved issuer\\\");\\n\\n        collectToken(issuer, msg.sender, amount);\\n\\n        super._makeHourlyBond(issuer, msg.sender, amount);\\n\\n        stakeClaim(msg.sender, issuer, amount);\\n    }\\n\\n    function initBorrowYieldAccumulator(address issuer)\\n        external\\n        onlyOwnerExecActivator\\n    {\\n        YieldAccumulator storage yA = borrowYieldAccumulators[issuer];\\n        require(yA.accumulatorFP == 0, \\\"don't re-initialize\\\");\\n\\n        yA.accumulatorFP = FP32;\\n        yA.lastUpdated = block.timestamp;\\n        yA.hourlyYieldFP = FP32 + FP32 / (365 * 24);\\n    }\\n\\n    function setBorrowingFactorPercent(uint256 borrowingFactor)\\n        external\\n        onlyOwnerExec\\n    {\\n        borrowingFactorPercent = borrowingFactor;\\n    }\\n\\n    function issuanceBalance(address issuer)\\n        internal\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        address token = issuerTokens[issuer];\\n        if (token == issuer) {\\n            // cross margin\\n            return IERC20(token).balanceOf(fund());\\n        } else {\\n            return lendingMeta[issuer].totalLending - haircuts[issuer];\\n        }\\n    }\\n\\n    function disburse(\\n        address issuer,\\n        address recipient,\\n        uint256 amount\\n    ) internal {\\n        uint256 haircutAmount = haircuts[issuer];\\n        if (haircutAmount > 0 && amount > 0) {\\n            uint256 totalLending = lendingMeta[issuer].totalLending;\\n            uint256 adjustment =\\n                (amount * min(totalLending, haircutAmount)) / totalLending;\\n            amount = amount - adjustment;\\n            haircuts[issuer] -= adjustment;\\n        }\\n\\n        address token = issuerTokens[issuer];\\n        Fund(fund()).withdraw(token, recipient, amount);\\n    }\\n\\n    function collectToken(\\n        address issuer,\\n        address source,\\n        uint256 amount\\n    ) internal {\\n        Fund(fund()).depositFor(source, issuer, amount);\\n    }\\n\\n    function haircut(uint256 amount) external {\\n        haircuts[msg.sender] += amount;\\n    }\\n}\\n\",\"keccak256\":\"0xe582cb7e58f90667d6c79975b7ced379a2ebb8e1ea92fec0521510f440f5189c\",\"license\":\"BUSL-1.1\"},\"contracts/RoleAware.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Roles.sol\\\";\\n\\n/// @title Role management behavior\\n/// Main characters are for service discovery\\n/// Whereas roles are for access control\\ncontract RoleAware {\\n    Roles public immutable roles;\\n    mapping(uint256 => address) public mainCharacterCache;\\n    mapping(address => mapping(uint256 => bool)) public roleCache;\\n\\n    constructor(address _roles) {\\n        require(_roles != address(0), \\\"Please provide valid roles address\\\");\\n        roles = Roles(_roles);\\n    }\\n\\n    modifier noIntermediary() {\\n        require(\\n            msg.sender == tx.origin,\\n            \\\"Currently no intermediaries allowed for this function call\\\"\\n        );\\n        _;\\n    }\\n\\n    // @dev Throws if called by any account other than the owner or executor\\n    modifier onlyOwnerExec() {\\n        require(\\n            owner() == msg.sender || executor() == msg.sender,\\n            \\\"Roles: caller is not the owner\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyOwnerExecDisabler() {\\n        require(\\n            owner() == msg.sender ||\\n                executor() == msg.sender ||\\n                disabler() == msg.sender,\\n            \\\"Caller is not the owner, executor or authorized disabler\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyOwnerExecActivator() {\\n        require(\\n            owner() == msg.sender ||\\n                executor() == msg.sender ||\\n                isTokenActivator(msg.sender),\\n            \\\"Caller is not the owner, executor or authorized activator\\\"\\n        );\\n        _;\\n    }\\n\\n    function updateRoleCache(uint256 role, address contr) public virtual {\\n        roleCache[contr][role] = roles.getRole(role, contr);\\n    }\\n\\n    function updateMainCharacterCache(uint256 role) public virtual {\\n        mainCharacterCache[role] = roles.mainCharacters(role);\\n    }\\n\\n    function owner() internal view returns (address) {\\n        return roles.owner();\\n    }\\n\\n    function executor() internal returns (address) {\\n        return roles.executor();\\n    }\\n\\n    function disabler() internal view returns (address) {\\n        return mainCharacterCache[DISABLER];\\n    }\\n\\n    function fund() internal view returns (address) {\\n        return mainCharacterCache[FUND];\\n    }\\n\\n    function lending() internal view returns (address) {\\n        return mainCharacterCache[LENDING];\\n    }\\n\\n    function marginRouter() internal view returns (address) {\\n        return mainCharacterCache[MARGIN_ROUTER];\\n    }\\n\\n    function crossMarginTrading() internal view returns (address) {\\n        return mainCharacterCache[CROSS_MARGIN_TRADING];\\n    }\\n\\n    function feeController() internal view returns (address) {\\n        return mainCharacterCache[FEE_CONTROLLER];\\n    }\\n\\n    function price() internal view returns (address) {\\n        return mainCharacterCache[PRICE_CONTROLLER];\\n    }\\n\\n    function admin() internal view returns (address) {\\n        return mainCharacterCache[ADMIN];\\n    }\\n\\n    function incentiveDistributor() internal view returns (address) {\\n        return mainCharacterCache[INCENTIVE_DISTRIBUTION];\\n    }\\n\\n    function tokenAdmin() internal view returns (address) {\\n        return mainCharacterCache[TOKEN_ADMIN];\\n    }\\n\\n    function isBorrower(address contr) internal view returns (bool) {\\n        return roleCache[contr][BORROWER];\\n    }\\n\\n    function isFundTransferer(address contr) internal view returns (bool) {\\n        return roleCache[contr][FUND_TRANSFERER];\\n    }\\n\\n    function isMarginTrader(address contr) internal view returns (bool) {\\n        return roleCache[contr][MARGIN_TRADER];\\n    }\\n\\n    function isFeeSource(address contr) internal view returns (bool) {\\n        return roleCache[contr][FEE_SOURCE];\\n    }\\n\\n    function isMarginCaller(address contr) internal view returns (bool) {\\n        return roleCache[contr][MARGIN_CALLER];\\n    }\\n\\n    function isLiquidator(address contr) internal view returns (bool) {\\n        return roleCache[contr][LIQUIDATOR];\\n    }\\n\\n    function isAuthorizedFundTrader(address contr)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return roleCache[contr][AUTHORIZED_FUND_TRADER];\\n    }\\n\\n    function isIncentiveReporter(address contr) internal view returns (bool) {\\n        return roleCache[contr][INCENTIVE_REPORTER];\\n    }\\n\\n    function isTokenActivator(address contr) internal view returns (bool) {\\n        return roleCache[contr][TOKEN_ACTIVATOR];\\n    }\\n\\n    function isStakePenalizer(address contr) internal view returns (bool) {\\n        return roleCache[contr][STAKE_PENALIZER];\\n    }\\n\\n    function isLender(address contr) internal view returns (bool) {\\n        return roleCache[contr][LENDER];\\n    }\\n}\\n\",\"keccak256\":\"0xe4634706debd8661e0488404fe7e0b2d4c41f161784e2d098b8253d57267036c\",\"license\":\"BUSL-1.1\"},\"contracts/Roles.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../interfaces/IDependencyController.sol\\\";\\n\\n// we chose not to go with an enum\\n// to make this list easy to extend\\nuint256 constant FUND_TRANSFERER = 1;\\nuint256 constant MARGIN_CALLER = 2;\\nuint256 constant BORROWER = 3;\\nuint256 constant MARGIN_TRADER = 4;\\nuint256 constant FEE_SOURCE = 5;\\nuint256 constant LIQUIDATOR = 6;\\nuint256 constant AUTHORIZED_FUND_TRADER = 7;\\nuint256 constant INCENTIVE_REPORTER = 8;\\nuint256 constant TOKEN_ACTIVATOR = 9;\\nuint256 constant STAKE_PENALIZER = 10;\\nuint256 constant LENDER = 11;\\n\\nuint256 constant FUND = 101;\\nuint256 constant LENDING = 102;\\nuint256 constant MARGIN_ROUTER = 103;\\nuint256 constant CROSS_MARGIN_TRADING = 104;\\nuint256 constant FEE_CONTROLLER = 105;\\nuint256 constant PRICE_CONTROLLER = 106;\\nuint256 constant ADMIN = 107;\\nuint256 constant INCENTIVE_DISTRIBUTION = 108;\\nuint256 constant TOKEN_ADMIN = 109;\\n\\nuint256 constant DISABLER = 1001;\\nuint256 constant DEPENDENCY_CONTROLLER = 1002;\\n\\n/// @title Manage permissions of contracts and ownership of everything\\n/// owned by a multisig wallet (0xEED9D1c6B4cdEcB3af070D85bfd394E7aF179CBd) during\\n/// beta and will then be transfered to governance\\n/// https://github.com/marginswap/governance\\ncontract Roles is Ownable {\\n    mapping(address => mapping(uint256 => bool)) public roles;\\n    mapping(uint256 => address) public mainCharacters;\\n\\n    constructor() Ownable() {\\n        // token activation from the get-go\\n        roles[msg.sender][TOKEN_ACTIVATOR] = true;\\n    }\\n\\n    /// @dev Throws if called by any account other than the owner.\\n    modifier onlyOwnerExecDepController() {\\n        require(\\n            owner() == msg.sender ||\\n                executor() == msg.sender ||\\n                mainCharacters[DEPENDENCY_CONTROLLER] == msg.sender,\\n            \\\"Roles: caller is not the owner\\\"\\n        );\\n        _;\\n    }\\n\\n    function giveRole(uint256 role, address actor)\\n        external\\n        onlyOwnerExecDepController\\n    {\\n        roles[actor][role] = true;\\n    }\\n\\n    function removeRole(uint256 role, address actor)\\n        external\\n        onlyOwnerExecDepController\\n    {\\n        roles[actor][role] = false;\\n    }\\n\\n    function setMainCharacter(uint256 role, address actor)\\n        external\\n        onlyOwnerExecDepController\\n    {\\n        mainCharacters[role] = actor;\\n    }\\n\\n    function getRole(uint256 role, address contr) external view returns (bool) {\\n        return roles[contr][role];\\n    }\\n\\n    /// @dev current executor\\n    function executor() public returns (address exec) {\\n        address depController = mainCharacters[DEPENDENCY_CONTROLLER];\\n        if (depController != address(0)) {\\n            exec = IDependencyController(depController).currentExecutor();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7ba8d9671c7dd24ae361f1531b6fa8f10af7a8a47a38c27eb0a3fe8fc1e23ae7\",\"license\":\"BUSL-1.1\"},\"interfaces/IDependencyController.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\ninterface IDependencyController {\\n    function currentExecutor() external returns (address);\\n}\\n\",\"keccak256\":\"0xc65a455a81ab4bc8e0737d03691c159f28bfd6885ef8b99ddd8dec558ccfeb32\",\"license\":\"BUSL-1.1\"},\"interfaces/IWETH.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function withdraw(uint256) external;\\n}\\n\",\"keccak256\":\"0xf85de70a597a9f21052bd1ad25c755cda197102f4aebdb3c3c20f2405bd7442b\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102e95760003560e01c80637a00913511610191578063d4437dd8116100e3578063ebe64bcc11610097578063f848767311610071578063f848767314610735578063f884614b14610748578063f90889c91461075b576102e9565b8063ebe64bcc146106fc578063ee0862bf1461070f578063f51dfe7a14610722576102e9565b8063e695fa68116100c8578063e695fa6814610695578063e69e2662146106bd578063e9c3f77d146106c6576102e9565b8063d4437dd81461066f578063dc683bcf14610682576102e9565b8063ad037af611610145578063cd3b5dfb1161011f578063cd3b5dfb14610624578063d19bd0a714610653578063d2b489341461065c576102e9565b8063ad037af6146105d0578063ae4479dd146105fe578063cc4b26a314610611576102e9565b806383a042291161017657806383a04229146105485780638824cbba1461059d57806391b46e05146105bd576102e9565b80637a009135146105075780637a1a04df1461051a576102e9565b8063447d52ba1161024a5780636d8d36ba116101fe57806376668b67116101d857806376668b67146104b857806376c308f2146104cb578063797384b2146104d4576102e9565b80636d8d36ba1461047f5780636e60e2491461049257806372d01257146104a5576102e9565b806349d0e2ee1161022f57806349d0e2ee146104395780634b86daab1461044c57806364f85ab11461045f576102e9565b8063447d52ba1461041357806346c87f8014610426576102e9565b806328108026116102a15780632a6a897b116102865780632a6a897b146103c657806336953912146103d9578063392f5f64146103ec576102e9565b806328108026146103585780632864f401146103b3576102e9565b806314189db2116102d257806314189db21461031657806316de7a431461033c578063267031b81461034f576102e9565b8063071060a6146102ee5780630f7c43dc14610303575b600080fd5b6103016102fc366004612c83565b61076e565b005b610301610311366004612c06565b61087f565b610329610324366004612b96565b610924565b6040519081526020015b60405180910390f35b61030161034a366004612c06565b61095a565b61032960095481565b61038e610366366004612b96565b600b6020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610333565b6103016103c1366004612c31565b610a13565b6103016103d4366004612c06565b610b3b565b6103016103e7366004612c83565b610c01565b61038e7f000000000000000000000000000000000000000000000000000000000000000081565b610301610421366004612c9b565b610cb3565b610329610434366004612b96565b610ddc565b610301610447366004612c83565b610e11565b61030161045a366004612b96565b610ec3565b61032961046d366004612b96565b600c6020526000908152604090205481565b61030161048d366004612c06565b610ed0565b6103296104a0366004612bce565b61105b565b6103296104b3366004612b96565b6110e2565b6103296104c6366004612cbf565b611110565b61032960005481565b6104f76104e2366004612b96565b600d6020526000908152604090205460ff1681565b6040519015158152602001610333565b610301610515366004612b96565b611157565b6104f7610528366004612c06565b600560209081526000928352604080842090915290825290205460ff1681565b610582610556366004612bce565b600860209081526000928352604080842090915290825290208054600182015460029092015490919083565b60408051938452602084019290925290820152606001610333565b6103296105ab366004612b96565b600a6020526000908152604090205481565b6103016105cb366004612c83565b61129c565b6105826105de366004612b96565b600260208190526000918252604090912080546001820154919092015483565b61030161060c366004612c06565b61134e565b61030161061f366004612b96565b61149b565b610582610632366004612b96565b60036020526000908152604090208054600182015460029092015490919083565b61032960075481565b61030161066a366004612c06565b611656565b61030161067d366004612c83565b61177c565b610329610690366004612b96565b6117a3565b6106a86106a3366004612cbf565b6117e0565b60408051928352602083019190915201610333565b61032960015481565b61038e6106d4366004612c83565b60046020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b61030161070a366004612bce565b611902565b61030161071d366004612c06565b611a83565b610329610730366004612b96565b611c79565b610301610743366004612c83565b611ca7565b610301610756366004612b96565b611d59565b610301610769366004612c06565b611df7565b6040517fb4ed0b6d000000000000000000000000000000000000000000000000000000008152600481018290527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063b4ed0b6d9060240160206040518083038186803b1580156107f457600080fd5b505afa158015610808573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061082c9190612bb2565b60009182526004602052604090912080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff909216919091179055565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260086020908152604080832033845290915290206108b98382612001565b6108c48382846120ab565b80546109095773ffffffffffffffffffffffffffffffffffffffff83166000908152600860209081526040808320338452909152812081815560018101829055600201555b6109148333846121b7565b61091f33848461238f565b505050565b73ffffffffffffffffffffffffffffffffffffffff811660009081526003602052604081206109538142612494565b9392505050565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600d602052604090205460ff166109ee576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f4e6f7420617070726f766564206973737565720000000000000000000000000060448201526064015b60405180910390fd5b6109f98233836124d5565b610a048233836125ae565b610a0f338383612681565b5050565b33610a1c612745565b73ffffffffffffffffffffffffffffffffffffffff161480610a5a575033610a426127ea565b73ffffffffffffffffffffffffffffffffffffffff16145b80610a8057503360009081526005602090815260408083206009845290915290205460ff165b610b0c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603960248201527f43616c6c6572206973206e6f7420746865206f776e65722c206578656375746f60448201527f72206f7220617574686f72697a656420616374697661746f720000000000000060648201526084016109e5565b73ffffffffffffffffffffffffffffffffffffffff9091166000908152600a6020526040902060ff9091169055565b3360009081526005602090815260408083206003845290915290205460ff16610bc0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4e6f7420617070726f76656420626f72726f776572000000000000000000000060448201526064016109e5565b73ffffffffffffffffffffffffffffffffffffffff821660009081526002602052604081206001018054839290610bf8908490612d5f565b90915550505050565b33610c0a612745565b73ffffffffffffffffffffffffffffffffffffffff161480610c48575033610c306127ea565b73ffffffffffffffffffffffffffffffffffffffff16145b610cae576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f526f6c65733a2063616c6c6572206973206e6f7420746865206f776e6572000060448201526064016109e5565b600755565b6040517f93552a3d0000000000000000000000000000000000000000000000000000000081526004810183905273ffffffffffffffffffffffffffffffffffffffff82811660248301527f000000000000000000000000000000000000000000000000000000000000000016906393552a3d9060440160206040518083038186803b158015610d4157600080fd5b505afa158015610d55573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d799190612c63565b73ffffffffffffffffffffffffffffffffffffffff9190911660009081526005602090815260408083209483529390529190912080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600360205260408120610e0a81612868565b5492915050565b33610e1a612745565b73ffffffffffffffffffffffffffffffffffffffff161480610e58575033610e406127ea565b73ffffffffffffffffffffffffffffffffffffffff16145b610ebe576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f526f6c65733a2063616c6c6572206973206e6f7420746865206f776e6572000060448201526064016109e5565b600155565b610ecd8182611902565b50565b336000908152600560209081526040808320600b845290915290205460ff16610f55576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4e6f7420616e20617070726f766564206c656e6465720000000000000000000060448201526064016109e5565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600d602052604090205460ff16610fe4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f4e6f7420617070726f766564206973737565720000000000000000000000000060448201526064016109e5565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260026020526040812080549091839183919061101d908490612d5f565b909155505073ffffffffffffffffffffffffffffffffffffffff831660009081526006602052604090206110559084906104b061289c565b50505050565b73ffffffffffffffffffffffffffffffffffffffff80831660008181526008602090815260408083209486168352938152838220600181015493835260069091529281209092919083906110af9042612494565b905081156110ce5782546110c49082846129a7565b93505050506110dc565b50505490506110dc565b5050505b92915050565b73ffffffffffffffffffffffffffffffffffffffff811660009081526006602052604081206110dc906129c6565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260036020526040812081906111419042612494565b905061114e8582856129a7565b95945050505050565b33611160612745565b73ffffffffffffffffffffffffffffffffffffffff16148061119e5750336111866127ea565b73ffffffffffffffffffffffffffffffffffffffff16145b806111c457503360009081526005602090815260408083206009845290915290205460ff165b611250576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603960248201527f43616c6c6572206973206e6f7420746865206f776e65722c206578656375746f60448201527f72206f7220617574686f72697a656420616374697661746f720000000000000060648201526084016109e5565b73ffffffffffffffffffffffffffffffffffffffff166000908152600d6020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00169055565b336112a5612745565b73ffffffffffffffffffffffffffffffffffffffff1614806112e35750336112cb6127ea565b73ffffffffffffffffffffffffffffffffffffffff16145b611349576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f526f6c65733a2063616c6c6572206973206e6f7420746865206f776e6572000060448201526064016109e5565b600955565b336000908152600560209081526040808320600b845290915290205460ff166113d3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f4e6f7420616e20617070726f766564206c656e6465720000000000000000000060448201526064016109e5565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600d602052604090205460ff16611462576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f4e6f7420617070726f766564206973737565720000000000000000000000000060448201526064016109e5565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260026020526040812080549091839183919061101d908490612cf6565b336114a4612745565b73ffffffffffffffffffffffffffffffffffffffff1614806114e25750336114ca6127ea565b73ffffffffffffffffffffffffffffffffffffffff16145b8061150857503360009081526005602090815260408083206009845290915290205460ff165b611594576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603960248201527f43616c6c6572206973206e6f7420746865206f776e65722c206578656375746f60448201527f72206f7220617574686f72697a656420616374697661746f720000000000000060648201526084016109e5565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600360205260409020805415611622576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f646f6e27742072652d696e697469616c697a650000000000000000000000000060448201526064016109e5565b64010000000080825542600183015561163e9061223890612d0e565b61164d90640100000000612cf6565b60029091015550565b3361165f612745565b73ffffffffffffffffffffffffffffffffffffffff16148061169d5750336116856127ea565b73ffffffffffffffffffffffffffffffffffffffff16145b806116c357503360009081526005602090815260408083206009845290915290205460ff165b61174f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603960248201527f43616c6c6572206973206e6f7420746865206f776e65722c206578656375746f60448201527f72206f7220617574686f72697a656420616374697661746f720000000000000060648201526084016109e5565b73ffffffffffffffffffffffffffffffffffffffff90911660009081526002602081905260409091200155565b336000908152600c60205260408120805483929061179b908490612cf6565b909155505050565b73ffffffffffffffffffffffffffffffffffffffff811660009081526006602052604081206117d69083906104b061289c565b6002015492915050565b33600090815260056020908152604080832060038452909152812054819060ff16611867576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f4e6f7420617070726f7665642063616c6c00000000000000000000000000000060448201526064016109e5565b73ffffffffffffffffffffffffffffffffffffffff8416600090815260036020526040902061189581612868565b805491506118a48683866129a7565b925060006118b28785612d5f565b73ffffffffffffffffffffffffffffffffffffffff8716600090815260026020526040812060018101805493945090928492906118f0908490612cf6565b92505081905550505050935093915050565b3361190b612745565b73ffffffffffffffffffffffffffffffffffffffff1614806119495750336119316127ea565b73ffffffffffffffffffffffffffffffffffffffff16145b8061196f57503360009081526005602090815260408083206009845290915290205460ff165b6119fb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603960248201527f43616c6c6572206973206e6f7420746865206f776e65722c206578656375746f60448201527f72206f7220617574686f72697a656420616374697661746f720000000000000060648201526084016109e5565b73ffffffffffffffffffffffffffffffffffffffff9182166000908152600d6020908152604080832080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055600b90915290208054919092167fffffffffffffffffffffffff0000000000000000000000000000000000000000909116179055565b3360009081526005602090815260408083206003845290915290205460ff16611b08576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4e6f7420617070726f76656420626f72726f776572000000000000000000000060448201526064016109e5565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600d602052604090205460ff16611b97576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f4e6f7420617070726f766564206973737565720000000000000000000000000060448201526064016109e5565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260026020526040812060018101805491928492611bd1908490612cf6565b909155505073ffffffffffffffffffffffffffffffffffffffff83166000908152600660205260409020611c09908490610e1061289c565b5060018101548154101561091f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f496e73756666696369656e74206c656e64696e6700000000000000000000000060448201526064016109e5565b73ffffffffffffffffffffffffffffffffffffffff811660009081526003602052604081206110dc906129c6565b33611cb0612745565b73ffffffffffffffffffffffffffffffffffffffff161480611cee575033611cd66127ea565b73ffffffffffffffffffffffffffffffffffffffff16145b611d54576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f526f6c65733a2063616c6c6572206973206e6f7420746865206f776e6572000060448201526064016109e5565b600055565b73ffffffffffffffffffffffffffffffffffffffff811660009081526008602090815260408083203384529091529020611d938282612001565b8054611da08383836120ab565b611dab8333836121b7565b73ffffffffffffffffffffffffffffffffffffffff831660009081526008602090815260408083203380855292528220828155600181018390556002019190915561091f90848361238f565b33611e00612745565b73ffffffffffffffffffffffffffffffffffffffff161480611e3e575033611e266127ea565b73ffffffffffffffffffffffffffffffffffffffff16145b80611e6457503360009081526005602090815260408083206009845290915290205460ff165b611ef0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603960248201527f43616c6c6572206973206e6f7420746865206f776e65722c206578656375746f60448201527f72206f7220617574686f72697a656420616374697661746f720000000000000060648201526084016109e5565b73ffffffffffffffffffffffffffffffffffffffff821660009081526006602052604090208054611fb35760006122386064611f3185640100000000612d22565b611f3b9190612d0e565b611f459190612d0e565b611f5490640100000000612cf6565b60408051606081018252640100000000815242602080830191825282840194855273ffffffffffffffffffffffffffffffffffffffff89166000908152600690915292909220905181559051600182015590516002909101555061091f565b6000611fc284836104b061289c565b90506122386064611fd38582612cf6565b611fe290640100000000612d22565b611fec9190612d0e565b611ff69190612d0e565b600290910155505050565b6001810154801561091f5773ffffffffffffffffffffffffffffffffffffffff8316600090815260066020526040812061203f9085906104b061289c565b8354815491925090612053908290856129a7565b808555600090612064908390612d5f565b73ffffffffffffffffffffffffffffffffffffffff871660009081526002602052604081208054929350839290919061209e908490612cf6565b9091555050505050505050565b6000610e108360020154426120c09190612d5f565b6120ca9190612daf565b905080600754101561215e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603f60248201527f5472696564207769746864726177696e67206f7574736964652073756273637260448201527f697074696f6e2063616e63656c6c6174696f6e2074696d652077696e646f770060648201526084016109e5565b818360000160008282546121729190612d5f565b909155505073ffffffffffffffffffffffffffffffffffffffff8416600090815260026020526040812080548492906121ac908490612d5f565b909155505050505050565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600c602052604090205480158015906121ec5750600082115b156122855773ffffffffffffffffffffffffffffffffffffffff841660009081526002602052604081205490816122238185612a22565b61222d9086612d22565b6122379190612d0e565b90506122438185612d5f565b73ffffffffffffffffffffffffffffffffffffffff87166000908152600c602052604081208054929650839290919061227d908490612d5f565b909155505050505b73ffffffffffffffffffffffffffffffffffffffff8085166000908152600b6020526040902054166122f5606560005260046020527ffe4d1297c5434445a55041cf44037c0799556cc55064da684dc6eed1a5dccabf5473ffffffffffffffffffffffffffffffffffffffff1690565b6040517fd9caed1200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8381166004830152868116602483015260448201869052919091169063d9caed12906064015b600060405180830381600087803b15801561237057600080fd5b505af1158015612384573d6000803e3d6000fd5b505050505050505050565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600a60205260409020546123fd606c60005260046020527f8b685361ee213407f41a019b5dbc17edecc44c9f276819680a1bcb10c2f13bb85473ffffffffffffffffffffffffffffffffffffffff1690565b6040517fc6c9faa10000000000000000000000000000000000000000000000000000000081526004810183905273ffffffffffffffffffffffffffffffffffffffff868116602483015260448201859052919091169063c6c9faa190606401600060405180830381600087803b15801561247657600080fd5b505af115801561248a573d6000803e3d6000fd5b5050505050505050565b6000808360010154836124a79190612d5f565b90506104b08111156124c5576124bd8482612a3a565b9150506110dc565b505081546110dc565b5092915050565b606560005260046020527ffe4d1297c5434445a55041cf44037c0799556cc55064da684dc6eed1a5dccabf5473ffffffffffffffffffffffffffffffffffffffff166040517fb3db428b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8481166004830152858116602483015260448201849052919091169063b3db428b90606401600060405180830381600087803b15801561259157600080fd5b505af11580156125a5573d6000803e3d6000fd5b50505050505050565b73ffffffffffffffffffffffffffffffffffffffff80841660009081526008602090815260408083209386168352929052206125ea8482612001565b73ffffffffffffffffffffffffffffffffffffffff8416600090815260066020526040902080546001830155612622610e1042612daf565b600283015581548390839060009061263b908490612cf6565b909155505073ffffffffffffffffffffffffffffffffffffffff851660009081526002602052604081208054859290612675908490612cf6565b90915550505050505050565b60006126cb606c60005260046020527f8b685361ee213407f41a019b5dbc17edecc44c9f276819680a1bcb10c2f13bb85473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff8481166000908152600a6020526040908190205490517f2b5de286000000000000000000000000000000000000000000000000000000008152600481018290528783166024820152604481018690529293509190831690632b5de28690606401612356565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156127ad57600080fd5b505afa1580156127c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127e59190612bb2565b905090565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663c34c08e56040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561285457600080fd5b505af11580156127c1573d6000803e3d6000fd5b600081600101544261287a9190612d5f565b90506104b0811115610a0f576128908282612a3a565b82554260018301555050565b6001820154600090816128af8242612d5f565b90508381111561299d5773ffffffffffffffffffffffffffffffffffffffff861660009081526003602052604090206128e88683612a3a565b865573ffffffffffffffffffffffffffffffffffffffff87166000908152600260205260409020805460018201546129209190612afd565b600288015542600188015561293482612868565b612992612238606461294c6401000000006006612d22565b6129569190612d0e565b6129609190612d0e565b61296f90640100000000612cf6565b606489600201546009546129839190612d22565b61298d9190612d0e565b612b7e565b826002018190555050505b5092949350505050565b6000816129b48486612d22565b6129be9190612d0e565b949350505050565b600281015460009081610e106129e3640100000000612710612d22565b6129ef84612710612d22565b6129f99190612d5f565b612a07906301e13380612d22565b612a119190612d0e565b90506129be64010000000082612d0e565b600081831115612a335750806110dc565b50816110dc565b600080612a49610e1084612daf565b9050612a5c640100000000610e10612d22565b816401000000008660020154612a729190612d5f565b8654612a7e9190612d22565b612a889190612d22565b612a929190612d0e565b8454612a9e9190612cf6565b91506000612aae610e1085612d0e565b90508015612af55760005b808211156110d857640100000000866002015485612ad79190612d22565b612ae19190612d0e565b935080612aed81612d76565b915050612ab9565b505092915050565b640100000000600083612b11846064612d22565b612b1b9190612d0e565b90506046811015612b4457600054612b339082612d22565b612b3d9083612cf6565b91506124ce565b600154612b52604683612d5f565b612b5c9190612d22565b600054612b6a906046612d22565b612b749190612cf6565b6129be9083612cf6565b600081831115612b8f5750816110dc565b50806110dc565b600060208284031215612ba7578081fd5b813561095381612e21565b600060208284031215612bc3578081fd5b815161095381612e21565b60008060408385031215612be0578081fd5b8235612beb81612e21565b91506020830135612bfb81612e21565b809150509250929050565b60008060408385031215612c18578182fd5b8235612c2381612e21565b946020939093013593505050565b60008060408385031215612c43578182fd5b8235612c4e81612e21565b9150602083013560ff81168114612bfb578182fd5b600060208284031215612c74578081fd5b81518015158114610953578182fd5b600060208284031215612c94578081fd5b5035919050565b60008060408385031215612cad578182fd5b823591506020830135612bfb81612e21565b600080600060608486031215612cd3578081fd5b833592506020840135612ce581612e21565b929592945050506040919091013590565b60008219821115612d0957612d09612dc3565b500190565b600082612d1d57612d1d612df2565b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612d5a57612d5a612dc3565b500290565b600082821015612d7157612d71612dc3565b500390565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612da857612da8612dc3565b5060010190565b600082612dbe57612dbe612df2565b500690565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff81168114610ecd57600080fdfea264697066735822122014171bfb08133ab1d701490a3264276627a0b969fd7f6a62e95db0491b30c6a564736f6c63430008030033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "applyBorrowInterest(uint256,address,uint256)": {
        "details": "how much interest has accrued to a borrowed balance over time"
      },
      "buyHourlyBondSubscription(address,uint256)": {
        "details": "buy hourly bond subscription"
      },
      "payOff(address,uint256)": {
        "details": "gets called by router if loan is extinguished"
      },
      "registerBorrow(address,uint256)": {
        "details": "gets called by router to register if a trader borrows issuers"
      },
      "registerLend(address,uint256)": {
        "details": "gets called when external sources provide lending"
      },
      "registerWithdrawal(address,uint256)": {
        "details": "gets called when external sources pay withdraw their bobnd"
      },
      "updateHourlyYield(address)": {
        "details": "updates yield accumulators for both borrowing and lending issuer address represents a token"
      },
      "viewAccumulatedBorrowingYieldFP(address)": {
        "details": "get the borrow yield for a specific issuer/token"
      },
      "viewBorrowAPRPer10k(address)": {
        "details": "get current borrowing interest per 10k for a token / issuer"
      },
      "viewHourlyBondAPRPer10k(address)": {
        "details": "get current lending APR per 10k for a token / issuer"
      },
      "viewWithBorrowInterest(uint256,address,uint256)": {
        "details": "view function to get balance with borrowing interest applied"
      },
      "withdrawHourlyBond(address,uint256)": {
        "details": "withdraw an hour bond"
      }
    },
    "title": "Manage lending for a variety of bond issuers",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "activateIssuer(address)": {
        "notice": "Make a issuer available for protocol"
      },
      "activateIssuer(address,address)": {
        "notice": "Make issuer != token available for protocol (isol. margin)"
      },
      "activeIssuers(address)": {
        "notice": "map of available issuers"
      },
      "closeHourlyBondAccount(address)": {
        "notice": "Shut down hourly bond account for `issuer`"
      },
      "deactivateIssuer(address)": {
        "notice": "Remove a issuer from trading availability"
      },
      "haircuts(address)": {
        "notice": "In case of shortfall, adjust debt"
      },
      "issuerTokens(address)": {
        "notice": "mapping issuers to tokens (in crossmargin, the issuers are tokens  themselves)"
      },
      "setHourlyYieldAPR(address,uint256)": {
        "notice": "Set hourly yield APR for issuer"
      },
      "setIncentiveTranche(address,uint8)": {
        "notice": "Set incentive tranche"
      },
      "setLendingCap(address,uint256)": {
        "notice": "Set lending cap"
      },
      "setWithdrawalWindow(uint256)": {
        "notice": "Set withdrawal window"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1708,
        "contract": "contracts/Lending.sol:Lending",
        "label": "normalRatePerPercent",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 1724,
        "contract": "contracts/Lending.sol:Lending",
        "label": "highRatePerPercent",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 1743,
        "contract": "contracts/Lending.sol:Lending",
        "label": "lendingMeta",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_struct(LendingMetadata)1738_storage)"
      },
      {
        "astId": 1749,
        "contract": "contracts/Lending.sol:Lending",
        "label": "borrowYieldAccumulators",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_struct(YieldAccumulator)1731_storage)"
      },
      {
        "astId": 10413,
        "contract": "contracts/Lending.sol:Lending",
        "label": "mainCharacterCache",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 10419,
        "contract": "contracts/Lending.sol:Lending",
        "label": "roleCache",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 5521,
        "contract": "contracts/Lending.sol:Lending",
        "label": "hourlyBondYieldAccumulators",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_struct(YieldAccumulator)1731_storage)"
      },
      {
        "astId": 5527,
        "contract": "contracts/Lending.sol:Lending",
        "label": "withdrawalWindow",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 5534,
        "contract": "contracts/Lending.sol:Lending",
        "label": "hourlyBondAccounts",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_mapping(t_address,t_struct(HourlyBond)5513_storage))"
      },
      {
        "astId": 5537,
        "contract": "contracts/Lending.sol:Lending",
        "label": "borrowingFactorPercent",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 6228,
        "contract": "contracts/Lending.sol:Lending",
        "label": "incentiveTranches",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 7442,
        "contract": "contracts/Lending.sol:Lending",
        "label": "issuerTokens",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 7447,
        "contract": "contracts/Lending.sol:Lending",
        "label": "haircuts",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 7452,
        "contract": "contracts/Lending.sol:Lending",
        "label": "activeIssuers",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_struct(HourlyBond)5513_storage))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => struct HourlyBond))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(HourlyBond)5513_storage)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_address,t_struct(HourlyBond)5513_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct HourlyBond)",
        "numberOfBytes": "32",
        "value": "t_struct(HourlyBond)5513_storage"
      },
      "t_mapping(t_address,t_struct(LendingMetadata)1738_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct BaseLending.LendingMetadata)",
        "numberOfBytes": "32",
        "value": "t_struct(LendingMetadata)1738_storage"
      },
      "t_mapping(t_address,t_struct(YieldAccumulator)1731_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct BaseLending.YieldAccumulator)",
        "numberOfBytes": "32",
        "value": "t_struct(YieldAccumulator)1731_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_struct(HourlyBond)5513_storage": {
        "encoding": "inplace",
        "label": "struct HourlyBond",
        "members": [
          {
            "astId": 5508,
            "contract": "contracts/Lending.sol:Lending",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5510,
            "contract": "contracts/Lending.sol:Lending",
            "label": "yieldQuotientFP",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5512,
            "contract": "contracts/Lending.sol:Lending",
            "label": "moduloHour",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(LendingMetadata)1738_storage": {
        "encoding": "inplace",
        "label": "struct BaseLending.LendingMetadata",
        "members": [
          {
            "astId": 1733,
            "contract": "contracts/Lending.sol:Lending",
            "label": "totalLending",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1735,
            "contract": "contracts/Lending.sol:Lending",
            "label": "totalBorrowed",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1737,
            "contract": "contracts/Lending.sol:Lending",
            "label": "lendingCap",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(YieldAccumulator)1731_storage": {
        "encoding": "inplace",
        "label": "struct BaseLending.YieldAccumulator",
        "members": [
          {
            "astId": 1726,
            "contract": "contracts/Lending.sol:Lending",
            "label": "accumulatorFP",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1728,
            "contract": "contracts/Lending.sol:Lending",
            "label": "lastUpdated",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1730,
            "contract": "contracts/Lending.sol:Lending",
            "label": "hourlyYieldFP",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}