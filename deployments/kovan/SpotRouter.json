{
  "address": "0xF3275cB2d23d38DF9F933cD0deBa301450f1C948",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_WETH",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "WETH",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "outAmount",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "pairs",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        }
      ],
      "name": "getAmountsIn",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "inAmount",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "pairs",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        }
      ],
      "name": "getAmountsOut",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "pairs",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapETHForExactTokens",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "pairs",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactETHForTokens",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "pairs",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactTokensForETH",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "pairs",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapExactTokensForTokens",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountInMax",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "pairs",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapTokensForExactETH",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amountOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountInMax",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "pairs",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "tokens",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        }
      ],
      "name": "swapTokensForExactTokens",
      "outputs": [
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xc0122e8a8fd467f541e1704d10b2b97407bced87765552502cc1b8db7810c7dc",
  "receipt": {
    "to": null,
    "from": "0x23292e9BA8434e59E6BAC1907bA7425211c4DE27",
    "contractAddress": "0xF3275cB2d23d38DF9F933cD0deBa301450f1C948",
    "transactionIndex": 4,
    "gasUsed": "2559901",
    "logsBloom": "0x
    "blockHash": "0x1d372e882ce8d11917bacfe9dbcd0fddd743feba637a00c17b3ca2df3839326a",
    "transactionHash": "0xc0122e8a8fd467f541e1704d10b2b97407bced87765552502cc1b8db7810c7dc",
    "logs": [],
    "blockNumber": 24147106,
    "cumulativeGasUsed": "3090080",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2"
  ],
  "solcInputHash": "c68a8c1574cf5941f3f0f72108221e5d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_WETH\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"outAmount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"pairs\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"getAmountsIn\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"inAmount\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"pairs\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"}],\"name\":\"getAmountsOut\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"pairs\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapETHForExactTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"pairs\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactETHForTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"pairs\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForETH\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"pairs\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"pairs\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapTokensForExactETH\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"pairs\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"tokens\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapTokensForExactTokens\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SpotRouter.sol\":\"SpotRouter\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":9900},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x1cae4f85f114ff17b90414f5da67365b1d00337abb5bce9bf944eb78a2c0673c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        //b We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xdbc26166a75ce890d66afd1793a9d0aa03b6a6b892d744bfae8e4b252c638fda\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x7c9bc70e5996c763e02ff38905282bc24fb242b0ef2519a003b36824fc524a4b\"},\"contracts/BaseRouter.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Fund.sol\\\";\\nimport \\\"../libraries/UniswapStyleLib.sol\\\";\\n\\nabstract contract BaseRouter {\\n    /// @notice wrapped ETH ERC20 contract\\n\\n    modifier ensure(uint256 deadline) {\\n        require(deadline >= block.timestamp, \\\"Trade has expired\\\");\\n        _;\\n    }\\n\\n    // **** SWAP ****\\n    /// @dev requires the initial amount to have already been sent to the first pair\\n    function _swap(\\n        uint256[] memory amounts,\\n        address[] memory pairs,\\n        address[] memory tokens,\\n        address _to\\n    ) internal {\\n        address outToken = tokens[tokens.length - 1];\\n        uint256 startingBalance = IERC20(outToken).balanceOf(_to);\\n        for (uint256 i; i < pairs.length; i++) {\\n            (address input, address output) = (tokens[i], tokens[i + 1]);\\n            (address token0, ) = UniswapStyleLib.sortTokens(input, output);\\n\\n            uint256 amountOut = amounts[i + 1];\\n\\n            (uint256 amount0Out, uint256 amount1Out) =\\n                input == token0\\n                    ? (uint256(0), amountOut)\\n                    : (amountOut, uint256(0));\\n\\n            address to = i < pairs.length - 1 ? pairs[i + 1] : _to;\\n            IUniswapV2Pair pair = IUniswapV2Pair(pairs[i]);\\n            pair.swap(amount0Out, amount1Out, to, new bytes(0));\\n        }\\n\\n        uint256 endingBalance = IERC20(outToken).balanceOf(_to);\\n        require(\\n            endingBalance >= startingBalance + amounts[amounts.length - 1],\\n            \\\"Defective AMM route; balances don't match\\\"\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x5580f1fdf58de5754a157fde002e01ac31d140138db9af2d7a0e78a7239a3d63\",\"license\":\"BUSL-1.1\"},\"contracts/Fund.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"../interfaces/IWETH.sol\\\";\\nimport \\\"./RoleAware.sol\\\";\\n\\n/// @title Manage funding\\ncontract Fund is RoleAware {\\n    using SafeERC20 for IERC20;\\n    /// wrapped ether\\n    address public immutable WETH;\\n\\n    constructor(address _WETH, address _roles) RoleAware(_roles) {\\n        WETH = _WETH;\\n    }\\n\\n    /// Deposit an active token\\n    function deposit(address depositToken, uint256 depositAmount) external {\\n        IERC20(depositToken).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            depositAmount\\n        );\\n    }\\n\\n    /// Deposit token on behalf of `sender`\\n    function depositFor(\\n        address sender,\\n        address depositToken,\\n        uint256 depositAmount\\n    ) external {\\n        require(\\n            isFundTransferer(msg.sender),\\n            \\\"Contract not authorized to deposit for user\\\"\\n        );\\n        IERC20(depositToken).safeTransferFrom(\\n            sender,\\n            address(this),\\n            depositAmount\\n        );\\n    }\\n\\n    /// Deposit to wrapped ether\\n    function depositToWETH() external payable {\\n        IWETH(WETH).deposit{value: msg.value}();\\n    }\\n\\n    // withdrawers role\\n    function withdraw(\\n        address withdrawalToken,\\n        address recipient,\\n        uint256 withdrawalAmount\\n    ) external {\\n        require(\\n            isFundTransferer(msg.sender),\\n            \\\"Contract not authorized to withdraw\\\"\\n        );\\n        IERC20(withdrawalToken).safeTransfer(recipient, withdrawalAmount);\\n    }\\n\\n    // withdrawers role\\n    function withdrawETH(address recipient, uint256 withdrawalAmount) external {\\n        require(isFundTransferer(msg.sender), \\\"Not authorized to withdraw\\\");\\n        IWETH(WETH).withdraw(withdrawalAmount);\\n        Address.sendValue(payable(recipient), withdrawalAmount);\\n    }\\n}\\n\",\"keccak256\":\"0x52f9f08048d3fbc3214259051c0fbfd5e6a6247542deb50c088af3d8aff9ff03\",\"license\":\"BUSL-1.1\"},\"contracts/RoleAware.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Roles.sol\\\";\\n\\n/// @title Role management behavior\\n/// Main characters are for service discovery\\n/// Whereas roles are for access control\\ncontract RoleAware {\\n    Roles public immutable roles;\\n    mapping(uint256 => address) public mainCharacterCache;\\n    mapping(address => mapping(uint256 => bool)) public roleCache;\\n\\n    constructor(address _roles) {\\n        require(_roles != address(0), \\\"Please provide valid roles address\\\");\\n        roles = Roles(_roles);\\n    }\\n\\n    modifier noIntermediary() {\\n        require(\\n            msg.sender == tx.origin,\\n            \\\"Currently no intermediaries allowed for this function call\\\"\\n        );\\n        _;\\n    }\\n\\n    // @dev Throws if called by any account other than the owner or executor\\n    modifier onlyOwnerExec() {\\n        require(\\n            owner() == msg.sender || executor() == msg.sender,\\n            \\\"Roles: caller is not the owner\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyOwnerExecDisabler() {\\n        require(\\n            owner() == msg.sender ||\\n                executor() == msg.sender ||\\n                disabler() == msg.sender,\\n            \\\"Caller is not the owner, executor or authorized disabler\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyOwnerExecActivator() {\\n        require(\\n            owner() == msg.sender ||\\n                executor() == msg.sender ||\\n                isTokenActivator(msg.sender),\\n            \\\"Caller is not the owner, executor or authorized activator\\\"\\n        );\\n        _;\\n    }\\n\\n    function updateRoleCache(uint256 role, address contr) public virtual {\\n        roleCache[contr][role] = roles.getRole(role, contr);\\n    }\\n\\n    function updateMainCharacterCache(uint256 role) public virtual {\\n        mainCharacterCache[role] = roles.mainCharacters(role);\\n    }\\n\\n    function owner() internal view returns (address) {\\n        return roles.owner();\\n    }\\n\\n    function executor() internal returns (address) {\\n        return roles.executor();\\n    }\\n\\n    function disabler() internal view returns (address) {\\n        return mainCharacterCache[DISABLER];\\n    }\\n\\n    function fund() internal view returns (address) {\\n        return mainCharacterCache[FUND];\\n    }\\n\\n    function lending() internal view returns (address) {\\n        return mainCharacterCache[LENDING];\\n    }\\n\\n    function marginRouter() internal view returns (address) {\\n        return mainCharacterCache[MARGIN_ROUTER];\\n    }\\n\\n    function crossMarginTrading() internal view returns (address) {\\n        return mainCharacterCache[CROSS_MARGIN_TRADING];\\n    }\\n\\n    function feeController() internal view returns (address) {\\n        return mainCharacterCache[FEE_CONTROLLER];\\n    }\\n\\n    function price() internal view returns (address) {\\n        return mainCharacterCache[PRICE_CONTROLLER];\\n    }\\n\\n    function admin() internal view returns (address) {\\n        return mainCharacterCache[ADMIN];\\n    }\\n\\n    function incentiveDistributor() internal view returns (address) {\\n        return mainCharacterCache[INCENTIVE_DISTRIBUTION];\\n    }\\n\\n    function tokenAdmin() internal view returns (address) {\\n        return mainCharacterCache[TOKEN_ADMIN];\\n    }\\n\\n    function isBorrower(address contr) internal view returns (bool) {\\n        return roleCache[contr][BORROWER];\\n    }\\n\\n    function isFundTransferer(address contr) internal view returns (bool) {\\n        return roleCache[contr][FUND_TRANSFERER];\\n    }\\n\\n    function isMarginTrader(address contr) internal view returns (bool) {\\n        return roleCache[contr][MARGIN_TRADER];\\n    }\\n\\n    function isFeeSource(address contr) internal view returns (bool) {\\n        return roleCache[contr][FEE_SOURCE];\\n    }\\n\\n    function isMarginCaller(address contr) internal view returns (bool) {\\n        return roleCache[contr][MARGIN_CALLER];\\n    }\\n\\n    function isLiquidator(address contr) internal view returns (bool) {\\n        return roleCache[contr][LIQUIDATOR];\\n    }\\n\\n    function isAuthorizedFundTrader(address contr)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return roleCache[contr][AUTHORIZED_FUND_TRADER];\\n    }\\n\\n    function isIncentiveReporter(address contr) internal view returns (bool) {\\n        return roleCache[contr][INCENTIVE_REPORTER];\\n    }\\n\\n    function isTokenActivator(address contr) internal view returns (bool) {\\n        return roleCache[contr][TOKEN_ACTIVATOR];\\n    }\\n\\n    function isStakePenalizer(address contr) internal view returns (bool) {\\n        return roles.getRole(STAKE_PENALIZER, contr);\\n    }\\n}\\n\",\"keccak256\":\"0xc3fbdad2d0bc97eeb80bea6a4f40cf6059e1cca3de08db5f6522bbdbfda02206\",\"license\":\"BUSL-1.1\"},\"contracts/Roles.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../interfaces/IDependencyController.sol\\\";\\n\\n// we chose not to go with an enum\\n// to make this list easy to extend\\nuint256 constant FUND_TRANSFERER = 1;\\nuint256 constant MARGIN_CALLER = 2;\\nuint256 constant BORROWER = 3;\\nuint256 constant MARGIN_TRADER = 4;\\nuint256 constant FEE_SOURCE = 5;\\nuint256 constant LIQUIDATOR = 6;\\nuint256 constant AUTHORIZED_FUND_TRADER = 7;\\nuint256 constant INCENTIVE_REPORTER = 8;\\nuint256 constant TOKEN_ACTIVATOR = 9;\\nuint256 constant STAKE_PENALIZER = 10;\\n\\nuint256 constant FUND = 101;\\nuint256 constant LENDING = 102;\\nuint256 constant MARGIN_ROUTER = 103;\\nuint256 constant CROSS_MARGIN_TRADING = 104;\\nuint256 constant FEE_CONTROLLER = 105;\\nuint256 constant PRICE_CONTROLLER = 106;\\nuint256 constant ADMIN = 107;\\nuint256 constant INCENTIVE_DISTRIBUTION = 108;\\nuint256 constant TOKEN_ADMIN = 109;\\n\\nuint256 constant DISABLER = 1001;\\nuint256 constant DEPENDENCY_CONTROLLER = 1002;\\n\\n/// @title Manage permissions of contracts and ownership of everything\\n/// owned by a multisig wallet (0xEED9D1c6B4cdEcB3af070D85bfd394E7aF179CBd) during\\n/// beta and will then be transfered to governance\\n/// https://github.com/marginswap/governance\\ncontract Roles is Ownable {\\n    mapping(address => mapping(uint256 => bool)) public roles;\\n    mapping(uint256 => address) public mainCharacters;\\n\\n    constructor() Ownable() {\\n        // token activation from the get-go\\n        roles[msg.sender][TOKEN_ACTIVATOR] = true;\\n    }\\n\\n    /// @dev Throws if called by any account other than the owner.\\n    modifier onlyOwnerExecDepController() {\\n        require(\\n            owner() == msg.sender ||\\n                executor() == msg.sender ||\\n                mainCharacters[DEPENDENCY_CONTROLLER] == msg.sender,\\n            \\\"Roles: caller is not the owner\\\"\\n        );\\n        _;\\n    }\\n\\n    function giveRole(uint256 role, address actor)\\n        external\\n        onlyOwnerExecDepController\\n    {\\n        roles[actor][role] = true;\\n    }\\n\\n    function removeRole(uint256 role, address actor)\\n        external\\n        onlyOwnerExecDepController\\n    {\\n        roles[actor][role] = false;\\n    }\\n\\n    function setMainCharacter(uint256 role, address actor)\\n        external\\n        onlyOwnerExecDepController\\n    {\\n        mainCharacters[role] = actor;\\n    }\\n\\n    function getRole(uint256 role, address contr) external view returns (bool) {\\n        return roles[contr][role];\\n    }\\n\\n    /// @dev current executor\\n    function executor() public returns (address exec) {\\n        address depController = mainCharacters[DEPENDENCY_CONTROLLER];\\n        if (depController != address(0)) {\\n            exec = IDependencyController(depController).currentExecutor();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9e79bffa78d2e02375f4ea3aae3d58388299fda9b0223555730302e1656090fd\",\"license\":\"BUSL-1.1\"},\"contracts/SpotRouter.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"../libraries/UniswapStyleLib.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"../interfaces/IWETH.sol\\\";\\nimport \\\"./BaseRouter.sol\\\";\\n\\ncontract SpotRouter is BaseRouter {\\n    using SafeERC20 for IERC20;\\n    address public immutable WETH;\\n\\n    constructor(address _WETH) {\\n        WETH = _WETH;\\n    }\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata pairs,\\n        address[] calldata tokens,\\n        address to,\\n        uint256 deadline\\n    ) external ensure(deadline) returns (uint256[] memory amounts) {\\n        amounts = UniswapStyleLib.getAmountsOut(amountIn, pairs, tokens);\\n        require(\\n            amounts[amounts.length - 1] >= amountOutMin,\\n            \\\"SpotRouter: INSUFFICIENT_OUTPUT_AMOUNT\\\"\\n        );\\n\\n        IERC20(tokens[0]).safeTransferFrom(msg.sender, pairs[0], amounts[0]);\\n        _swap(amounts, pairs, tokens, to);\\n    }\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata pairs,\\n        address[] calldata tokens,\\n        address to,\\n        uint256 deadline\\n    ) external ensure(deadline) returns (uint256[] memory amounts) {\\n        amounts = UniswapStyleLib.getAmountsIn(amountOut, pairs, tokens);\\n        require(\\n            amounts[0] <= amountInMax,\\n            \\\"SpotRouter: EXCESSIVE_INPUT_AMOUNT\\\"\\n        );\\n\\n        IERC20(tokens[0]).safeTransferFrom(msg.sender, pairs[0], amounts[0]);\\n        _swap(amounts, pairs, tokens, to);\\n    }\\n\\n    function swapExactETHForTokens(\\n        uint256 amountOutMin,\\n        address[] calldata pairs,\\n        address[] calldata tokens,\\n        address to,\\n        uint256 deadline\\n    ) external payable ensure(deadline) returns (uint256[] memory amounts) {\\n        require(tokens[0] == WETH, \\\"SpotRouter: INVALID_PATH\\\");\\n        amounts = UniswapStyleLib.getAmountsOut(msg.value, pairs, tokens);\\n        require(\\n            amounts[amounts.length - 1] >= amountOutMin,\\n            \\\"SpotRouter: INSUFFICIENT_OUTPUT_AMOUNT\\\"\\n        );\\n\\n        IWETH(WETH).deposit{value: amounts[0]}();\\n        assert(IWETH(WETH).transfer(pairs[0], msg.value));\\n\\n        _swap(amounts, pairs, tokens, to);\\n    }\\n\\n    function swapTokensForExactETH(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata pairs,\\n        address[] calldata tokens,\\n        address to,\\n        uint256 deadline\\n    ) external ensure(deadline) returns (uint256[] memory amounts) {\\n        require(tokens[tokens.length - 1] == WETH, \\\"SpotRouter: INVALID_PATH\\\");\\n        amounts = UniswapStyleLib.getAmountsIn(amountOut, pairs, tokens);\\n        require(\\n            amounts[0] <= amountInMax,\\n            \\\"SpotRouter: EXCESSIVE_INPUT_AMOUNT\\\"\\n        );\\n\\n        IERC20(tokens[0]).safeTransferFrom(msg.sender, pairs[0], amounts[0]);\\n\\n        _swap(amounts, pairs, tokens, address(this));\\n        IWETH(WETH).withdraw(amounts[amounts.length - 1]);\\n        Address.sendValue(payable(to), amounts[amounts.length - 1]);\\n    }\\n\\n    function swapExactTokensForETH(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata pairs,\\n        address[] calldata tokens,\\n        address to,\\n        uint256 deadline\\n    ) external ensure(deadline) returns (uint256[] memory amounts) {\\n        require(tokens[tokens.length - 1] == WETH, \\\"SpotRouter: INVALID_PATH\\\");\\n        amounts = UniswapStyleLib.getAmountsOut(amountIn, pairs, tokens);\\n        require(\\n            amounts[amounts.length - 1] >= amountOutMin,\\n            \\\"SpotRouter: INSUFFICIENT_OUTPUT_AMOUNT\\\"\\n        );\\n\\n        _swap(amounts, pairs, tokens, address(this));\\n\\n        IWETH(WETH).withdraw(amounts[amounts.length - 1]);\\n        Address.sendValue(payable(to), amounts[amounts.length - 1]);\\n    }\\n\\n    function swapETHForExactTokens(\\n        uint256 amountOut,\\n        address[] calldata pairs,\\n        address[] calldata tokens,\\n        address to,\\n        uint256 deadline\\n    ) external payable ensure(deadline) returns (uint256[] memory amounts) {\\n        require(tokens[0] == WETH, \\\"SpotRouter: INVALID_PATH\\\");\\n        amounts = UniswapStyleLib.getAmountsIn(amountOut, pairs, tokens);\\n        require(amounts[0] <= msg.value, \\\"SpotRouter: EXCESSIVE_INPUT_AMOUNT\\\");\\n\\n        IWETH(WETH).deposit{value: amounts[0]}();\\n        assert(IWETH(WETH).transfer(pairs[0], amounts[0]));\\n\\n        _swap(amounts, pairs, tokens, to);\\n        // refund dust eth, if any\\n        if (msg.value > amounts[0])\\n            Address.sendValue(payable(msg.sender), msg.value - amounts[0]);\\n    }\\n\\n    function getAmountsOut(\\n        uint256 inAmount,\\n        address[] calldata pairs,\\n        address[] calldata tokens\\n    ) external view returns (uint256[] memory) {\\n        return UniswapStyleLib.getAmountsOut(inAmount, pairs, tokens);\\n    }\\n\\n    function getAmountsIn(\\n        uint256 outAmount,\\n        address[] calldata pairs,\\n        address[] calldata tokens\\n    ) external view returns (uint256[] memory) {\\n        return UniswapStyleLib.getAmountsIn(outAmount, pairs, tokens);\\n    }\\n}\",\"keccak256\":\"0xf0c3376b61cede23d5abc39be798838238519c7059cf26907d8b32bdbbd227ea\",\"license\":\"BUSL-1.1\"},\"interfaces/IDependencyController.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\ninterface IDependencyController {\\n    function currentExecutor() external returns (address);\\n}\\n\",\"keccak256\":\"0xc65a455a81ab4bc8e0737d03691c159f28bfd6885ef8b99ddd8dec558ccfeb32\",\"license\":\"BUSL-1.1\"},\"interfaces/IWETH.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function withdraw(uint256) external;\\n}\\n\",\"keccak256\":\"0xf85de70a597a9f21052bd1ad25c755cda197102f4aebdb3c3c20f2405bd7442b\"},\"libraries/UniswapStyleLib.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\n\\nlibrary UniswapStyleLib {\\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\\n    function sortTokens(address tokenA, address tokenB)\\n        internal\\n        pure\\n        returns (address token0, address token1)\\n    {\\n        require(tokenA != tokenB, \\\"Identical address!\\\");\\n        (token0, token1) = tokenA < tokenB\\n            ? (tokenA, tokenB)\\n            : (tokenB, tokenA);\\n        require(token0 != address(0), \\\"Zero address!\\\");\\n    }\\n\\n    // fetches and sorts the reserves for a pair\\n    function getReserves(\\n        address pair,\\n        address tokenA,\\n        address tokenB\\n    ) internal view returns (uint256 reserveA, uint256 reserveB) {\\n        (address token0, ) = sortTokens(tokenA, tokenB);\\n        (uint256 reserve0, uint256 reserve1, ) =\\n            IUniswapV2Pair(pair).getReserves();\\n        (reserveA, reserveB) = tokenA == token0\\n            ? (reserve0, reserve1)\\n            : (reserve1, reserve0);\\n    }\\n\\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) internal pure returns (uint256 amountOut) {\\n        require(amountIn > 0, \\\"UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT\\\");\\n        require(\\n            reserveIn > 0 && reserveOut > 0,\\n            \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\"\\n        );\\n        uint256 amountInWithFee = amountIn * 997;\\n        uint256 numerator = amountInWithFee * reserveOut;\\n        uint256 denominator = reserveIn * 1_000 + amountInWithFee;\\n        amountOut = numerator / denominator;\\n    }\\n\\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) internal pure returns (uint256 amountIn) {\\n        require(amountOut > 0, \\\"UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n        require(\\n            reserveIn > 0 && reserveOut > 0,\\n            \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\"\\n        );\\n        uint256 numerator = reserveIn * amountOut * 1_000;\\n        uint256 denominator = (reserveOut - amountOut) - 997;\\n        amountIn = (numerator / denominator) + 1;\\n    }\\n\\n    // performs chained getAmountOut calculations on any number of pairs\\n    function getAmountsOut(\\n        uint256 amountIn,\\n        address[] memory pairs,\\n        address[] memory tokens\\n    ) internal view returns (uint256[] memory amounts) {\\n        require(pairs.length >= 1, \\\"pairs is too short\\\");\\n\\n        amounts = new uint256[](tokens.length);\\n        amounts[0] = amountIn;\\n\\n        for (uint256 i; i < tokens.length - 1; i++) {\\n            address pair = pairs[i];\\n\\n            (uint256 reserveIn, uint256 reserveOut) =\\n                getReserves(pair, tokens[i], tokens[i + 1]);\\n\\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\\n        }\\n    }\\n\\n    // performs chained getAmountIn calculations on any number of pairs\\n    function getAmountsIn(\\n        uint256 amountOut,\\n        address[] memory pairs,\\n        address[] memory tokens\\n    ) internal view returns (uint256[] memory amounts) {\\n        require(pairs.length >= 1, \\\"pairs is too short\\\");\\n\\n        amounts = new uint256[](tokens.length);\\n        amounts[amounts.length - 1] = amountOut;\\n\\n        for (uint256 i = tokens.length - 1; i > 0; i--) {\\n            address pair = pairs[i - 1];\\n\\n            (uint256 reserveIn, uint256 reserveOut) =\\n                getReserves(pair, tokens[i - 1], tokens[i]);\\n\\n            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x763d316ede8b580f3a637c9521959a0cbfcaba8fe3b53b30eaca2e8c85da7671\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b5060405162002e5538038062002e5583398101604081905262000034916200004a565b60601b6001600160601b0319166080526200007a565b6000602082840312156200005c578081fd5b81516001600160a01b038116811462000073578182fd5b9392505050565b60805160601c612d7d620000d8600039600081816101430152818161025f015281816104ad0152818161062101528181610bdd01528181610dc701528181610e70015281816111dc015281816113ba01526114630152612d7d6000f3fe6080604052600436106100965760003560e01c8063ad5c464811610069578063af55e31f1161004e578063af55e31f146101aa578063ceb757d5146101bd578063fc5b8bce146101dd57610096565b8063ad5c464814610131578063ae8290b71461018a57610096565b80636dce49ae1461009b57806389c27594146100d15780639e269b68146100f1578063a8312b1d14610111575b600080fd5b3480156100a757600080fd5b506100bb6100b6366004612a79565b6101f0565b6040516100c89190612b79565b60405180910390f35b3480156100dd57600080fd5b506100bb6100ec366004612a79565b6105b7565b3480156100fd57600080fd5b506100bb61010c366004612971565b6108a8565b34801561011d57600080fd5b506100bb61012c366004612971565b610922565b34801561013d57600080fd5b506101657f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100c8565b34801561019657600080fd5b506100bb6101a5366004612a79565b610992565b6100bb6101b83660046129e8565b610b88565b3480156101c957600080fd5b506100bb6101d8366004612a79565b61101a565b6100bb6101eb3660046129e8565b611187565b606081428110156102485760405162461bcd60e51b815260206004820152601160248201527f547261646520686173206578706972656400000000000000000000000000000060448201526064015b60405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016868661028c600182612c80565b8181106102a957634e487b7160e01b600052603260045260246000fd5b90506020020160208101906102be91906128d1565b73ffffffffffffffffffffffffffffffffffffffff16146103215760405162461bcd60e51b815260206004820152601860248201527f53706f74526f757465723a20494e56414c49445f504154480000000000000000604482015260640161023f565b61038f8a89898080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808d0282810182019093528c82529093508c92508b91829185019084908082843760009201919091525061168392505050565b91508882600184516103a19190612c80565b815181106103bf57634e487b7160e01b600052603260045260246000fd5b6020026020010151101561043b5760405162461bcd60e51b815260206004820152602660248201527f53706f74526f757465723a20494e53554646494349454e545f4f55545055545f60448201527f414d4f554e540000000000000000000000000000000000000000000000000000606482015260840161023f565b6104ab8289898080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808d0282810182019093528c82529093508c92508b91829185019084908082843760009201919091525030925061188f915050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d83600185516104f69190612c80565b8151811061051457634e487b7160e01b600052603260045260246000fd5b60200260200101516040518263ffffffff1660e01b815260040161053a91815260200190565b600060405180830381600087803b15801561055457600080fd5b505af1158015610568573d6000803e3d6000fd5b505050506105aa84836001855161057f9190612c80565b8151811061059d57634e487b7160e01b600052603260045260246000fd5b6020026020010151611d29565b5098975050505050505050565b6060814281101561060a5760405162461bcd60e51b815260206004820152601160248201527f5472616465206861732065787069726564000000000000000000000000000000604482015260640161023f565b73ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016868661064e600182612c80565b81811061066b57634e487b7160e01b600052603260045260246000fd5b905060200201602081019061068091906128d1565b73ffffffffffffffffffffffffffffffffffffffff16146106e35760405162461bcd60e51b815260206004820152601860248201527f53706f74526f757465723a20494e56414c49445f504154480000000000000000604482015260640161023f565b6107518a89898080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808d0282810182019093528c82529093508c92508b918291850190849080828437600092019190915250611e5492505050565b9150888260008151811061077557634e487b7160e01b600052603260045260246000fd5b602002602001015111156107f15760405162461bcd60e51b815260206004820152602260248201527f53706f74526f757465723a204558434553534956455f494e5055545f414d4f5560448201527f4e54000000000000000000000000000000000000000000000000000000000000606482015260840161023f565b61043b338989600081811061081657634e487b7160e01b600052603260045260246000fd5b905060200201602081019061082b91906128d1565b8460008151811061084c57634e487b7160e01b600052603260045260246000fd5b60200260200101518989600081811061087557634e487b7160e01b600052603260045260246000fd5b905060200201602081019061088a91906128d1565b73ffffffffffffffffffffffffffffffffffffffff16929190612062565b60606109188686868080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808a02828101820190935289825290935089925088918291850190849080828437600092019190915250611e5492505050565b9695505050505050565b60606109188686868080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808a0282810182019093528982529093508992508891829185019084908082843760009201919091525061168392505050565b606081428110156109e55760405162461bcd60e51b815260206004820152601160248201527f5472616465206861732065787069726564000000000000000000000000000000604482015260640161023f565b610a538a89898080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808d0282810182019093528c82529093508c92508b918291850190849080828437600092019190915250611e5492505050565b91508882600081518110610a7757634e487b7160e01b600052603260045260246000fd5b60200260200101511115610af35760405162461bcd60e51b815260206004820152602260248201527f53706f74526f757465723a204558434553534956455f494e5055545f414d4f5560448201527f4e54000000000000000000000000000000000000000000000000000000000000606482015260840161023f565b610b18338989600081811061081657634e487b7160e01b600052603260045260246000fd5b6105aa8289898080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808d0282810182019093528c82529093508c92508b9182918501908490808284376000920191909152508a925061188f915050565b60608142811015610bdb5760405162461bcd60e51b815260206004820152601160248201527f5472616465206861732065787069726564000000000000000000000000000000604482015260640161023f565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1686866000818110610c3357634e487b7160e01b600052603260045260246000fd5b9050602002016020810190610c4891906128d1565b73ffffffffffffffffffffffffffffffffffffffff1614610cab5760405162461bcd60e51b815260206004820152601860248201527f53706f74526f757465723a20494e56414c49445f504154480000000000000000604482015260640161023f565b610d193489898080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808d0282810182019093528c82529093508c92508b91829185019084908082843760009201919091525061168392505050565b9150888260018451610d2b9190612c80565b81518110610d4957634e487b7160e01b600052603260045260246000fd5b60200260200101511015610dc55760405162461bcd60e51b815260206004820152602660248201527f53706f74526f757465723a20494e53554646494349454e545f4f55545055545f60448201527f414d4f554e540000000000000000000000000000000000000000000000000000606482015260840161023f565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d0e30db083600081518110610e2257634e487b7160e01b600052603260045260246000fd5b60200260200101516040518263ffffffff1660e01b81526004016000604051808303818588803b158015610e5557600080fd5b505af1158015610e69573d6000803e3d6000fd5b50505050507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb89896000818110610ecb57634e487b7160e01b600052603260045260246000fd5b9050602002016020810190610ee091906128d1565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff9091166004820152346024820152604401602060405180830381600087803b158015610f4c57600080fd5b505af1158015610f60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f8491906128eb565b610f9e57634e487b7160e01b600052600160045260246000fd5b61100e8289898080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808d0282810182019093528c82529093508c92508b9182918501908490808284376000920191909152508a925061188f915050565b50979650505050505050565b6060814281101561106d5760405162461bcd60e51b815260206004820152601160248201527f5472616465206861732065787069726564000000000000000000000000000000604482015260640161023f565b6110db8a89898080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808d0282810182019093528c82529093508c92508b91829185019084908082843760009201919091525061168392505050565b91508882600184516110ed9190612c80565b8151811061110b57634e487b7160e01b600052603260045260246000fd5b60200260200101511015610af35760405162461bcd60e51b815260206004820152602660248201527f53706f74526f757465723a20494e53554646494349454e545f4f55545055545f60448201527f414d4f554e540000000000000000000000000000000000000000000000000000606482015260840161023f565b606081428110156111da5760405162461bcd60e51b815260206004820152601160248201527f5472616465206861732065787069726564000000000000000000000000000000604482015260640161023f565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168686600081811061123257634e487b7160e01b600052603260045260246000fd5b905060200201602081019061124791906128d1565b73ffffffffffffffffffffffffffffffffffffffff16146112aa5760405162461bcd60e51b815260206004820152601860248201527f53706f74526f757465723a20494e56414c49445f504154480000000000000000604482015260640161023f565b6113188989898080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808d0282810182019093528c82529093508c92508b918291850190849080828437600092019190915250611e5492505050565b9150348260008151811061133c57634e487b7160e01b600052603260045260246000fd5b602002602001015111156113b85760405162461bcd60e51b815260206004820152602260248201527f53706f74526f757465723a204558434553534956455f494e5055545f414d4f5560448201527f4e54000000000000000000000000000000000000000000000000000000000000606482015260840161023f565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d0e30db08360008151811061141557634e487b7160e01b600052603260045260246000fd5b60200260200101516040518263ffffffff1660e01b81526004016000604051808303818588803b15801561144857600080fd5b505af115801561145c573d6000803e3d6000fd5b50505050507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb898960008181106114be57634e487b7160e01b600052603260045260246000fd5b90506020020160208101906114d391906128d1565b846000815181106114f457634e487b7160e01b600052603260045260246000fd5b60200260200101516040518363ffffffff1660e01b815260040161153a92919073ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b602060405180830381600087803b15801561155457600080fd5b505af1158015611568573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061158c91906128eb565b6115a657634e487b7160e01b600052600160045260246000fd5b6116168289898080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808d0282810182019093528c82529093508c92508b9182918501908490808284376000920191909152508a925061188f915050565b8160008151811061163757634e487b7160e01b600052603260045260246000fd5b602002602001015134111561100e5761100e338360008151811061166b57634e487b7160e01b600052603260045260246000fd5b60200260200101513461167e9190612c80565b611d29565b60606001835110156116d75760405162461bcd60e51b815260206004820152601260248201527f706169727320697320746f6f2073686f72740000000000000000000000000000604482015260640161023f565b815167ffffffffffffffff8111156116ff57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611728578160200160208202803683370190505b509050838160008151811061174d57634e487b7160e01b600052603260045260246000fd5b60200260200101818152505060005b6001835161176a9190612c80565b81101561188757600084828151811061179357634e487b7160e01b600052603260045260246000fd5b60200260200101519050600080611805838786815181106117c457634e487b7160e01b600052603260045260246000fd5b6020026020010151888760016117da9190612c0b565b815181106117f857634e487b7160e01b600052603260045260246000fd5b60200260200101516120fd565b9150915061183b85858151811061182c57634e487b7160e01b600052603260045260246000fd5b60200260200101518383612201565b85611847866001612c0b565b8151811061186557634e487b7160e01b600052603260045260246000fd5b602002602001018181525050505050808061187f90612cf8565b91505061175c565b509392505050565b600082600184516118a09190612c80565b815181106118be57634e487b7160e01b600052603260045260246000fd5b60209081029190910101516040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301529192506000918316906370a082319060240160206040518083038186803b15801561193657600080fd5b505afa15801561194a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061196e9190612959565b905060005b8551811015611bc55760008086838151811061199f57634e487b7160e01b600052603260045260246000fd5b6020026020010151878460016119b59190612c0b565b815181106119d357634e487b7160e01b600052603260045260246000fd5b60200260200101519150915060006119eb8383612348565b50905060008a6119fc866001612c0b565b81518110611a1a57634e487b7160e01b600052603260045260246000fd5b602002602001015190506000808373ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614611a6257826000611a66565b6000835b91509150600060018d51611a7a9190612c80565b8810611a86578a611ab9565b8c611a92896001612c0b565b81518110611ab057634e487b7160e01b600052603260045260246000fd5b60200260200101515b905060008d8981518110611add57634e487b7160e01b600052603260045260246000fd5b602002602001015190508073ffffffffffffffffffffffffffffffffffffffff1663022c0d9f858585600067ffffffffffffffff811115611b2e57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611b58576020820181803683370190505b506040518563ffffffff1660e01b8152600401611b789493929190612bd0565b600060405180830381600087803b158015611b9257600080fd5b505af1158015611ba6573d6000803e3d6000fd5b5050505050505050505050508080611bbd90612cf8565b915050611973565b506040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8481166004830152600091908416906370a082319060240160206040518083038186803b158015611c3157600080fd5b505afa158015611c45573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c699190612959565b90508660018851611c7a9190612c80565b81518110611c9857634e487b7160e01b600052603260045260246000fd5b602002602001015182611cab9190612c0b565b811015611d205760405162461bcd60e51b815260206004820152602960248201527f44656665637469766520414d4d20726f7574653b2062616c616e63657320646f60448201527f6e2774206d617463680000000000000000000000000000000000000000000000606482015260840161023f565b50505050505050565b80471015611d795760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015260640161023f565b60008273ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d8060008114611dd3576040519150601f19603f3d011682016040523d82523d6000602084013e611dd8565b606091505b5050905080611e4f5760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d61792068617665207265766572746564000000000000606482015260840161023f565b505050565b6060600183511015611ea85760405162461bcd60e51b815260206004820152601260248201527f706169727320697320746f6f2073686f72740000000000000000000000000000604482015260640161023f565b815167ffffffffffffffff811115611ed057634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611ef9578160200160208202803683370190505b509050838160018351611f0c9190612c80565b81518110611f2a57634e487b7160e01b600052603260045260246000fd5b602002602001018181525050600060018351611f469190612c80565b90505b801561188757600084611f5d600184612c80565b81518110611f7b57634e487b7160e01b600052603260045260246000fd5b60200260200101519050600080611fe08387600187611f9a9190612c80565b81518110611fb857634e487b7160e01b600052603260045260246000fd5b60200260200101518887815181106117f857634e487b7160e01b600052603260045260246000fd5b9150915061201685858151811061200757634e487b7160e01b600052603260045260246000fd5b60200260200101518383612473565b85612022600187612c80565b8151811061204057634e487b7160e01b600052603260045260246000fd5b602002602001018181525050505050808061205a90612cc3565b915050611f49565b6040805173ffffffffffffffffffffffffffffffffffffffff85811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd000000000000000000000000000000000000000000000000000000001790526120f79085906125b6565b50505050565b600080600061210c8585612348565b5090506000808773ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561215857600080fd5b505afa15801561216c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612190919061290b565b506dffffffffffffffffffffffffffff1691506dffffffffffffffffffffffffffff1691508273ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff16146121ef5780826121f2565b81815b90999098509650505050505050565b60008084116122785760405162461bcd60e51b815260206004820152602b60248201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4960448201527f4e5055545f414d4f554e54000000000000000000000000000000000000000000606482015260840161023f565b6000831180156122885750600082115b6122fa5760405162461bcd60e51b815260206004820152602860248201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4c60448201527f4951554944495459000000000000000000000000000000000000000000000000606482015260840161023f565b6000612308856103e5612c43565b905060006123168483612c43565b9050600082612327876103e8612c43565b6123319190612c0b565b905061233d8183612c23565b979650505050505050565b6000808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614156123c75760405162461bcd60e51b815260206004820152601260248201527f4964656e746963616c2061646472657373210000000000000000000000000000604482015260640161023f565b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1610612401578284612404565b83835b909250905073ffffffffffffffffffffffffffffffffffffffff821661246c5760405162461bcd60e51b815260206004820152600d60248201527f5a65726f20616464726573732100000000000000000000000000000000000000604482015260640161023f565b9250929050565b60008084116124ea5760405162461bcd60e51b815260206004820152602c60248201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4f60448201527f55545055545f414d4f554e540000000000000000000000000000000000000000606482015260840161023f565b6000831180156124fa5750600082115b61256c5760405162461bcd60e51b815260206004820152602860248201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4c60448201527f4951554944495459000000000000000000000000000000000000000000000000606482015260840161023f565b60006125788585612c43565b612584906103e8612c43565b905060006103e56125958786612c80565b61259f9190612c80565b90506125ab8183612c23565b610918906001612c0b565b6000612618826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166126a89092919063ffffffff16565b805190915015611e4f578080602001905181019061263691906128eb565b611e4f5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f74207375636365656400000000000000000000000000000000000000000000606482015260840161023f565b60606126b784846000856126c1565b90505b9392505050565b6060824710156127395760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c0000000000000000000000000000000000000000000000000000606482015260840161023f565b61274285612809565b61278e5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161023f565b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516127b79190612b5d565b60006040518083038185875af1925050503d80600081146127f4576040519150601f19603f3d011682016040523d82523d6000602084013e6127f9565b606091505b509150915061233d828286612813565b803b15155b919050565b606083156128225750816126ba565b8251156128325782518084602001fd5b8160405162461bcd60e51b815260040161023f9190612bbd565b803573ffffffffffffffffffffffffffffffffffffffff8116811461280e57600080fd5b60008083601f840112612881578182fd5b50813567ffffffffffffffff811115612898578182fd5b6020830191508360208260051b850101111561246c57600080fd5b80516dffffffffffffffffffffffffffff8116811461280e57600080fd5b6000602082840312156128e2578081fd5b6126ba8261284c565b6000602082840312156128fc578081fd5b815180151581146126ba578182fd5b60008060006060848603121561291f578182fd5b612928846128b3565b9250612936602085016128b3565b9150604084015163ffffffff8116811461294e578182fd5b809150509250925092565b60006020828403121561296a578081fd5b5051919050565b600080600080600060608688031215612988578081fd5b85359450602086013567ffffffffffffffff808211156129a6578283fd5b6129b289838a01612870565b909650945060408801359150808211156129ca578283fd5b506129d788828901612870565b969995985093965092949392505050565b600080600080600080600060a0888a031215612a02578182fd5b87359650602088013567ffffffffffffffff80821115612a20578384fd5b612a2c8b838c01612870565b909850965060408a0135915080821115612a44578384fd5b50612a518a828b01612870565b9095509350612a6490506060890161284c565b91506080880135905092959891949750929550565b60008060008060008060008060c0898b031215612a94578081fd5b8835975060208901359650604089013567ffffffffffffffff80821115612ab9578283fd5b612ac58c838d01612870565b909850965060608b0135915080821115612add578283fd5b50612aea8b828c01612870565b9095509350612afd905060808a0161284c565b915060a089013590509295985092959890939650565b60008151808452612b2b816020860160208601612c97565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60008251612b6f818460208701612c97565b9190910192915050565b6020808252825182820181905260009190848201906040850190845b81811015612bb157835183529284019291840191600101612b95565b50909695505050505050565b6000602082526126ba6020830184612b13565b600085825284602083015273ffffffffffffffffffffffffffffffffffffffff84166040830152608060608301526109186080830184612b13565b60008219821115612c1e57612c1e612d31565b500190565b600082612c3e57634e487b7160e01b81526012600452602481fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612c7b57612c7b612d31565b500290565b600082821015612c9257612c92612d31565b500390565b60005b83811015612cb2578181015183820152602001612c9a565b838111156120f75750506000910152565b600081612cd257612cd2612d31565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612d2a57612d2a612d31565b5060010190565b634e487b7160e01b600052601160045260246000fdfea26469706673582212208c59c7228db9d8b4f747bb61f563a4d8eb4522eaf7f1bef8ed4887a5494e63a864736f6c63430008030033",
  "deployedBytecode": "0x6080604052600436106100965760003560e01c8063ad5c464811610069578063af55e31f1161004e578063af55e31f146101aa578063ceb757d5146101bd578063fc5b8bce146101dd57610096565b8063ad5c464814610131578063ae8290b71461018a57610096565b80636dce49ae1461009b57806389c27594146100d15780639e269b68146100f1578063a8312b1d14610111575b600080fd5b3480156100a757600080fd5b506100bb6100b6366004612a79565b6101f0565b6040516100c89190612b79565b60405180910390f35b3480156100dd57600080fd5b506100bb6100ec366004612a79565b6105b7565b3480156100fd57600080fd5b506100bb61010c366004612971565b6108a8565b34801561011d57600080fd5b506100bb61012c366004612971565b610922565b34801561013d57600080fd5b506101657f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016100c8565b34801561019657600080fd5b506100bb6101a5366004612a79565b610992565b6100bb6101b83660046129e8565b610b88565b3480156101c957600080fd5b506100bb6101d8366004612a79565b61101a565b6100bb6101eb3660046129e8565b611187565b606081428110156102485760405162461bcd60e51b815260206004820152601160248201527f547261646520686173206578706972656400000000000000000000000000000060448201526064015b60405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016868661028c600182612c80565b8181106102a957634e487b7160e01b600052603260045260246000fd5b90506020020160208101906102be91906128d1565b73ffffffffffffffffffffffffffffffffffffffff16146103215760405162461bcd60e51b815260206004820152601860248201527f53706f74526f757465723a20494e56414c49445f504154480000000000000000604482015260640161023f565b61038f8a89898080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808d0282810182019093528c82529093508c92508b91829185019084908082843760009201919091525061168392505050565b91508882600184516103a19190612c80565b815181106103bf57634e487b7160e01b600052603260045260246000fd5b6020026020010151101561043b5760405162461bcd60e51b815260206004820152602660248201527f53706f74526f757465723a20494e53554646494349454e545f4f55545055545f60448201527f414d4f554e540000000000000000000000000000000000000000000000000000606482015260840161023f565b6104ab8289898080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808d0282810182019093528c82529093508c92508b91829185019084908082843760009201919091525030925061188f915050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d83600185516104f69190612c80565b8151811061051457634e487b7160e01b600052603260045260246000fd5b60200260200101516040518263ffffffff1660e01b815260040161053a91815260200190565b600060405180830381600087803b15801561055457600080fd5b505af1158015610568573d6000803e3d6000fd5b505050506105aa84836001855161057f9190612c80565b8151811061059d57634e487b7160e01b600052603260045260246000fd5b6020026020010151611d29565b5098975050505050505050565b6060814281101561060a5760405162461bcd60e51b815260206004820152601160248201527f5472616465206861732065787069726564000000000000000000000000000000604482015260640161023f565b73ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016868661064e600182612c80565b81811061066b57634e487b7160e01b600052603260045260246000fd5b905060200201602081019061068091906128d1565b73ffffffffffffffffffffffffffffffffffffffff16146106e35760405162461bcd60e51b815260206004820152601860248201527f53706f74526f757465723a20494e56414c49445f504154480000000000000000604482015260640161023f565b6107518a89898080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808d0282810182019093528c82529093508c92508b918291850190849080828437600092019190915250611e5492505050565b9150888260008151811061077557634e487b7160e01b600052603260045260246000fd5b602002602001015111156107f15760405162461bcd60e51b815260206004820152602260248201527f53706f74526f757465723a204558434553534956455f494e5055545f414d4f5560448201527f4e54000000000000000000000000000000000000000000000000000000000000606482015260840161023f565b61043b338989600081811061081657634e487b7160e01b600052603260045260246000fd5b905060200201602081019061082b91906128d1565b8460008151811061084c57634e487b7160e01b600052603260045260246000fd5b60200260200101518989600081811061087557634e487b7160e01b600052603260045260246000fd5b905060200201602081019061088a91906128d1565b73ffffffffffffffffffffffffffffffffffffffff16929190612062565b60606109188686868080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808a02828101820190935289825290935089925088918291850190849080828437600092019190915250611e5492505050565b9695505050505050565b60606109188686868080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808a0282810182019093528982529093508992508891829185019084908082843760009201919091525061168392505050565b606081428110156109e55760405162461bcd60e51b815260206004820152601160248201527f5472616465206861732065787069726564000000000000000000000000000000604482015260640161023f565b610a538a89898080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808d0282810182019093528c82529093508c92508b918291850190849080828437600092019190915250611e5492505050565b91508882600081518110610a7757634e487b7160e01b600052603260045260246000fd5b60200260200101511115610af35760405162461bcd60e51b815260206004820152602260248201527f53706f74526f757465723a204558434553534956455f494e5055545f414d4f5560448201527f4e54000000000000000000000000000000000000000000000000000000000000606482015260840161023f565b610b18338989600081811061081657634e487b7160e01b600052603260045260246000fd5b6105aa8289898080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808d0282810182019093528c82529093508c92508b9182918501908490808284376000920191909152508a925061188f915050565b60608142811015610bdb5760405162461bcd60e51b815260206004820152601160248201527f5472616465206861732065787069726564000000000000000000000000000000604482015260640161023f565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1686866000818110610c3357634e487b7160e01b600052603260045260246000fd5b9050602002016020810190610c4891906128d1565b73ffffffffffffffffffffffffffffffffffffffff1614610cab5760405162461bcd60e51b815260206004820152601860248201527f53706f74526f757465723a20494e56414c49445f504154480000000000000000604482015260640161023f565b610d193489898080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808d0282810182019093528c82529093508c92508b91829185019084908082843760009201919091525061168392505050565b9150888260018451610d2b9190612c80565b81518110610d4957634e487b7160e01b600052603260045260246000fd5b60200260200101511015610dc55760405162461bcd60e51b815260206004820152602660248201527f53706f74526f757465723a20494e53554646494349454e545f4f55545055545f60448201527f414d4f554e540000000000000000000000000000000000000000000000000000606482015260840161023f565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d0e30db083600081518110610e2257634e487b7160e01b600052603260045260246000fd5b60200260200101516040518263ffffffff1660e01b81526004016000604051808303818588803b158015610e5557600080fd5b505af1158015610e69573d6000803e3d6000fd5b50505050507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb89896000818110610ecb57634e487b7160e01b600052603260045260246000fd5b9050602002016020810190610ee091906128d1565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815273ffffffffffffffffffffffffffffffffffffffff9091166004820152346024820152604401602060405180830381600087803b158015610f4c57600080fd5b505af1158015610f60573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f8491906128eb565b610f9e57634e487b7160e01b600052600160045260246000fd5b61100e8289898080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808d0282810182019093528c82529093508c92508b9182918501908490808284376000920191909152508a925061188f915050565b50979650505050505050565b6060814281101561106d5760405162461bcd60e51b815260206004820152601160248201527f5472616465206861732065787069726564000000000000000000000000000000604482015260640161023f565b6110db8a89898080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808d0282810182019093528c82529093508c92508b91829185019084908082843760009201919091525061168392505050565b91508882600184516110ed9190612c80565b8151811061110b57634e487b7160e01b600052603260045260246000fd5b60200260200101511015610af35760405162461bcd60e51b815260206004820152602660248201527f53706f74526f757465723a20494e53554646494349454e545f4f55545055545f60448201527f414d4f554e540000000000000000000000000000000000000000000000000000606482015260840161023f565b606081428110156111da5760405162461bcd60e51b815260206004820152601160248201527f5472616465206861732065787069726564000000000000000000000000000000604482015260640161023f565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168686600081811061123257634e487b7160e01b600052603260045260246000fd5b905060200201602081019061124791906128d1565b73ffffffffffffffffffffffffffffffffffffffff16146112aa5760405162461bcd60e51b815260206004820152601860248201527f53706f74526f757465723a20494e56414c49445f504154480000000000000000604482015260640161023f565b6113188989898080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808d0282810182019093528c82529093508c92508b918291850190849080828437600092019190915250611e5492505050565b9150348260008151811061133c57634e487b7160e01b600052603260045260246000fd5b602002602001015111156113b85760405162461bcd60e51b815260206004820152602260248201527f53706f74526f757465723a204558434553534956455f494e5055545f414d4f5560448201527f4e54000000000000000000000000000000000000000000000000000000000000606482015260840161023f565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d0e30db08360008151811061141557634e487b7160e01b600052603260045260246000fd5b60200260200101516040518263ffffffff1660e01b81526004016000604051808303818588803b15801561144857600080fd5b505af115801561145c573d6000803e3d6000fd5b50505050507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb898960008181106114be57634e487b7160e01b600052603260045260246000fd5b90506020020160208101906114d391906128d1565b846000815181106114f457634e487b7160e01b600052603260045260246000fd5b60200260200101516040518363ffffffff1660e01b815260040161153a92919073ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b602060405180830381600087803b15801561155457600080fd5b505af1158015611568573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061158c91906128eb565b6115a657634e487b7160e01b600052600160045260246000fd5b6116168289898080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525050604080516020808d0282810182019093528c82529093508c92508b9182918501908490808284376000920191909152508a925061188f915050565b8160008151811061163757634e487b7160e01b600052603260045260246000fd5b602002602001015134111561100e5761100e338360008151811061166b57634e487b7160e01b600052603260045260246000fd5b60200260200101513461167e9190612c80565b611d29565b60606001835110156116d75760405162461bcd60e51b815260206004820152601260248201527f706169727320697320746f6f2073686f72740000000000000000000000000000604482015260640161023f565b815167ffffffffffffffff8111156116ff57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611728578160200160208202803683370190505b509050838160008151811061174d57634e487b7160e01b600052603260045260246000fd5b60200260200101818152505060005b6001835161176a9190612c80565b81101561188757600084828151811061179357634e487b7160e01b600052603260045260246000fd5b60200260200101519050600080611805838786815181106117c457634e487b7160e01b600052603260045260246000fd5b6020026020010151888760016117da9190612c0b565b815181106117f857634e487b7160e01b600052603260045260246000fd5b60200260200101516120fd565b9150915061183b85858151811061182c57634e487b7160e01b600052603260045260246000fd5b60200260200101518383612201565b85611847866001612c0b565b8151811061186557634e487b7160e01b600052603260045260246000fd5b602002602001018181525050505050808061187f90612cf8565b91505061175c565b509392505050565b600082600184516118a09190612c80565b815181106118be57634e487b7160e01b600052603260045260246000fd5b60209081029190910101516040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301529192506000918316906370a082319060240160206040518083038186803b15801561193657600080fd5b505afa15801561194a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061196e9190612959565b905060005b8551811015611bc55760008086838151811061199f57634e487b7160e01b600052603260045260246000fd5b6020026020010151878460016119b59190612c0b565b815181106119d357634e487b7160e01b600052603260045260246000fd5b60200260200101519150915060006119eb8383612348565b50905060008a6119fc866001612c0b565b81518110611a1a57634e487b7160e01b600052603260045260246000fd5b602002602001015190506000808373ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614611a6257826000611a66565b6000835b91509150600060018d51611a7a9190612c80565b8810611a86578a611ab9565b8c611a92896001612c0b565b81518110611ab057634e487b7160e01b600052603260045260246000fd5b60200260200101515b905060008d8981518110611add57634e487b7160e01b600052603260045260246000fd5b602002602001015190508073ffffffffffffffffffffffffffffffffffffffff1663022c0d9f858585600067ffffffffffffffff811115611b2e57634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611b58576020820181803683370190505b506040518563ffffffff1660e01b8152600401611b789493929190612bd0565b600060405180830381600087803b158015611b9257600080fd5b505af1158015611ba6573d6000803e3d6000fd5b5050505050505050505050508080611bbd90612cf8565b915050611973565b506040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8481166004830152600091908416906370a082319060240160206040518083038186803b158015611c3157600080fd5b505afa158015611c45573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c699190612959565b90508660018851611c7a9190612c80565b81518110611c9857634e487b7160e01b600052603260045260246000fd5b602002602001015182611cab9190612c0b565b811015611d205760405162461bcd60e51b815260206004820152602960248201527f44656665637469766520414d4d20726f7574653b2062616c616e63657320646f60448201527f6e2774206d617463680000000000000000000000000000000000000000000000606482015260840161023f565b50505050505050565b80471015611d795760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015260640161023f565b60008273ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d8060008114611dd3576040519150601f19603f3d011682016040523d82523d6000602084013e611dd8565b606091505b5050905080611e4f5760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d61792068617665207265766572746564000000000000606482015260840161023f565b505050565b6060600183511015611ea85760405162461bcd60e51b815260206004820152601260248201527f706169727320697320746f6f2073686f72740000000000000000000000000000604482015260640161023f565b815167ffffffffffffffff811115611ed057634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015611ef9578160200160208202803683370190505b509050838160018351611f0c9190612c80565b81518110611f2a57634e487b7160e01b600052603260045260246000fd5b602002602001018181525050600060018351611f469190612c80565b90505b801561188757600084611f5d600184612c80565b81518110611f7b57634e487b7160e01b600052603260045260246000fd5b60200260200101519050600080611fe08387600187611f9a9190612c80565b81518110611fb857634e487b7160e01b600052603260045260246000fd5b60200260200101518887815181106117f857634e487b7160e01b600052603260045260246000fd5b9150915061201685858151811061200757634e487b7160e01b600052603260045260246000fd5b60200260200101518383612473565b85612022600187612c80565b8151811061204057634e487b7160e01b600052603260045260246000fd5b602002602001018181525050505050808061205a90612cc3565b915050611f49565b6040805173ffffffffffffffffffffffffffffffffffffffff85811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd000000000000000000000000000000000000000000000000000000001790526120f79085906125b6565b50505050565b600080600061210c8585612348565b5090506000808773ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b815260040160606040518083038186803b15801561215857600080fd5b505afa15801561216c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612190919061290b565b506dffffffffffffffffffffffffffff1691506dffffffffffffffffffffffffffff1691508273ffffffffffffffffffffffffffffffffffffffff168773ffffffffffffffffffffffffffffffffffffffff16146121ef5780826121f2565b81815b90999098509650505050505050565b60008084116122785760405162461bcd60e51b815260206004820152602b60248201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4960448201527f4e5055545f414d4f554e54000000000000000000000000000000000000000000606482015260840161023f565b6000831180156122885750600082115b6122fa5760405162461bcd60e51b815260206004820152602860248201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4c60448201527f4951554944495459000000000000000000000000000000000000000000000000606482015260840161023f565b6000612308856103e5612c43565b905060006123168483612c43565b9050600082612327876103e8612c43565b6123319190612c0b565b905061233d8183612c23565b979650505050505050565b6000808273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614156123c75760405162461bcd60e51b815260206004820152601260248201527f4964656e746963616c2061646472657373210000000000000000000000000000604482015260640161023f565b8273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1610612401578284612404565b83835b909250905073ffffffffffffffffffffffffffffffffffffffff821661246c5760405162461bcd60e51b815260206004820152600d60248201527f5a65726f20616464726573732100000000000000000000000000000000000000604482015260640161023f565b9250929050565b60008084116124ea5760405162461bcd60e51b815260206004820152602c60248201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4f60448201527f55545055545f414d4f554e540000000000000000000000000000000000000000606482015260840161023f565b6000831180156124fa5750600082115b61256c5760405162461bcd60e51b815260206004820152602860248201527f556e697377617056324c6962726172793a20494e53554646494349454e545f4c60448201527f4951554944495459000000000000000000000000000000000000000000000000606482015260840161023f565b60006125788585612c43565b612584906103e8612c43565b905060006103e56125958786612c80565b61259f9190612c80565b90506125ab8183612c23565b610918906001612c0b565b6000612618826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166126a89092919063ffffffff16565b805190915015611e4f578080602001905181019061263691906128eb565b611e4f5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f74207375636365656400000000000000000000000000000000000000000000606482015260840161023f565b60606126b784846000856126c1565b90505b9392505050565b6060824710156127395760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c0000000000000000000000000000000000000000000000000000606482015260840161023f565b61274285612809565b61278e5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161023f565b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516127b79190612b5d565b60006040518083038185875af1925050503d80600081146127f4576040519150601f19603f3d011682016040523d82523d6000602084013e6127f9565b606091505b509150915061233d828286612813565b803b15155b919050565b606083156128225750816126ba565b8251156128325782518084602001fd5b8160405162461bcd60e51b815260040161023f9190612bbd565b803573ffffffffffffffffffffffffffffffffffffffff8116811461280e57600080fd5b60008083601f840112612881578182fd5b50813567ffffffffffffffff811115612898578182fd5b6020830191508360208260051b850101111561246c57600080fd5b80516dffffffffffffffffffffffffffff8116811461280e57600080fd5b6000602082840312156128e2578081fd5b6126ba8261284c565b6000602082840312156128fc578081fd5b815180151581146126ba578182fd5b60008060006060848603121561291f578182fd5b612928846128b3565b9250612936602085016128b3565b9150604084015163ffffffff8116811461294e578182fd5b809150509250925092565b60006020828403121561296a578081fd5b5051919050565b600080600080600060608688031215612988578081fd5b85359450602086013567ffffffffffffffff808211156129a6578283fd5b6129b289838a01612870565b909650945060408801359150808211156129ca578283fd5b506129d788828901612870565b969995985093965092949392505050565b600080600080600080600060a0888a031215612a02578182fd5b87359650602088013567ffffffffffffffff80821115612a20578384fd5b612a2c8b838c01612870565b909850965060408a0135915080821115612a44578384fd5b50612a518a828b01612870565b9095509350612a6490506060890161284c565b91506080880135905092959891949750929550565b60008060008060008060008060c0898b031215612a94578081fd5b8835975060208901359650604089013567ffffffffffffffff80821115612ab9578283fd5b612ac58c838d01612870565b909850965060608b0135915080821115612add578283fd5b50612aea8b828c01612870565b9095509350612afd905060808a0161284c565b915060a089013590509295985092959890939650565b60008151808452612b2b816020860160208601612c97565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60008251612b6f818460208701612c97565b9190910192915050565b6020808252825182820181905260009190848201906040850190845b81811015612bb157835183529284019291840191600101612b95565b50909695505050505050565b6000602082526126ba6020830184612b13565b600085825284602083015273ffffffffffffffffffffffffffffffffffffffff84166040830152608060608301526109186080830184612b13565b60008219821115612c1e57612c1e612d31565b500190565b600082612c3e57634e487b7160e01b81526012600452602481fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615612c7b57612c7b612d31565b500290565b600082821015612c9257612c92612d31565b500390565b60005b83811015612cb2578181015183820152602001612c9a565b838111156120f75750506000910152565b600081612cd257612cd2612d31565b507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0190565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612d2a57612d2a612d31565b5060010190565b634e487b7160e01b600052601160045260246000fdfea26469706673582212208c59c7228db9d8b4f747bb61f563a4d8eb4522eaf7f1bef8ed4887a5494e63a864736f6c63430008030033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}