{
  "address": "0x7626fAFb926Ceec74869e07961Fe7b4326D73eE0",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_peg",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_roles",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AccountLiquidated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "LiquidationShortfall",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAINTAINER_CUT_PERCENT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UNI",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UPDATE_MAX_PEG_AMOUNT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UPDATE_MIN_PEG_AMOUNT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "UPDATE_RATE_PERMIL",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "avgLiquidationPerCall",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "coolingOffPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "liquidatedAccounts",
          "type": "address[]"
        }
      ],
      "name": "disburseLiqStakeAttacks",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "inAmount",
          "type": "uint256"
        }
      ],
      "name": "encouragePriceUpdate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "failureThreshold",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        }
      ],
      "name": "getBorrowAmounts",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "borrowTokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "borrowAmounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        }
      ],
      "name": "getHoldingAmounts",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "holdingTokens",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "holdingAmounts",
          "type": "uint256[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        }
      ],
      "name": "getLastDepositBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "leverage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liqStakeAttackWindow",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "liquidationCandidates",
          "type": "address[]"
        }
      ],
      "name": "liquidate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "maintainerCut",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidationThresholdPercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "mainCharacterCache",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "maintenanceFailures",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "peg",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "priceUpdateWindow",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "borrowToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "borrowAmount",
          "type": "uint256"
        }
      ],
      "name": "registerBorrow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "depositAmount",
          "type": "uint256"
        }
      ],
      "name": "registerDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "extinguishableDebt",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        }
      ],
      "name": "registerLiquidation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenFrom",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "tokenTo",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "inAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "outAmount",
          "type": "uint256"
        }
      ],
      "name": "registerTradeAndBorrow",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "extinguishableDebt",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "borrowAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "withdrawToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "withdrawAmount",
          "type": "uint256"
        }
      ],
      "name": "registerWithdrawal",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "roleCache",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "roles",
      "outputs": [
        {
          "internalType": "contract Roles",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "rate",
          "type": "uint256"
        }
      ],
      "name": "setConfidentUpdateRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "blocks",
          "type": "uint256"
        }
      ],
      "name": "setCoolingOffPeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "threshFactor",
          "type": "uint256"
        }
      ],
      "name": "setFailureThreshold",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_leverage",
          "type": "uint256"
        }
      ],
      "name": "setLeverage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "window",
          "type": "uint256"
        }
      ],
      "name": "setLiqStakeAttackWindow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "path",
          "type": "address[]"
        }
      ],
      "name": "setLiquidationPath",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "threshold",
          "type": "uint256"
        }
      ],
      "name": "setLiquidationThresholdPercent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "cut",
          "type": "uint256"
        }
      ],
      "name": "setMaintainerCutPercent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "window",
          "type": "uint16"
        }
      ],
      "name": "setPriceUpdateWindow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "cap",
          "type": "uint256"
        }
      ],
      "name": "setTokenCap",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "setUpdateMaxPegAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "setUpdateMinPegAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "stakeAttackRecords",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "blockNum",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "loser",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "stakeAttacker",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenCaps",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenPrices",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "blockLastUpdated",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tokenPer1k",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "totalLong",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "totalShort",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "role",
          "type": "uint256"
        }
      ],
      "name": "updateMainCharacterCache",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "role",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "contr",
          "type": "address"
        }
      ],
      "name": "updateRoleCache",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        }
      ],
      "name": "viewHoldingsInPeg",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "trader",
          "type": "address"
        }
      ],
      "name": "viewLoanInPeg",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x390db34d11c9e16ec146b1d6a24067264388243f62a948b981d52ff9242f05b8",
  "receipt": {
    "to": null,
    "from": "0x23292e9BA8434e59E6BAC1907bA7425211c4DE27",
    "contractAddress": "0x7626fAFb926Ceec74869e07961Fe7b4326D73eE0",
    "transactionIndex": 6,
    "gasUsed": "5473630",
    "logsBloom": "0x
    "blockHash": "0xb8f8c41d3a7fb1361f18d05a058e2fbd8fd1cf96f595cb2ee676e296238f4264",
    "transactionHash": "0x390db34d11c9e16ec146b1d6a24067264388243f62a948b981d52ff9242f05b8",
    "logs": [
      {
        "transactionIndex": 6,
        "blockNumber": 24104702,
        "transactionHash": "0x390db34d11c9e16ec146b1d6a24067264388243f62a948b981d52ff9242f05b8",
        "address": "0x7626fAFb926Ceec74869e07961Fe7b4326D73eE0",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000023292e9ba8434e59e6bac1907ba7425211c4de27"
        ],
        "data": "0x",
        "logIndex": 13,
        "blockHash": "0xb8f8c41d3a7fb1361f18d05a058e2fbd8fd1cf96f595cb2ee676e296238f4264"
      }
    ],
    "blockNumber": 24104702,
    "cumulativeGasUsed": "6421959",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x00794B39C9f53De95740E78284dE52AAE7eed8e4",
    "0xC95531a7f6C57456718BCd69a5f64829C7973f11"
  ],
  "solcInputHash": "ec45310c1ebd228212cbc01f9840ea7e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.1+commit.df193b15\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_peg\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_roles\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AccountLiquidated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LiquidationShortfall\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAINTAINER_CUT_PERCENT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UNI\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UPDATE_MAX_PEG_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UPDATE_MIN_PEG_AMOUNT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"UPDATE_RATE_PERMIL\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"avgLiquidationPerCall\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"coolingOffPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"liquidatedAccounts\",\"type\":\"address[]\"}],\"name\":\"disburseLiqStakeAttacks\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inAmount\",\"type\":\"uint256\"}],\"name\":\"encouragePriceUpdate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"failureThreshold\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"}],\"name\":\"getBorrowAmounts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"borrowTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"borrowAmounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"}],\"name\":\"getHoldingAmounts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"holdingTokens\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"holdingAmounts\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"}],\"name\":\"getLastDepositBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"leverage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liqStakeAttackWindow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"liquidationCandidates\",\"type\":\"address[]\"}],\"name\":\"liquidate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"maintainerCut\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidationThresholdPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mainCharacterCache\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"maintenanceFailures\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"peg\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"priceUpdateWindow\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrowToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"}],\"name\":\"registerBorrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"depositAmount\",\"type\":\"uint256\"}],\"name\":\"registerDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"extinguishableDebt\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"}],\"name\":\"registerLiquidation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenFrom\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenTo\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"inAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"outAmount\",\"type\":\"uint256\"}],\"name\":\"registerTradeAndBorrow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"extinguishableDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"withdrawToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"withdrawAmount\",\"type\":\"uint256\"}],\"name\":\"registerWithdrawal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"roleCache\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roles\",\"outputs\":[{\"internalType\":\"contract Roles\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"rate\",\"type\":\"uint256\"}],\"name\":\"setConfidentUpdateRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"blocks\",\"type\":\"uint256\"}],\"name\":\"setCoolingOffPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"threshFactor\",\"type\":\"uint256\"}],\"name\":\"setFailureThreshold\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_leverage\",\"type\":\"uint256\"}],\"name\":\"setLeverage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"window\",\"type\":\"uint256\"}],\"name\":\"setLiqStakeAttackWindow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"}],\"name\":\"setLiquidationPath\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"}],\"name\":\"setLiquidationThresholdPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cut\",\"type\":\"uint256\"}],\"name\":\"setMaintainerCutPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"window\",\"type\":\"uint16\"}],\"name\":\"setPriceUpdateWindow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cap\",\"type\":\"uint256\"}],\"name\":\"setTokenCap\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setUpdateMaxPegAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"setUpdateMinPegAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakeAttackRecords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockNum\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"loser\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"stakeAttacker\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenCaps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenPrices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"blockLastUpdated\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tokenPer1k\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalLong\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"totalShort\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"role\",\"type\":\"uint256\"}],\"name\":\"updateMainCharacterCache\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"role\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"contr\",\"type\":\"address\"}],\"name\":\"updateRoleCache\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"}],\"name\":\"viewHoldingsInPeg\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"trader\",\"type\":\"address\"}],\"name\":\"viewLoanInPeg\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getBorrowAmounts(address)\":{\"details\":\"view function to display account borrowing state\"},\"getHoldingAmounts(address)\":{\"details\":\"view function to display account held assets state\"},\"getLastDepositBlock(address)\":{\"details\":\"last time this account deposited relevant for withdrawal window\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"registerBorrow(address,address,uint256)\":{\"details\":\"gets called by router to affirm isolated borrowing event\"},\"registerDeposit(address,address,uint256)\":{\"details\":\"gets called by router to affirm a deposit to an account\"},\"registerLiquidation(address)\":{\"details\":\"can get called by router to register the dissolution of an account\"},\"registerTradeAndBorrow(address,address,address,uint256,uint256)\":{\"details\":\"gets callled by router to register a trade and borrow and extinguis as necessary\"},\"registerWithdrawal(address,address,uint256)\":{\"details\":\"gets called by router to affirm withdrawal of tokens from account\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setCoolingOffPeriod(uint256)\":{\"details\":\"setter for cooling off period for withdrawing funds after deposit\"},\"setLeverage(uint256)\":{\"details\":\"admin function to set leverage\"},\"setLiquidationThresholdPercent(uint256)\":{\"details\":\"admin function to set liquidation threshold\"},\"setTokenCap(address,uint256)\":{\"details\":\"admin function to set the token cap\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"viewHoldingsInPeg(address)\":{\"details\":\"total of assets of account, expressed in reference currency\"},\"viewLoanInPeg(address)\":{\"details\":\"view function to get loan amount in peg\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"liquidate(address[])\":{\"notice\":\"called by maintenance stakers to liquidate accounts below liquidation threshold\"},\"priceUpdateWindow()\":{\"notice\":\"update window in blocks\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CrossMarginTrading.sol\":\"CrossMarginTrading\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x1cae4f85f114ff17b90414f5da67365b1d00337abb5bce9bf944eb78a2c0673c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x99f5c21018d796db7833a2100bb0e7411999e248a3c950fb526eee5d2bf47cb7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Factory {\\n    event PairCreated(address indexed token0, address indexed token1, address pair, uint);\\n\\n    function feeTo() external view returns (address);\\n    function feeToSetter() external view returns (address);\\n\\n    function getPair(address tokenA, address tokenB) external view returns (address pair);\\n    function allPairs(uint) external view returns (address pair);\\n    function allPairsLength() external view returns (uint);\\n\\n    function createPair(address tokenA, address tokenB) external returns (address pair);\\n\\n    function setFeeTo(address) external;\\n    function setFeeToSetter(address) external;\\n}\\n\",\"keccak256\":\"0xe5905c0989cf5a865ed9bb7b9252536ca011c5b744017a82a7d4443b9c00a891\"},\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\",\"keccak256\":\"0x7c9bc70e5996c763e02ff38905282bc24fb242b0ef2519a003b36824fc524a4b\"},\"contracts/Admin.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./IncentiveDistribution.sol\\\";\\nimport \\\"./RoleAware.sol\\\";\\nimport \\\"./Fund.sol\\\";\\nimport \\\"./CrossMarginTrading.sol\\\";\\n\\n/// @dev Here we support staking for MFI incentives as well as\\n/// staking to perform the maintenance role.\\ncontract Admin is RoleAware, Ownable {\\n    address public immutable MFI;\\n    mapping(address => uint256) public stakes;\\n    uint256 public totalStakes;\\n    mapping(address => uint256) public claimIds;\\n\\n    uint256 public immutable feesPer10k;\\n    mapping(address => uint256) public collectedFees;\\n\\n    uint256 public maintenanceStakePerBlock = 10 ether;\\n    mapping(address => address) public nextMaintenanceStaker;\\n    mapping(address => mapping(address => bool)) public maintenanceDelegateTo;\\n    address public currentMaintenanceStaker;\\n    address public prevMaintenanceStaker;\\n    uint256 public currentMaintenanceStakerStartBlock;\\n    address public immutable lockedMFI;\\n\\n    constructor(\\n        uint256 _feesPer10k,\\n        address _MFI,\\n        address _lockedMFI,\\n        address lockedMFIDelegate,\\n        address _roles\\n    ) RoleAware(_roles) Ownable() {\\n        MFI = _MFI;\\n        feesPer10k = _feesPer10k;\\n        maintenanceStakePerBlock = 1 ether;\\n        lockedMFI = _lockedMFI;\\n\\n        // for initialization purposes and to ensure availability of service\\n        // the team's locked MFI participate in maintenance staking only\\n        // (not in the incentive staking part)\\n        // this implies some trust of the team to execute, which we deem reasonable\\n        // since the locked stake is temporary and diminishing as well as the fact\\n        // that the team is heavily invested in the protocol and incentivized\\n        // by fees like any other maintainer\\n        // furthermore others could step in to liquidate via the attacker route\\n        // and take away the team fees if they were delinquent\\n        nextMaintenanceStaker[_lockedMFI] = _lockedMFI;\\n        currentMaintenanceStaker = _lockedMFI;\\n        prevMaintenanceStaker = _lockedMFI;\\n        maintenanceDelegateTo[_lockedMFI][lockedMFIDelegate];\\n        currentMaintenanceStakerStartBlock = block.number;\\n    }\\n\\n    function setMaintenanceStakePerBlock(uint256 amount) external onlyOwner {\\n        maintenanceStakePerBlock = amount;\\n    }\\n\\n    function _stake(address holder, uint256 amount) internal {\\n        Fund(fund()).depositFor(holder, MFI, amount);\\n\\n        stakes[holder] += amount;\\n        totalStakes += amount;\\n\\n        if (claimIds[holder] > 0) {\\n            IncentiveDistribution(incentiveDistributor()).addToClaimAmount(\\n                0,\\n                claimIds[holder],\\n                amount\\n            );\\n        } else {\\n            uint256 claimId =\\n                IncentiveDistribution(incentiveDistributor()).startClaim(\\n                    0,\\n                    holder,\\n                    amount\\n                );\\n            claimIds[holder] = claimId;\\n            require(claimId > 0, \\\"Distribution is over or paused\\\");\\n        }\\n    }\\n\\n    function depositStake(uint256 amount) external {\\n        _stake(msg.sender, amount);\\n    }\\n\\n    function _withdrawStake(\\n        address holder,\\n        uint256 amount,\\n        address recipient\\n    ) internal {\\n        uint256 stakeAmount = stakes[holder];\\n        // overflow failure desirable\\n        stakes[holder] -= amount;\\n        totalStakes -= amount;\\n        Fund(fund()).withdraw(MFI, recipient, amount);\\n\\n        if (stakeAmount == amount) {\\n            IncentiveDistribution(incentiveDistributor()).endClaim(\\n                0,\\n                claimIds[holder]\\n            );\\n            claimIds[holder] = 0;\\n        } else {\\n            IncentiveDistribution(incentiveDistributor())\\n                .subtractFromClaimAmount(0, claimIds[holder], amount);\\n        }\\n    }\\n\\n    function withdrawStake(uint256 amount) external {\\n        require(\\n            !isAuthorizedStaker(msg.sender),\\n            \\\"You can't withdraw while you're authorized staker\\\"\\n        );\\n        _withdrawStake(msg.sender, amount, msg.sender);\\n    }\\n\\n    function takeFeesFromOutput(address token, uint256 amount)\\n        external\\n        returns (uint256 fees)\\n    {\\n        require(isFeeSource(msg.sender), \\\"Not authorized to source fees\\\");\\n        fees = (feesPer10k * amount) / 10_000;\\n        collectedFees[token] += fees;\\n    }\\n\\n    function takeFeesFromInput(address token, uint256 amount)\\n        external\\n        returns (uint256 fees)\\n    {\\n        require(isFeeSource(msg.sender), \\\"Not authorized to source fees\\\");\\n        fees = (feesPer10k * amount) / (10_000 + feesPer10k);\\n        collectedFees[token] += fees;\\n    }\\n\\n    function depositMaintenanceStake(uint256 amount) external {\\n        require(\\n            amount + stakes[msg.sender] >= maintenanceStakePerBlock,\\n            \\\"Insufficient stake to call even one block\\\"\\n        );\\n        _stake(msg.sender, amount);\\n        if (nextMaintenanceStaker[msg.sender] == address(0)) {\\n            nextMaintenanceStaker[msg.sender] = getUpdatedCurrentStaker();\\n            nextMaintenanceStaker[prevMaintenanceStaker] = msg.sender;\\n        }\\n    }\\n\\n    function getMaintenanceStakerStake(address staker)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        if (staker == lockedMFI) {\\n            return IERC20(MFI).balanceOf(lockedMFI) / 2;\\n        } else {\\n            return stakes[staker];\\n        }\\n    }\\n\\n    function getUpdatedCurrentStaker() public returns (address) {\\n        uint256 currentStake =\\n            getMaintenanceStakerStake(currentMaintenanceStaker);\\n        while (\\n            (block.number - currentMaintenanceStakerStartBlock) *\\n                maintenanceStakePerBlock >=\\n            currentStake\\n        ) {\\n            if (maintenanceStakePerBlock > currentStake) {\\n                // delete current from daisy chain\\n                address nextOne =\\n                    nextMaintenanceStaker[currentMaintenanceStaker];\\n                nextMaintenanceStaker[prevMaintenanceStaker] = nextOne;\\n                nextMaintenanceStaker[currentMaintenanceStaker] = address(0);\\n\\n                currentMaintenanceStaker = nextOne;\\n            } else {\\n                currentMaintenanceStakerStartBlock +=\\n                    currentStake /\\n                    maintenanceStakePerBlock;\\n\\n                prevMaintenanceStaker = currentMaintenanceStaker;\\n                currentMaintenanceStaker = nextMaintenanceStaker[\\n                    currentMaintenanceStaker\\n                ];\\n            }\\n            currentStake = getMaintenanceStakerStake(currentMaintenanceStaker);\\n        }\\n        return currentMaintenanceStaker;\\n    }\\n\\n    function viewCurrentMaintenanceStaker()\\n        public\\n        view\\n        returns (address staker, uint256 startBlock)\\n    {\\n        staker = currentMaintenanceStaker;\\n        uint256 currentStake = getMaintenanceStakerStake(staker);\\n        startBlock = currentMaintenanceStakerStartBlock;\\n        while (\\n            (block.number - startBlock) * maintenanceStakePerBlock >=\\n            currentStake\\n        ) {\\n            if (maintenanceStakePerBlock > currentStake) {\\n                // skip\\n                staker = nextMaintenanceStaker[staker];\\n                currentStake = getMaintenanceStakerStake(staker);\\n            } else {\\n                startBlock +=\\n                    currentStake /\\n                    maintenanceStakePerBlock;\\n                staker = nextMaintenanceStaker[staker];\\n                currentStake = getMaintenanceStakerStake(staker);\\n            }\\n        }\\n    }\\n\\n    function addDelegate(address forStaker, address delegate) external {\\n        require(\\n            msg.sender == forStaker ||\\n                maintenanceDelegateTo[forStaker][msg.sender],\\n            \\\"msg.sender not authorized to delegate for staker\\\"\\n        );\\n        maintenanceDelegateTo[forStaker][delegate] = true;\\n    }\\n\\n    function removeDelegate(address forStaker, address delegate) external {\\n        require(\\n            msg.sender == forStaker ||\\n                maintenanceDelegateTo[forStaker][msg.sender],\\n            \\\"msg.sender not authorized to delegate for staker\\\"\\n        );\\n        maintenanceDelegateTo[forStaker][delegate] = false;\\n    }\\n\\n    function isAuthorizedStaker(address caller)\\n        public\\n        returns (bool isAuthorized)\\n    {\\n        address currentStaker = getUpdatedCurrentStaker();\\n        isAuthorized =\\n            currentStaker == caller ||\\n            maintenanceDelegateTo[currentStaker][caller];\\n    }\\n\\n    function penalizeMaintenanceStake(\\n        address maintainer,\\n        uint256 penalty,\\n        address recipient\\n    ) external returns (uint256 stakeTaken) {\\n        require(\\n            isStakePenalizer(msg.sender),\\n            \\\"msg.sender not authorized to penalize stakers\\\"\\n        );\\n        if (penalty > stakes[maintainer]) {\\n            stakeTaken = stakes[maintainer];\\n        } else {\\n            stakeTaken = penalty;\\n        }\\n        _withdrawStake(maintainer, stakeTaken, recipient);\\n    }\\n}\\n\",\"keccak256\":\"0x5c7bc64ff6757e40c414a1495ae90fe5450854fb18b24ab82814960b6a3aaca1\",\"license\":\"BUSL-1.1\"},\"contracts/BaseLending.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\nimport \\\"./RoleAware.sol\\\";\\n\\nabstract contract BaseLending is RoleAware, Ownable {\\n    uint256 constant FP32 = 2**32;\\n    uint256 constant ACCUMULATOR_INIT = 10**18;\\n\\n    struct LendingMetadata {\\n        uint256 totalLending;\\n        uint256 totalBorrowed;\\n        uint256 lendingBuffer;\\n        uint256 lendingCap;\\n    }\\n    mapping(address => LendingMetadata) public lendingMeta;\\n\\n    uint256 public maxHourlyYieldFP;\\n    uint256 public yieldChangePerSecondFP;\\n\\n    /// @dev simple formula for calculating interest relative to accumulator\\n    function applyInterest(\\n        uint256 balance,\\n        uint256 accumulatorFP,\\n        uint256 yieldQuotientFP\\n    ) internal pure returns (uint256) {\\n        // 1 * FP / FP = 1\\n        return (balance * accumulatorFP) / yieldQuotientFP;\\n    }\\n\\n    /// update the yield for an asset based on recent supply and demand\\n    function updatedYieldFP(\\n        // previous yield\\n        uint256 _yieldFP,\\n        // timestamp\\n        uint256 lastUpdated,\\n        uint256 totalLendingInBucket,\\n        uint256 bucketTarget,\\n        uint256 buyingSpeed,\\n        uint256 withdrawingSpeed,\\n        uint256 bucketMaxYield\\n    ) internal view returns (uint256 yieldFP) {\\n        yieldFP = _yieldFP;\\n        uint256 timeDiff = block.timestamp - lastUpdated;\\n        uint256 yieldDiff = timeDiff * yieldChangePerSecondFP;\\n\\n        if (\\n            totalLendingInBucket >= bucketTarget ||\\n            buyingSpeed >= withdrawingSpeed\\n        ) {\\n            yieldFP -= min(yieldFP, yieldDiff);\\n        } else {\\n            yieldFP += yieldDiff;\\n            if (yieldFP > bucketMaxYield) {\\n                yieldFP = bucketMaxYield;\\n            }\\n        }\\n    }\\n\\n    /// @dev minimum\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a > b) {\\n            return b;\\n        } else {\\n            return a;\\n        }\\n    }\\n\\n    function _makeFallbackBond(\\n        address token,\\n        address holder,\\n        uint256 amount\\n    ) internal virtual;\\n\\n    function lendingTarget(LendingMetadata storage meta) internal view returns (uint256) {\\n        return\\n            min(meta.lendingCap, meta.totalBorrowed + meta.lendingBuffer);\\n    }\\n\\n    function viewLendingTarget(address token) external view returns (uint256) {\\n        LendingMetadata storage meta = lendingMeta[token];\\n        return lendingTarget(meta);\\n    }\\n\\n    function setLendingCap(address token, uint256 cap) external {\\n        require(\\n            isTokenActivator(msg.sender),\\n            \\\"not authorized to set lending cap\\\"\\n        );\\n        lendingMeta[token].lendingCap = cap;\\n    }\\n\\n    function setLendingBuffer(address token, uint256 buffer) external {\\n        require(\\n            isTokenActivator(msg.sender),\\n            \\\"not autorized to set lending buffer\\\"\\n        );\\n        lendingMeta[token].lendingBuffer = buffer;\\n    }\\n\\n    function setMaxHourlyYieldFP(uint256 maxYieldFP) external onlyOwner {\\n        maxHourlyYieldFP = maxYieldFP;\\n    }\\n\\n    function setYieldChangePerSecondFP(uint256 changePerSecondFP)\\n        external\\n        onlyOwner\\n    {\\n        yieldChangePerSecondFP = changePerSecondFP;\\n    }\\n}\\n\",\"keccak256\":\"0x0852d01fba3ef0a9513b3b12f94b8a1735d0b53c31d073681bf7d3c469130df2\",\"license\":\"BUSL-1.1\"},\"contracts/BondLending.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\nimport \\\"./BaseLending.sol\\\";\\nimport \\\"./Fund.sol\\\";\\n\\nstruct Bond {\\n    address holder;\\n    address token;\\n    uint256 originalPrice;\\n    uint256 returnAmount;\\n    uint256 maturityTimestamp;\\n    uint256 runtime;\\n    uint256 yieldFP;\\n}\\n\\n/// @dev Lending for fixed runtime, fixed interest\\n/// Lenders can pick their own bond maturity date --\\n/// In order to manage interest rates for the different\\n/// maturities and create a yield curve we bucket\\n/// bond runtimes into weighted baskets and adjust\\n/// rates individually per bucket, based on supply and demand.\\nabstract contract BondLending is BaseLending {\\n    uint256 public minRuntime = 30 days;\\n    uint256 public maxRuntime = 365 days;\\n    uint256 public diffMaxMinRuntime;\\n    // this is the numerator under runtimeWeights.\\n    // any excess left over is the weight of hourly bonds\\n    uint256 public constant WEIGHT_TOTAL_10k = 10_000;\\n    uint256 public borrowingMarkupFP;\\n\\n    mapping(address => uint256[]) public runtimeWeights;\\n    mapping(address => uint256[]) public buyingSpeed;\\n    mapping(address => uint256[]) public lastBought;\\n    mapping(address => uint256[]) public withdrawingSpeed;\\n    mapping(address => uint256[]) public lastWithdrawn;\\n    mapping(address => uint256[]) public yieldLastUpdated;\\n\\n    mapping(uint256 => Bond) public bonds;\\n\\n    mapping(address => uint256[]) public totalLendingPerRuntime;\\n    mapping(address => uint256[]) runtimeYieldsFP;\\n    uint256 public nextBondIndex = 1;\\n\\n    event LiquidityWarning(\\n        address indexed token,\\n        address indexed holder,\\n        uint256 value\\n    );\\n\\n    function _makeBond(\\n        address holder,\\n        address token,\\n        uint256 runtime,\\n        uint256 amount,\\n        uint256 minReturn\\n    ) internal returns (uint256 bondIndex) {\\n        uint256 bucketIndex = getBucketIndex(token, runtime);\\n        uint256 yieldFP =\\n            calcBondYieldFP(\\n                token,\\n                amount + totalLendingPerRuntime[token][bucketIndex],\\n                bucketIndex\\n            );\\n        uint256 bondReturn = (yieldFP * amount) / FP32;\\n        if (bondReturn >= minReturn) {\\n            Fund(fund()).depositFor(holder, token, amount);\\n            uint256 interpolatedAmount = (amount + bondReturn) / 2;\\n            lendingMeta[token].totalLending += interpolatedAmount;\\n\\n            totalLendingPerRuntime[token][\\n                    bucketIndex\\n            ] += interpolatedAmount;\\n\\n            bondIndex = nextBondIndex;\\n            nextBondIndex++;\\n\\n            bonds[bondIndex] = Bond({\\n                holder: holder,\\n                token: token,\\n                originalPrice: amount,\\n                returnAmount: bondReturn,\\n                maturityTimestamp: block.timestamp + runtime,\\n                runtime: runtime,\\n                yieldFP: yieldFP\\n            });\\n\\n            updateSpeed(\\n                buyingSpeed[token],\\n                lastBought[token],\\n                bucketIndex,\\n                amount\\n            );\\n        }\\n    }\\n\\n    function _withdrawBond(uint256 bondId, Bond storage bond) internal {\\n        address token = bond.token;\\n        uint256 bucketIndex = getBucketIndex(token, bond.runtime);\\n        uint256 returnAmount = bond.returnAmount;\\n        address holder = bond.holder;\\n\\n        uint256 interpolatedAmount =\\n            (bond.originalPrice + returnAmount) / 2;\\n\\n        LendingMetadata storage meta = lendingMeta[token];\\n        meta.totalLending -= interpolatedAmount;\\n        totalLendingPerRuntime[token][bucketIndex] -= interpolatedAmount;\\n\\n        updateSpeed(\\n            withdrawingSpeed[token],\\n            lastWithdrawn[token],\\n            bucketIndex,\\n            bond.originalPrice\\n        );\\n\\n        delete bonds[bondId];\\n        if (\\n            meta.totalBorrowed > meta.totalLending ||\\n            IERC20(token).balanceOf(fund()) < returnAmount\\n        ) {\\n            // apparently there is a liquidity issue\\n            emit LiquidityWarning(token, holder, returnAmount);\\n            _makeFallbackBond(token, holder, returnAmount);\\n        } else {\\n            Fund(fund()).withdraw(token, holder, returnAmount);\\n        }\\n    }\\n\\n    function getUpdatedBondYieldFP(\\n        address token,\\n        uint256 runtime,\\n        uint256 amount\\n    ) internal returns (uint256 yieldFP, uint256 bucketIndex) {\\n        bucketIndex = getBucketIndex(token, runtime);\\n        yieldFP = calcBondYieldFP(\\n            token,\\n            amount + totalLendingPerRuntime[token][bucketIndex],\\n            bucketIndex\\n        );\\n        runtimeYieldsFP[token][bucketIndex] = yieldFP;\\n        yieldLastUpdated[token][bucketIndex] = block.timestamp;\\n    }\\n\\n    function calcBondYieldFP(\\n        address token,\\n        uint256 totalLendingInBucket,\\n        uint256 bucketIndex\\n    ) internal view returns (uint256 yieldFP) {\\n        yieldFP = runtimeYieldsFP[token][bucketIndex];\\n        uint256 lastUpdated = yieldLastUpdated[token][bucketIndex];\\n\\n        LendingMetadata storage meta = lendingMeta[token];\\n        uint256 bucketTarget =\\n            (lendingTarget(meta) * runtimeWeights[token][bucketIndex]) /\\n                WEIGHT_TOTAL_10k;\\n\\n        uint256 buying = buyingSpeed[token][bucketIndex];\\n        uint256 withdrawing = withdrawingSpeed[token][bucketIndex];\\n\\n        uint256 runtime = minRuntime + bucketIndex * diffMaxMinRuntime;\\n        uint256 bucketMaxYield = maxHourlyYieldFP * (runtime / (1 hours));\\n\\n        yieldFP = updatedYieldFP(\\n            yieldFP,\\n            lastUpdated,\\n            totalLendingInBucket,\\n            bucketTarget,\\n            buying,\\n            withdrawing,\\n            bucketMaxYield\\n        );\\n    }\\n\\n    function viewBondReturn(\\n        address token,\\n        uint256 runtime,\\n        uint256 amount\\n    ) external view returns (uint256) {\\n        uint256 bucketIndex = getBucketIndex(token, runtime);\\n        uint256 yieldFP =\\n            calcBondYieldFP(\\n                token,\\n                amount + totalLendingPerRuntime[token][bucketIndex],\\n                bucketIndex\\n            );\\n        return (yieldFP * amount) / FP32;\\n    }\\n\\n    function getBucketIndex(address token, uint256 runtime)\\n        internal\\n        view\\n        returns (uint256 bucketIndex)\\n    {\\n        uint256[] storage yieldsFP = runtimeYieldsFP[token];\\n        uint256 bucketSize = diffMaxMinRuntime / yieldsFP.length;\\n        bucketIndex = (runtime - minRuntime) / bucketSize;\\n    }\\n\\n    function updateSpeed(\\n        uint256[] storage speedRegister,\\n        uint256[] storage lastAction,\\n        uint256 bucketIndex,\\n        uint256 amount\\n    ) internal {\\n        uint256 bucketSize = diffMaxMinRuntime / speedRegister.length;\\n        uint256 runtime = minRuntime + bucketSize * bucketIndex;\\n        uint256 timeDiff = block.timestamp - lastAction[bucketIndex];\\n        uint256 currentSpeed = (amount * runtime) / (timeDiff + 1);\\n\\n        uint256 runtimeScale = runtime / (10 minutes);\\n        // scale adjustment relative togit  runtime\\n        speedRegister[bucketIndex] =\\n            (speedRegister[bucketIndex] *\\n                runtimeScale +\\n                currentSpeed *\\n                timeDiff) /\\n            (runtimeScale + timeDiff);\\n        lastAction[bucketIndex] = block.timestamp;\\n    }\\n\\n    function setRuntimeYieldsFP(address token, uint256[] memory yieldsFP)\\n        external\\n        onlyOwner\\n    {\\n        runtimeYieldsFP[token] = yieldsFP;\\n    }\\n\\n    function setRuntimeWeights(address token, uint256[] memory weights)\\n        external\\n    {\\n        require(\\n            isTokenActivator(msg.sender),\\n            \\\"not autorized to set runtime weights\\\"\\n        );\\n        require(\\n            runtimeWeights[token].length == 0 ||\\n                runtimeWeights[token].length == weights.length,\\n            \\\"Cannot change size of weight array\\\"\\n        );\\n        if (runtimeWeights[token].length == 0) {\\n            // we are initializing\\n\\n            runtimeYieldsFP[token] = new uint256[](weights.length);\\n            lastBought[token] = new uint256[](weights.length);\\n            lastWithdrawn[token] = new uint256[](weights.length);\\n            yieldLastUpdated[token] = new uint256[](weights.length);\\n            buyingSpeed[token] = new uint256[](weights.length);\\n            withdrawingSpeed[token] = new uint256[](weights.length);\\n\\n            uint256 hourlyYieldFP = (110 * FP32) / 100 / (24 * 365);\\n            uint256 bucketSize = diffMaxMinRuntime / weights.length;\\n\\n            for (uint256 i = 0; weights.length > i; i++) {\\n                uint256 runtime = minRuntime + bucketSize * i;\\n                // Do a best guess of initializing\\n                runtimeYieldsFP[token][i] =\\n                    hourlyYieldFP *\\n                    (runtime / (1 hours));\\n\\n                lastBought[token][i] = block.timestamp;\\n                lastWithdrawn[token][i] = block.timestamp;\\n                yieldLastUpdated[token][i] = block.timestamp;\\n            }\\n        }\\n\\n        runtimeWeights[token] = weights;\\n    }\\n\\n    function setMinRuntime(uint256 runtime) external onlyOwner {\\n        require(runtime > 1 hours, \\\"Min runtime needs to be at least 1 hour\\\");\\n        require(maxRuntime > runtime, \\\"Min runtime must be smaller than max runtime\\\");\\n        minRuntime = runtime;\\n    }\\n\\n    function setMaxRuntime(uint256 runtime) external onlyOwner {\\n        require(\\n            runtime > minRuntime,\\n            \\\"Max runtime must be greater than min runtime\\\"\\n        );\\n        maxRuntime = runtime;\\n    }\\n}\\n\",\"keccak256\":\"0xc10d722fa3be64bf756fe1acaf0798707fcb1c619cdafd64870db059a1048b7f\",\"license\":\"BUSL-1.1\"},\"contracts/CrossMarginAccounts.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"./Fund.sol\\\";\\nimport \\\"./Lending.sol\\\";\\nimport \\\"./RoleAware.sol\\\";\\nimport \\\"./MarginRouter.sol\\\";\\nimport \\\"./PriceAware.sol\\\";\\n\\n// Goal: all external functions only accessible to margintrader role\\n// except for view functions of course\\n\\nstruct CrossMarginAccount {\\n    uint256 lastDepositBlock;\\n    address[] borrowTokens;\\n    // borrowed token address => amount\\n    mapping(address => uint256) borrowed;\\n    // borrowed token => yield quotient\\n    mapping(address => uint256) borrowedYieldQuotientsFP;\\n    address[] holdingTokens;\\n    // token held in portfolio => amount\\n    mapping(address => uint256) holdings;\\n    // boolean value of whether an account holds a token\\n    mapping(address => bool) holdsToken;\\n}\\n\\nabstract contract CrossMarginAccounts is RoleAware, PriceAware {\\n    /// @dev gets used in calculating how much accounts can borrow\\n    uint256 public leverage;\\n\\n    /// @dev percentage of assets held per assets borrowed at which to liquidate\\n    uint256 public liquidationThresholdPercent;\\n\\n    /// @dev record of all cross margin accounts\\n    mapping(address => CrossMarginAccount) internal marginAccounts;\\n    /// @dev total token caps\\n    mapping(address => uint256) public tokenCaps;\\n    /// @dev tracks total of short positions per token\\n    mapping(address => uint256) public totalShort;\\n    /// @dev tracks total of long positions per token\\n    mapping(address => uint256) public totalLong;\\n    uint256 public coolingOffPeriod;\\n\\n    /// @dev last time this account deposited\\n    /// relevant for withdrawal window\\n    function getLastDepositBlock(address trader)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return marginAccounts[trader].lastDepositBlock;\\n    }\\n\\n    /// @dev add an asset to be held by account\\n    function addHolding(\\n        CrossMarginAccount storage account,\\n        address token,\\n        uint256 depositAmount\\n    ) internal {\\n        if (!hasHoldingToken(account, token)) {\\n            account.holdingTokens.push(token);\\n        }\\n\\n        account.holdings[token] += depositAmount;\\n    }\\n\\n    /// @dev adjust account to reflect borrowing of token amount\\n    function borrow(\\n        CrossMarginAccount storage account,\\n        address borrowToken,\\n        uint256 borrowAmount\\n    ) internal {\\n        if (!hasBorrowedToken(account, borrowToken)) {\\n            account.borrowTokens.push(borrowToken);\\n        } else {\\n            account.borrowed[borrowToken] = Lending(lending())\\n                .applyBorrowInterest(\\n                account.borrowed[borrowToken],\\n                borrowToken,\\n                account.borrowedYieldQuotientsFP[borrowToken]\\n            );\\n        }\\n        account.borrowedYieldQuotientsFP[borrowToken] = Lending(lending())\\n            .viewBorrowingYieldFP(borrowToken);\\n\\n        account.borrowed[borrowToken] += borrowAmount;\\n        addHolding(account, borrowToken, borrowAmount);\\n\\n        require(positiveBalance(account), \\\"Can't borrow: insufficient balance\\\");\\n    }\\n\\n    /// @dev checks whether account is in the black, deposit + earnings relative to borrowed\\n    function positiveBalance(CrossMarginAccount storage account)\\n        internal\\n        returns (bool)\\n    {\\n        uint256 loan = loanInPeg(account, false);\\n        uint256 holdings = holdingsInPeg(account, false);\\n        // The following condition should hold:\\n        // holdings / loan >= leverage / (leverage - 1)\\n        // =>\\n        return holdings * (leverage - 1) >= loan * leverage;\\n    }\\n\\n    /// @dev internal function adjusting holding and borrow balances when debt extinguished\\n    function extinguishDebt(\\n        CrossMarginAccount storage account,\\n        address debtToken,\\n        uint256 extinguishAmount\\n    ) internal {\\n        // will throw if insufficient funds\\n        account.borrowed[debtToken] = Lending(lending()).applyBorrowInterest(\\n            account.borrowed[debtToken],\\n            debtToken,\\n            account.borrowedYieldQuotientsFP[debtToken]\\n        );\\n\\n        account.borrowed[debtToken] =\\n            account.borrowed[debtToken] -\\n            extinguishAmount;\\n        account.holdings[debtToken] =\\n            account.holdings[debtToken] -\\n            extinguishAmount;\\n\\n        if (account.borrowed[debtToken] > 0) {\\n            account.borrowedYieldQuotientsFP[debtToken] = Lending(lending())\\n                .viewBorrowingYieldFP(debtToken);\\n        } else {\\n            delete account.borrowedYieldQuotientsFP[debtToken];\\n\\n            bool decrement = false;\\n            for (uint256 i = 0; account.borrowTokens.length > i; i++) {\\n                address currToken = account.borrowTokens[i];\\n                if (currToken == debtToken) {\\n                    decrement = true;\\n                } else if (decrement) {\\n                    account.borrowTokens[i - 1] = currToken;\\n                }\\n            }\\n            account.borrowTokens.pop();\\n        }\\n    }\\n\\n    /// @dev checks whether an account holds a token\\n    function hasHoldingToken(CrossMarginAccount storage account, address token)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return account.holdsToken[token];\\n    }\\n\\n    /// @dev checks whether an account has borrowed a token\\n    function hasBorrowedToken(CrossMarginAccount storage account, address token)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return account.borrowedYieldQuotientsFP[token] > 0;\\n    }\\n\\n    /// @dev calculate total loan in reference currency, including compound interest\\n    function loanInPeg(CrossMarginAccount storage account, bool forceCurBlock)\\n        internal\\n        returns (uint256)\\n    {\\n        return\\n            sumTokensInPegWithYield(\\n                account.borrowTokens,\\n                account.borrowed,\\n                account.borrowedYieldQuotientsFP,\\n                forceCurBlock\\n            );\\n    }\\n\\n    /// @dev total of assets of account, expressed in reference currency\\n    function holdingsInPeg(\\n        CrossMarginAccount storage account,\\n        bool forceCurBlock\\n    ) internal returns (uint256) {\\n        return\\n            sumTokensInPeg(\\n                account.holdingTokens,\\n                account.holdings,\\n                forceCurBlock\\n            );\\n    }\\n\\n    /// @dev check whether an account can/should be liquidated\\n    function belowMaintenanceThreshold(CrossMarginAccount storage account)\\n        internal\\n        returns (bool)\\n    {\\n        uint256 loan = loanInPeg(account, true);\\n        uint256 holdings = holdingsInPeg(account, true);\\n        // The following should hold:\\n        // holdings / loan >= 1.1\\n        // => holdings >= loan * 1.1\\n        return 100 * holdings >= liquidationThresholdPercent * loan;\\n    }\\n\\n    /// @dev go through list of tokens and their amounts, summing up\\n    function sumTokensInPeg(\\n        address[] storage tokens,\\n        mapping(address => uint256) storage amounts,\\n        bool forceCurBlock\\n    ) internal returns (uint256 totalPeg) {\\n        for (uint256 tokenId = 0; tokenId < tokens.length; tokenId++) {\\n            address token = tokens[tokenId];\\n            totalPeg += PriceAware.getCurrentPriceInPeg(\\n                token,\\n                amounts[token],\\n                forceCurBlock\\n            );\\n        }\\n    }\\n\\n    /// @dev go through list of tokens and their amounts, summing up\\n    function viewTokensInPeg(\\n        address[] storage tokens,\\n        mapping(address => uint256) storage amounts\\n    ) internal view returns (uint256 totalPeg) {\\n        for (uint256 tokenId = 0; tokenId < tokens.length; tokenId++) {\\n            address token = tokens[tokenId];\\n            totalPeg += PriceAware.viewCurrentPriceInPeg(token, amounts[token]);\\n        }\\n    }\\n\\n    /// @dev go through list of tokens and ammounts, summing up with interest\\n    function sumTokensInPegWithYield(\\n        address[] storage tokens,\\n        mapping(address => uint256) storage amounts,\\n        mapping(address => uint256) storage yieldQuotientsFP,\\n        bool forceCurBlock\\n    ) internal returns (uint256 totalPeg) {\\n        for (uint256 tokenId = 0; tokenId < tokens.length; tokenId++) {\\n            address token = tokens[tokenId];\\n            totalPeg += yieldTokenInPeg(\\n                token,\\n                amounts[token],\\n                yieldQuotientsFP,\\n                forceCurBlock\\n            );\\n        }\\n    }\\n\\n    /// @dev go through list of tokens and ammounts, summing up with interest\\n    function viewTokensInPegWithYield(\\n        address[] storage tokens,\\n        mapping(address => uint256) storage amounts,\\n        mapping(address => uint256) storage yieldQuotientsFP\\n    ) internal view returns (uint256 totalPeg) {\\n        for (uint256 tokenId = 0; tokenId < tokens.length; tokenId++) {\\n            address token = tokens[tokenId];\\n            totalPeg += viewYieldTokenInPeg(\\n                token,\\n                amounts[token],\\n                yieldQuotientsFP\\n            );\\n        }\\n    }\\n\\n    /// @dev calculate yield for token amount and convert to reference currency\\n    function yieldTokenInPeg(\\n        address token,\\n        uint256 amount,\\n        mapping(address => uint256) storage yieldQuotientsFP,\\n        bool forceCurBlock\\n    ) internal returns (uint256) {\\n        uint256 yieldFP = Lending(lending()).viewBorrowingYieldFP(token);\\n        // 1 * FP / FP = 1\\n        uint256 amountInToken = (amount * yieldFP) / yieldQuotientsFP[token];\\n        return\\n            PriceAware.getCurrentPriceInPeg(\\n                token,\\n                amountInToken,\\n                forceCurBlock\\n            );\\n    }\\n\\n    /// @dev calculate yield for token amount and convert to reference currency\\n    function viewYieldTokenInPeg(\\n        address token,\\n        uint256 amount,\\n        mapping(address => uint256) storage yieldQuotientsFP\\n    ) internal view returns (uint256) {\\n        uint256 yieldFP = Lending(lending()).viewBorrowingYieldFP(token);\\n        // 1 * FP / FP = 1\\n        uint256 amountInToken = (amount * yieldFP) / yieldQuotientsFP[token];\\n        return PriceAware.viewCurrentPriceInPeg(token, amountInToken);\\n    }\\n\\n    /// @dev move tokens from one holding to another\\n    function adjustAmounts(\\n        CrossMarginAccount storage account,\\n        address fromToken,\\n        address toToken,\\n        uint256 soldAmount,\\n        uint256 boughtAmount\\n    ) internal {\\n        account.holdings[fromToken] = account.holdings[fromToken] - soldAmount;\\n        addHolding(account, toToken, boughtAmount);\\n    }\\n\\n    /// sets borrow and holding to zero\\n    function deleteAccount(CrossMarginAccount storage account) internal {\\n        for (\\n            uint256 borrowIdx = 0;\\n            account.borrowTokens.length > borrowIdx;\\n            borrowIdx++\\n        ) {\\n            address borrowToken = account.borrowTokens[borrowIdx];\\n            totalShort[borrowToken] -= account.borrowed[borrowToken];\\n            account.borrowed[borrowToken] = 0;\\n            account.borrowedYieldQuotientsFP[borrowToken] = 0;\\n        }\\n        for (\\n            uint256 holdingIdx = 0;\\n            account.holdingTokens.length > holdingIdx;\\n            holdingIdx++\\n        ) {\\n            address holdingToken = account.holdingTokens[holdingIdx];\\n            totalLong[holdingToken] -= account.holdings[holdingToken];\\n            account.holdings[holdingToken] = 0;\\n            account.holdsToken[holdingToken] = false;\\n        }\\n        delete account.borrowTokens;\\n        delete account.holdingTokens;\\n    }\\n\\n    /// @dev minimum\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a > b) {\\n            return b;\\n        } else {\\n            return a;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7822e3737f77a6712e21a77192cc40c9e8337dc966807500a927a32eb9ef39a9\",\"license\":\"BUSL-1.1\"},\"contracts/CrossMarginLiquidation.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./CrossMarginAccounts.sol\\\";\\n\\n/// @dev Handles liquidation of accounts below maintenance threshold\\n/// Liquidation can be called by the authorized staker, as determined\\n/// in the Admin contract.\\n/// If the authorized staker is delinquent, other participants can jump\\n/// in and attack, taking their fees and potentially even their stake,\\n/// depending how delinquent the responsible authorized staker is.\\nabstract contract CrossMarginLiquidation is CrossMarginAccounts {\\n    event LiquidationShortfall(uint256 amount);\\n    event AccountLiquidated(address account);\\n\\n    struct Liquidation {\\n        uint256 buy;\\n        uint256 sell;\\n        uint256 blockNum;\\n    }\\n\\n    /// record kept around until a stake attacker can claim their reward\\n    struct AccountLiqRecord {\\n        uint256 blockNum;\\n        address loser;\\n        uint256 amount;\\n        address stakeAttacker;\\n    }\\n\\n    mapping(address => Liquidation) liquidationAmounts;\\n    address[] internal sellTokens;\\n    address[] internal buyTokens;\\n    address[] internal tradersToLiquidate;\\n\\n    mapping(address => uint256) public maintenanceFailures;\\n    mapping(address => AccountLiqRecord) public stakeAttackRecords;\\n    uint256 public avgLiquidationPerCall = 10;\\n\\n    uint256 public liqStakeAttackWindow = 5;\\n    uint256 public MAINTAINER_CUT_PERCENT = 5;\\n\\n    uint256 public failureThreshold = 10;\\n\\n    function setFailureThreshold(uint256 threshFactor) external onlyOwner {\\n        failureThreshold = threshFactor;\\n    }\\n\\n    function setLiqStakeAttackWindow(uint256 window) external onlyOwner {\\n        liqStakeAttackWindow = window;\\n    }\\n\\n    function setMaintainerCutPercent(uint256 cut) external onlyOwner {\\n        MAINTAINER_CUT_PERCENT = cut;\\n    }\\n\\n    /// @dev calcLiquidationamounts does a number of tasks in this contract\\n    /// and some of them are not straightforward.\\n    /// First of all it aggregates liquidation amounts in storage (not in memory)\\n    /// owing to the fact that arrays can't be pushed to and hash maps don't\\n    /// exist in memory.\\n    /// Then it also returns any stake attack funds if the stake was unsuccessful\\n    /// (i.e. current caller is authorized). Also see context below.\\n    function calcLiquidationAmounts(\\n        address[] memory liquidationCandidates,\\n        bool isAuthorized\\n    ) internal returns (uint256 attackReturns) {\\n        sellTokens = new address[](0);\\n        buyTokens = new address[](0);\\n        tradersToLiquidate = new address[](0);\\n\\n        for (\\n            uint256 traderIndex = 0;\\n            liquidationCandidates.length > traderIndex;\\n            traderIndex++\\n        ) {\\n            address traderAddress = liquidationCandidates[traderIndex];\\n            CrossMarginAccount storage account = marginAccounts[traderAddress];\\n            if (belowMaintenanceThreshold(account)) {\\n                tradersToLiquidate.push(traderAddress);\\n                for (\\n                    uint256 sellIdx = 0;\\n                    account.holdingTokens.length > sellIdx;\\n                    sellIdx++\\n                ) {\\n                    address token = account.holdingTokens[sellIdx];\\n                    Liquidation storage liquidation = liquidationAmounts[token];\\n\\n                    if (liquidation.blockNum != block.number) {\\n                        liquidation.sell = account.holdings[token];\\n                        liquidation.buy = 0;\\n                        liquidation.blockNum = block.number;\\n                        sellTokens.push(token);\\n                    } else {\\n                        liquidation.sell += account.holdings[token];\\n                    }\\n                }\\n                for (\\n                    uint256 buyIdx = 0;\\n                    account.borrowTokens.length > buyIdx;\\n                    buyIdx++\\n                ) {\\n                    address token = account.borrowTokens[buyIdx];\\n                    Liquidation storage liquidation = liquidationAmounts[token];\\n\\n                    uint256 loanAmount =\\n                        Lending(lending()).applyBorrowInterest(\\n                            account.borrowed[token],\\n                            token,\\n                            account.borrowedYieldQuotientsFP[token]\\n                        );\\n\\n                    Lending(lending()).payOff(token, loanAmount);\\n\\n                    if (liquidation.blockNum != block.number) {\\n                        liquidation.sell = 0;\\n                        liquidation.buy = loanAmount;\\n                        liquidation.blockNum = block.number;\\n                        buyTokens.push(token);\\n                    } else {\\n                        liquidation.buy += loanAmount;\\n                    }\\n                }\\n            }\\n\\n            AccountLiqRecord storage liqAttackRecord =\\n                stakeAttackRecords[traderAddress];\\n            if (isAuthorized) {\\n                attackReturns += _disburseLiqAttack(liqAttackRecord);\\n            }\\n        }\\n    }\\n\\n    function _disburseLiqAttack(AccountLiqRecord storage liqAttackRecord)\\n        internal\\n        returns (uint256 returnAmount)\\n    {\\n        if (liqAttackRecord.amount > 0) {\\n            // validate attack records, if any\\n            uint256 blockDiff =\\n                min(\\n                    block.number - liqAttackRecord.blockNum,\\n                    liqStakeAttackWindow\\n                );\\n\\n            uint256 attackerCut =\\n                (liqAttackRecord.amount * blockDiff) / liqStakeAttackWindow;\\n\\n            Fund(fund()).withdraw(\\n                PriceAware.peg,\\n                liqAttackRecord.stakeAttacker,\\n                attackerCut\\n            );\\n\\n            Admin a = Admin(admin());\\n            uint256 penalty =\\n                (a.maintenanceStakePerBlock() * attackerCut) /\\n                    avgLiquidationPerCall;\\n            a.penalizeMaintenanceStake(\\n                liqAttackRecord.loser,\\n                penalty,\\n                liqAttackRecord.stakeAttacker\\n            );\\n\\n            // return remainder, after cut was taken to authorized stakekr\\n            returnAmount = liqAttackRecord.amount - attackerCut;\\n        }\\n    }\\n\\n    function disburseLiqStakeAttacks(address[] memory liquidatedAccounts)\\n        external\\n    {\\n        for (uint256 i = 0; liquidatedAccounts.length > i; i++) {\\n            address liqAccount = liquidatedAccounts[i];\\n            AccountLiqRecord storage liqAttackRecord =\\n                stakeAttackRecords[liqAccount];\\n            if (\\n                block.number > liqAttackRecord.blockNum + liqStakeAttackWindow\\n            ) {\\n                _disburseLiqAttack(liqAttackRecord);\\n                delete stakeAttackRecords[liqAccount];\\n            }\\n        }\\n    }\\n\\n    function liquidateFromPeg() internal returns (uint256 pegAmount) {\\n        for (uint256 tokenIdx = 0; buyTokens.length > tokenIdx; tokenIdx++) {\\n            address buyToken = buyTokens[tokenIdx];\\n            Liquidation storage liq = liquidationAmounts[buyToken];\\n            if (liq.buy > liq.sell) {\\n                pegAmount += PriceAware.liquidateFromPeg(\\n                    buyToken,\\n                    liq.buy - liq.sell\\n                );\\n                delete liquidationAmounts[buyToken];\\n            }\\n        }\\n        delete buyTokens;\\n    }\\n\\n    function liquidateToPeg() internal returns (uint256 pegAmount) {\\n        for (\\n            uint256 tokenIndex = 0;\\n            sellTokens.length > tokenIndex;\\n            tokenIndex++\\n        ) {\\n            address token = sellTokens[tokenIndex];\\n            Liquidation storage liq = liquidationAmounts[token];\\n            if (liq.sell > liq.buy) {\\n                uint256 sellAmount = liq.sell - liq.buy;\\n                pegAmount += PriceAware.liquidateToPeg(token, sellAmount);\\n                delete liquidationAmounts[token];\\n            }\\n        }\\n        delete sellTokens;\\n    }\\n\\n    function maintainerIsFailing() internal view returns (bool) {\\n        (address currentMaintainer, ) =\\n            Admin(admin()).viewCurrentMaintenanceStaker();\\n        return\\n            maintenanceFailures[currentMaintainer] >\\n            failureThreshold * avgLiquidationPerCall;\\n    }\\n\\n    /// called by maintenance stakers to liquidate accounts below liquidation threshold\\n    function liquidate(address[] memory liquidationCandidates)\\n        external\\n        noIntermediary\\n        returns (uint256 maintainerCut)\\n    {\\n        bool isAuthorized = Admin(admin()).isAuthorizedStaker(msg.sender);\\n        bool canTakeNow = isAuthorized || maintainerIsFailing();\\n\\n        // calcLiquidationAmounts does a lot of the work here\\n        // * aggregates both sell and buy side targets to be liquidated\\n        // * returns attacker cuts to them\\n        // * aggregates any returned fees from unauthorized (attacking) attempts\\n        maintainerCut = calcLiquidationAmounts(liquidationCandidates, isAuthorized);\\n\\n        uint256 sale2pegAmount = liquidateToPeg();\\n        uint256 peg2targetCost = liquidateFromPeg();\\n\\n        // this may be a bit imprecise, since individual shortfalls may be obscured\\n        // by overall returns and the maintainer cut is taken out of the net total,\\n        // but it gives us the general picture\\n        if (\\n            (peg2targetCost * (100 + MAINTAINER_CUT_PERCENT)) / 100 >\\n            sale2pegAmount\\n        ) {\\n            emit LiquidationShortfall(peg2targetCost - sale2pegAmount);\\n        }\\n\\n        address loser = address(0);\\n        if (!canTakeNow) {\\n            // whoever is the current responsible maintenance staker\\n            // and liable to lose their stake\\n            loser = Admin(admin()).getUpdatedCurrentStaker();\\n        }\\n\\n        // iterate over traders and send back their money\\n        // as well as giving attackers their due, in case caller isn't authorized\\n        for (\\n            uint256 traderIdx = 0;\\n            tradersToLiquidate.length > traderIdx;\\n            traderIdx++\\n        ) {\\n            address traderAddress = tradersToLiquidate[traderIdx];\\n            CrossMarginAccount storage account = marginAccounts[traderAddress];\\n\\n            uint256 holdingsValue = holdingsInPeg(account, true);\\n            uint256 borrowValue = loanInPeg(account, true);\\n            // 5% of value borrowed\\n            uint256 maintainerCut4Account =\\n                (borrowValue * MAINTAINER_CUT_PERCENT) / 100;\\n            maintainerCut += maintainerCut4Account;\\n\\n            if (!canTakeNow) {\\n                // This could theoretically lead to a previous attackers\\n                // record being overwritten, but only if the trader restarts\\n                // their account and goes back into the red within the short time window\\n                // which would be a costly attack requiring collusion without upside\\n                AccountLiqRecord storage liqAttackRecord =\\n                    stakeAttackRecords[traderAddress];\\n                liqAttackRecord.amount = maintainerCut4Account;\\n                liqAttackRecord.stakeAttacker = msg.sender;\\n                liqAttackRecord.blockNum = block.number;\\n                liqAttackRecord.loser = loser;\\n            }\\n\\n            // send back trader money\\n            if (holdingsValue >= maintainerCut4Account + borrowValue) {\\n                // send remaining funds back to trader\\n                Fund(fund()).withdraw(\\n                    PriceAware.peg,\\n                    traderAddress,\\n                    holdingsValue - borrowValue - maintainerCut4Account\\n                );\\n            }\\n\\n            emit AccountLiquidated(traderAddress);\\n            deleteAccount(account);\\n        }\\n\\n        avgLiquidationPerCall =\\n            (avgLiquidationPerCall * 99 + maintainerCut) /\\n            100;\\n\\n        if (canTakeNow) {\\n            Fund(fund()).withdraw(PriceAware.peg, msg.sender, maintainerCut);\\n        }\\n\\n        address currentMaintainer = Admin(admin()).getUpdatedCurrentStaker();\\n        if (isAuthorized) {\\n            if (maintenanceFailures[currentMaintainer] > maintainerCut) {\\n                maintenanceFailures[currentMaintainer] -= maintainerCut;\\n            } else {\\n                maintenanceFailures[currentMaintainer] = 0;\\n            }\\n        } else {\\n            maintenanceFailures[currentMaintainer] += maintainerCut;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xcd0bbd2c23d0b4232ef3961d94c5747ca57f9e606224ac72ca521501dc88f8fe\",\"license\":\"BUSL-1.1\"},\"contracts/CrossMarginTrading.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\nimport \\\"./Fund.sol\\\";\\nimport \\\"./Lending.sol\\\";\\nimport \\\"./RoleAware.sol\\\";\\nimport \\\"./MarginRouter.sol\\\";\\nimport \\\"./CrossMarginLiquidation.sol\\\";\\n\\n// Goal: all external functions only accessible to margintrader role\\n// except for view functions of course\\n\\ncontract CrossMarginTrading is CrossMarginLiquidation, IMarginTrading {\\n    constructor(address _peg, address _roles)\\n        RoleAware(_roles)\\n        PriceAware(_peg)\\n    {\\n        liquidationThresholdPercent = 110;\\n        coolingOffPeriod = 20;\\n    }\\n\\n    /// @dev admin function to set the token cap\\n    function setTokenCap(address token, uint256 cap) external {\\n        require(\\n            isTokenActivator(msg.sender),\\n            \\\"Caller not authorized to set token cap\\\"\\n        );\\n        tokenCaps[token] = cap;\\n    }\\n\\n    /// @dev setter for cooling off period for withdrawing funds after deposit\\n    function setCoolingOffPeriod(uint256 blocks) external onlyOwner {\\n        coolingOffPeriod = blocks;\\n    }\\n\\n    /// @dev admin function to set leverage\\n    function setLeverage(uint256 _leverage) external onlyOwner {\\n        leverage = _leverage;\\n    }\\n\\n    /// @dev admin function to set liquidation threshold\\n    function setLiquidationThresholdPercent(uint256 threshold)\\n        external\\n        onlyOwner\\n    {\\n        liquidationThresholdPercent = threshold;\\n    }\\n\\n    /// @dev gets called by router to affirm a deposit to an account\\n    function registerDeposit(\\n        address trader,\\n        address token,\\n        uint256 depositAmount\\n    ) external override returns (uint256 extinguishableDebt) {\\n        require(\\n            isMarginTrader(msg.sender),\\n            \\\"Calling contract not authorized to deposit\\\"\\n        );\\n\\n        CrossMarginAccount storage account = marginAccounts[trader];\\n        if (account.borrowed[token] > 0) {\\n            extinguishableDebt = min(depositAmount, account.borrowed[token]);\\n            extinguishDebt(account, token, extinguishableDebt);\\n            totalShort[token] -= extinguishableDebt;\\n        }\\n        // no overflow because depositAmount >= extinguishableDebt\\n        uint256 addedHolding = depositAmount - extinguishableDebt;\\n        addHolding(account, token, addedHolding);\\n\\n        totalLong[token] += addedHolding;\\n        require(\\n            tokenCaps[token] >= totalLong[token],\\n            \\\"Exceeding global exposure cap to token -- try again later\\\"\\n        );\\n\\n        account.lastDepositBlock = block.number;\\n    }\\n\\n    /// @dev gets called by router to affirm isolated borrowing event\\n    function registerBorrow(\\n        address trader,\\n        address borrowToken,\\n        uint256 borrowAmount\\n    ) external override {\\n        require(\\n            isMarginTrader(msg.sender),\\n            \\\"Calling contract not authorized to deposit\\\"\\n        );\\n        totalShort[borrowToken] += borrowAmount;\\n        totalLong[borrowToken] += borrowAmount;\\n        require(\\n            tokenCaps[borrowToken] >= totalShort[borrowToken] &&\\n                tokenCaps[borrowToken] >= totalLong[borrowToken],\\n            \\\"Exceeding global exposure cap to token -- try again later\\\"\\n        );\\n\\n        CrossMarginAccount storage account = marginAccounts[trader];\\n        borrow(account, borrowToken, borrowAmount);\\n    }\\n\\n    /// @dev gets called by router to affirm withdrawal of tokens from account\\n    function registerWithdrawal(\\n        address trader,\\n        address withdrawToken,\\n        uint256 withdrawAmount\\n    ) external override {\\n        require(\\n            isMarginTrader(msg.sender),\\n            \\\"Calling contract not authorized to deposit\\\"\\n        );\\n        CrossMarginAccount storage account = marginAccounts[trader];\\n        require(\\n            block.number > account.lastDepositBlock + coolingOffPeriod,\\n            \\\"To prevent attacks you must wait until your cooling off period is over to withdraw\\\"\\n        );\\n\\n        totalLong[withdrawToken] -= withdrawAmount;\\n        // throws on underflow\\n        account.holdings[withdrawToken] =\\n            account.holdings[withdrawToken] -\\n            withdrawAmount;\\n        require(\\n            positiveBalance(account),\\n            \\\"Account balance is too low to withdraw\\\"\\n        );\\n    }\\n\\n    /// @dev gets callled by router to register a trade and borrow and extinguis as necessary\\n    function registerTradeAndBorrow(\\n        address trader,\\n        address tokenFrom,\\n        address tokenTo,\\n        uint256 inAmount,\\n        uint256 outAmount\\n    )\\n        external\\n        override\\n        returns (uint256 extinguishableDebt, uint256 borrowAmount)\\n    {\\n        require(\\n            isMarginTrader(msg.sender),\\n            \\\"Calling contract is not an authorized margin trader agent\\\"\\n        );\\n\\n        CrossMarginAccount storage account = marginAccounts[trader];\\n\\n        if (account.borrowed[tokenTo] > 0) {\\n            extinguishableDebt = min(outAmount, account.borrowed[tokenTo]);\\n            extinguishDebt(account, tokenTo, extinguishableDebt);\\n            totalShort[tokenTo] -= extinguishableDebt;\\n        }\\n        totalLong[tokenFrom] -= inAmount;\\n        totalLong[tokenTo] += outAmount - extinguishableDebt;\\n        require(\\n            tokenCaps[tokenTo] >= totalLong[tokenTo],\\n            \\\"Exceeding global exposure cap to token -- try again later\\\"\\n        );\\n\\n        uint256 sellAmount = inAmount;\\n        if (inAmount > account.holdings[tokenFrom]) {\\n            sellAmount = account.holdings[tokenFrom];\\n            /// won't overflow\\n            borrowAmount = inAmount - sellAmount;\\n\\n            totalShort[tokenFrom] += borrowAmount;\\n            require(\\n                tokenCaps[tokenFrom] >= totalShort[tokenFrom],\\n                \\\"Exceeding global exposure cap to token -- try again later\\\"\\n            );\\n\\n            borrow(account, tokenFrom, borrowAmount);\\n        }\\n        adjustAmounts(account, tokenFrom, tokenTo, sellAmount, outAmount);\\n    }\\n\\n    /// @dev can get called by router to register the dissolution of an account\\n    function registerLiquidation(address trader) external override {\\n        require(\\n            isMarginTrader(msg.sender),\\n            \\\"Calling contract is not an authorized margin trader agent\\\"\\n        );\\n        CrossMarginAccount storage account = marginAccounts[trader];\\n        require(loanInPeg(account, false) == 0, \\\"Can't liquidate currently borrowing account\\\");\\n\\n        deleteAccount(account);\\n    }\\n\\n    /// @dev view function to display account held assets state\\n    function getHoldingAmounts(address trader)\\n        external\\n        override\\n        view\\n        returns (\\n            address[] memory holdingTokens,\\n            uint256[] memory holdingAmounts\\n        )\\n    {\\n        CrossMarginAccount storage account = marginAccounts[trader];\\n        holdingTokens = account.holdingTokens;\\n\\n        holdingAmounts = new uint256[](account.holdingTokens.length);\\n        for (uint256 idx = 0; holdingTokens.length > idx; idx++) {\\n            address tokenAddress = holdingTokens[idx];\\n            holdingAmounts[idx] = account.holdings[tokenAddress];\\n        }\\n    }\\n\\n    /// @dev view function to display account borrowing state\\n    function getBorrowAmounts(address trader)\\n        external\\n        override\\n        view\\n        returns (address[] memory borrowTokens, uint256[] memory borrowAmounts)\\n    {\\n        CrossMarginAccount storage account = marginAccounts[trader];\\n        borrowTokens = account.borrowTokens;\\n\\n        borrowAmounts = new uint256[](account.borrowTokens.length);\\n        for (uint256 idx = 0; borrowTokens.length > idx; idx++) {\\n            address tokenAddress = borrowTokens[idx];\\n            borrowAmounts[idx] = Lending(lending()).viewBorrowInterest(\\n                account.borrowed[tokenAddress],\\n                tokenAddress,\\n                account.borrowedYieldQuotientsFP[tokenAddress]\\n            );\\n        }\\n    }\\n\\n    /// @dev view function to get loan amount in peg\\n    function viewLoanInPeg(address trader)\\n        external\\n        view\\n        returns (uint256 amount)\\n    {\\n        CrossMarginAccount storage account = marginAccounts[trader];\\n        return\\n            viewTokensInPegWithYield(\\n                account.borrowTokens,\\n                account.borrowed,\\n                account.borrowedYieldQuotientsFP\\n            );\\n    }\\n\\n    /// @dev total of assets of account, expressed in reference currency\\n    function viewHoldingsInPeg(address trader) external view returns (uint256) {\\n        CrossMarginAccount storage account = marginAccounts[trader];\\n        return viewTokensInPeg(account.holdingTokens, account.holdings);\\n    }\\n}\\n\",\"keccak256\":\"0x6ce0de2000121950a3672fb060deb96c680a2f778d43468256c47c2259730c80\",\"license\":\"BUSL-1.1\"},\"contracts/Fund.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"../interfaces/IWETH.sol\\\";\\nimport \\\"./RoleAware.sol\\\";\\n\\ncontract Fund is RoleAware, Ownable {\\n    using SafeERC20 for IERC20;\\n    address public immutable WETH;\\n    mapping(address => bool) public activeTokens;\\n\\n    constructor(address _WETH, address _roles) Ownable() RoleAware(_roles) {\\n        WETH = _WETH;\\n    }\\n\\n    function activateToken(address token) external {\\n        require(\\n            isTokenActivator(msg.sender),\\n            \\\"Address not authorized to activate tokens\\\"\\n        );\\n        activeTokens[token] = true;\\n    }\\n\\n    function deactivateToken(address token) external {\\n        require(\\n            isTokenActivator(msg.sender),\\n            \\\"Address not authorized to activate tokens\\\"\\n        );\\n        activeTokens[token] = false;\\n    }\\n\\n    function deposit(address depositToken, uint256 depositAmount)\\n        external\\n    {\\n        require(activeTokens[depositToken], \\\"Deposit token is not active\\\");\\n            IERC20(depositToken).safeTransferFrom(\\n                msg.sender,\\n                address(this),\\n                depositAmount\\n            );\\n    }\\n\\n    function depositFor(\\n        address sender,\\n        address depositToken,\\n        uint256 depositAmount\\n    ) external {\\n        require(activeTokens[depositToken], \\\"Deposit token is not active\\\");\\n        require(isFundTransferer(msg.sender), \\\"Contract not authorized to deposit for user\\\");\\n            IERC20(depositToken).safeTransferFrom(\\n                sender,\\n                address(this),\\n                depositAmount\\n            );\\n    }\\n\\n    function depositToWETH() external payable {\\n        IWETH(WETH).deposit{value: msg.value}();\\n    }\\n\\n    // withdrawers role\\n    function withdraw(\\n        address withdrawalToken,\\n        address recipient,\\n        uint256 withdrawalAmount\\n    ) external {\\n        require(\\n            isFundTransferer(msg.sender),\\n            \\\"Contract not authorized to withdraw\\\"\\n        );\\n        IERC20(withdrawalToken).safeTransfer(recipient, withdrawalAmount);\\n    }\\n\\n    // withdrawers role\\n    function withdrawETH(address recipient, uint256 withdrawalAmount) external {\\n        require(isFundTransferer(msg.sender), \\\"Not authorized to withdraw\\\");\\n        IWETH(WETH).withdraw(withdrawalAmount);\\n        Address.sendValue(payable(recipient), withdrawalAmount);\\n    }\\n}\\n\",\"keccak256\":\"0x3ea9e58e85778d375cf370373e30e09ab783c2c6116ff733c8f8d35c3cc65464\",\"license\":\"BUSL-1.1\"},\"contracts/HourlyBondSubscriptionLending.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./BaseLending.sol\\\";\\nimport \\\"./Fund.sol\\\";\\n\\nstruct YieldAccumulator {\\n    uint256 accumulatorFP;\\n    uint256 lastUpdated;\\n    uint256 hourlyYieldFP;\\n}\\n\\nstruct HourlyBond {\\n    uint256 amount;\\n    uint256 yieldQuotientFP;\\n    uint256 moduloHour;\\n}\\n\\n/// @dev Here we offer subscriptions to auto-renewing hourly bonds\\n/// Funds are locked in for an 50 minutes per hour, while interest rates float\\nabstract contract HourlyBondSubscriptionLending is BaseLending {\\n    uint256 public withdrawalWindow = 10 minutes;\\n    // token => holder => bond record\\n    mapping(address => mapping(address => HourlyBond))\\n        public hourlyBondAccounts;\\n\\n    mapping(address => YieldAccumulator) public hourlyBondYieldAccumulators;\\n    /// @dev accumulate interest per token (like compound indices)\\n    mapping(address => YieldAccumulator) public borrowYieldAccumulators;\\n\\n    uint256 public borrowingFactorPercent = 200;\\n\\n    mapping(address => uint256) public hourlyBondBuyingSpeed;\\n    mapping(address => uint256) public hourlyBondWithdrawingSpeed;\\n\\n    function setHourlyYieldAPR(address token, uint256 aprPercent) external {\\n        require(\\n            isTokenActivator(msg.sender),\\n            \\\"not authorized to set hourly yield\\\"\\n        );\\n        if (hourlyBondYieldAccumulators[token].accumulatorFP == 0) {\\n            hourlyBondYieldAccumulators[token] = YieldAccumulator({\\n                accumulatorFP: FP32,\\n                lastUpdated: block.timestamp,\\n                hourlyYieldFP: (FP32 * (100 + aprPercent)) / 100 / (24 * 365)\\n            });\\n        } else {\\n            YieldAccumulator storage yA = getUpdatedHourlyYield(token);\\n            yA.hourlyYieldFP =\\n                (FP32 * (100 + aprPercent)) /\\n                100 /\\n                (24 * 365);\\n        }\\n    }\\n\\n    function setWithdrawalWindow(uint256 window) external onlyOwner {\\n        withdrawalWindow = window;\\n    }\\n\\n    function _makeHourlyBond(\\n        address token,\\n        address holder,\\n        uint256 amount\\n    ) internal {\\n        HourlyBond storage bond = hourlyBondAccounts[token][holder];\\n        updateHourlyBondAmount(token, bond);\\n        bond.yieldQuotientFP = hourlyBondYieldAccumulators[token].accumulatorFP;\\n        bond.moduloHour = block.timestamp % (1 hours);\\n        bond.amount += amount;\\n        lendingMeta[token].totalLending += amount;\\n    }\\n\\n    function updateHourlyBondAmount(address token, HourlyBond storage bond)\\n        internal\\n    {\\n        uint256 yieldQuotientFP = bond.yieldQuotientFP;\\n        if (yieldQuotientFP > 0) {\\n            YieldAccumulator storage yA = getUpdatedHourlyYield(token);\\n\\n            uint256 oldAmount = bond.amount;\\n            bond.amount = applyInterest(\\n                bond.amount,\\n                yA.accumulatorFP,\\n                yieldQuotientFP\\n            );\\n\\n            uint256 deltaAmount = bond.amount - oldAmount;\\n            lendingMeta[token].totalLending += deltaAmount;\\n        }\\n    }\\n\\n    // Retrieves bond balance for token and holder\\n    function viewHourlyBondAmount(address token, address holder)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        HourlyBond storage bond = hourlyBondAccounts[token][holder];\\n        uint256 yieldQuotientFP = bond.yieldQuotientFP;\\n        if (yieldQuotientFP > 0) {\\n            return\\n                bond.amount +\\n                applyInterest(\\n                    bond.amount,\\n                    viewCumulativeYieldFP(\\n                        token,\\n                        hourlyBondYieldAccumulators,\\n                        block.timestamp\\n                    ),\\n                    yieldQuotientFP\\n                );\\n        }\\n        return bond.amount + 0;\\n    }\\n\\n    function _withdrawHourlyBond(\\n        address token,\\n        HourlyBond storage bond,\\n        address recipient,\\n        uint256 amount\\n    ) internal {\\n        // how far the current hour has advanced (relative to acccount hourly clock)\\n        uint256 currentOffset = (block.timestamp - bond.moduloHour) % (1 hours);\\n\\n        require(\\n            withdrawalWindow >= currentOffset,\\n            \\\"Tried withdrawing outside subscription cancellation time window\\\"\\n        );\\n\\n        Fund(fund()).withdraw(token, recipient, amount);\\n\\n        bond.amount -= amount;\\n        lendingMeta[token].totalLending -= amount;\\n    }\\n\\n    function closeHourlyBondAccount(address token) external {\\n        HourlyBond storage bond = hourlyBondAccounts[token][msg.sender];\\n        // apply all interest\\n        updateHourlyBondAmount(token, bond);\\n        _withdrawHourlyBond(token, bond, msg.sender, bond.amount);\\n\\n        bond.amount = 0;\\n        bond.yieldQuotientFP = 0;\\n        bond.moduloHour = 0;\\n    }\\n\\n    function calcCumulativeYieldFP(\\n        YieldAccumulator storage yieldAccumulator,\\n        uint256 timeDelta\\n    ) internal view returns (uint256 accumulatorFP) {\\n        uint256 secondsDelta = timeDelta % (1 hours);\\n        // linearly interpolate interest for seconds\\n        // accumulator * hourly_yield == seconds_per_hour * accumulator * hourly_yield / seconds_per_hour\\n        // FP * FP * 1 / (FP * 1) = FP\\n        accumulatorFP =\\n            (yieldAccumulator.accumulatorFP *\\n                yieldAccumulator.hourlyYieldFP *\\n                secondsDelta) /\\n            (FP32 * 1 hours);\\n\\n        uint256 hoursDelta = timeDelta / (1 hours);\\n        if (hoursDelta > 0) {\\n            // This loop should hardly ever 1 or more unless something bad happened\\n            // In which case it costs gas but there isn't overflow\\n            for (uint256 i = 0; hoursDelta > i; i++) {\\n                // FP32 * FP32 / FP32 = FP32\\n                accumulatorFP =\\n                    (accumulatorFP * yieldAccumulator.hourlyYieldFP) /\\n                    FP32;\\n            }\\n        }\\n    }\\n\\n    /// @dev updates yield accumulators for both borrowing and lending\\n    function getUpdatedHourlyYield(address token)\\n        internal\\n        returns (YieldAccumulator storage accumulator)\\n    {\\n        accumulator = hourlyBondYieldAccumulators[token];\\n        uint256 timeDelta = (block.timestamp - accumulator.lastUpdated);\\n\\n        accumulator.accumulatorFP = calcCumulativeYieldFP(\\n            accumulator,\\n            timeDelta\\n        );\\n\\n        LendingMetadata storage meta = lendingMeta[token];\\n        accumulator.hourlyYieldFP = updatedYieldFP(\\n            accumulator.hourlyYieldFP,\\n            accumulator.lastUpdated,\\n            meta.totalLending,\\n            lendingTarget(meta),\\n            hourlyBondBuyingSpeed[token],\\n            hourlyBondWithdrawingSpeed[token],\\n            maxHourlyYieldFP\\n        );\\n\\n        YieldAccumulator storage borrowAccumulator =\\n            borrowYieldAccumulators[token];\\n        timeDelta = block.timestamp - borrowAccumulator.lastUpdated;\\n        borrowAccumulator.accumulatorFP = calcCumulativeYieldFP(\\n            borrowAccumulator,\\n            timeDelta\\n        );\\n\\n        borrowYieldAccumulators[token].hourlyYieldFP =\\n            (borrowingFactorPercent * accumulator.hourlyYieldFP) /\\n            100;\\n\\n        accumulator.lastUpdated = block.timestamp;\\n        borrowAccumulator.lastUpdated = block.timestamp;\\n    }\\n\\n    function viewCumulativeYieldFP(\\n        address token,\\n        mapping(address => YieldAccumulator) storage yieldAccumulators,\\n        uint256 timestamp\\n    ) internal view returns (uint256) {\\n        uint256 timeDelta = (timestamp - yieldAccumulators[token].lastUpdated);\\n        return calcCumulativeYieldFP(yieldAccumulators[token], timeDelta);\\n    }\\n}\\n\",\"keccak256\":\"0x1d521d38622b20bb6a53cb1376515e74fce3c14ff5caa23e092057b71a5d1755\",\"license\":\"BUSL-1.1\"},\"contracts/IncentiveDistribution.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./RoleAware.sol\\\";\\nimport \\\"./Fund.sol\\\";\\n\\nstruct Claim {\\n    uint256 startingRewardRateFP;\\n    address recipient;\\n    uint256 amount;\\n}\\n\\ncontract IncentiveDistribution is RoleAware, Ownable {\\n    // fixed point number factor\\n    uint256 constant internal FP32 = 2**32;\\n    // the amount of contraction per thousand, per day\\n    // of the overal daily incentive distribution\\n    // https://en.wikipedia.org/wiki/Per_mil\\n    uint256 constant public contractionPerMil = 999;\\n    // the period for which claims are batch updated\\n    uint256 constant public period = 4 hours;\\n    uint256 constant public periodsPerDay = 24 hours / period;\\n    address immutable public MFI;\\n\\n    constructor(\\n        address _MFI,\\n        uint256 startingDailyDistributionWithoutDecimals,\\n        address _roles\\n    ) RoleAware(_roles) Ownable() {\\n        MFI = _MFI;\\n        currentDailyDistribution =\\n            startingDailyDistributionWithoutDecimals *\\n            (1 ether);\\n        lastDailyDistributionUpdate = block.timestamp / (1 days);\\n    }\\n\\n    // how much is going to be distributed, contracts every day\\n    uint256 public currentDailyDistribution;\\n    // last day on which we updated currentDailyDistribution\\n    uint256 lastDailyDistributionUpdate;\\n    // portion of daily distribution per each tranche\\n    mapping(uint8 => uint256) public trancheShare;\\n    uint256 public trancheShareTotal;\\n\\n    // tranche => claim totals for the period we're currently aggregating\\n    mapping(uint8 => uint256) public currentPeriodTotals;\\n    // tranche => timestamp / period of last update\\n    mapping(uint8 => uint256) public lastUpdatedPeriods;\\n\\n    // how each claim unit would get if they had staked from the dawn of time\\n    // expressed as fixed point number\\n    // claim amounts are expressed relative to this ongoing aggregate\\n    mapping(uint8 => uint256) public aggregatePeriodicRewardRateFP;\\n    // claim records\\n    mapping(uint256 => Claim) public claims;\\n    uint256 public nextClaimId = 1;\\n\\n    function setTrancheShare(uint8 tranche, uint256 share) external onlyOwner {\\n        require(\\n            lastUpdatedPeriods[tranche] > 0,\\n            \\\"Tranche is not initialized, please initialize first\\\"\\n        );\\n        _setTrancheShare(tranche, share);\\n    }\\n\\n    function _setTrancheShare(uint8 tranche, uint256 share) internal {\\n        if (share > trancheShare[tranche]) {\\n            trancheShareTotal += share - trancheShare[tranche];\\n        } else {\\n            trancheShareTotal -= trancheShare[tranche] - share;\\n        }\\n        trancheShare[tranche] = share;\\n    }\\n\\n    function initTranche(uint8 tranche, uint256 share) external onlyOwner {\\n        _setTrancheShare(tranche, share);\\n\\n        lastUpdatedPeriods[tranche] = block.timestamp / period;\\n        // simply initialize to 1.0\\n        aggregatePeriodicRewardRateFP[tranche] = FP32;\\n    }\\n\\n    function updatePeriodTotals(uint8 tranche) internal {\\n        uint256 currentPeriod = block.timestamp / period;\\n\\n        // update the amount that gets distributed per day, if there has been\\n        // a day transition\\n        updateCurrentDailyDistribution();\\n        // Do a bunch of updating of periodic variables when the period changes\\n        uint256 lU = lastUpdatedPeriods[tranche];\\n        uint256 periodDiff = currentPeriod - lU;\\n\\n        if (periodDiff > 0) {\\n            aggregatePeriodicRewardRateFP[tranche] +=\\n                currentPeriodicRewardRateFP(tranche) *\\n                periodDiff;\\n        }\\n\\n        lastUpdatedPeriods[tranche] = currentPeriod;\\n    }\\n\\n    // @dev can be called by anyone, if they want to ensure rewards\\n    // are distributed to a high level of accuracy (if several days\\n    // pass without update rewards will be slightly underestimated)\\n    function forcePeriodTotalUpdate(uint8 tranche) external {\\n        updatePeriodTotals(tranche);\\n    }\\n\\n    function updateCurrentDailyDistribution() internal {\\n        uint256 nowDay = block.timestamp / (1 days);\\n        uint256 dayDiff = nowDay - lastDailyDistributionUpdate;\\n\\n        // shrink the daily distribution for every day that has passed\\n        for (uint256 i = 0; i < dayDiff; i++) {\\n            currentDailyDistribution =\\n                (currentDailyDistribution * contractionPerMil) /\\n                1000;\\n        }\\n        // now update this memo\\n        lastDailyDistributionUpdate = nowDay;\\n    }\\n\\n    function currentPeriodicRewardRateFP(uint8 tranche)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        // scale daily distribution down to tranche share\\n        uint256 tranchePeriodDistributionFP =\\n            (FP32 * currentDailyDistribution * trancheShare[tranche]) /\\n                trancheShareTotal /\\n                periodsPerDay;\\n\\n        // rate = (total_reward / total_claims) per period\\n        return tranchePeriodDistributionFP / currentPeriodTotals[tranche];\\n    }\\n\\n    function startClaim(\\n        uint8 tranche,\\n        address recipient,\\n        uint256 claimAmount\\n    ) external returns (uint256) {\\n        require(\\n            isIncentiveReporter(msg.sender),\\n            \\\"Contract not authorized to report incentives\\\"\\n        );\\n        if (currentDailyDistribution > 0) {\\n            updatePeriodTotals(tranche);\\n\\n            currentPeriodTotals[tranche] += claimAmount;\\n\\n            claims[nextClaimId] = Claim({\\n                startingRewardRateFP: aggregatePeriodicRewardRateFP[tranche],\\n                recipient: recipient,\\n                amount: claimAmount\\n            });\\n            nextClaimId += 1;\\n            return nextClaimId - 1;\\n        } else {\\n            return 0;\\n        }\\n    }\\n\\n    function addToClaimAmount(\\n        uint8 tranche,\\n        uint256 claimId,\\n        uint256 additionalAmount\\n    ) external {\\n        require(\\n            isIncentiveReporter(msg.sender),\\n            \\\"Contract not authorized to report incentives\\\"\\n        );\\n        if (currentDailyDistribution > 0) {\\n            updatePeriodTotals(tranche);\\n\\n            currentPeriodTotals[tranche] += additionalAmount;\\n\\n            Claim storage claim = claims[claimId];\\n            require(\\n                claim.startingRewardRateFP > 0,\\n                \\\"Trying to add to non-existant claim\\\"\\n            );\\n            _withdrawReward(tranche, claim);\\n            claim.amount += additionalAmount;\\n        }\\n    }\\n\\n    function subtractFromClaimAmount(\\n        uint8 tranche,\\n        uint256 claimId,\\n        uint256 subtractAmount\\n    ) external {\\n        require(\\n            isIncentiveReporter(msg.sender),\\n            \\\"Contract not authorized to report incentives\\\"\\n        );\\n        updatePeriodTotals(tranche);\\n\\n        currentPeriodTotals[tranche] -= subtractAmount;\\n\\n        Claim storage claim = claims[claimId];\\n        _withdrawReward((tranche), claim);\\n        claim.amount -= subtractAmount;\\n    }\\n\\n    function endClaim(uint8 tranche, uint256 claimId) external {\\n        require(\\n            isIncentiveReporter(msg.sender),\\n            \\\"Contract not authorized to report incentives\\\"\\n        );\\n        updatePeriodTotals(tranche);\\n        Claim storage claim = claims[claimId];\\n\\n        if (claim.startingRewardRateFP > 0) {\\n            _withdrawReward(tranche, claim);\\n            delete claims[claimId];\\n        }\\n    }\\n\\n    function calcRewardAmount(uint8 tranche, Claim storage claim)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return\\n            (claim.amount *\\n                (aggregatePeriodicRewardRateFP[tranche] -\\n                    claim.startingRewardRateFP)) / FP32;\\n    }\\n\\n    function viewRewardAmount(uint8 tranche, uint256 claimId)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return calcRewardAmount(tranche, claims[claimId]);\\n    }\\n\\n    function withdrawReward(uint8 tranche, uint256 claimId)\\n        external\\n        returns (uint256)\\n    {\\n        require(\\n            isIncentiveReporter(msg.sender),\\n            \\\"Contract not authorized to report incentives\\\"\\n        );\\n        updatePeriodTotals(tranche);\\n        Claim storage claim = claims[claimId];\\n        return _withdrawReward(tranche, claim);\\n    }\\n\\n    function _withdrawReward(uint8 tranche, Claim storage claim)\\n        internal\\n        returns (uint256 rewardAmount)\\n    {\\n        rewardAmount = calcRewardAmount(tranche, claim);\\n        claim.startingRewardRateFP = aggregatePeriodicRewardRateFP[tranche];\\n\\n        Fund(fund()).withdraw(MFI, claim.recipient, rewardAmount);\\n    }\\n}\\n\",\"keccak256\":\"0xd2f26d41445d5467bc6493b9f839d9d98863556f3f1689a7cd33276c83075f05\",\"license\":\"BUSL-1.1\"},\"contracts/IncentivizedHolder.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IncentiveDistribution.sol\\\";\\nimport \\\"./RoleAware.sol\\\";\\n\\n/// @dev helper class to facilitate staking and unstaking\\n/// within the incentive system.\\nabstract contract IncentivizedHolder is RoleAware {\\n    // here we cache incentive tranches to save on a bit of gas\\n    mapping(address => uint8) public incentiveTranches;\\n    // claimant => token => claimId\\n    mapping(address => mapping(address => uint256)) public claimIds;\\n\\n    function setIncentiveTranche(address token, uint8 tranche) external {\\n        require(\\n            isTokenActivator(msg.sender),\\n            \\\"Caller not authorized to set incentive tranche\\\"\\n        );\\n        incentiveTranches[token] = tranche;\\n    }\\n\\n    function stakeClaim(\\n        address claimant,\\n        address token,\\n        uint256 amount\\n    ) internal {\\n        IncentiveDistribution iD =\\n            IncentiveDistribution(incentiveDistributor());\\n        uint256 claimId = claimIds[claimant][token];\\n        uint8 tranche = incentiveTranches[token];\\n        if (claimId > 0) {\\n            iD.addToClaimAmount(tranche, claimId, amount);\\n        } else {\\n            claimId = iD.startClaim(tranche, claimant, amount);\\n\\n            // check that distribution hasn't ended yet\\n            if(claimId > 0) {\\n                claimIds[claimant][token] = claimId;\\n            }\\n        }\\n    }\\n\\n    function withdrawClaim(\\n        address claimant,\\n        address token,\\n        uint256 amount\\n    ) internal {\\n        uint256 claimId = claimIds[claimant][token];\\n        if (claimId > 0) {\\n            uint8 tranche = incentiveTranches[token];\\n            // this does not end claims if they zero out, but we are willing\\n            // to sacrifice the gas refund from zeroing out for simplicity\\n            // sake and saving storage cost wwhen starting a claim\\n            IncentiveDistribution(incentiveDistributor()).subtractFromClaimAmount(\\n                tranche,\\n                claimId,\\n                amount\\n            );\\n        }\\n    }\\n\\n    function endClaim(address claimant, address token) internal {\\n        uint256 claimId = claimIds[claimant][token];\\n        uint8 tranche = incentiveTranches[token];\\n        IncentiveDistribution(incentiveDistributor()).endClaim(tranche, claimId);\\n        claimIds[claimant][token] = 0;\\n    }\\n}\\n\",\"keccak256\":\"0x7e78e8d2bdf7f6cc6b19849383293003bcecdc86e4e73fa92a1a6bb7c164f828\",\"license\":\"BUSL-1.1\"},\"contracts/Lending.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Fund.sol\\\";\\nimport \\\"./HourlyBondSubscriptionLending.sol\\\";\\nimport \\\"./BondLending.sol\\\";\\nimport \\\"./IncentivizedHolder.sol\\\";\\n\\ncontract Lending is\\n    BaseLending,\\n    HourlyBondSubscriptionLending,\\n    BondLending,\\n    IncentivizedHolder\\n{\\n    /// @dev IDs for all bonds held by an address\\n    mapping(address => uint256[]) public bondIds;\\n\\n    constructor(address _roles) RoleAware(_roles) Ownable() {\\n        uint256 APR = 899;\\n        maxHourlyYieldFP = (FP32 * APR) / 100 / (24 * 365);\\n\\n        uint256 aprChangePerMil = 3;\\n        yieldChangePerSecondFP = (FP32 * aprChangePerMil) / 1000;\\n    }\\n\\n    /// @dev how much interest has accrued to a borrowed balance over time\\n    function applyBorrowInterest(\\n        uint256 balance,\\n        address token,\\n        uint256 yieldQuotientFP\\n    ) external returns (uint256 balanceWithInterest) {\\n        require(isBorrower(msg.sender), \\\"Not an approved borrower\\\");\\n\\n        YieldAccumulator storage yA = borrowYieldAccumulators[token];\\n        balanceWithInterest = applyInterest(\\n            balance,\\n            yA.accumulatorFP,\\n            yieldQuotientFP\\n        );\\n\\n        uint256 deltaAmount = balanceWithInterest - balance;\\n        LendingMetadata storage meta = lendingMeta[token];\\n        meta.totalBorrowed += deltaAmount;\\n    }\\n\\n    /// @dev view function to get current borrowing interest\\n    function viewBorrowInterest(\\n        uint256 balance,\\n        address token,\\n        uint256 yieldQuotientFP\\n    ) external view returns (uint256) {\\n        uint256 accumulatorFP =\\n            viewCumulativeYieldFP(\\n                token,\\n                borrowYieldAccumulators,\\n                block.timestamp\\n            );\\n        return applyInterest(balance, accumulatorFP, yieldQuotientFP);\\n    }\\n\\n    /// @dev gets called by router to register if a trader borrows tokens\\n    function registerBorrow(address token, uint256 amount) external {\\n        require(isBorrower(msg.sender), \\\"Not an approved borrower\\\");\\n        require(Fund(fund()).activeTokens(token), \\\"Not an approved token\\\");\\n        LendingMetadata storage meta = lendingMeta[token];\\n        meta.totalBorrowed += amount;\\n        require(\\n            meta.totalLending >= meta.totalBorrowed,\\n            \\\"Insufficient capital to lend, try again later!\\\"\\n        );\\n    }\\n\\n    /// @dev gets called by router if loan is extinguished\\n    function payOff(address token, uint256 amount) external {\\n        require(isBorrower(msg.sender), \\\"Not an approved borrower\\\");\\n        lendingMeta[token].totalBorrowed -= amount;\\n    }\\n\\n    /// @dev get the borrow yield\\n    function viewBorrowingYieldFP(address token)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return\\n            viewCumulativeYieldFP(\\n                token,\\n                borrowYieldAccumulators,\\n                block.timestamp\\n            );\\n    }\\n\\n    /// @dev In a liquidity crunch make a fallback bond until liquidity is good again\\n    function _makeFallbackBond(\\n        address token,\\n        address holder,\\n        uint256 amount\\n    ) internal override {\\n        _makeHourlyBond(token, holder, amount);\\n    }\\n\\n    /// @dev withdraw an hour bond\\n    function withdrawHourlyBond(address token, uint256 amount) external {\\n        HourlyBond storage bond = hourlyBondAccounts[token][msg.sender];\\n        // apply all interest\\n        updateHourlyBondAmount(token, bond);\\n        super._withdrawHourlyBond(token, bond, msg.sender, amount);\\n\\n        withdrawClaim(msg.sender, token, amount);\\n    }\\n\\n    /// @dev buy hourly bond subscription\\n    function buyHourlyBondSubscription(address token, uint256 amount) external {\\n        LendingMetadata storage meta = lendingMeta[token];\\n        if (lendingTarget(meta) >= meta.totalLending + amount) {\\n            Fund(fund()).depositFor(msg.sender, token, amount);\\n\\n            super._makeHourlyBond(token, msg.sender, amount);\\n\\n            stakeClaim(msg.sender, token, amount);\\n        }\\n    }\\n\\n    /// @dev buy fixed term bond that does not renew\\n    function buyBond(\\n        address token,\\n        uint256 runtime,\\n        uint256 amount,\\n        uint256 minReturn\\n    ) external returns (uint256 bondIndex) {\\n        LendingMetadata storage meta = lendingMeta[token];\\n        if (\\n            lendingTarget(meta) >= meta.totalLending + amount &&\\n            maxRuntime >= runtime &&\\n            runtime >= minRuntime\\n        ) {\\n            bondIndex = super._makeBond(\\n                msg.sender,\\n                token,\\n                runtime,\\n                amount,\\n                minReturn\\n            );\\n            if (bondIndex > 0) {\\n                bondIds[msg.sender].push(bondIndex);\\n\\n                stakeClaim(msg.sender, token, amount);\\n            }\\n        }\\n    }\\n\\n    /// @dev send back funds of bond after maturity\\n    function withdrawBond(uint256 bondId) external {\\n        Bond storage bond = bonds[bondId];\\n        require(msg.sender == bond.holder, \\\"Not holder of bond\\\");\\n        require(\\n            block.timestamp > bond.maturityTimestamp,\\n            \\\"bond is still immature\\\"\\n        );\\n        // in case of a shortfall, governance can step in to provide\\n        // additonal compensation beyond the usual incentive which\\n        // gets withdrawn here\\n        withdrawClaim(msg.sender, bond.token, bond.originalPrice);\\n\\n        super._withdrawBond(bondId, bond);\\n    }\\n\\n    function initBorrowYieldAccumulator(address token) external {\\n        require(\\n            isTokenActivator(msg.sender),\\n            \\\"not autorized to init yield accumulator\\\"\\n        );\\n        require(borrowYieldAccumulators[token].accumulatorFP == 0,\\n                \\\"trying to re-initialize yield accumulator\\\");\\n\\n        borrowYieldAccumulators[token].accumulatorFP = FP32;\\n    }\\n\\n    function setBorrowingFactorPercent(uint256 borrowingFactor)\\n        external\\n        onlyOwner\\n    {\\n        borrowingFactorPercent = borrowingFactor;\\n    }\\n}\\n\",\"keccak256\":\"0x5249776c20bd509543893fd38b9de018412e7fab2c50215b87a625593dd9ea03\",\"license\":\"BUSL-1.1\"},\"contracts/MarginRouter.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Factory.sol\\\";\\nimport \\\"../libraries/UniswapV2Library.sol\\\";\\n\\nimport \\\"./RoleAware.sol\\\";\\nimport \\\"./Fund.sol\\\";\\nimport \\\"../interfaces/IMarginTrading.sol\\\";\\nimport \\\"./Lending.sol\\\";\\nimport \\\"./Admin.sol\\\";\\nimport \\\"./IncentivizedHolder.sol\\\";\\n\\ncontract MarginRouter is RoleAware, IncentivizedHolder, Ownable {\\n    /// different uniswap compatible factories to talk to\\n    mapping(address => bool) public factories;\\n    /// wrapped ETH ERC20 contract\\n    address public immutable WETH;\\n    address public constant UNI = 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f;\\n    address public constant SUSHI = 0xC0AEe478e3658e2610c5F7A4A2E1777cE9e4f2Ac;\\n    /// emitted when a trader depoits on cross margin\\n    event CrossDeposit(\\n        address trader,\\n        address depositToken,\\n        uint256 depositAmount\\n    );\\n    /// emitted whenever a trade happens\\n    event CrossTrade(\\n        address trader,\\n        address inToken,\\n        uint256 inTokenAmount,\\n        uint256 inTokenBorrow,\\n        address outToken,\\n        uint256 outTokenAmount,\\n        uint256 outTokenExtinguish\\n    );\\n    /// emitted when a trader withdraws funds\\n    event CrossWithdraw(\\n        address trader,\\n        address withdrawToken,\\n        uint256 withdrawAmount\\n    );\\n    /// emitted upon sucessfully borrowing\\n    event CrossBorrow(\\n        address trader,\\n        address borrowToken,\\n        uint256 borrowAmount\\n    );\\n\\n    modifier ensure(uint256 deadline) {\\n        require(deadline >= block.timestamp, \\\"Trade has expired\\\");\\n        _;\\n    }\\n\\n    constructor(address _WETH, address _roles) RoleAware(_roles) {\\n        factories[UNI] = true;\\n        factories[SUSHI] = true;\\n\\n        WETH = _WETH;\\n    }\\n\\n    function authorizeAMM(address ammFactory) external onlyOwner {\\n        factories[ammFactory] = true;\\n    }\\n\\n    /// @dev traders call this to deposit funds on cross margin\\n    function crossDeposit(address depositToken, uint256 depositAmount)\\n        external\\n    {\\n        Fund(fund()).depositFor(msg.sender, depositToken, depositAmount);\\n\\n        uint256 extinguishAmount =\\n            IMarginTrading(marginTrading()).registerDeposit(\\n                msg.sender,\\n                depositToken,\\n                depositAmount\\n            );\\n        if (extinguishAmount > 0) {\\n            Lending(lending()).payOff(depositToken, extinguishAmount);\\n            withdrawClaim(msg.sender, depositToken, extinguishAmount);\\n        }\\n        emit CrossDeposit(msg.sender, depositToken, depositAmount);\\n    }\\n\\n    /// @dev deposit wrapped ehtereum into cross margin account\\n    function crossDepositETH() external payable {\\n        Fund(fund()).depositToWETH{value: msg.value}();\\n        uint256 extinguishAmount =\\n            IMarginTrading(marginTrading()).registerDeposit(\\n                msg.sender,\\n                WETH,\\n                msg.value\\n            );\\n        if (extinguishAmount > 0) {\\n            Lending(lending()).payOff(WETH, extinguishAmount);\\n            withdrawClaim(msg.sender, WETH, extinguishAmount);\\n        }\\n        emit CrossDeposit(msg.sender, WETH, msg.value);\\n    }\\n\\n    /// @dev withdraw deposits/earnings from cross margin account\\n    function crossWithdraw(address withdrawToken, uint256 withdrawAmount)\\n        external\\n    {\\n        IMarginTrading(marginTrading()).registerWithdrawal(\\n            msg.sender,\\n            withdrawToken,\\n            withdrawAmount\\n        );\\n        Fund(fund()).withdraw(withdrawToken, msg.sender, withdrawAmount);\\n        emit CrossWithdraw(msg.sender, withdrawToken, withdrawAmount);\\n    }\\n\\n    /// @dev withdraw ethereum from cross margin account\\n    function crossWithdrawETH(uint256 withdrawAmount) external {\\n        IMarginTrading(marginTrading()).registerWithdrawal(\\n            msg.sender,\\n            WETH,\\n            withdrawAmount\\n        );\\n        Fund(fund()).withdrawETH(msg.sender, withdrawAmount);\\n    }\\n\\n    /// @dev borrow into cross margin trading account\\n    function crossBorrow(address borrowToken, uint256 borrowAmount) external {\\n        Lending(lending()).registerBorrow(borrowToken, borrowAmount);\\n        IMarginTrading(marginTrading()).registerBorrow(\\n            msg.sender,\\n            borrowToken,\\n            borrowAmount\\n        );\\n\\n        stakeClaim(msg.sender, borrowToken, borrowAmount);\\n        emit CrossBorrow(msg.sender, borrowToken, borrowAmount);\\n    }\\n\\n    /// @dev close an account that is no longer borrowing and return gains\\n    function crossCloseAccount() external {\\n        (address[] memory holdingTokens,\\n         uint256[] memory holdingAmounts) = IMarginTrading(marginTrading()).getHoldingAmounts(msg.sender);\\n\\n        // requires all debts paid off\\n        IMarginTrading(marginTrading()).registerLiquidation(msg.sender);\\n\\n        for (uint256 i = 0; holdingTokens.length > i; i++) {\\n            Fund(fund()).withdraw(holdingTokens[i], msg.sender, holdingAmounts[i]);\\n        }\\n    }\\n\\n    // **** SWAP ****\\n    // requires the initial amount to have already been sent to the first pair\\n    function _swap(\\n        address factory,\\n        uint256[] memory amounts,\\n        address[] memory path,\\n        address _to\\n    ) internal virtual {\\n        for (uint256 i; i < path.length - 1; i++) {\\n            (address input, address output) = (path[i], path[i + 1]);\\n            (address token0, ) = UniswapV2Library.sortTokens(input, output);\\n            uint256 amountOut = amounts[i + 1];\\n            (uint256 amount0Out, uint256 amount1Out) =\\n                input == token0\\n                    ? (uint256(0), amountOut)\\n                    : (amountOut, uint256(0));\\n            address to =\\n                i < path.length - 2\\n                    ? UniswapV2Library.pairFor(factory, output, path[i + 2])\\n                    : _to;\\n            IUniswapV2Pair(UniswapV2Library.pairFor(factory, input, output))\\n                .swap(amount0Out, amount1Out, to, new bytes(0));\\n        }\\n    }\\n\\n    /// @dev internal helper swapping exact token for token on AMM\\n    function _swapExactT4T(\\n        address factory,\\n        uint256[] memory amounts,\\n        uint256 amountOutMin,\\n        address[] calldata path\\n    ) internal {\\n        require(\\n            amounts[amounts.length - 1] >= amountOutMin,\\n            \\\"MarginRouter: INSUFFICIENT_OUTPUT_AMOUNT\\\"\\n        );\\n        Fund(fund()).withdraw(\\n                path[0],\\n                UniswapV2Library.pairFor(factory, path[0], path[1]),\\n                amounts[0]\\n        );\\n        _swap(factory, amounts, path, fund());\\n    }\\n\\n    /// @dev external function to make swaps on AMM using protocol funds, only for authorized contracts\\n    function authorizedSwapExactT4T(\\n        address factory,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path\\n    ) external returns (uint256[] memory amounts) {\\n        require(\\n            isAuthorizedFundTrader(msg.sender),\\n            \\\"Calling contract is not authorized to trade with protocl funds\\\"\\n        );\\n        amounts = UniswapV2Library.getAmountsOut(factory, amountIn, path);\\n        _swapExactT4T(factory, amounts, amountOutMin, path);\\n    }\\n\\n    // @dev internal helper swapping exact token for token on on AMM\\n    function _swapT4ExactT(\\n        address factory,\\n        uint256[] memory amounts,\\n        uint256 amountInMax,\\n        address[] calldata path\\n    ) internal {\\n        // TODO minimum trade?\\n        require(\\n            amounts[0] <= amountInMax,\\n            \\\"MarginRouter: EXCESSIVE_INPUT_AMOUNT\\\"\\n        );\\n        Fund(fund()).withdraw(\\n                path[0],\\n                UniswapV2Library.pairFor(factory, path[0], path[1]),\\n                amounts[0]\\n        );\\n        _swap(factory, amounts, path, fund());\\n    }\\n\\n    //// @dev external function for swapping protocol funds on AMM, only for authorized\\n    function authorizedSwapT4ExactT(\\n        address factory,\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path\\n    ) external returns (uint256[] memory amounts) {\\n        require(\\n            isAuthorizedFundTrader(msg.sender),\\n            \\\"Calling contract is not authorized to trade with protocl funds\\\"\\n        );\\n        amounts = UniswapV2Library.getAmountsIn(factory, amountOut, path);\\n        _swapT4ExactT(factory, amounts, amountInMax, path);\\n    }\\n\\n    /// @dev entry point for swapping tokens held in cross margin account\\n    function crossSwapExactTokensForTokens(\\n        address ammFactory,\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        address[] calldata path,\\n        uint256 deadline\\n    ) external ensure(deadline) returns (uint256[] memory amounts) {\\n        // calc fees\\n        uint256 fees =\\n            Admin(feeController()).takeFeesFromInput(path[0], amountIn);\\n\\n        requireAuthorizedAMM(ammFactory);\\n\\n        // swap\\n        amounts = UniswapV2Library.getAmountsOut(ammFactory, amountIn - fees, path);\\n\\n        // checks that trader is within allowed lending bounds\\n        registerTrade(\\n            msg.sender,\\n            path[0],\\n            path[path.length - 1],\\n            amountIn,\\n            amounts[amounts.length - 1]\\n        );\\n\\n        _swapExactT4T(\\n            ammFactory,\\n            amounts,\\n            amountOutMin,\\n            path\\n        );\\n\\n    }\\n\\n    /// @dev entry point for swapping tokens held in cross margin account\\n    function crossSwapTokensForExactTokens(\\n        address ammFactory,\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        address[] calldata path,\\n        uint256 deadline\\n    ) external ensure(deadline) returns (uint256[] memory amounts) {\\n        // calc fees\\n        uint256 fees =\\n            Admin(feeController()).takeFeesFromOutput(\\n                path[path.length - 1],\\n                amountOut\\n            );\\n\\n        requireAuthorizedAMM(ammFactory);\\n        // swap\\n        amounts = UniswapV2Library.getAmountsIn(ammFactory, amountOut + fees, path);\\n\\n        // checks that trader is within allowed lending bounds\\n        registerTrade(\\n            msg.sender,\\n            path[0],\\n            path[path.length - 1],\\n            amounts[0],\\n            amountOut\\n        );\\n\\n        _swapT4ExactT(\\n            ammFactory,\\n            amounts,\\n            amountInMax,\\n            path\\n        );\\n    }\\n\\n    /// @dev helper function does all the work of telling other contracts\\n    /// about a trade\\n    function registerTrade(\\n        address trader,\\n        address inToken,\\n        address outToken,\\n        uint256 inAmount,\\n        uint256 outAmount\\n    ) internal {\\n        (uint256 extinguishAmount, uint256 borrowAmount) =\\n            IMarginTrading(marginTrading()).registerTradeAndBorrow(\\n                trader,\\n                inToken,\\n                outToken,\\n                inAmount,\\n                outAmount\\n            );\\n        if (extinguishAmount > 0) {\\n            Lending(lending()).payOff(outToken, extinguishAmount);\\n            withdrawClaim(trader, outToken, extinguishAmount);\\n        }\\n        if (borrowAmount > 0) {\\n            Lending(lending()).registerBorrow(inToken, borrowAmount);\\n            stakeClaim(trader, inToken, borrowAmount);\\n        }\\n\\n        emit CrossTrade(\\n            trader,\\n            inToken,\\n            inAmount,\\n            borrowAmount,\\n            outToken,\\n            outAmount,\\n            extinguishAmount\\n        );\\n    }\\n\\n    function getAmountsOut(\\n        address factory,\\n        uint256 inAmount,\\n        address[] calldata path\\n    ) external view returns (uint256[] memory) {\\n        return UniswapV2Library.getAmountsOut(factory, inAmount, path);\\n    }\\n\\n    function getAmountsIn(\\n        address factory,\\n        uint256 outAmount,\\n        address[] calldata path\\n    ) external view returns (uint256[] memory) {\\n        return UniswapV2Library.getAmountsIn(factory, outAmount, path);\\n    }\\n\\n    function requireAuthorizedAMM(address ammFactory) internal view {\\n        require(\\n            ammFactory == UNI || ammFactory == SUSHI || factories[ammFactory],\\n            \\\"Not using an authorized AMM\\\"\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xeddb2b097faf83c7bbf077a231309f791c896596a666f1fe9cfb27c989767145\",\"license\":\"BUSL-1.1\"},\"contracts/PriceAware.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./RoleAware.sol\\\";\\nimport \\\"./MarginRouter.sol\\\";\\n\\n/// Stores how many of token you could get for 1k of peg\\nstruct TokenPrice {\\n    uint256 blockLastUpdated;\\n    uint256 tokenPer1k;\\n    address[] liquidationPath;\\n    address[] inverseLiquidationPath;\\n}\\n\\n/// @dev The protocol features several mechanisms to prevent vulnerability to\\n/// price manipulation:\\n/// 1) global exposure caps on all tokens which need to be raised gradually\\n///    during the process of introducing a new token, making attacks unprofitable\\n///    due to lack  of scale\\n/// 2) Exponential moving average with cautious price update. Prices for estimating\\n///    how much a trader can borrow need not be extremely current and precise, mainly\\n///    they must be resilient against extreme manipulation\\n/// 3) Liquidators may not call from a contract address, to prevent extreme forms of\\n///    of front-running and other price manipulation.\\nabstract contract PriceAware is Ownable, RoleAware {\\n    address public constant UNI = 0x5C69bEe701ef814a2B6a3EDD4B1652CB9cc5aA6f;\\n    address public immutable peg;\\n    mapping(address => TokenPrice) public tokenPrices;\\n    /// update window in blocks\\n    uint16 public priceUpdateWindow = 8;\\n    uint256 public UPDATE_RATE_PERMIL = 80;\\n    uint256 public UPDATE_MAX_PEG_AMOUNT = 50_000;\\n    uint256 public UPDATE_MIN_PEG_AMOUNT = 1_000;\\n\\n    constructor(address _peg) Ownable() {\\n        peg = _peg;\\n    }\\n\\n    function setPriceUpdateWindow(uint16 window) external onlyOwner {\\n        priceUpdateWindow = window;\\n    }\\n\\n    function setConfidentUpdateRate(uint256 rate) external onlyOwner {\\n        UPDATE_RATE_PERMIL = rate;\\n    }\\n\\n    function encouragePriceUpdate(address token, uint256 inAmount)\\n        external\\n        returns (uint256)\\n    {\\n        return getCurrentPriceInPeg(token, inAmount, true);\\n    }\\n\\n    function setUpdateMaxPegAmount(uint256 amount) external onlyOwner {\\n        UPDATE_MAX_PEG_AMOUNT = amount;\\n    }\\n\\n    function setUpdateMinPegAmount(uint256 amount) external onlyOwner {\\n        UPDATE_MIN_PEG_AMOUNT = amount;\\n    }\\n\\n    function getCurrentPriceInPeg(\\n        address token,\\n        uint256 inAmount,\\n        bool forceCurBlock\\n    ) internal returns (uint256) {\\n        TokenPrice storage tokenPrice = tokenPrices[token];\\n        if (forceCurBlock) {\\n            if (block.number - tokenPrice.blockLastUpdated > priceUpdateWindow) {\\n                // update the currently cached price\\n                return getUpdatedPriceInPeg(token, inAmount);\\n            } else {\\n                // just get the current price from AMM\\n                return viewCurrentPriceInPeg(token, inAmount);\\n            }\\n        } else if (tokenPrice.tokenPer1k == 0) {\\n            // do the best we can if it's at zero\\n            return getUpdatedPriceInPeg(token, inAmount);\\n        }\\n\\n        if (block.number - tokenPrice.blockLastUpdated > priceUpdateWindow) {\\n            // update the price somewhat\\n            getUpdatedPriceInPeg(token, inAmount);\\n        }\\n\\n        return (inAmount * 1000 ether) / tokenPrice.tokenPer1k;\\n    }\\n\\n    function viewCurrentPriceInPeg(address token, uint256 inAmount)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        if (token == peg) {\\n            return inAmount;\\n        } else {\\n            TokenPrice storage tokenPrice = tokenPrices[token];\\n            uint256[] memory pathAmounts =\\n                MarginRouter(router()).getAmountsOut(\\n                    UNI,\\n                    inAmount,\\n                    tokenPrice.liquidationPath\\n                );\\n            uint256 outAmount = pathAmounts[pathAmounts.length - 1];\\n            return outAmount;\\n        }\\n    }\\n\\n    function getUpdatedPriceInPeg(address token, uint256 inAmount)\\n        internal\\n        virtual\\n        returns (uint256)\\n    {\\n        if (token == peg) {\\n            return inAmount;\\n        } else {\\n            TokenPrice storage tokenPrice = tokenPrices[token];\\n            uint256[] memory pathAmounts =\\n                MarginRouter(router()).getAmountsOut(\\n                    UNI,\\n                    inAmount,\\n                    tokenPrice.liquidationPath\\n                );\\n            uint256 outAmount = pathAmounts[pathAmounts.length - 1];\\n\\n            if (\\n                outAmount > UPDATE_MIN_PEG_AMOUNT &&\\n                outAmount < UPDATE_MAX_PEG_AMOUNT\\n            ) {\\n                updatePriceInPeg(tokenPrice, inAmount, outAmount);\\n            }\\n\\n            return outAmount;\\n        }\\n    }\\n\\n    function updatePriceInPeg(\\n        TokenPrice storage tokenPrice,\\n        uint256 inAmount,\\n        uint256 outAmount\\n    ) internal {\\n        _updatePriceInPeg(\\n            tokenPrice,\\n            inAmount,\\n            outAmount,\\n            UPDATE_RATE_PERMIL\\n        );\\n        tokenPrice.blockLastUpdated = block.number;\\n    }\\n\\n    function _updatePriceInPeg(\\n        TokenPrice storage tokenPrice,\\n        uint256 inAmount,\\n        uint256 outAmount,\\n        uint256 weightPerMil\\n    ) internal {\\n        uint256 updatePer1k = (1000 ether * inAmount) / (outAmount + 1);\\n        tokenPrice.tokenPer1k =\\n            (tokenPrice.tokenPer1k *\\n                (1000 - weightPerMil) +\\n                updatePer1k *\\n                weightPerMil) /\\n            1000;\\n    }\\n\\n    // add path from token to current liquidation peg\\n    function setLiquidationPath(address[] memory path) external {\\n        require(\\n            isTokenActivator(msg.sender),\\n            \\\"not authorized to set lending cap\\\"\\n        );\\n        address token = path[0];\\n        tokenPrices[token].liquidationPath = new address[](path.length);\\n        tokenPrices[token].inverseLiquidationPath = new address[](path.length);\\n\\n        for (uint16 i = 0; path.length > i; i++) {\\n            tokenPrices[token].liquidationPath[i] = path[i];\\n            tokenPrices[token].inverseLiquidationPath[i] = path[\\n                path.length - i - 1\\n            ];\\n        }\\n        uint256[] memory pathAmounts =\\n            MarginRouter(router()).getAmountsIn(UNI, 1000 ether, path);\\n        uint256 inAmount = pathAmounts[0];\\n        _updatePriceInPeg(tokenPrices[token], inAmount, 1000 ether, 1000);\\n    }\\n\\n    function liquidateToPeg(address token, uint256 amount)\\n        internal\\n        returns (uint256)\\n    {\\n        if (token == peg) {\\n            return amount;\\n        } else {\\n            TokenPrice storage tP = tokenPrices[token];\\n            uint256[] memory amounts =\\n                MarginRouter(router()).authorizedSwapExactT4T(\\n                    UNI,\\n                    amount,\\n                    0,\\n                    tP.liquidationPath\\n                );\\n\\n            uint256 outAmount = amounts[amounts.length - 1];\\n\\n            return outAmount;\\n        }\\n    }\\n\\n    function liquidateFromPeg(address token, uint256 targetAmount)\\n        internal\\n        returns (uint256)\\n    {\\n        if (token == peg) {\\n            return targetAmount;\\n        } else {\\n            TokenPrice storage tP = tokenPrices[token];\\n            uint256[] memory amounts =\\n                MarginRouter(router()).authorizedSwapT4ExactT(\\n                    UNI,\\n                    targetAmount,\\n                    type(uint256).max,\\n                    tP.inverseLiquidationPath\\n                );\\n\\n            return amounts[0];\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x487cb79daba4c346193612d67c9403145c3df35aea8132962716651f51a1c30b\",\"license\":\"BUSL-1.1\"},\"contracts/RoleAware.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Roles.sol\\\";\\n\\n/// Main characters are for service discovery\\n/// Whereas roles are for access control\\ncontract RoleAware {\\n    // we chose not to go with an enum\\n    // to make this list easy to extend\\n    uint256 constant FUND_TRANSFERER = 1;\\n    uint256 constant MARGIN_CALLER = 2;\\n    uint256 constant BORROWER = 3;\\n    uint256 constant MARGIN_TRADER = 4;\\n    uint256 constant FEE_SOURCE = 5;\\n    uint256 constant LIQUIDATOR = 6;\\n    uint256 constant AUTHORIZED_FUND_TRADER = 7;\\n    uint256 constant INCENTIVE_REPORTER = 8;\\n    uint256 constant TOKEN_ACTIVATOR = 9;\\n    uint256 constant STAKE_PENALIZER = 10;\\n\\n    uint256 constant FUND = 101;\\n    uint256 constant LENDING = 102;\\n    uint256 constant ROUTER = 103;\\n    uint256 constant MARGIN_TRADING = 104;\\n    uint256 constant FEE_CONTROLLER = 105;\\n    uint256 constant PRICE_CONTROLLER = 106;\\n    uint256 constant ADMIN = 107;\\n    uint256 constant INCENTIVE_DISTRIBUTION = 108;\\n    uint256 constant TOKEN_ADMIN = 109;\\n\\n    Roles public immutable roles;\\n    mapping(uint256 => address) public mainCharacterCache;\\n    mapping(address => mapping(uint256 => bool)) public roleCache;\\n\\n    constructor(address _roles) {\\n        require(_roles != address(0), \\\"Please provide valid roles address\\\");\\n        roles = Roles(_roles);\\n    }\\n\\n    modifier noIntermediary() {\\n        require(\\n            msg.sender == tx.origin,\\n            \\\"Currently no intermediaries allowed for this function call\\\"\\n        );\\n        _;\\n    }\\n\\n    function updateRoleCache(uint256 role, address contr) public virtual {\\n        roleCache[contr][role] = roles.getRole(role, contr);\\n    }\\n\\n    function updateMainCharacterCache(uint256 role) public virtual {\\n        mainCharacterCache[role] = roles.mainCharacters(role);\\n    }\\n\\n    function fund() internal view returns (address) {\\n        return mainCharacterCache[FUND];\\n    }\\n\\n    function lending() internal view returns (address) {\\n        return mainCharacterCache[LENDING];\\n    }\\n\\n    function router() internal view returns (address) {\\n        return mainCharacterCache[ROUTER];\\n    }\\n\\n    function marginTrading() internal view returns (address) {\\n        return mainCharacterCache[MARGIN_TRADING];\\n    }\\n\\n    function feeController() internal view returns (address) {\\n        return mainCharacterCache[FEE_CONTROLLER];\\n    }\\n\\n    function price() internal view returns (address) {\\n        return mainCharacterCache[PRICE_CONTROLLER];\\n    }\\n\\n    function admin() internal view returns (address) {\\n        return mainCharacterCache[ADMIN];\\n    }\\n\\n    function incentiveDistributor() internal view returns (address) {\\n        return mainCharacterCache[INCENTIVE_DISTRIBUTION];\\n    }\\n\\n    function isBorrower(address contr) internal view returns (bool) {\\n        return roleCache[contr][BORROWER];\\n    }\\n\\n    function isFundTransferer(address contr) internal view returns (bool) {\\n        return roleCache[contr][FUND_TRANSFERER];\\n    }\\n\\n    function isMarginTrader(address contr) internal view returns (bool) {\\n        return roleCache[contr][MARGIN_TRADER];\\n    }\\n\\n    function isFeeSource(address contr) internal view returns (bool) {\\n        return roleCache[contr][FEE_SOURCE];\\n    }\\n\\n    function isMarginCaller(address contr) internal view returns (bool) {\\n        return roleCache[contr][MARGIN_CALLER];\\n    }\\n\\n    function isLiquidator(address contr) internal view returns (bool) {\\n        return roleCache[contr][LIQUIDATOR];\\n    }\\n\\n    function isAuthorizedFundTrader(address contr)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return roleCache[contr][AUTHORIZED_FUND_TRADER];\\n    }\\n\\n    function isIncentiveReporter(address contr) internal view returns (bool) {\\n        return roleCache[contr][INCENTIVE_REPORTER];\\n    }\\n\\n    function isTokenActivator(address contr) internal view returns (bool) {\\n        return roleCache[contr][TOKEN_ACTIVATOR];\\n    }\\n\\n    function isStakePenalizer(address contr) internal view returns (bool) {\\n        return roles.getRole(STAKE_PENALIZER, contr);\\n    }\\n}\\n\",\"keccak256\":\"0xba5b7e4d15436a2307bf02f00e4e1a59e0f533e15499040d9a29cb23c9036a52\",\"license\":\"BUSL-1.1\"},\"contracts/Roles.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract Roles is Ownable {\\n    mapping(address => mapping(uint256 => bool)) public roles;\\n    mapping(uint256 => address) public mainCharacters;\\n\\n    constructor() Ownable() {\\n        // token activation from the get-go\\n        roles[msg.sender][9] = true;\\n    }\\n\\n    function giveRole(uint256 role, address actor) external onlyOwner {\\n        roles[actor][role] = true;\\n    }\\n\\n    function removeRole(uint256 role, address actor) external onlyOwner {\\n        roles[actor][role] = false;\\n    }\\n\\n    function setMainCharacter(uint256 role, address actor) external onlyOwner {\\n        mainCharacters[role] = actor;\\n    }\\n\\n    function getRole(uint256 role, address contr) external view returns (bool) {\\n        return roles[contr][role];\\n    }\\n}\\n\",\"keccak256\":\"0x0ef6b1f76dbd1a4688d2649df96cf6107bda3bb59edd6db1804ff59d16fa1566\",\"license\":\"BUSL-1.1\"},\"interfaces/IMarginTrading.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\ninterface IMarginTrading {\\n    function registerDeposit(\\n        address trader,\\n        address token,\\n        uint256 amount\\n    ) external returns (uint256 extinguishAmount);\\n\\n    function registerWithdrawal(\\n        address trader,\\n        address token,\\n        uint256 amount\\n    ) external;\\n\\n    function registerBorrow(\\n        address trader,\\n        address token,\\n        uint256 amount\\n    ) external;\\n\\n    function registerTradeAndBorrow(\\n        address trader,\\n        address inToken,\\n        address outToken,\\n        uint256 inAmount,\\n        uint256 outAmount\\n    ) external returns (uint256 extinguishAmount, uint256 borrowAmount);\\n\\n    function registerLiquidation(address trader) external;\\n\\n    function getHoldingAmounts(address trader)\\n        external\\n        view\\n        returns (\\n            address[] memory holdingTokens,\\n            uint256[] memory holdingAmounts\\n                 );\\n\\n     function getBorrowAmounts(address trader)\\n        external\\n        view\\n         returns (address[] memory borrowTokens, uint256[] memory borrowAmounts);\\n}\\n\",\"keccak256\":\"0x99feedf7545d9bc5da505e7082ab8455d23f02edc349302de0dd82950e0a9453\",\"license\":\"BUSL-1.1\"},\"interfaces/IWETH.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function withdraw(uint256) external;\\n}\\n\",\"keccak256\":\"0xf85de70a597a9f21052bd1ad25c755cda197102f4aebdb3c3c20f2405bd7442b\"},\"libraries/UniswapV2Library.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\n\\nlibrary UniswapV2Library {\\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\\n    function sortTokens(address tokenA, address tokenB)\\n        internal\\n        pure\\n        returns (address token0, address token1)\\n    {\\n        require(tokenA != tokenB, \\\"UniswapV2Library: IDENTICAL_ADDRESSES\\\");\\n        (token0, token1) = tokenA < tokenB\\n            ? (tokenA, tokenB)\\n            : (tokenB, tokenA);\\n        require(token0 != address(0), \\\"UniswapV2Library: ZERO_ADDRESS\\\");\\n    }\\n\\n    // calculates the CREATE2 address for a pair without making any external calls\\n    function pairFor(\\n        address factory,\\n        address tokenA,\\n        address tokenB\\n    ) internal pure returns (address pair) {\\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\\n        pair = address(\\n            bytes20(\\n                keccak256(\\n                    abi.encodePacked(\\n                        hex\\\"ff\\\",\\n                        factory,\\n                        keccak256(abi.encodePacked(token0, token1)),\\n                        hex\\\"96e8ac4277198ff8b6f785478aa9a39f403cb768dd02cbee326c3e7da348845f\\\" // init code hash\\n                    )\\n                )\\n            )\\n        );\\n    }\\n\\n    // fetches and sorts the reserves for a pair\\n    function getReserves(\\n        address factory,\\n        address tokenA,\\n        address tokenB\\n    ) internal view returns (uint256 reserveA, uint256 reserveB) {\\n        (address token0, ) = sortTokens(tokenA, tokenB);\\n        (uint256 reserve0, uint256 reserve1, ) =\\n            IUniswapV2Pair(pairFor(factory, tokenA, tokenB)).getReserves();\\n        (reserveA, reserveB) = tokenA == token0\\n            ? (reserve0, reserve1)\\n            : (reserve1, reserve0);\\n    }\\n\\n    // given some amount of an asset and pair reserves, returns an equivalent amount of the other asset\\n    function quote(\\n        uint256 amountA,\\n        uint256 reserveA,\\n        uint256 reserveB\\n    ) internal pure returns (uint256 amountB) {\\n        require(amountA > 0, \\\"UniswapV2Library: INSUFFICIENT_AMOUNT\\\");\\n        require(\\n            reserveA > 0 && reserveB > 0,\\n            \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\"\\n        );\\n        amountB = (amountA * reserveB) / reserveA;\\n    }\\n\\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) internal pure returns (uint256 amountOut) {\\n        require(amountIn > 0, \\\"UniswapV2Library: INSUFFICIENT_INPUT_AMOUNT\\\");\\n        require(\\n            reserveIn > 0 && reserveOut > 0,\\n            \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\"\\n        );\\n        uint256 amountInWithFee = amountIn * 997;\\n        uint256 numerator = amountInWithFee * reserveOut;\\n        uint256 denominator = reserveIn * 1000 + amountInWithFee;\\n        amountOut = numerator / denominator;\\n    }\\n\\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) internal pure returns (uint256 amountIn) {\\n        require(amountOut > 0, \\\"UniswapV2Library: INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n        require(\\n            reserveIn > 0 && reserveOut > 0,\\n            \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\"\\n        );\\n        uint256 numerator = reserveIn * amountOut * 1000;\\n        uint256 denominator = (reserveOut - amountOut) - 997;\\n        amountIn = (numerator / denominator) + 1;\\n    }\\n\\n    // performs chained getAmountOut calculations on any number of pairs\\n    function getAmountsOut(\\n        address factory,\\n        uint256 amountIn,\\n        address[] memory path\\n    ) internal view returns (uint256[] memory amounts) {\\n        require(path.length >= 2, \\\"UniswapV2Library: INVALID_PATH\\\");\\n        amounts = new uint256[](path.length);\\n        amounts[0] = amountIn;\\n        for (uint256 i; i < path.length - 1; i++) {\\n            (uint256 reserveIn, uint256 reserveOut) =\\n                getReserves(factory, path[i], path[i + 1]);\\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\\n        }\\n    }\\n\\n    // performs chained getAmountIn calculations on any number of pairs\\n    function getAmountsIn(\\n        address factory,\\n        uint256 amountOut,\\n        address[] memory path\\n    ) internal view returns (uint256[] memory amounts) {\\n        require(path.length >= 2, \\\"UniswapV2Library: INVALID_PATH\\\");\\n        amounts = new uint256[](path.length);\\n        amounts[amounts.length - 1] = amountOut;\\n        for (uint256 i = path.length - 1; i > 0; i--) {\\n            (uint256 reserveIn, uint256 reserveOut) =\\n                getReserves(factory, path[i - 1], path[i]);\\n            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8d78664942fa3474ad9b20e71a55c0b55cf2cf8e86ecabdc7261dc1c76c95005\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061034c5760003560e01c8063541bcb76116101bd578063badb5048116100f9578063e0f3871f116100a2578063f171c6011161007c578063f171c601146106a7578063f2fde38b146106ba578063f99fd97c146106cd578063f9c7aece146106e05761034c565b8063e0f3871f1461066e578063e9c3f77d14610681578063eac29dd6146106945761034c565b8063d0eb6653116100d3578063d0eb665314610635578063d510c53514610648578063db2d904d1461065b5761034c565b8063badb5048146105ec578063bc44dcbc1461060f578063c73afac2146106225761034c565b80637d100e8411610166578063a17ab52711610140578063a17ab527146105a0578063a3718919146105b3578063a75697a5146105c6578063a985994b146105d95761034c565b80637d100e841461057d5780638da5cb5b14610585578063a00891591461058d5761034c565b8063715018a611610197578063715018a61461054257806379575b231461054a5780637a1a04df1461055d5761034c565b8063541bcb761461051f5780636585b5a6146105275780636cd7bc4b1461052f5761034c565b80632febaa741161028c578063409fdb72116102355780634aa4aca31161020f5780634aa4aca3146104f4578063519bda85146104fc57806352a664d914610504578063538edb29146105175761034c565b8063409fdb72146104ad578063447d52ba146104ce578063498d55eb146104e15761034c565b8063392f5f6411610266578063392f5f641461047d5780633ed456fa146104855780633ffc17c01461049a5761034c565b80632febaa741461045a578063320d2fa0146104625780633500aa0b1461046a5761034c565b80631f1cb62b116102f957806320c27126116102d357806320c2712614610424578063236c80c214610437578063299cf2d21461044a5780632c86d98e146104525761034c565b80631f1cb62b146103c55780631f692a64146103e3578063204120bc146104035761034c565b806316317e7e1161032a57806316317e7e1461038c57806319fa00e11461039f5780631d47e4a3146103b25761034c565b8063071060a61461035157806307c201751461036657806310d5843414610379575b600080fd5b61036461035f366004615494565b6106e8565b005b610364610374366004615330565b6107fd565b610364610387366004615494565b610935565b61036461039a366004615494565b6109b6565b6103646103ad366004615494565b610a2e565b6103646103c03660046152d8565b610aa6565b6103cd610b0e565b6040516103da919061558b565b60405180910390f35b6103f66103f1366004615206565b610b32565b6040516103da9190615bab565b610416610411366004615206565b610b74565b6040516103da929190615c38565b6103f6610432366004615206565b610b8d565b6103f66104453660046152d8565b610b9f565b6103f6610bb6565b6103f6610bbc565b6103f6610bc2565b6103f6610bc8565b61041661047836600461523e565b610bce565b6103cd610ee2565b61048d610f06565b6040516103da9190615b9c565b6103646104a8366004615494565b610f10565b6104c06104bb366004615206565b610f88565b6040516103da9291906156e1565b6103646104dc3660046154c4565b61117e565b6103646104ef366004615298565b6112a5565b6103f6611434565b6103f661143a565b6103f6610512366004615298565b611440565b6103f6611601565b6103cd611607565b6103f661161f565b61036461053d366004615330565b611625565b610364611bc3565b610364610558366004615494565b611ca5565b61057061056b3660046152d8565b611d1d565b6040516103da9190615737565b6103f6611d3d565b6103cd611d43565b61036461059b366004615472565b611d60565b6103f66105ae366004615206565b611e08565b6103646105c1366004615494565b611e3d565b6103f66105d4366004615206565b611eb5565b6103f66105e7366004615330565b611ec7565b6105ff6105fa366004615206565b612552565b6040516103da9493929190615c04565b6103f661061d366004615206565b612593565b610364610630366004615494565b6125a5565b610364610643366004615298565b61261d565b6104c0610656366004615206565b61279c565b610364610669366004615206565b612a1a565b6103f661067c366004615206565b612aca565b6103cd61068f366004615494565b612adc565b6103f66106a2366004615206565b612b04565b6103646106b5366004615494565b612b2c565b6103646106c8366004615206565b612ba4565b6103646106db366004615494565b612cf1565b6103f6612d69565b6040517fb4ed0b6d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063b4ed0b6d9061075a908490600401615bab565b60206040518083038186803b15801561077257600080fd5b505afa158015610786573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107aa9190615222565b60009182526001602052604090912080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff909216919091179055565b60005b8082511115610931576000828281518110610844577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015190506000601460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060165481600001546108a39190615cb9565b43111561091c576108b381612d6f565b5073ffffffffffffffffffffffffffffffffffffffff821660009081526014602052604081208181556001810180547fffffffffffffffffffffffff00000000000000000000000000000000000000009081169091556002820192909255600301805490911690555b5050808061092990615d80565b915050610800565b5050565b61093d612fea565b73ffffffffffffffffffffffffffffffffffffffff1661095b611d43565b73ffffffffffffffffffffffffffffffffffffffff16146109b1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109a8906159f3565b60405180910390fd5b601855565b6109be612fea565b73ffffffffffffffffffffffffffffffffffffffff166109dc611d43565b73ffffffffffffffffffffffffffffffffffffffff1614610a29576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109a8906159f3565b600955565b610a36612fea565b73ffffffffffffffffffffffffffffffffffffffff16610a54611d43565b73ffffffffffffffffffffffffffffffffffffffff1614610aa1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109a8906159f3565b600755565b610aaf33612fee565b610ae5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109a890615742565b73ffffffffffffffffffffffffffffffffffffffff9091166000908152600b6020526040902055565b7f000000000000000000000000000000000000000000000000000000000000000081565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600a60205260408120610b6b600182016002830160038401613025565b9150505b919050565b6003602052600090815260409020805460019091015482565b600d6020526000908152604090205481565b6000610bad838360016130d5565b90505b92915050565b60065481565b60085481565b600e5481565b60095481565b600080610bda336131a0565b610c10576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109a8906157fc565b73ffffffffffffffffffffffffffffffffffffffff8088166000908152600a6020908152604080832093891683526002840190915290205415610cc85773ffffffffffffffffffffffffffffffffffffffff86166000908152600282016020526040902054610c809085906131d7565b9250610c8d8187856131ef565b73ffffffffffffffffffffffffffffffffffffffff86166000908152600c602052604081208054859290610cc2908490615d47565b90915550505b73ffffffffffffffffffffffffffffffffffffffff87166000908152600d602052604081208054879290610cfd908490615d47565b90915550610d0d90508385615d47565b73ffffffffffffffffffffffffffffffffffffffff87166000908152600d602052604081208054909190610d42908490615cb9565b909155505073ffffffffffffffffffffffffffffffffffffffff86166000908152600d6020908152604080832054600b909252909120541015610db1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109a890615a28565b73ffffffffffffffffffffffffffffffffffffffff871660009081526005820160205260409020548590811115610ec9575073ffffffffffffffffffffffffffffffffffffffff87166000908152600582016020526040902054610e158187615d47565b73ffffffffffffffffffffffffffffffffffffffff89166000908152600c6020526040812080549295508592909190610e4f908490615cb9565b909155505073ffffffffffffffffffffffffffffffffffffffff88166000908152600c6020908152604080832054600b909252909120541015610ebe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109a890615a28565b610ec9828985613623565b610ed682898984896138ad565b50509550959350505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60045461ffff1681565b610f18612fea565b73ffffffffffffffffffffffffffffffffffffffff16610f36611d43565b73ffffffffffffffffffffffffffffffffffffffff1614610f83576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109a8906159f3565b600655565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600a602090815260409182902060048101805484518185028101850190955280855260609485949092919083018282801561101557602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311610fea575b5050506004840154929550505067ffffffffffffffff811115611061577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405190808252806020026020018201604052801561108a578160200160208202803683370190505b50915060005b80845111156111775760008482815181106110d4577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015190508260050160008273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054848381518110611159577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020908102919091010152508061116f81615d80565b915050611090565b5050915091565b6040517f93552a3d00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016906393552a3d906111f29085908590600401615bb4565b60206040518083038186803b15801561120a57600080fd5b505afa15801561121e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112429190615452565b73ffffffffffffffffffffffffffffffffffffffff9190911660009081526002602090815260408083209483529390529190912080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055565b6112ae336131a0565b6112e4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109a890615ae2565b73ffffffffffffffffffffffffffffffffffffffff82166000908152600c602052604081208054839290611319908490615cb9565b909155505073ffffffffffffffffffffffffffffffffffffffff82166000908152600d602052604081208054839290611353908490615cb9565b909155505073ffffffffffffffffffffffffffffffffffffffff82166000908152600c6020908152604080832054600b90925290912054108015906113c8575073ffffffffffffffffffffffffffffffffffffffff82166000908152600d6020908152604080832054600b9092529091205410155b6113fe576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109a890615a28565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600a6020526040902061142e818484613623565b50505050565b60165481565b60055481565b600061144b336131a0565b611481576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109a890615ae2565b73ffffffffffffffffffffffffffffffffffffffff8085166000908152600a60209081526040808320938716835260028401909152902054156115395773ffffffffffffffffffffffffffffffffffffffff841660009081526002820160205260409020546114f19084906131d7565b91506114fe8185846131ef565b73ffffffffffffffffffffffffffffffffffffffff84166000908152600c602052604081208054849290611533908490615d47565b90915550505b60006115458385615d47565b905061155282868361391a565b73ffffffffffffffffffffffffffffffffffffffff85166000908152600d602052604081208054839290611587908490615cb9565b909155505073ffffffffffffffffffffffffffffffffffffffff85166000908152600d6020908152604080832054600b9092529091205410156115f6576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109a890615a28565b504390559392505050565b60175481565b735c69bee701ef814a2b6a3edd4b1652cb9cc5aa6f81565b60155481565b61162e33612fee565b611664576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109a8906158b6565b6000816000815181106116a0577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101519050815167ffffffffffffffff8111156116eb577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051908082528060200260200182016040528015611714578160200160208202803683370190505b5073ffffffffffffffffffffffffffffffffffffffff82166000908152600360209081526040909120825161175393600290920192919091019061514d565b50815167ffffffffffffffff811115611795577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040519080825280602002602001820160405280156117be578160200160208202803683370190505b5073ffffffffffffffffffffffffffffffffffffffff8216600090815260036020818152604090922083516117f9949190920192019061514d565b5060005b8061ffff1683511115611a5057828161ffff1681518110611847577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206002018261ffff16815481106118cd577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508260018261ffff1685516119299190615d47565b6119339190615d47565b8151811061196a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206003018261ffff16815481106119f0577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600091825260209091200180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9290921691909117905580611a4881615d5e565b9150506117fd565b506000611a5b6139bf565b73ffffffffffffffffffffffffffffffffffffffff1663192128b2735c69bee701ef814a2b6a3edd4b1652cb9cc5aa6f683635c9adc5dea00000866040518463ffffffff1660e01b8152600401611ab4939291906155dd565b60006040518083038186803b158015611acc57600080fd5b505afa158015611ae0573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052611b2691908101906153ce565b9050600081600081518110611b64577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6020026020010151905061142e600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002082683635c9adc5dea000006103e8613a04565b611bcb612fea565b73ffffffffffffffffffffffffffffffffffffffff16611be9611d43565b73ffffffffffffffffffffffffffffffffffffffff1614611c36576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109a8906159f3565b6000805460405173ffffffffffffffffffffffffffffffffffffffff909116907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055565b611cad612fea565b73ffffffffffffffffffffffffffffffffffffffff16611ccb611d43565b73ffffffffffffffffffffffffffffffffffffffff1614611d18576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109a8906159f3565b600855565b600260209081526000928352604080842090915290825290205460ff1681565b60185481565b60005473ffffffffffffffffffffffffffffffffffffffff165b90565b611d68612fea565b73ffffffffffffffffffffffffffffffffffffffff16611d86611d43565b73ffffffffffffffffffffffffffffffffffffffff1614611dd3576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109a8906159f3565b600480547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00001661ffff92909216919091179055565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600a60205260408120610b6b6004820160058301613a7b565b611e45612fea565b73ffffffffffffffffffffffffffffffffffffffff16611e63611d43565b73ffffffffffffffffffffffffffffffffffffffff1614611eb0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109a8906159f3565b601655565b60136020526000908152604090205481565b6000333214611f02576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109a89061579f565b6000611f0c613b29565b73ffffffffffffffffffffffffffffffffffffffff16637b23cbce336040518263ffffffff1660e01b8152600401611f44919061558b565b602060405180830381600087803b158015611f5e57600080fd5b505af1158015611f72573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f969190615452565b905060008180611fa95750611fa9613b6e565b9050611fb58483613c35565b92506000611fc1614201565b90506000611fcd614310565b90508160646017546064611fe19190615cb9565b611feb9084615d0a565b611ff59190615cd1565b111561203c577f3555ffae7677eb42103f0b9e11b61c758f452fae446684dec7a363dd38ab58fc6120268383615d47565b6040516120339190615bab565b60405180910390a15b6000836120cd5761204b613b29565b73ffffffffffffffffffffffffffffffffffffffff16631a38de1d6040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561209257600080fd5b505af11580156120a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120ca9190615222565b90505b60005b60125481101561231b57600060128281548110612116577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff16808352600a909152604082209092509061215582600161441c565b9050600061216483600161442f565b905060006064601754836121789190615d0a565b6121829190615cd1565b905061218e818d615cb9565b9b50896122085773ffffffffffffffffffffffffffffffffffffffff858116600090815260146020526040902060028101839055600381018054337fffffffffffffffffffffffff000000000000000000000000000000000000000091821617909155438255600190910180549091169189169190911790555b6122128282615cb9565b83106122c357612220614446565b73ffffffffffffffffffffffffffffffffffffffff1663d9caed127f000000000000000000000000000000000000000000000000000000000000000087846122688789615d47565b6122729190615d47565b6040518463ffffffff1660e01b8152600401612290939291906155ac565b600060405180830381600087803b1580156122aa57600080fd5b505af11580156122be573d6000803e3d6000fd5b505050505b7f1d2cc4c8661a04a00b4e727426220501b36d85bb330947642c2d4320667028cf856040516122f2919061558b565b60405180910390a16123038461448b565b5050505050808061231390615d80565b9150506120d0565b50606486601554606361232e9190615d0a565b6123389190615cb9565b6123429190615cd1565b60155583156123e257612353614446565b73ffffffffffffffffffffffffffffffffffffffff1663d9caed127f000000000000000000000000000000000000000000000000000000000000000033896040518463ffffffff1660e01b81526004016123af939291906155ac565b600060405180830381600087803b1580156123c957600080fd5b505af11580156123dd573d6000803e3d6000fd5b505050505b60006123ec613b29565b73ffffffffffffffffffffffffffffffffffffffff16631a38de1d6040518163ffffffff1660e01b8152600401602060405180830381600087803b15801561243357600080fd5b505af1158015612447573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061246b9190615222565b9050851561250c5773ffffffffffffffffffffffffffffffffffffffff81166000908152601360205260409020548710156124e05773ffffffffffffffffffffffffffffffffffffffff8116600090815260136020526040812080548992906124d5908490615d47565b909155506125079050565b73ffffffffffffffffffffffffffffffffffffffff81166000908152601360205260408120555b612547565b73ffffffffffffffffffffffffffffffffffffffff811660009081526013602052604081208054899290612541908490615cb9565b90915550505b505050505050919050565b6014602052600090815260409020805460018201546002830154600390930154919273ffffffffffffffffffffffffffffffffffffffff9182169290911684565b600c6020526000908152604090205481565b6125ad612fea565b73ffffffffffffffffffffffffffffffffffffffff166125cb611d43565b73ffffffffffffffffffffffffffffffffffffffff1614612618576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109a8906159f3565b601755565b612626336131a0565b61265c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109a890615ae2565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600a60205260409020600e5481546126909190615cb9565b43116126c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109a890615970565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600d6020526040812080548492906126fd908490615d47565b909155505073ffffffffffffffffffffffffffffffffffffffff83166000908152600582016020526040902054612735908390615d47565b73ffffffffffffffffffffffffffffffffffffffff841660009081526005830160205260409020556127668161469f565b61142e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109a890615913565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600a602090815260409182902060018101805484518185028101850190955280855260609485949092919083018282801561282957602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff1681526001909101906020018083116127fe575b5050506001840154929550505067ffffffffffffffff811115612875577f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405190808252806020026020018201604052801561289e578160200160208202803683370190505b50915060005b80845111156111775760008482815181106128e8577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015190506128fa6146ef565b73ffffffffffffffffffffffffffffffffffffffff828116600090815260028601602090815260408083205460038901909252918290205491517f687680ed000000000000000000000000000000000000000000000000000000008152939092169263687680ed92612973929091869190600401615bd8565b60206040518083038186803b15801561298b57600080fd5b505afa15801561299f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129c391906154ac565b8483815181106129fc577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60209081029190910101525080612a1281615d80565b9150506128a4565b612a23336131a0565b612a59576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109a8906157fc565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600a6020526040812090612a8a90829061442f565b15612ac1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109a890615b3f565b6109318161448b565b600b6020526000908152604090205481565b60016020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b73ffffffffffffffffffffffffffffffffffffffff166000908152600a602052604090205490565b612b34612fea565b73ffffffffffffffffffffffffffffffffffffffff16612b52611d43565b73ffffffffffffffffffffffffffffffffffffffff1614612b9f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109a8906159f3565b600555565b612bac612fea565b73ffffffffffffffffffffffffffffffffffffffff16612bca611d43565b73ffffffffffffffffffffffffffffffffffffffff1614612c17576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109a8906159f3565b73ffffffffffffffffffffffffffffffffffffffff8116612c64576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109a890615859565b6000805460405173ffffffffffffffffffffffffffffffffffffffff808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a3600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b612cf9612fea565b73ffffffffffffffffffffffffffffffffffffffff16612d17611d43565b73ffffffffffffffffffffffffffffffffffffffff1614612d64576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109a8906159f3565b600e55565b60075481565b600281015460009015610b6f578154600090612d9790612d8f9043615d47565b6016546131d7565b90506000601654828560020154612dae9190615d0a565b612db89190615cd1565b9050612dc2614446565b60038501546040517fd9caed1200000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9283169263d9caed1292612e40927f0000000000000000000000000000000000000000000000000000000000000000929091169086906004016155ac565b600060405180830381600087803b158015612e5a57600080fd5b505af1158015612e6e573d6000803e3d6000fd5b505050506000612e7c613b29565b90506000601554838373ffffffffffffffffffffffffffffffffffffffff16630ad691506040518163ffffffff1660e01b815260040160206040518083038186803b158015612eca57600080fd5b505afa158015612ede573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f0291906154ac565b612f0c9190615d0a565b612f169190615cd1565b600187015460038801546040517f0a45bc1b00000000000000000000000000000000000000000000000000000000815292935073ffffffffffffffffffffffffffffffffffffffff80861693630a45bc1b93612f7d93908316928792911690600401615641565b602060405180830381600087803b158015612f9757600080fd5b505af1158015612fab573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fcf91906154ac565b50828660020154612fe09190615d47565b9695505050505050565b3390565b73ffffffffffffffffffffffffffffffffffffffff1660009081526002602090815260408083206009845290915290205460ff1690565b6000805b84548110156130cd57600085828154811061306d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff16808352908790526040909120549091506130ad90829086614734565b6130b79084615cb9565b92505080806130c590615d80565b915050613029565b509392505050565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600360205260408120821561313857600454815461ffff909116906131169043615d47565b111561312e576131268585614811565b915050613199565b61312685856149e1565b600181015461314b576131268585614811565b600454815461ffff909116906131619043615d47565b1115613173576131718585614811565b505b600181015461318b85683635c9adc5dea00000615d0a565b6131959190615cd1565b9150505b9392505050565b73ffffffffffffffffffffffffffffffffffffffff1660009081526002602090815260408083206004845290915290205460ff1690565b6000818311156131e8575080610bb0565b5081610bb0565b6131f76146ef565b73ffffffffffffffffffffffffffffffffffffffff838116600090815260028601602090815260408083205460038901909252918290205491517fe695fa68000000000000000000000000000000000000000000000000000000008152939092169263e695fa6892613270929091879190600401615bd8565b602060405180830381600087803b15801561328a57600080fd5b505af115801561329e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132c291906154ac565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260028501602052604090208190556132f7908290615d47565b73ffffffffffffffffffffffffffffffffffffffff831660009081526002850160209081526040808320939093556005860190522054613338908290615d47565b73ffffffffffffffffffffffffffffffffffffffff831660009081526005850160209081526040808320939093556002860190522054156134305761337b6146ef565b73ffffffffffffffffffffffffffffffffffffffff1663e5ea6606836040518263ffffffff1660e01b81526004016133b3919061558b565b60206040518083038186803b1580156133cb57600080fd5b505afa1580156133df573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061340391906154ac565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260038501602052604090205561361e565b73ffffffffffffffffffffffffffffffffffffffff821660009081526003840160205260408120819055805b60018501548110156135895760008560010182815481106134a6577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff908116915085168114156134de5760019250613576565b82156135765780866001016001846134f69190615d47565b8154811061352d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b508061358181615d80565b91505061345c565b50836001018054806135c4577f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b60008281526020902081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90810180547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055019055505b505050565b61362d8383614b90565b61368a576001838101805491820181556000908152602090200180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8416179055613786565b6136926146ef565b73ffffffffffffffffffffffffffffffffffffffff838116600090815260028601602090815260408083205460038901909252918290205491517fe695fa68000000000000000000000000000000000000000000000000000000008152939092169263e695fa689261370b929091879190600401615bd8565b602060405180830381600087803b15801561372557600080fd5b505af1158015613739573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061375d91906154ac565b73ffffffffffffffffffffffffffffffffffffffff831660009081526002850160205260409020555b61378e6146ef565b73ffffffffffffffffffffffffffffffffffffffff1663e5ea6606836040518263ffffffff1660e01b81526004016137c6919061558b565b60206040518083038186803b1580156137de57600080fd5b505afa1580156137f2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061381691906154ac565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600385016020908152604080832093909355600286019052908120805483929061385d908490615cb9565b9091555061386e905083838361391a565b6138778361469f565b61361e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109a890615a85565b73ffffffffffffffffffffffffffffffffffffffff841660009081526005860160205260409020546138e0908390615d47565b73ffffffffffffffffffffffffffffffffffffffff8516600090815260058701602052604090205561391385848361391a565b5050505050565b6139248383614bbe565b61397e57600483018054600181018255600091825260209091200180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff84161790555b73ffffffffffffffffffffffffffffffffffffffff82166000908152600584016020526040812080548392906139b5908490615cb9565b9091555050505050565b606760005260016020527f3df8f088882f8b9ec191c0c401507a494987ab757ec0bcd484b0f744e1857e895473ffffffffffffffffffffffffffffffffffffffff1690565b6000613a11836001615cb9565b613a2485683635c9adc5dea00000615d0a565b613a2e9190615cd1565b90506103e8613a3d8383615d0a565b613a49846103e8615d47565b8760010154613a589190615d0a565b613a629190615cb9565b613a6c9190615cd1565b85600101819055505050505050565b6000805b8354811015613b22576000848281548110613ac3577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff1680835290869052604090912054909150613b029082906149e1565b613b0c9084615cb9565b9250508080613b1a90615d80565b915050613a7f565b5092915050565b606b60005260016020527fd70e245266dfd722d237312ada32b3921705992efb298b14480ba0acaaa0765a5473ffffffffffffffffffffffffffffffffffffffff1690565b600080613b79613b29565b73ffffffffffffffffffffffffffffffffffffffff1663b0411f466040518163ffffffff1660e01b8152600401604080518083038186803b158015613bbd57600080fd5b505afa158015613bd1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613bf59190615303565b509050601554601854613c089190615d0a565b73ffffffffffffffffffffffffffffffffffffffff90911660009081526013602052604090205411905090565b604080516000808252602082019283905290519091613c57916010919061514d565b506040805160008152602081019182905251613c759160119161514d565b506040805160008152602081019182905251613c939160129161514d565b5060005b8084511115613b22576000848281518110613cdb577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015190506000600a60008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050613d3181614bed565b156141aa576012805460018101825560009182527fbb8a6a4669ba250d26cd7a459eca9d215f8307e33aebe50379bc5a3617ec34440180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff85161790555b6004820154811015613f1e576000826004018281548110613df0577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff16808352600f90915260409091206002810154919250904314613ec65773ffffffffffffffffffffffffffffffffffffffff821660008181526005860160205260408120546001808501919091558184554360028501556010805491820181559091527f1b6847dc741a1b0cd08d278845f9d819d87b734759afb55fe2de5cb82a9ae6720180547fffffffffffffffffffffffff0000000000000000000000000000000000000000169091179055613f09565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260058501602052604081205460018301805491929091613f03908490615cb9565b90915550505b50508080613f1690615d80565b915050613da6565b5060005b60018201548110156141a8576000826001018281548110613f6c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff16808352600f9091526040822090925090613fa86146ef565b73ffffffffffffffffffffffffffffffffffffffff848116600090815260028801602090815260408083205460038b01909252918290205491517fe695fa68000000000000000000000000000000000000000000000000000000008152939092169263e695fa6892614021929091889190600401615bd8565b602060405180830381600087803b15801561403b57600080fd5b505af115801561404f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061407391906154ac565b905061407d6146ef565b73ffffffffffffffffffffffffffffffffffffffff16632a6a897b84836040518363ffffffff1660e01b81526004016140b792919061561b565b600060405180830381600087803b1580156140d157600080fd5b505af11580156140e5573d6000803e3d6000fd5b505050504382600201541461417857600060018381018290558284554360028501556011805491820181559091527f31ecc21a745e3968a04e9570e4425bc18fa8019c68028196b546d1669c200c680180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8516179055614192565b8082600001600082825461418c9190615cb9565b90915550505b50505080806141a090615d80565b915050613f22565b505b73ffffffffffffffffffffffffffffffffffffffff8216600090815260146020526040902085156141eb576141de81612d6f565b6141e89086615cb9565b94505b50505080806141f990615d80565b915050613c97565b6000805b6010548110156143035760006010828154811061424b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff16808352600f909152604090912080546001820154929350909111156142ee57805460018201546000916142a191615d47565b90506142ad8382614c25565b6142b79086615cb9565b73ffffffffffffffffffffffffffffffffffffffff84166000908152600f6020526040812081815560018101829055600201559450505b505080806142fb90615d80565b915050614205565b50611d5d601060006151d7565b6000805b60115481101561440f5760006011828154811061435a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff16808352600f909152604090912060018101548154929350909111156143fa576143ba82826001015483600001546143b59190615d47565b614d34565b6143c49085615cb9565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600f60205260408120818155600181018290556002015593505b5050808061440790615d80565b915050614314565b50611d5d601160006151d7565b6000610bad836004018460050184614ef5565b6000610bad83600101846002018560030185614f9d565b606560005260016020527f6def5a300acb6fcaa0dab3a41e9d6457b5147a641e641380f8cc4bf5308b16fe5473ffffffffffffffffffffffffffffffffffffffff1690565b60005b60018201548110156145725760008260010182815481106144d8577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff16808352600286018252604080842054600c90935283208054919450919290614525908490615d47565b909155505073ffffffffffffffffffffffffffffffffffffffff1660009081526002830160209081526040808320839055600385019091528120558061456a81615d80565b91505061448e565b5060005b600482015481101561467f5760008260040182815481106145c0577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff16808352600586018252604080842054600d9093528320805491945091929061460d908490615d47565b909155505073ffffffffffffffffffffffffffffffffffffffff166000908152600583016020908152604080832083905560068501909152902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001690558061467781615d80565b915050614576565b5061468e6001820160006151d7565b61469c6004820160006151d7565b50565b6000806146ad83600061442f565b905060006146bc84600061441c565b9050600854826146cc9190615d0a565b60016008546146db9190615d47565b6146e59083615d0a565b1015949350505050565b606660005260016020527f8a7727369fa1a496cab5c3debb1ff9323f499df74f8bfc03a975054ef960ee6d5473ffffffffffffffffffffffffffffffffffffffff1690565b60008061473f6146ef565b73ffffffffffffffffffffffffffffffffffffffff1663e5ea6606866040518263ffffffff1660e01b8152600401614777919061558b565b60206040518083038186803b15801561478f57600080fd5b505afa1580156147a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906147c791906154ac565b73ffffffffffffffffffffffffffffffffffffffff8616600090815260208590526040812054919250906147fb8387615d0a565b6148059190615cd1565b9050612fe086826149e1565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561486e575080610bb0565b73ffffffffffffffffffffffffffffffffffffffff831660009081526003602052604081209061489c6139bf565b73ffffffffffffffffffffffffffffffffffffffff1663bb7b9c76735c69bee701ef814a2b6a3edd4b1652cb9cc5aa6f86856002016040518463ffffffff1660e01b81526004016148ef93929190615671565b60006040518083038186803b15801561490757600080fd5b505afa15801561491b573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261496191908101906153ce565b9050600081600183516149749190615d47565b815181106149ab577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101519050600754811180156149c7575060065481105b156149d7576149d783868361504f565b9250610bb0915050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415614a3e575080610bb0565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260036020526040812090614a6c6139bf565b73ffffffffffffffffffffffffffffffffffffffff1663bb7b9c76735c69bee701ef814a2b6a3edd4b1652cb9cc5aa6f86856002016040518463ffffffff1660e01b8152600401614abf93929190615671565b60006040518083038186803b158015614ad757600080fd5b505afa158015614aeb573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052614b3191908101906153ce565b905060008160018351614b449190615d47565b81518110614b7b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101519050809350505050610bb0565b73ffffffffffffffffffffffffffffffffffffffff1660009081526003919091016020526040902054151590565b73ffffffffffffffffffffffffffffffffffffffff166000908152600691909101602052604090205460ff1690565b600080614bfb83600161442f565b90506000614c0a84600161441c565b905081600954614c1a9190615d0a565b6146e5826064615d0a565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415614c82575080610bb0565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260036020526040812090614cb06139bf565b73ffffffffffffffffffffffffffffffffffffffff16630d873d5e735c69bee701ef814a2b6a3edd4b1652cb9cc5aa6f866000866002016040518563ffffffff1660e01b8152600401614d0694939291906156a6565b600060405180830381600087803b158015614d2057600080fd5b505af1158015614aeb573d6000803e3d6000fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161415614d91575080610bb0565b73ffffffffffffffffffffffffffffffffffffffff8316600090815260036020526040812090614dbf6139bf565b73ffffffffffffffffffffffffffffffffffffffff16636fdcb2b9735c69bee701ef814a2b6a3edd4b1652cb9cc5aa6f867fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff866003016040518563ffffffff1660e01b8152600401614e3494939291906156a6565b600060405180830381600087803b158015614e4e57600080fd5b505af1158015614e62573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052614ea891908101906153ce565b905080600081518110614ee4577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015192505050610bb0565b6000805b84548110156130cd576000858281548110614f3d577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff1680835290879052604090912054909150614f7d908290866130d5565b614f879084615cb9565b9250508080614f9590615d80565b915050614ef9565b6000805b8554811015615046576000868281548110614fe5577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600091825260208083209091015473ffffffffffffffffffffffffffffffffffffffff16808352908890526040909120549091506150269082908787615064565b6150309084615cb9565b925050808061503e90615d80565b915050614fa1565b50949350505050565b61505d838383600554613a04565b5050439055565b60008061506f6146ef565b73ffffffffffffffffffffffffffffffffffffffff1663e5ea6606876040518263ffffffff1660e01b81526004016150a7919061558b565b60206040518083038186803b1580156150bf57600080fd5b505afa1580156150d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906150f791906154ac565b73ffffffffffffffffffffffffffffffffffffffff87166000908152602086905260408120549192509061512b8388615d0a565b6151359190615cd1565b90506151428782866130d5565b979650505050505050565b8280548282559060005260206000209081019282156151c7579160200282015b828111156151c757825182547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff90911617825560209092019160019091019061516d565b506151d39291506151f1565b5090565b508054600082559060005260206000209081019061469c91905b5b808211156151d357600081556001016151f2565b600060208284031215615217578081fd5b813561319981615e17565b600060208284031215615233578081fd5b815161319981615e17565b600080600080600060a08688031215615255578081fd5b853561526081615e17565b9450602086013561527081615e17565b9350604086013561528081615e17565b94979396509394606081013594506080013592915050565b6000806000606084860312156152ac578283fd5b83356152b781615e17565b925060208401356152c781615e17565b929592945050506040919091013590565b600080604083850312156152ea578182fd5b82356152f581615e17565b946020939093013593505050565b60008060408385031215615315578182fd5b825161532081615e17565b6020939093015192949293505050565b60006020808385031215615342578182fd5b823567ffffffffffffffff811115615358578283fd5b8301601f81018513615368578283fd5b803561537b61537682615c95565b615c46565b8181528381019083850185840285018601891015615397578687fd5b8694505b838510156153c25780356153ae81615e17565b83526001949094019391850191850161539b565b50979650505050505050565b600060208083850312156153e0578182fd5b825167ffffffffffffffff8111156153f6578283fd5b8301601f81018513615406578283fd5b805161541461537682615c95565b8181528381019083850185840285018601891015615430578687fd5b8694505b838510156153c2578051835260019490940193918501918501615434565b600060208284031215615463578081fd5b81518015158114613199578182fd5b600060208284031215615483578081fd5b813561ffff81168114613199578182fd5b6000602082840312156154a5578081fd5b5035919050565b6000602082840312156154bd578081fd5b5051919050565b600080604083850312156154d6578182fd5b8235915060208301356154e881615e17565b809150509250929050565b6000815180845260208085019450808401835b8381101561553857815173ffffffffffffffffffffffffffffffffffffffff1687529582019590820190600101615506565b509495945050505050565b6000815480845260208085019450838352808320835b8381101561553857815473ffffffffffffffffffffffffffffffffffffffff1687529582019560019182019101615559565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff9384168152919092166020820152604081019190915260600190565b600073ffffffffffffffffffffffffffffffffffffffff851682528360208301526060604083015261561260608301846154f3565b95945050505050565b73ffffffffffffffffffffffffffffffffffffffff929092168252602082015260400190565b73ffffffffffffffffffffffffffffffffffffffff93841681526020810192909252909116604082015260600190565b600073ffffffffffffffffffffffffffffffffffffffff85168252836020830152606060408301526156126060830184615543565b600073ffffffffffffffffffffffffffffffffffffffff8616825284602083015283604083015260806060830152612fe06080830184615543565b6000604082526156f460408301856154f3565b828103602084810191909152845180835285820192820190845b8181101561572a5784518352938301939183019160010161570e565b5090979650505050505050565b901515815260200190565b60208082526026908201527f43616c6c6572206e6f7420617574686f72697a656420746f2073657420746f6b60408201527f656e206361700000000000000000000000000000000000000000000000000000606082015260800190565b6020808252603a908201527f43757272656e746c79206e6f20696e7465726d656469617269657320616c6c6f60408201527f77656420666f7220746869732066756e6374696f6e2063616c6c000000000000606082015260800190565b60208082526039908201527f43616c6c696e6720636f6e7472616374206973206e6f7420616e20617574686f60408201527f72697a6564206d617267696e20747261646572206167656e7400000000000000606082015260800190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201527f6464726573730000000000000000000000000000000000000000000000000000606082015260800190565b60208082526021908201527f6e6f7420617574686f72697a656420746f20736574206c656e64696e6720636160408201527f7000000000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526026908201527f4163636f756e742062616c616e636520697320746f6f206c6f7720746f20776960408201527f7468647261770000000000000000000000000000000000000000000000000000606082015260800190565b60208082526052908201527f546f2070726576656e742061747461636b7320796f75206d757374207761697460408201527f20756e74696c20796f757220636f6f6c696e67206f666620706572696f64206960608201527f73206f76657220746f2077697468647261770000000000000000000000000000608082015260a00190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526039908201527f457863656564696e6720676c6f62616c206578706f737572652063617020746f60408201527f20746f6b656e202d2d2074727920616761696e206c6174657200000000000000606082015260800190565b60208082526022908201527f43616e277420626f72726f773a20696e73756666696369656e742062616c616e60408201527f6365000000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252602a908201527f43616c6c696e6720636f6e7472616374206e6f7420617574686f72697a65642060408201527f746f206465706f73697400000000000000000000000000000000000000000000606082015260800190565b6020808252602b908201527f43616e2774206c69717569646174652063757272656e746c7920626f72726f7760408201527f696e67206163636f756e74000000000000000000000000000000000000000000606082015260800190565b61ffff91909116815260200190565b90815260200190565b91825273ffffffffffffffffffffffffffffffffffffffff16602082015260400190565b92835273ffffffffffffffffffffffffffffffffffffffff919091166020830152604082015260600190565b93845273ffffffffffffffffffffffffffffffffffffffff9283166020850152604084019190915216606082015260800190565b918252602082015260400190565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715615c8d57615c8d615de8565b604052919050565b600067ffffffffffffffff821115615caf57615caf615de8565b5060209081020190565b60008219821115615ccc57615ccc615db9565b500190565b600082615d05577f4e487b710000000000000000000000000000000000000000000000000000000081526012600452602481fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615615d4257615d42615db9565b500290565b600082821015615d5957615d59615db9565b500390565b600061ffff80831681811415615d7657615d76615db9565b6001019392505050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415615db257615db2615db9565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff8116811461469c57600080fdfea2646970667358221220bcf837d54fd34f429079df3bc986d8709748d90f571472723b6859b474ade1a264736f6c63430008010033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getBorrowAmounts(address)": {
        "details": "view function to display account borrowing state"
      },
      "getHoldingAmounts(address)": {
        "details": "view function to display account held assets state"
      },
      "getLastDepositBlock(address)": {
        "details": "last time this account deposited relevant for withdrawal window"
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "registerBorrow(address,address,uint256)": {
        "details": "gets called by router to affirm isolated borrowing event"
      },
      "registerDeposit(address,address,uint256)": {
        "details": "gets called by router to affirm a deposit to an account"
      },
      "registerLiquidation(address)": {
        "details": "can get called by router to register the dissolution of an account"
      },
      "registerTradeAndBorrow(address,address,address,uint256,uint256)": {
        "details": "gets callled by router to register a trade and borrow and extinguis as necessary"
      },
      "registerWithdrawal(address,address,uint256)": {
        "details": "gets called by router to affirm withdrawal of tokens from account"
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setCoolingOffPeriod(uint256)": {
        "details": "setter for cooling off period for withdrawing funds after deposit"
      },
      "setLeverage(uint256)": {
        "details": "admin function to set leverage"
      },
      "setLiquidationThresholdPercent(uint256)": {
        "details": "admin function to set liquidation threshold"
      },
      "setTokenCap(address,uint256)": {
        "details": "admin function to set the token cap"
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "viewHoldingsInPeg(address)": {
        "details": "total of assets of account, expressed in reference currency"
      },
      "viewLoanInPeg(address)": {
        "details": "view function to get loan amount in peg"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "liquidate(address[])": {
        "notice": "called by maintenance stakers to liquidate accounts below liquidation threshold"
      },
      "priceUpdateWindow()": {
        "notice": "update window in blocks"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 381,
        "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 12289,
        "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
        "label": "mainCharacterCache",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 12295,
        "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
        "label": "roleCache",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 11650,
        "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
        "label": "tokenPrices",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_struct(TokenPrice)11635_storage)"
      },
      {
        "astId": 11654,
        "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
        "label": "priceUpdateWindow",
        "offset": 0,
        "slot": "4",
        "type": "t_uint16"
      },
      {
        "astId": 11657,
        "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
        "label": "UPDATE_RATE_PERMIL",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 11660,
        "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
        "label": "UPDATE_MAX_PEG_AMOUNT",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 11663,
        "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
        "label": "UPDATE_MIN_PEG_AMOUNT",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 4680,
        "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
        "label": "leverage",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 4683,
        "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
        "label": "liquidationThresholdPercent",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 4689,
        "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
        "label": "marginAccounts",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_struct(CrossMarginAccount)4673_storage)"
      },
      {
        "astId": 4694,
        "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
        "label": "tokenCaps",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4699,
        "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
        "label": "totalShort",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4704,
        "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
        "label": "totalLong",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 4706,
        "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
        "label": "coolingOffPeriod",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 5601,
        "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
        "label": "liquidationAmounts",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_struct(Liquidation)5587_storage)"
      },
      {
        "astId": 5604,
        "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
        "label": "sellTokens",
        "offset": 0,
        "slot": "16",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 5607,
        "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
        "label": "buyTokens",
        "offset": 0,
        "slot": "17",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 5610,
        "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
        "label": "tradersToLiquidate",
        "offset": 0,
        "slot": "18",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 5614,
        "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
        "label": "maintenanceFailures",
        "offset": 0,
        "slot": "19",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5619,
        "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
        "label": "stakeAttackRecords",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_address,t_struct(AccountLiqRecord)5596_storage)"
      },
      {
        "astId": 5622,
        "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
        "label": "avgLiquidationPerCall",
        "offset": 0,
        "slot": "21",
        "type": "t_uint256"
      },
      {
        "astId": 5625,
        "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
        "label": "liqStakeAttackWindow",
        "offset": 0,
        "slot": "22",
        "type": "t_uint256"
      },
      {
        "astId": 5628,
        "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
        "label": "MAINTAINER_CUT_PERCENT",
        "offset": 0,
        "slot": "23",
        "type": "t_uint256"
      },
      {
        "astId": 5631,
        "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
        "label": "failureThreshold",
        "offset": 0,
        "slot": "24",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_address,t_struct(AccountLiqRecord)5596_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct CrossMarginLiquidation.AccountLiqRecord)",
        "numberOfBytes": "32",
        "value": "t_struct(AccountLiqRecord)5596_storage"
      },
      "t_mapping(t_address,t_struct(CrossMarginAccount)4673_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct CrossMarginAccount)",
        "numberOfBytes": "32",
        "value": "t_struct(CrossMarginAccount)4673_storage"
      },
      "t_mapping(t_address,t_struct(Liquidation)5587_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct CrossMarginLiquidation.Liquidation)",
        "numberOfBytes": "32",
        "value": "t_struct(Liquidation)5587_storage"
      },
      "t_mapping(t_address,t_struct(TokenPrice)11635_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct TokenPrice)",
        "numberOfBytes": "32",
        "value": "t_struct(TokenPrice)11635_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_struct(AccountLiqRecord)5596_storage": {
        "encoding": "inplace",
        "label": "struct CrossMarginLiquidation.AccountLiqRecord",
        "members": [
          {
            "astId": 5589,
            "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
            "label": "blockNum",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5591,
            "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
            "label": "loser",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 5593,
            "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
            "label": "amount",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 5595,
            "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
            "label": "stakeAttacker",
            "offset": 0,
            "slot": "3",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(CrossMarginAccount)4673_storage": {
        "encoding": "inplace",
        "label": "struct CrossMarginAccount",
        "members": [
          {
            "astId": 4650,
            "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
            "label": "lastDepositBlock",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4653,
            "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
            "label": "borrowTokens",
            "offset": 0,
            "slot": "1",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 4657,
            "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
            "label": "borrowed",
            "offset": 0,
            "slot": "2",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 4661,
            "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
            "label": "borrowedYieldQuotientsFP",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 4664,
            "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
            "label": "holdingTokens",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 4668,
            "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
            "label": "holdings",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 4672,
            "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
            "label": "holdsToken",
            "offset": 0,
            "slot": "6",
            "type": "t_mapping(t_address,t_bool)"
          }
        ],
        "numberOfBytes": "224"
      },
      "t_struct(Liquidation)5587_storage": {
        "encoding": "inplace",
        "label": "struct CrossMarginLiquidation.Liquidation",
        "members": [
          {
            "astId": 5582,
            "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
            "label": "buy",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 5584,
            "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
            "label": "sell",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 5586,
            "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
            "label": "blockNum",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(TokenPrice)11635_storage": {
        "encoding": "inplace",
        "label": "struct TokenPrice",
        "members": [
          {
            "astId": 11626,
            "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
            "label": "blockLastUpdated",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 11628,
            "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
            "label": "tokenPer1k",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 11631,
            "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
            "label": "liquidationPath",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 11634,
            "contract": "contracts/CrossMarginTrading.sol:CrossMarginTrading",
            "label": "inverseLiquidationPath",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_address)dyn_storage"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}