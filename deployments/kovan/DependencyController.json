{
  "address": "0x79F6DD33D500A1563449507bfAF863Cf5e4B6E26",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_roles",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allCharacters",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "allManagedContracts",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allRoles",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentExecutor",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "delegateOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contr",
          "type": "address"
        }
      ],
      "name": "disableContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "disabler",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "executor",
          "type": "address"
        }
      ],
      "name": "executeAsOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "role",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "actor",
          "type": "address"
        }
      ],
      "name": "giveRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "knownCharacters",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "knownRoles",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "mainCharacterCache",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contr",
          "type": "address"
        },
        {
          "internalType": "uint256[]",
          "name": "charactersPlayed",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "rolesPlayed",
          "type": "uint256[]"
        },
        {
          "internalType": "address[]",
          "name": "ownsAsDelegate",
          "type": "address[]"
        }
      ],
      "name": "manageContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "managedContracts",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contr",
          "type": "address"
        }
      ],
      "name": "ownsContract",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "contr",
          "type": "address"
        }
      ],
      "name": "ownsContractStrict",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "ownableContract",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "relinquishOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "role",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "actor",
          "type": "address"
        }
      ],
      "name": "removeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "roleCache",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "roles",
      "outputs": [
        {
          "internalType": "contract Roles",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "disablerAddress",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "authorized",
          "type": "bool"
        }
      ],
      "name": "setDisabler",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "role",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "actor",
          "type": "address"
        }
      ],
      "name": "setMainCharacter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "character",
          "type": "uint256"
        }
      ],
      "name": "updateMainCharacterCache",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "role",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "contr",
          "type": "address"
        }
      ],
      "name": "updateRoleCache",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "verifyOwnership",
      "outputs": [
        {
          "internalType": "bool",
          "name": "ownsAll",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "verifyOwnershipStrict",
      "outputs": [
        {
          "internalType": "bool",
          "name": "ownsAll",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x8bd2012a4c965c8772856e4e54c8051ce6afc0247cc9ffcb4a0b1efaf79710ca",
  "receipt": {
    "to": null,
    "from": "0x23292e9BA8434e59E6BAC1907bA7425211c4DE27",
    "contractAddress": "0x79F6DD33D500A1563449507bfAF863Cf5e4B6E26",
    "transactionIndex": 8,
    "gasUsed": "2699108",
    "logsBloom": "0x
    "blockHash": "0xf004a061c805ccc8e3ae0ffc59f42761c8fb4190bf1fc67f81737da3d6b04938",
    "transactionHash": "0x8bd2012a4c965c8772856e4e54c8051ce6afc0247cc9ffcb4a0b1efaf79710ca",
    "logs": [
      {
        "transactionIndex": 8,
        "blockNumber": 24104710,
        "transactionHash": "0x8bd2012a4c965c8772856e4e54c8051ce6afc0247cc9ffcb4a0b1efaf79710ca",
        "address": "0x79F6DD33D500A1563449507bfAF863Cf5e4B6E26",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000023292e9ba8434e59e6bac1907ba7425211c4de27"
        ],
        "data": "0x",
        "logIndex": 32,
        "blockHash": "0xf004a061c805ccc8e3ae0ffc59f42761c8fb4190bf1fc67f81737da3d6b04938"
      }
    ],
    "blockNumber": 24104710,
    "cumulativeGasUsed": "3959921",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xC95531a7f6C57456718BCd69a5f64829C7973f11"
  ],
  "solcInputHash": "ec45310c1ebd228212cbc01f9840ea7e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.1+commit.df193b15\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_roles\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allCharacters\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"allManagedContracts\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allRoles\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentExecutor\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"delegateOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contr\",\"type\":\"address\"}],\"name\":\"disableContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"disabler\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"executeAsOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"role\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"actor\",\"type\":\"address\"}],\"name\":\"giveRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"knownCharacters\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"knownRoles\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mainCharacterCache\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contr\",\"type\":\"address\"},{\"internalType\":\"uint256[]\",\"name\":\"charactersPlayed\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"rolesPlayed\",\"type\":\"uint256[]\"},{\"internalType\":\"address[]\",\"name\":\"ownsAsDelegate\",\"type\":\"address[]\"}],\"name\":\"manageContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"managedContracts\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contr\",\"type\":\"address\"}],\"name\":\"ownsContract\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"contr\",\"type\":\"address\"}],\"name\":\"ownsContractStrict\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"ownableContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"relinquishOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"role\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"actor\",\"type\":\"address\"}],\"name\":\"removeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"roleCache\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roles\",\"outputs\":[{\"internalType\":\"contract Roles\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"disablerAddress\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"authorized\",\"type\":\"bool\"}],\"name\":\"setDisabler\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"role\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"actor\",\"type\":\"address\"}],\"name\":\"setMainCharacter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"character\",\"type\":\"uint256\"}],\"name\":\"updateMainCharacterCache\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"role\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"contr\",\"type\":\"address\"}],\"name\":\"updateRoleCache\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"verifyOwnership\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"ownsAll\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"verifyOwnershipStrict\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"ownsAll\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Provides a single point of reference to verify ownership integrity within our system as well as performing cache invalidation for roles and inter-contract relationships The dependency controller owns the Roles contract and in turn is owned by a multisig wallet (0xEED9D1c6B4cdEcB3af070D85bfd394E7aF179CBd) during beta and will then be transfered to governance https://github.com/marginswap/governance\",\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DependencyController.sol\":\"DependencyController\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x1cae4f85f114ff17b90414f5da67365b1d00337abb5bce9bf944eb78a2c0673c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"contracts/DependencyController.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./RoleAware.sol\\\";\\nimport \\\"../interfaces/IExecutor.sol\\\";\\nimport \\\"../interfaces/IDelegateOwner.sol\\\";\\n\\n/// @dev Provides a single point of reference to verify ownership integrity\\n/// within our system as well as performing cache invalidation for\\n/// roles and inter-contract relationships\\n/// The dependency controller owns the Roles contract and in turn is owned\\n/// by a multisig wallet (0xEED9D1c6B4cdEcB3af070D85bfd394E7aF179CBd) during\\n/// beta and will then be transfered to governance\\n/// https://github.com/marginswap/governance\\ncontract DependencyController is RoleAware, Ownable, IDelegateOwner {\\n    constructor(address _roles) RoleAware(_roles) Ownable() {}\\n\\n    address[] public managedContracts;\\n    mapping(uint256 => bool) public knownCharacters;\\n    mapping(uint256 => bool) public knownRoles;\\n    mapping(address => address) public delegateOwner;\\n    mapping(address => bool) public disabler;\\n    address public currentExecutor = address(0);\\n\\n    uint256[] public allCharacters;\\n    uint256[] public allRoles;\\n\\n    modifier onlyOwnerOrExecOrDisabler() {\\n        require(\\n            owner() == _msgSender() ||\\n                disabler[_msgSender()] ||\\n                currentExecutor == _msgSender(),\\n            \\\"Caller is not the owner or authorized disabler or executor\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyOwnerOrExec() {\\n        require(\\n            owner() == _msgSender() || currentExecutor == _msgSender(),\\n            \\\"Caller is not the owner or executor\\\"\\n        );\\n        _;\\n    }\\n\\n    function verifyOwnership() external view returns (bool ownsAll) {\\n        ownsAll = ownsContractStrict(address(roles));\\n        uint256 len = managedContracts.length;\\n        for (uint256 i = 0; len > i; i++) {\\n            address contr = managedContracts[i];\\n            ownsAll = ownsAll && ownsContract(contr);\\n            if (!ownsAll) {\\n                break;\\n            }\\n        }\\n    }\\n\\n    function verifyOwnershipStrict() external view returns (bool ownsAll) {\\n        ownsAll = ownsContractStrict(address(roles));\\n        uint256 len = managedContracts.length;\\n        for (uint256 i = 0; len > i; i++) {\\n            address contr = managedContracts[i];\\n            ownsAll = ownsAll && ownsContractStrict(contr);\\n            if (!ownsAll) {\\n                break;\\n            }}\\n    }\\n\\n    function ownsContract(address contr) public view returns (bool) {\\n        address contrOwner = Ownable(contr).owner();\\n        return\\n            contrOwner == address(this) ||\\n            contrOwner == owner() ||\\n            (delegateOwner[contr] != address(0) &&\\n             contrOwner == delegateOwner[contr]);\\n    }\\n\\n    function ownsContractStrict(address contr) public view returns (bool) {\\n        address contrOwner = Ownable(contr).owner();\\n        return\\n            contrOwner == address(this) ||\\n            (contrOwner == delegateOwner[contr] &&\\n                Ownable(delegateOwner[contr]).owner() == address(this));\\n    }\\n\\n    function relinquishOwnership(address ownableContract, address newOwner)\\n        external\\n        override\\n        onlyOwnerOrExec\\n    {\\n        Ownable(ownableContract).transferOwnership(newOwner);\\n    }\\n\\n    function setDisabler(address disablerAddress, bool authorized)\\n        external\\n        onlyOwnerOrExec\\n    {\\n        disabler[disablerAddress] = authorized;\\n    }\\n\\n    function executeAsOwner(address executor) external onlyOwnerOrExec {\\n        address[] memory properties = IExecutor(executor).requiredProperties();\\n        for (uint256 i = 0; properties.length > i; i++) {\\n            address property = properties[i];\\n            if (delegateOwner[property] != address(0)) {\\n                IDelegateOwner(delegateOwner[property]).relinquishOwnership(\\n                    property,\\n                    executor\\n                );\\n            } else {\\n                Ownable(property).transferOwnership(executor);\\n            }\\n        }\\n\\n        uint256[] memory requiredRoles = IExecutor(executor).requiredRoles();\\n\\n        for (uint256 i = 0; requiredRoles.length > i; i++) {\\n            _giveRole(requiredRoles[i], executor);\\n        }\\n\\n        currentExecutor = executor;\\n        IExecutor(executor).execute();\\n        currentExecutor = address(0);\\n\\n        address rightfulOwner = IExecutor(executor).rightfulOwner();\\n        require(\\n            rightfulOwner == address(this) || rightfulOwner == owner(),\\n            \\\"Executor doesn't have the right rightful owner\\\"\\n        );\\n\\n        uint256 len = properties.length;\\n        for (uint256 i = 0; len > i; i++) {\\n            address property = properties[i];\\n            require(\\n                Ownable(property).owner() == rightfulOwner,\\n                \\\"Executor did not return ownership\\\"\\n            );\\n            if (delegateOwner[property] != address(0)) {\\n                Ownable(property).transferOwnership(delegateOwner[property]);\\n            }\\n        }\\n\\n        len = requiredRoles.length;\\n        for (uint256 i = 0; len > i; i++) {\\n            _removeRole(requiredRoles[i], executor);\\n        }\\n    }\\n\\n    function manageContract(\\n        address contr,\\n        uint256[] memory charactersPlayed,\\n        uint256[] memory rolesPlayed,\\n        address[] memory ownsAsDelegate\\n    ) external onlyOwnerOrExec {\\n        managedContracts.push(contr);\\n\\n        // set up all characters this contract plays\\n        uint256 len = charactersPlayed.length;\\n        for (uint256 i = 0; len > i; i++) {\\n            uint256 character = charactersPlayed[i];\\n            _setMainCharacter(character, contr);\\n        }\\n\\n        // all roles this contract plays\\n        len = rolesPlayed.length;\\n        for (uint256 i = 0; len > i; i++) {\\n            uint256 role = rolesPlayed[i];\\n            _giveRole(role, contr);\\n        }\\n\\n        // update this contract with all characters we know about\\n        len = allCharacters.length;\\n        for (uint256 i = 0; len > i; i++) {\\n            RoleAware(contr).updateMainCharacterCache(allCharacters[i]);\\n        }\\n\\n        // update this contract with all roles for all contracts we know about\\n        len = allRoles. length;\\n        for (uint256 i = 0; len > i; i++) {\\n            for (uint256 j = 0; managedContracts.length > j; j++) {\\n                RoleAware(contr).updateRoleCache(\\n                    allRoles[i],\\n                    managedContracts[j]\\n                );\\n            }\\n        }\\n\\n        len = ownsAsDelegate.length;\\n        for (uint256 i = 0; len > i; i++) {\\n            Ownable(ownsAsDelegate[i]).transferOwnership(contr);\\n            delegateOwner[ownsAsDelegate[i]] = contr;\\n        }\\n    }\\n\\n    function disableContract(address contr) external onlyOwnerOrExecOrDisabler {\\n        _disableContract(contr);\\n    }\\n\\n    function _disableContract(address contr) internal {\\n        uint256 len = allRoles.length;\\n        for (uint256 i = 0; len > i; i++) {\\n            if (roles.getRole(allRoles[i], contr)) {\\n                _removeRole(allRoles[i], contr);\\n            }\\n        }\\n\\n        len = allCharacters.length;\\n        for (uint256 i = 0; len > i; i++) {\\n            if (roles.mainCharacters(allCharacters[i]) == contr) {\\n                _setMainCharacter(allCharacters[i], address(0));\\n            }\\n        }\\n    }\\n\\n    function giveRole(uint256 role, address actor) external onlyOwnerOrExec {\\n        _giveRole(role, actor);\\n    }\\n\\n    function removeRole(uint256 role, address actor)\\n        external\\n        onlyOwnerOrExecOrDisabler\\n    {\\n        _removeRole(role, actor);\\n    }\\n\\n    function _removeRole(uint256 role, address actor) internal {\\n        roles.removeRole(role, actor);\\n        updateRoleCache(role, actor);\\n    }\\n\\n    function setMainCharacter(uint256 role, address actor)\\n        external\\n        onlyOwnerOrExec\\n    {\\n        _setMainCharacter(role, actor);\\n    }\\n\\n    function _giveRole(uint256 role, address actor) internal {\\n        if (!knownRoles[role]) {\\n            knownRoles[role] = true;\\n            allRoles.push(role);\\n        }\\n        roles.giveRole(role, actor);\\n        updateRoleCache(role, actor);\\n    }\\n\\n    function _setMainCharacter(uint256 character, address actor) internal {\\n        if (!knownCharacters[character]) {\\n            knownCharacters[character] = true;\\n            allCharacters.push(character);\\n        }\\n        roles.setMainCharacter(character, actor);\\n        updateMainCharacterCache(character);\\n    }\\n\\n    function updateMainCharacterCache(uint256 character) public override {\\n        uint256 len = managedContracts.length;\\n        for (uint256 i = 0; len > i; i++) {\\n            RoleAware(managedContracts[i]).updateMainCharacterCache(character);\\n        }\\n    }\\n\\n    function updateRoleCache(uint256 role, address contr) public override {\\n        uint256 len = managedContracts.length;\\n        for (uint256 i = 0; len > i; i++) {\\n            RoleAware(managedContracts[i]).updateRoleCache(role, contr);\\n        }\\n    }\\n\\n    function allManagedContracts() external view returns (address[] memory) {\\n        return managedContracts;\\n    }\\n}\\n\",\"keccak256\":\"0xdd3e8894cf2786d7c3f0a5332e5c9bdd5362eae7db024a3e3229d0868cd8f964\",\"license\":\"BUSL-1.1\"},\"contracts/RoleAware.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Roles.sol\\\";\\n\\n/// Main characters are for service discovery\\n/// Whereas roles are for access control\\ncontract RoleAware {\\n    // we chose not to go with an enum\\n    // to make this list easy to extend\\n    uint256 constant FUND_TRANSFERER = 1;\\n    uint256 constant MARGIN_CALLER = 2;\\n    uint256 constant BORROWER = 3;\\n    uint256 constant MARGIN_TRADER = 4;\\n    uint256 constant FEE_SOURCE = 5;\\n    uint256 constant LIQUIDATOR = 6;\\n    uint256 constant AUTHORIZED_FUND_TRADER = 7;\\n    uint256 constant INCENTIVE_REPORTER = 8;\\n    uint256 constant TOKEN_ACTIVATOR = 9;\\n    uint256 constant STAKE_PENALIZER = 10;\\n\\n    uint256 constant FUND = 101;\\n    uint256 constant LENDING = 102;\\n    uint256 constant ROUTER = 103;\\n    uint256 constant MARGIN_TRADING = 104;\\n    uint256 constant FEE_CONTROLLER = 105;\\n    uint256 constant PRICE_CONTROLLER = 106;\\n    uint256 constant ADMIN = 107;\\n    uint256 constant INCENTIVE_DISTRIBUTION = 108;\\n    uint256 constant TOKEN_ADMIN = 109;\\n\\n    Roles public immutable roles;\\n    mapping(uint256 => address) public mainCharacterCache;\\n    mapping(address => mapping(uint256 => bool)) public roleCache;\\n\\n    constructor(address _roles) {\\n        require(_roles != address(0), \\\"Please provide valid roles address\\\");\\n        roles = Roles(_roles);\\n    }\\n\\n    modifier noIntermediary() {\\n        require(\\n            msg.sender == tx.origin,\\n            \\\"Currently no intermediaries allowed for this function call\\\"\\n        );\\n        _;\\n    }\\n\\n    function updateRoleCache(uint256 role, address contr) public virtual {\\n        roleCache[contr][role] = roles.getRole(role, contr);\\n    }\\n\\n    function updateMainCharacterCache(uint256 role) public virtual {\\n        mainCharacterCache[role] = roles.mainCharacters(role);\\n    }\\n\\n    function fund() internal view returns (address) {\\n        return mainCharacterCache[FUND];\\n    }\\n\\n    function lending() internal view returns (address) {\\n        return mainCharacterCache[LENDING];\\n    }\\n\\n    function router() internal view returns (address) {\\n        return mainCharacterCache[ROUTER];\\n    }\\n\\n    function marginTrading() internal view returns (address) {\\n        return mainCharacterCache[MARGIN_TRADING];\\n    }\\n\\n    function feeController() internal view returns (address) {\\n        return mainCharacterCache[FEE_CONTROLLER];\\n    }\\n\\n    function price() internal view returns (address) {\\n        return mainCharacterCache[PRICE_CONTROLLER];\\n    }\\n\\n    function admin() internal view returns (address) {\\n        return mainCharacterCache[ADMIN];\\n    }\\n\\n    function incentiveDistributor() internal view returns (address) {\\n        return mainCharacterCache[INCENTIVE_DISTRIBUTION];\\n    }\\n\\n    function isBorrower(address contr) internal view returns (bool) {\\n        return roleCache[contr][BORROWER];\\n    }\\n\\n    function isFundTransferer(address contr) internal view returns (bool) {\\n        return roleCache[contr][FUND_TRANSFERER];\\n    }\\n\\n    function isMarginTrader(address contr) internal view returns (bool) {\\n        return roleCache[contr][MARGIN_TRADER];\\n    }\\n\\n    function isFeeSource(address contr) internal view returns (bool) {\\n        return roleCache[contr][FEE_SOURCE];\\n    }\\n\\n    function isMarginCaller(address contr) internal view returns (bool) {\\n        return roleCache[contr][MARGIN_CALLER];\\n    }\\n\\n    function isLiquidator(address contr) internal view returns (bool) {\\n        return roleCache[contr][LIQUIDATOR];\\n    }\\n\\n    function isAuthorizedFundTrader(address contr)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return roleCache[contr][AUTHORIZED_FUND_TRADER];\\n    }\\n\\n    function isIncentiveReporter(address contr) internal view returns (bool) {\\n        return roleCache[contr][INCENTIVE_REPORTER];\\n    }\\n\\n    function isTokenActivator(address contr) internal view returns (bool) {\\n        return roleCache[contr][TOKEN_ACTIVATOR];\\n    }\\n\\n    function isStakePenalizer(address contr) internal view returns (bool) {\\n        return roles.getRole(STAKE_PENALIZER, contr);\\n    }\\n}\\n\",\"keccak256\":\"0xba5b7e4d15436a2307bf02f00e4e1a59e0f533e15499040d9a29cb23c9036a52\",\"license\":\"BUSL-1.1\"},\"contracts/Roles.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n\\ncontract Roles is Ownable {\\n    mapping(address => mapping(uint256 => bool)) public roles;\\n    mapping(uint256 => address) public mainCharacters;\\n\\n    constructor() Ownable() {\\n        // token activation from the get-go\\n        roles[msg.sender][9] = true;\\n    }\\n\\n    function giveRole(uint256 role, address actor) external onlyOwner {\\n        roles[actor][role] = true;\\n    }\\n\\n    function removeRole(uint256 role, address actor) external onlyOwner {\\n        roles[actor][role] = false;\\n    }\\n\\n    function setMainCharacter(uint256 role, address actor) external onlyOwner {\\n        mainCharacters[role] = actor;\\n    }\\n\\n    function getRole(uint256 role, address contr) external view returns (bool) {\\n        return roles[contr][role];\\n    }\\n}\\n\",\"keccak256\":\"0x0ef6b1f76dbd1a4688d2649df96cf6107bda3bb59edd6db1804ff59d16fa1566\",\"license\":\"BUSL-1.1\"},\"interfaces/IDelegateOwner.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\ninterface IDelegateOwner {\\n    function relinquishOwnership(address property, address newOwner) external;\\n}\\n\",\"keccak256\":\"0x593d2de39ac9006a90b07f2ffc83d17c2c298a81593cf70a3adcb5b77bc47142\",\"license\":\"BUSL-1.1\"},\"interfaces/IExecutor.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\ninterface IExecutor {\\n    function rightfulOwner() external view returns (address);\\n\\n    function execute() external;\\n\\n    function requiredProperties() external view returns (address[] memory);\\n\\n    function requiredRoles() external view returns (uint256[] memory);\\n}\\n\",\"keccak256\":\"0x8d46272e57c50aaee2dbb7f101b0bc82999bd26d91ebfb33d62648fc685ddfac\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x60a0604052600880546001600160a01b03191690553480156200002157600080fd5b506040516200315c3803806200315c8339810160408190526200004491620000ec565b806001600160a01b038116620000775760405162461bcd60e51b81526004016200006e906200011c565b60405180910390fd5b60601b6001600160601b031916608052600062000093620000e8565b600280546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350506200015e565b3390565b600060208284031215620000fe578081fd5b81516001600160a01b038116811462000115578182fd5b9392505050565b60208082526022908201527f506c656173652070726f766964652076616c696420726f6c6573206164647265604082015261737360f01b606082015260800190565b60805160601c612fae620001ae600039600081816104e50152818161091d015281816114f9015281816122bf0152818161236f01528181612465015281816124e701526126620152612fae6000f3fe608060405234801561001057600080fd5b50600436106101cf5760003560e01c8063715018a611610104578063a154ce82116100a2578063e9c3f77d11610071578063e9c3f77d146103a1578063f19990d7146103b4578063f1ce598e146103c7578063f2fde38b146103da576101cf565b8063a154ce8214610355578063a1fdc45814610368578063a63fc1631461037b578063d2e237291461038e576101cf565b8063840c53bd116100de578063840c53bd1461031f57806385f84ea3146103325780638da5cb5b1461034557806392a427041461034d576101cf565b8063715018a6146102f157806376625515146102f95780637a1a04df1461030c576101cf565b80633238405b11610171578063447d52ba1161014b578063447d52ba146102b05780634d537769146102c35780636a0e76c8146102d65780636b60a09b146102e9576101cf565b80633238405b14610275578063392f5f6414610288578063430ae4691461029d576101cf565b80631135bb7b116101ad5780631135bb7b1461021c57806317b7b61b1461022f57806325398f831461024f5780632be5c6c014610262576101cf565b8063071060a6146101d45780630ba46289146101e95780631023d3e014610207575b600080fd5b6101e76101e2366004612b2c565b6103ed565b005b6101f16104de565b6040516101fe9190612c0a565b60405180910390f35b61020f6105b0565b6040516101fe9190612bb0565b6101e761022a36600461286e565b61061f565b61024261023d366004612b2c565b610750565b6040516101fe9190612e1b565b6101e761025d366004612b44565b610771565b6101f1610270366004612b2c565b61081f565b6101e7610283366004612b44565b610834565b61029061091b565b6040516101fe9190612b68565b6102906102ab366004612836565b61093f565b6101e76102be366004612b44565b610967565b6101e76102d1366004612b44565b610a5b565b6101f16102e4366004612836565b610b05565b610290610cad565b6101e7610cc9565b6101e76103073660046128a6565b610dab565b6101f161031a3660046129c8565b611362565b61024261032d366004612b2c565b611382565b6101f1610340366004612836565b611392565b6102906114d6565b6101f16114f2565b6101e7610363366004612836565b6115bf565b6101e7610376366004612836565b6116a8565b6101e761038936600461299b565b611f2f565b6101f161039c366004612836565b612025565b6102906103af366004612b2c565b61203a565b6101f16103c2366004612b2c565b612062565b6102906103d5366004612b2c565b612077565b6101e76103e8366004612836565b6120ae565b60035460005b808211156104d95760038181548110610435577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000918252602090912001546040517f071060a600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091169063071060a690610494908690600401612e1b565b600060405180830381600087803b1580156104ae57600080fd5b505af11580156104c2573d6000803e3d6000fd5b5050505080806104d190612ebb565b9150506103f3565b505050565b60006105097f0000000000000000000000000000000000000000000000000000000000000000610b05565b60035490915060005b808211156105ab57600060038281548110610556577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905083801561058b575061058b81610b05565b93508361059857506105ab565b50806105a381612ebb565b915050610512565b505090565b6060600380548060200260200160405190810160405280929190818152602001828054801561061557602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff1681526001909101906020018083116105ea575b5050505050905090565b6106276121fc565b73ffffffffffffffffffffffffffffffffffffffff166106456114d6565b73ffffffffffffffffffffffffffffffffffffffff161480610689575061066a6121fc565b60085473ffffffffffffffffffffffffffffffffffffffff9081169116145b6106c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106bf90612ccf565b60405180910390fd5b6040517ff2fde38b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83169063f2fde38b9061071a908490600401612b68565b600060405180830381600087803b15801561073457600080fd5b505af1158015610748573d6000803e3d6000fd5b505050505050565b6009818154811061076057600080fd5b600091825260209091200154905081565b6107796121fc565b73ffffffffffffffffffffffffffffffffffffffff166107976114d6565b73ffffffffffffffffffffffffffffffffffffffff1614806107db57506107bc6121fc565b60085473ffffffffffffffffffffffffffffffffffffffff9081169116145b610811576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106bf90612ccf565b61081b8282612200565b5050565b60056020526000908152604090205460ff1681565b61083c6121fc565b73ffffffffffffffffffffffffffffffffffffffff1661085a6114d6565b73ffffffffffffffffffffffffffffffffffffffff1614806108ae5750600760006108836121fc565b73ffffffffffffffffffffffffffffffffffffffff16815260208101919091526040016000205460ff165b806108db57506108bc6121fc565b60085473ffffffffffffffffffffffffffffffffffffffff9081169116145b610911576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106bf90612d2c565b61081b8282612332565b7f000000000000000000000000000000000000000000000000000000000000000081565b60066020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b60035460005b80821115610a5557600381815481106109af577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000918252602090912001546040517f447d52ba00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091169063447d52ba90610a109087908790600401612e24565b600060405180830381600087803b158015610a2a57600080fd5b505af1158015610a3e573d6000803e3d6000fd5b505050508080610a4d90612ebb565b91505061096d565b50505050565b610a636121fc565b73ffffffffffffffffffffffffffffffffffffffff16610a816114d6565b73ffffffffffffffffffffffffffffffffffffffff161480610ac55750610aa66121fc565b60085473ffffffffffffffffffffffffffffffffffffffff9081169116145b610afb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106bf90612ccf565b61081b82826123a6565b6000808273ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610b4e57600080fd5b505afa158015610b62573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b869190612852565b905073ffffffffffffffffffffffffffffffffffffffff8116301480610ca6575073ffffffffffffffffffffffffffffffffffffffff8084166000908152600660205260409020548282169116148015610ca6575073ffffffffffffffffffffffffffffffffffffffff8381166000908152600660209081526040918290205482517f8da5cb5b000000000000000000000000000000000000000000000000000000008152925130949190911692638da5cb5b926004808301939192829003018186803b158015610c5657600080fd5b505afa158015610c6a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c8e9190612852565b73ffffffffffffffffffffffffffffffffffffffff16145b9392505050565b60085473ffffffffffffffffffffffffffffffffffffffff1681565b610cd16121fc565b73ffffffffffffffffffffffffffffffffffffffff16610cef6114d6565b73ffffffffffffffffffffffffffffffffffffffff1614610d3c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106bf90612d89565b60025460405160009173ffffffffffffffffffffffffffffffffffffffff16907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600280547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055565b610db36121fc565b73ffffffffffffffffffffffffffffffffffffffff16610dd16114d6565b73ffffffffffffffffffffffffffffffffffffffff161480610e155750610df66121fc565b60085473ffffffffffffffffffffffffffffffffffffffff9081169116145b610e4b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106bf90612ccf565b6003805460018101825560009182527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b0180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff87161790558351905b80821115610f28576000858281518110610f01577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101519050610f1581886123a6565b5080610f2081612ebb565b915050610ebe565b5050815160005b80821115610f99576000848281518110610f72577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101519050610f868188612200565b5080610f9181612ebb565b915050610f2f565b505060095460005b8082111561106b578573ffffffffffffffffffffffffffffffffffffffff1663071060a660098381548110610fff577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002001546040518263ffffffff1660e01b81526004016110269190612e1b565b600060405180830381600087803b15801561104057600080fd5b505af1158015611054573d6000803e3d6000fd5b50505050808061106390612ebb565b915050610fa1565b5050600a5460005b808211156111d75760005b6003548110156111c4578673ffffffffffffffffffffffffffffffffffffffff1663447d52ba600a84815481106110de577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020015460038481548110611123577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000918252602090912001546040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815261117f929173ffffffffffffffffffffffffffffffffffffffff1690600401612e24565b600060405180830381600087803b15801561119957600080fd5b505af11580156111ad573d6000803e3d6000fd5b5050505080806111bc90612ebb565b91505061107e565b50806111cf81612ebb565b915050611073565b5050805160005b808211156107485782818151811061121f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1663f2fde38b876040518263ffffffff1660e01b815260040161125f9190612b68565b600060405180830381600087803b15801561127957600080fd5b505af115801561128d573d6000803e3d6000fd5b5050505085600660008584815181106112cf577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808061135a90612ebb565b9150506111de565b600160209081526000928352604080842090915290825290205460ff1681565b600a818154811061076057600080fd5b6000808273ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156113db57600080fd5b505afa1580156113ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114139190612852565b905073ffffffffffffffffffffffffffffffffffffffff811630148061146b575061143c6114d6565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b80610ca6575073ffffffffffffffffffffffffffffffffffffffff8381166000908152600660205260409020541615801590610ca6575073ffffffffffffffffffffffffffffffffffffffff9283166000908152600660205260409020548316921691909114919050565b60025473ffffffffffffffffffffffffffffffffffffffff1690565b600061151d7f0000000000000000000000000000000000000000000000000000000000000000610b05565b60035490915060005b808211156105ab5760006003828154811061156a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905083801561159f575061159f81611392565b9350836115ac57506105ab565b50806115b781612ebb565b915050611526565b6115c76121fc565b73ffffffffffffffffffffffffffffffffffffffff166115e56114d6565b73ffffffffffffffffffffffffffffffffffffffff16148061163957506007600061160e6121fc565b73ffffffffffffffffffffffffffffffffffffffff16815260208101919091526040016000205460ff165b8061166657506116476121fc565b60085473ffffffffffffffffffffffffffffffffffffffff9081169116145b61169c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106bf90612d2c565b6116a5816124d7565b50565b6116b06121fc565b73ffffffffffffffffffffffffffffffffffffffff166116ce6114d6565b73ffffffffffffffffffffffffffffffffffffffff16148061171257506116f36121fc565b60085473ffffffffffffffffffffffffffffffffffffffff9081169116145b611748576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106bf90612ccf565b60008173ffffffffffffffffffffffffffffffffffffffff166316a45ab76040518163ffffffff1660e01b815260040160006040518083038186803b15801561179057600080fd5b505afa1580156117a4573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526117ea91908101906129f3565b905060005b80825111156119a6576000828281518110611833577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60209081029190910181015173ffffffffffffffffffffffffffffffffffffffff80821660009081526006909352604090922054909250161561190e5773ffffffffffffffffffffffffffffffffffffffff808216600090815260066020526040908190205490517f1135bb7b000000000000000000000000000000000000000000000000000000008152911690631135bb7b906118d79084908890600401612b89565b600060405180830381600087803b1580156118f157600080fd5b505af1158015611905573d6000803e3d6000fd5b50505050611993565b6040517ff2fde38b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82169063f2fde38b90611960908790600401612b68565b600060405180830381600087803b15801561197a57600080fd5b505af115801561198e573d6000803e3d6000fd5b505050505b508061199e81612ebb565b9150506117ef565b5060008273ffffffffffffffffffffffffffffffffffffffff1663cd28fc8f6040518163ffffffff1660e01b815260040160006040518083038186803b1580156119ef57600080fd5b505afa158015611a03573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052611a499190810190612a8c565b905060005b8082511115611ab357611aa1828281518110611a93577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015185612200565b80611aab81612ebb565b915050611a4e565b50600880547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8516908117909155604080517f61461954000000000000000000000000000000000000000000000000000000008152905163614619549160048082019260009290919082900301818387803b158015611b4757600080fd5b505af1158015611b5b573d6000803e3d6000fd5b5050600880547fffffffffffffffffffffffff00000000000000000000000000000000000000001690555050604080517f4865cbc2000000000000000000000000000000000000000000000000000000008152905160009173ffffffffffffffffffffffffffffffffffffffff861691634865cbc291600480820192602092909190829003018186803b158015611bf157600080fd5b505afa158015611c05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c299190612852565b905073ffffffffffffffffffffffffffffffffffffffff8116301480611c815750611c526114d6565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b611cb7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106bf90612dbe565b825160005b80821115611ec4576000858281518110611cff577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015190508373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b158015611d6657600080fd5b505afa158015611d7a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d9e9190612852565b73ffffffffffffffffffffffffffffffffffffffff1614611deb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106bf90612c15565b73ffffffffffffffffffffffffffffffffffffffff8181166000908152600660205260409020541615611eb15773ffffffffffffffffffffffffffffffffffffffff808216600081815260066020526040908190205490517ff2fde38b000000000000000000000000000000000000000000000000000000008152919263f2fde38b92611e7e9290911690600401612b68565b600060405180830381600087803b158015611e9857600080fd5b505af1158015611eac573d6000803e3d6000fd5b505050505b5080611ebc81612ebb565b915050611cbc565b5050815160005b8082111561074857611f1d848281518110611f0f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015187612332565b80611f2781612ebb565b915050611ecb565b611f376121fc565b73ffffffffffffffffffffffffffffffffffffffff16611f556114d6565b73ffffffffffffffffffffffffffffffffffffffff161480611f995750611f7a6121fc565b60085473ffffffffffffffffffffffffffffffffffffffff9081169116145b611fcf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106bf90612ccf565b73ffffffffffffffffffffffffffffffffffffffff91909116600090815260076020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055565b60076020526000908152604090205460ff1681565b60006020819052908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b60046020526000908152604090205460ff1681565b6003818154811061208757600080fd5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b6120b66121fc565b73ffffffffffffffffffffffffffffffffffffffff166120d46114d6565b73ffffffffffffffffffffffffffffffffffffffff1614612121576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106bf90612d89565b73ffffffffffffffffffffffffffffffffffffffff811661216e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106bf90612c72565b60025460405173ffffffffffffffffffffffffffffffffffffffff8084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600280547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b3390565b60008281526005602052604090205460ff1661228257600082815260056020526040812080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001908117909155600a805491820181559091527fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a8018290555b6040517f25398f8300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016906325398f83906122f69085908590600401612e24565b600060405180830381600087803b15801561231057600080fd5b505af1158015612324573d6000803e3d6000fd5b5050505061081b8282610967565b6040517f3238405b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690633238405b906122f69085908590600401612e24565b60008281526004602052604090205460ff1661242857600082815260046020526040812080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660019081179091556009805491820181559091527f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af018290555b6040517f4d53776900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690634d5377699061249c9085908590600401612e24565b600060405180830381600087803b1580156124b657600080fd5b505af11580156124ca573d6000803e3d6000fd5b5050505061081b826103ed565b600a5460005b80821115612639577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166393552a3d600a838154811061255b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200154856040518363ffffffff1660e01b8152600401612584929190612e24565b60206040518083038186803b15801561259c57600080fd5b505afa1580156125b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125d49190612b10565b1561262757612627600a8281548110612616577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020015484612332565b8061263181612ebb565b9150506124dd565b505060095460005b808211156104d9578273ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663b4ed0b6d600984815481106126d6577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002001546040518263ffffffff1660e01b81526004016126fd9190612e1b565b60206040518083038186803b15801561271557600080fd5b505afa158015612729573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061274d9190612852565b73ffffffffffffffffffffffffffffffffffffffff1614156127b8576127b8600982815481106127a6577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020015460006123a6565b806127c281612ebb565b915050612641565b600082601f8301126127da578081fd5b813560206127ef6127ea83612e97565b612e48565b828152818101908583018385028701840188101561280b578586fd5b855b858110156128295781358452928401929084019060010161280d565b5090979650505050505050565b600060208284031215612847578081fd5b8135610ca681612f48565b600060208284031215612863578081fd5b8151610ca681612f48565b60008060408385031215612880578081fd5b823561288b81612f48565b9150602083013561289b81612f48565b809150509250929050565b600080600080608085870312156128bb578182fd5b84356128c681612f48565b935060208581013567ffffffffffffffff808211156128e3578485fd5b6128ef89838a016127ca565b95506040880135915080821115612904578485fd5b61291089838a016127ca565b94506060880135915080821115612925578384fd5b508601601f81018813612936578283fd5b80356129446127ea82612e97565b81815283810190838501858402850186018c1015612960578687fd5b8694505b8385101561298b57803561297781612f48565b835260019490940193918501918501612964565b50979a9699509497505050505050565b600080604083850312156129ad578182fd5b82356129b881612f48565b9150602083013561289b81612f6a565b600080604083850312156129da578182fd5b82356129e581612f48565b946020939093013593505050565b60006020808385031215612a05578182fd5b825167ffffffffffffffff811115612a1b578283fd5b8301601f81018513612a2b578283fd5b8051612a396127ea82612e97565b8181528381019083850185840285018601891015612a55578687fd5b8694505b83851015612a80578051612a6c81612f48565b835260019490940193918501918501612a59565b50979650505050505050565b60006020808385031215612a9e578182fd5b825167ffffffffffffffff811115612ab4578283fd5b8301601f81018513612ac4578283fd5b8051612ad26127ea82612e97565b8181528381019083850185840285018601891015612aee578687fd5b8694505b83851015612a80578051835260019490940193918501918501612af2565b600060208284031215612b21578081fd5b8151610ca681612f6a565b600060208284031215612b3d578081fd5b5035919050565b60008060408385031215612b56578182fd5b82359150602083013561289b81612f48565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff92831681529116602082015260400190565b6020808252825182820181905260009190848201906040850190845b81811015612bfe57835173ffffffffffffffffffffffffffffffffffffffff1683529284019291840191600101612bcc565b50909695505050505050565b901515815260200190565b60208082526021908201527f4578656375746f7220646964206e6f742072657475726e206f776e657273686960408201527f7000000000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201527f6464726573730000000000000000000000000000000000000000000000000000606082015260800190565b60208082526023908201527f43616c6c6572206973206e6f7420746865206f776e6572206f7220657865637560408201527f746f720000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252603a908201527f43616c6c6572206973206e6f7420746865206f776e6572206f7220617574686f60408201527f72697a65642064697361626c6572206f72206578656375746f72000000000000606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252602e908201527f4578656375746f7220646f65736e27742068617665207468652072696768742060408201527f726967687466756c206f776e6572000000000000000000000000000000000000606082015260800190565b90815260200190565b91825273ffffffffffffffffffffffffffffffffffffffff16602082015260400190565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715612e8f57612e8f612f19565b604052919050565b600067ffffffffffffffff821115612eb157612eb1612f19565b5060209081020190565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612f12577f4e487b710000000000000000000000000000000000000000000000000000000081526011600452602481fd5b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff811681146116a557600080fd5b80151581146116a557600080fdfea2646970667358221220e83b5a1392724be14e6ddc825a0bdbc857abf4c2a62833836c9ccbd901f6719464736f6c63430008010033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101cf5760003560e01c8063715018a611610104578063a154ce82116100a2578063e9c3f77d11610071578063e9c3f77d146103a1578063f19990d7146103b4578063f1ce598e146103c7578063f2fde38b146103da576101cf565b8063a154ce8214610355578063a1fdc45814610368578063a63fc1631461037b578063d2e237291461038e576101cf565b8063840c53bd116100de578063840c53bd1461031f57806385f84ea3146103325780638da5cb5b1461034557806392a427041461034d576101cf565b8063715018a6146102f157806376625515146102f95780637a1a04df1461030c576101cf565b80633238405b11610171578063447d52ba1161014b578063447d52ba146102b05780634d537769146102c35780636a0e76c8146102d65780636b60a09b146102e9576101cf565b80633238405b14610275578063392f5f6414610288578063430ae4691461029d576101cf565b80631135bb7b116101ad5780631135bb7b1461021c57806317b7b61b1461022f57806325398f831461024f5780632be5c6c014610262576101cf565b8063071060a6146101d45780630ba46289146101e95780631023d3e014610207575b600080fd5b6101e76101e2366004612b2c565b6103ed565b005b6101f16104de565b6040516101fe9190612c0a565b60405180910390f35b61020f6105b0565b6040516101fe9190612bb0565b6101e761022a36600461286e565b61061f565b61024261023d366004612b2c565b610750565b6040516101fe9190612e1b565b6101e761025d366004612b44565b610771565b6101f1610270366004612b2c565b61081f565b6101e7610283366004612b44565b610834565b61029061091b565b6040516101fe9190612b68565b6102906102ab366004612836565b61093f565b6101e76102be366004612b44565b610967565b6101e76102d1366004612b44565b610a5b565b6101f16102e4366004612836565b610b05565b610290610cad565b6101e7610cc9565b6101e76103073660046128a6565b610dab565b6101f161031a3660046129c8565b611362565b61024261032d366004612b2c565b611382565b6101f1610340366004612836565b611392565b6102906114d6565b6101f16114f2565b6101e7610363366004612836565b6115bf565b6101e7610376366004612836565b6116a8565b6101e761038936600461299b565b611f2f565b6101f161039c366004612836565b612025565b6102906103af366004612b2c565b61203a565b6101f16103c2366004612b2c565b612062565b6102906103d5366004612b2c565b612077565b6101e76103e8366004612836565b6120ae565b60035460005b808211156104d95760038181548110610435577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000918252602090912001546040517f071060a600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091169063071060a690610494908690600401612e1b565b600060405180830381600087803b1580156104ae57600080fd5b505af11580156104c2573d6000803e3d6000fd5b5050505080806104d190612ebb565b9150506103f3565b505050565b60006105097f0000000000000000000000000000000000000000000000000000000000000000610b05565b60035490915060005b808211156105ab57600060038281548110610556577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905083801561058b575061058b81610b05565b93508361059857506105ab565b50806105a381612ebb565b915050610512565b505090565b6060600380548060200260200160405190810160405280929190818152602001828054801561061557602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff1681526001909101906020018083116105ea575b5050505050905090565b6106276121fc565b73ffffffffffffffffffffffffffffffffffffffff166106456114d6565b73ffffffffffffffffffffffffffffffffffffffff161480610689575061066a6121fc565b60085473ffffffffffffffffffffffffffffffffffffffff9081169116145b6106c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106bf90612ccf565b60405180910390fd5b6040517ff2fde38b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff83169063f2fde38b9061071a908490600401612b68565b600060405180830381600087803b15801561073457600080fd5b505af1158015610748573d6000803e3d6000fd5b505050505050565b6009818154811061076057600080fd5b600091825260209091200154905081565b6107796121fc565b73ffffffffffffffffffffffffffffffffffffffff166107976114d6565b73ffffffffffffffffffffffffffffffffffffffff1614806107db57506107bc6121fc565b60085473ffffffffffffffffffffffffffffffffffffffff9081169116145b610811576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106bf90612ccf565b61081b8282612200565b5050565b60056020526000908152604090205460ff1681565b61083c6121fc565b73ffffffffffffffffffffffffffffffffffffffff1661085a6114d6565b73ffffffffffffffffffffffffffffffffffffffff1614806108ae5750600760006108836121fc565b73ffffffffffffffffffffffffffffffffffffffff16815260208101919091526040016000205460ff165b806108db57506108bc6121fc565b60085473ffffffffffffffffffffffffffffffffffffffff9081169116145b610911576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106bf90612d2c565b61081b8282612332565b7f000000000000000000000000000000000000000000000000000000000000000081565b60066020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b60035460005b80821115610a5557600381815481106109af577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000918252602090912001546040517f447d52ba00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9091169063447d52ba90610a109087908790600401612e24565b600060405180830381600087803b158015610a2a57600080fd5b505af1158015610a3e573d6000803e3d6000fd5b505050508080610a4d90612ebb565b91505061096d565b50505050565b610a636121fc565b73ffffffffffffffffffffffffffffffffffffffff16610a816114d6565b73ffffffffffffffffffffffffffffffffffffffff161480610ac55750610aa66121fc565b60085473ffffffffffffffffffffffffffffffffffffffff9081169116145b610afb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106bf90612ccf565b61081b82826123a6565b6000808273ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610b4e57600080fd5b505afa158015610b62573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b869190612852565b905073ffffffffffffffffffffffffffffffffffffffff8116301480610ca6575073ffffffffffffffffffffffffffffffffffffffff8084166000908152600660205260409020548282169116148015610ca6575073ffffffffffffffffffffffffffffffffffffffff8381166000908152600660209081526040918290205482517f8da5cb5b000000000000000000000000000000000000000000000000000000008152925130949190911692638da5cb5b926004808301939192829003018186803b158015610c5657600080fd5b505afa158015610c6a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c8e9190612852565b73ffffffffffffffffffffffffffffffffffffffff16145b9392505050565b60085473ffffffffffffffffffffffffffffffffffffffff1681565b610cd16121fc565b73ffffffffffffffffffffffffffffffffffffffff16610cef6114d6565b73ffffffffffffffffffffffffffffffffffffffff1614610d3c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106bf90612d89565b60025460405160009173ffffffffffffffffffffffffffffffffffffffff16907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600280547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055565b610db36121fc565b73ffffffffffffffffffffffffffffffffffffffff16610dd16114d6565b73ffffffffffffffffffffffffffffffffffffffff161480610e155750610df66121fc565b60085473ffffffffffffffffffffffffffffffffffffffff9081169116145b610e4b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106bf90612ccf565b6003805460018101825560009182527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b0180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff87161790558351905b80821115610f28576000858281518110610f01577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101519050610f1581886123a6565b5080610f2081612ebb565b915050610ebe565b5050815160005b80821115610f99576000848281518110610f72577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101519050610f868188612200565b5080610f9181612ebb565b915050610f2f565b505060095460005b8082111561106b578573ffffffffffffffffffffffffffffffffffffffff1663071060a660098381548110610fff577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002001546040518263ffffffff1660e01b81526004016110269190612e1b565b600060405180830381600087803b15801561104057600080fd5b505af1158015611054573d6000803e3d6000fd5b50505050808061106390612ebb565b915050610fa1565b5050600a5460005b808211156111d75760005b6003548110156111c4578673ffffffffffffffffffffffffffffffffffffffff1663447d52ba600a84815481106110de577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020015460038481548110611123577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000918252602090912001546040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815261117f929173ffffffffffffffffffffffffffffffffffffffff1690600401612e24565b600060405180830381600087803b15801561119957600080fd5b505af11580156111ad573d6000803e3d6000fd5b5050505080806111bc90612ebb565b91505061107e565b50806111cf81612ebb565b915050611073565b5050805160005b808211156107485782818151811061121f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1663f2fde38b876040518263ffffffff1660e01b815260040161125f9190612b68565b600060405180830381600087803b15801561127957600080fd5b505af115801561128d573d6000803e3d6000fd5b5050505085600660008584815181106112cf577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550808061135a90612ebb565b9150506111de565b600160209081526000928352604080842090915290825290205460ff1681565b600a818154811061076057600080fd5b6000808273ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156113db57600080fd5b505afa1580156113ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114139190612852565b905073ffffffffffffffffffffffffffffffffffffffff811630148061146b575061143c6114d6565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b80610ca6575073ffffffffffffffffffffffffffffffffffffffff8381166000908152600660205260409020541615801590610ca6575073ffffffffffffffffffffffffffffffffffffffff9283166000908152600660205260409020548316921691909114919050565b60025473ffffffffffffffffffffffffffffffffffffffff1690565b600061151d7f0000000000000000000000000000000000000000000000000000000000000000610b05565b60035490915060005b808211156105ab5760006003828154811061156a577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905083801561159f575061159f81611392565b9350836115ac57506105ab565b50806115b781612ebb565b915050611526565b6115c76121fc565b73ffffffffffffffffffffffffffffffffffffffff166115e56114d6565b73ffffffffffffffffffffffffffffffffffffffff16148061163957506007600061160e6121fc565b73ffffffffffffffffffffffffffffffffffffffff16815260208101919091526040016000205460ff165b8061166657506116476121fc565b60085473ffffffffffffffffffffffffffffffffffffffff9081169116145b61169c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106bf90612d2c565b6116a5816124d7565b50565b6116b06121fc565b73ffffffffffffffffffffffffffffffffffffffff166116ce6114d6565b73ffffffffffffffffffffffffffffffffffffffff16148061171257506116f36121fc565b60085473ffffffffffffffffffffffffffffffffffffffff9081169116145b611748576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106bf90612ccf565b60008173ffffffffffffffffffffffffffffffffffffffff166316a45ab76040518163ffffffff1660e01b815260040160006040518083038186803b15801561179057600080fd5b505afa1580156117a4573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526117ea91908101906129f3565b905060005b80825111156119a6576000828281518110611833577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60209081029190910181015173ffffffffffffffffffffffffffffffffffffffff80821660009081526006909352604090922054909250161561190e5773ffffffffffffffffffffffffffffffffffffffff808216600090815260066020526040908190205490517f1135bb7b000000000000000000000000000000000000000000000000000000008152911690631135bb7b906118d79084908890600401612b89565b600060405180830381600087803b1580156118f157600080fd5b505af1158015611905573d6000803e3d6000fd5b50505050611993565b6040517ff2fde38b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82169063f2fde38b90611960908790600401612b68565b600060405180830381600087803b15801561197a57600080fd5b505af115801561198e573d6000803e3d6000fd5b505050505b508061199e81612ebb565b9150506117ef565b5060008273ffffffffffffffffffffffffffffffffffffffff1663cd28fc8f6040518163ffffffff1660e01b815260040160006040518083038186803b1580156119ef57600080fd5b505afa158015611a03573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052611a499190810190612a8c565b905060005b8082511115611ab357611aa1828281518110611a93577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015185612200565b80611aab81612ebb565b915050611a4e565b50600880547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8516908117909155604080517f61461954000000000000000000000000000000000000000000000000000000008152905163614619549160048082019260009290919082900301818387803b158015611b4757600080fd5b505af1158015611b5b573d6000803e3d6000fd5b5050600880547fffffffffffffffffffffffff00000000000000000000000000000000000000001690555050604080517f4865cbc2000000000000000000000000000000000000000000000000000000008152905160009173ffffffffffffffffffffffffffffffffffffffff861691634865cbc291600480820192602092909190829003018186803b158015611bf157600080fd5b505afa158015611c05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c299190612852565b905073ffffffffffffffffffffffffffffffffffffffff8116301480611c815750611c526114d6565b73ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b611cb7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106bf90612dbe565b825160005b80821115611ec4576000858281518110611cff577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015190508373ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b158015611d6657600080fd5b505afa158015611d7a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d9e9190612852565b73ffffffffffffffffffffffffffffffffffffffff1614611deb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106bf90612c15565b73ffffffffffffffffffffffffffffffffffffffff8181166000908152600660205260409020541615611eb15773ffffffffffffffffffffffffffffffffffffffff808216600081815260066020526040908190205490517ff2fde38b000000000000000000000000000000000000000000000000000000008152919263f2fde38b92611e7e9290911690600401612b68565b600060405180830381600087803b158015611e9857600080fd5b505af1158015611eac573d6000803e3d6000fd5b505050505b5080611ebc81612ebb565b915050611cbc565b5050815160005b8082111561074857611f1d848281518110611f0f577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015187612332565b80611f2781612ebb565b915050611ecb565b611f376121fc565b73ffffffffffffffffffffffffffffffffffffffff16611f556114d6565b73ffffffffffffffffffffffffffffffffffffffff161480611f995750611f7a6121fc565b60085473ffffffffffffffffffffffffffffffffffffffff9081169116145b611fcf576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106bf90612ccf565b73ffffffffffffffffffffffffffffffffffffffff91909116600090815260076020526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055565b60076020526000908152604090205460ff1681565b60006020819052908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b60046020526000908152604090205460ff1681565b6003818154811061208757600080fd5b60009182526020909120015473ffffffffffffffffffffffffffffffffffffffff16905081565b6120b66121fc565b73ffffffffffffffffffffffffffffffffffffffff166120d46114d6565b73ffffffffffffffffffffffffffffffffffffffff1614612121576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106bf90612d89565b73ffffffffffffffffffffffffffffffffffffffff811661216e576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106bf90612c72565b60025460405173ffffffffffffffffffffffffffffffffffffffff8084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600280547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b3390565b60008281526005602052604090205460ff1661228257600082815260056020526040812080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001908117909155600a805491820181559091527fc65a7bb8d6351c1cf70c95a316cc6a92839c986682d98bc35f958f4883f9d2a8018290555b6040517f25398f8300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016906325398f83906122f69085908590600401612e24565b600060405180830381600087803b15801561231057600080fd5b505af1158015612324573d6000803e3d6000fd5b5050505061081b8282610967565b6040517f3238405b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690633238405b906122f69085908590600401612e24565b60008281526004602052604090205460ff1661242857600082815260046020526040812080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660019081179091556009805491820181559091527f6e1540171b6c0c960b71a7020d9f60077f6af931a8bbf590da0223dacf75c7af018290555b6040517f4d53776900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690634d5377699061249c9085908590600401612e24565b600060405180830381600087803b1580156124b657600080fd5b505af11580156124ca573d6000803e3d6000fd5b5050505061081b826103ed565b600a5460005b80821115612639577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166393552a3d600a838154811061255b577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b9060005260206000200154856040518363ffffffff1660e01b8152600401612584929190612e24565b60206040518083038186803b15801561259c57600080fd5b505afa1580156125b0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125d49190612b10565b1561262757612627600a8281548110612616577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020015484612332565b8061263181612ebb565b9150506124dd565b505060095460005b808211156104d9578273ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663b4ed0b6d600984815481106126d6577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002001546040518263ffffffff1660e01b81526004016126fd9190612e1b565b60206040518083038186803b15801561271557600080fd5b505afa158015612729573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061274d9190612852565b73ffffffffffffffffffffffffffffffffffffffff1614156127b8576127b8600982815481106127a6577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020015460006123a6565b806127c281612ebb565b915050612641565b600082601f8301126127da578081fd5b813560206127ef6127ea83612e97565b612e48565b828152818101908583018385028701840188101561280b578586fd5b855b858110156128295781358452928401929084019060010161280d565b5090979650505050505050565b600060208284031215612847578081fd5b8135610ca681612f48565b600060208284031215612863578081fd5b8151610ca681612f48565b60008060408385031215612880578081fd5b823561288b81612f48565b9150602083013561289b81612f48565b809150509250929050565b600080600080608085870312156128bb578182fd5b84356128c681612f48565b935060208581013567ffffffffffffffff808211156128e3578485fd5b6128ef89838a016127ca565b95506040880135915080821115612904578485fd5b61291089838a016127ca565b94506060880135915080821115612925578384fd5b508601601f81018813612936578283fd5b80356129446127ea82612e97565b81815283810190838501858402850186018c1015612960578687fd5b8694505b8385101561298b57803561297781612f48565b835260019490940193918501918501612964565b50979a9699509497505050505050565b600080604083850312156129ad578182fd5b82356129b881612f48565b9150602083013561289b81612f6a565b600080604083850312156129da578182fd5b82356129e581612f48565b946020939093013593505050565b60006020808385031215612a05578182fd5b825167ffffffffffffffff811115612a1b578283fd5b8301601f81018513612a2b578283fd5b8051612a396127ea82612e97565b8181528381019083850185840285018601891015612a55578687fd5b8694505b83851015612a80578051612a6c81612f48565b835260019490940193918501918501612a59565b50979650505050505050565b60006020808385031215612a9e578182fd5b825167ffffffffffffffff811115612ab4578283fd5b8301601f81018513612ac4578283fd5b8051612ad26127ea82612e97565b8181528381019083850185840285018601891015612aee578687fd5b8694505b83851015612a80578051835260019490940193918501918501612af2565b600060208284031215612b21578081fd5b8151610ca681612f6a565b600060208284031215612b3d578081fd5b5035919050565b60008060408385031215612b56578182fd5b82359150602083013561289b81612f48565b73ffffffffffffffffffffffffffffffffffffffff91909116815260200190565b73ffffffffffffffffffffffffffffffffffffffff92831681529116602082015260400190565b6020808252825182820181905260009190848201906040850190845b81811015612bfe57835173ffffffffffffffffffffffffffffffffffffffff1683529284019291840191600101612bcc565b50909695505050505050565b901515815260200190565b60208082526021908201527f4578656375746f7220646964206e6f742072657475726e206f776e657273686960408201527f7000000000000000000000000000000000000000000000000000000000000000606082015260800190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201527f6464726573730000000000000000000000000000000000000000000000000000606082015260800190565b60208082526023908201527f43616c6c6572206973206e6f7420746865206f776e6572206f7220657865637560408201527f746f720000000000000000000000000000000000000000000000000000000000606082015260800190565b6020808252603a908201527f43616c6c6572206973206e6f7420746865206f776e6572206f7220617574686f60408201527f72697a65642064697361626c6572206f72206578656375746f72000000000000606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252602e908201527f4578656375746f7220646f65736e27742068617665207468652072696768742060408201527f726967687466756c206f776e6572000000000000000000000000000000000000606082015260800190565b90815260200190565b91825273ffffffffffffffffffffffffffffffffffffffff16602082015260400190565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715612e8f57612e8f612f19565b604052919050565b600067ffffffffffffffff821115612eb157612eb1612f19565b5060209081020190565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415612f12577f4e487b710000000000000000000000000000000000000000000000000000000081526011600452602481fd5b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b73ffffffffffffffffffffffffffffffffffffffff811681146116a557600080fd5b80151581146116a557600080fdfea2646970667358221220e83b5a1392724be14e6ddc825a0bdbc857abf4c2a62833836c9ccbd901f6719464736f6c63430008010033",
  "devdoc": {
    "details": "Provides a single point of reference to verify ownership integrity within our system as well as performing cache invalidation for roles and inter-contract relationships The dependency controller owns the Roles contract and in turn is owned by a multisig wallet (0xEED9D1c6B4cdEcB3af070D85bfd394E7aF179CBd) during beta and will then be transfered to governance https://github.com/marginswap/governance",
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 12289,
        "contract": "contracts/DependencyController.sol:DependencyController",
        "label": "mainCharacterCache",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 12295,
        "contract": "contracts/DependencyController.sol:DependencyController",
        "label": "roleCache",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 381,
        "contract": "contracts/DependencyController.sol:DependencyController",
        "label": "_owner",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 7192,
        "contract": "contracts/DependencyController.sol:DependencyController",
        "label": "managedContracts",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 7196,
        "contract": "contracts/DependencyController.sol:DependencyController",
        "label": "knownCharacters",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 7200,
        "contract": "contracts/DependencyController.sol:DependencyController",
        "label": "knownRoles",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_bool)"
      },
      {
        "astId": 7204,
        "contract": "contracts/DependencyController.sol:DependencyController",
        "label": "delegateOwner",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_address)"
      },
      {
        "astId": 7208,
        "contract": "contracts/DependencyController.sol:DependencyController",
        "label": "disabler",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 7214,
        "contract": "contracts/DependencyController.sol:DependencyController",
        "label": "currentExecutor",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 7217,
        "contract": "contracts/DependencyController.sol:DependencyController",
        "label": "allCharacters",
        "offset": 0,
        "slot": "9",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 7220,
        "contract": "contracts/DependencyController.sol:DependencyController",
        "label": "allRoles",
        "offset": 0,
        "slot": "10",
        "type": "t_array(t_uint256)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}