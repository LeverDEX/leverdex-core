{
  "address": "0x6633D4a53E8227C0060C65f835Ec35F6eA629EE8",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_MFI",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "startingDailyDistributionWithoutDecimals",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_roles",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "MFI",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "accruedReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tranche",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "claimAmount",
          "type": "uint256"
        }
      ],
      "name": "addToClaimAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "allTranches",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "contractionPerMil",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentDailyDistribution",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tranche",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "share",
          "type": "uint256"
        }
      ],
      "name": "initTranche",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastUpdatedDay",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "mainCharacterCache",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "roleCache",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "roles",
      "outputs": [
        {
          "internalType": "contract Roles",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tranche",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "share",
          "type": "uint256"
        }
      ],
      "name": "setTrancheShare",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tranche",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractAmount",
          "type": "uint256"
        }
      ],
      "name": "subtractFromClaimAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "trancheMetadata",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "rewardShare",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "currentDayGains",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "currentDayLosses",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "tomorrowOngoingTotals",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "yesterdayOngoingTotals",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "intraDayGains",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "intraDayLosses",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "intraDayRewardGains",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "intraDayRewardLosses",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "aggregateDailyRewardRateFP",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "yesterdayRewardRateFP",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "trancheShareTotal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "role",
          "type": "uint256"
        }
      ],
      "name": "updateMainCharacterCache",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "role",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "contr",
          "type": "address"
        }
      ],
      "name": "updateRoleCache",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tranche",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "claimant",
          "type": "address"
        }
      ],
      "name": "viewRewardAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "tranches",
          "type": "uint256[]"
        }
      ],
      "name": "withdrawReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "withdrawAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x0c7e76044190f9aad1872bef22ca128198dd9a3cd9df7c7d36721e291e5e8340",
  "receipt": {
    "to": null,
    "from": "0x23292e9BA8434e59E6BAC1907bA7425211c4DE27",
    "contractAddress": "0x6633D4a53E8227C0060C65f835Ec35F6eA629EE8",
    "transactionIndex": 1,
    "gasUsed": "1310890",
    "logsBloom": "0x
    "blockHash": "0x2fccc58fe32dbb72a97efec319b7d2b89bb4aca92e40949c57b1b7b168e7ca72",
    "transactionHash": "0x0c7e76044190f9aad1872bef22ca128198dd9a3cd9df7c7d36721e291e5e8340",
    "logs": [],
    "blockNumber": 24197513,
    "cumulativeGasUsed": "1362892",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xAa4e3edb11AFa93c41db59842b29de64b72E355B",
    4000,
    "0x2d9FEb3a330e43ec3544f7747694109d50f737cb"
  ],
  "solcInputHash": "ad6c8a0d1bde5562945c7f4181925499",
  "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_MFI\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"startingDailyDistributionWithoutDecimals\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_roles\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"MFI\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"accruedReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tranche\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"claimAmount\",\"type\":\"uint256\"}],\"name\":\"addToClaimAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"allTranches\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"contractionPerMil\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentDailyDistribution\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tranche\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"name\":\"initTranche\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdatedDay\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mainCharacterCache\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"roleCache\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"roles\",\"outputs\":[{\"internalType\":\"contract Roles\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tranche\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"share\",\"type\":\"uint256\"}],\"name\":\"setTrancheShare\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tranche\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractAmount\",\"type\":\"uint256\"}],\"name\":\"subtractFromClaimAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"trancheMetadata\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentDayGains\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"currentDayLosses\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"tomorrowOngoingTotals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yesterdayOngoingTotals\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"intraDayGains\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"intraDayLosses\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"intraDayRewardGains\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"intraDayRewardLosses\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"aggregateDailyRewardRateFP\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"yesterdayRewardRateFP\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"trancheShareTotal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"role\",\"type\":\"uint256\"}],\"name\":\"updateMainCharacterCache\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"role\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"contr\",\"type\":\"address\"}],\"name\":\"updateRoleCache\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tranche\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"claimant\",\"type\":\"address\"}],\"name\":\"viewRewardAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"tranches\",\"type\":\"uint256[]\"}],\"name\":\"withdrawReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"withdrawAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"title\":\"Manage distribution of liquidity stake incentives Some efforts have been made to reduce gas cost at claim time and shift gas burden onto those who would want to withdraw\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addToClaimAmount(uint256,address,uint256)\":{\"notice\":\"Start / increase amount of claim\"},\"initTranche(uint256,uint256)\":{\"notice\":\"Initialize tranche\"},\"setTrancheShare(uint256,uint256)\":{\"notice\":\"Set share of tranche\"},\"subtractFromClaimAmount(uint256,address,uint256)\":{\"notice\":\"Decrease amount of claim\"},\"viewRewardAmount(uint256,address)\":{\"notice\":\"Get a view of reward amount\"},\"withdrawReward(uint256[])\":{\"notice\":\"Withdraw current reward amount\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/IncentiveDistribution.sol\":\"IncentiveDistribution\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x1cae4f85f114ff17b90414f5da67365b1d00337abb5bce9bf944eb78a2c0673c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x99f5c21018d796db7833a2100bb0e7411999e248a3c950fb526eee5d2bf47cb7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"contracts/Fund.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"../interfaces/IWETH.sol\\\";\\nimport \\\"./RoleAware.sol\\\";\\n\\n/// @title Manage funding\\ncontract Fund is RoleAware {\\n    using SafeERC20 for IERC20;\\n    /// wrapped ether\\n    address public immutable WETH;\\n\\n    constructor(address _WETH, address _roles) RoleAware(_roles) {\\n        WETH = _WETH;\\n    }\\n\\n    /// Deposit an active token\\n    function deposit(address depositToken, uint256 depositAmount) external {\\n        IERC20(depositToken).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            depositAmount\\n        );\\n    }\\n\\n    /// Deposit token on behalf of `sender`\\n    function depositFor(\\n        address sender,\\n        address depositToken,\\n        uint256 depositAmount\\n    ) external {\\n        require(\\n            isFundTransferer(msg.sender),\\n            \\\"Contract not authorized to deposit for user\\\"\\n        );\\n        IERC20(depositToken).safeTransferFrom(\\n            sender,\\n            address(this),\\n            depositAmount\\n        );\\n    }\\n\\n    /// Deposit to wrapped ether\\n    function depositToWETH() external payable {\\n        IWETH(WETH).deposit{value: msg.value}();\\n    }\\n\\n    // withdrawers role\\n    function withdraw(\\n        address withdrawalToken,\\n        address recipient,\\n        uint256 withdrawalAmount\\n    ) external {\\n        require(\\n            isFundTransferer(msg.sender),\\n            \\\"Contract not authorized to withdraw\\\"\\n        );\\n        IERC20(withdrawalToken).safeTransfer(recipient, withdrawalAmount);\\n    }\\n\\n    // withdrawers role\\n    function withdrawETH(address recipient, uint256 withdrawalAmount) external {\\n        require(isFundTransferer(msg.sender), \\\"Not authorized to withdraw\\\");\\n        IWETH(WETH).withdraw(withdrawalAmount);\\n        Address.sendValue(payable(recipient), withdrawalAmount);\\n    }\\n}\\n\",\"keccak256\":\"0x52f9f08048d3fbc3214259051c0fbfd5e6a6247542deb50c088af3d8aff9ff03\",\"license\":\"BUSL-1.1\"},\"contracts/IncentiveDistribution.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./RoleAware.sol\\\";\\nimport \\\"./Fund.sol\\\";\\n\\nstruct Claim {\\n    uint256 startingRewardRateFP;\\n    uint256 amount;\\n    uint256 intraDayGain;\\n    uint256 intraDayLoss;\\n}\\n\\n/// @title Manage distribution of liquidity stake incentives\\n/// Some efforts have been made to reduce gas cost at claim time\\n/// and shift gas burden onto those who would want to withdraw\\ncontract IncentiveDistribution is RoleAware {\\n    // fixed point number factor\\n    uint256 internal constant FP32 = 2**32;\\n    // the amount of contraction per thousand, per day\\n    // of the overal daily incentive distribution\\n    // https://en.wikipedia.org/wiki/Per_mil\\n    uint256 public constant contractionPerMil = 999;\\n    address public immutable MFI;\\n\\n    constructor(\\n        address _MFI,\\n        uint256 startingDailyDistributionWithoutDecimals,\\n        address _roles\\n    ) RoleAware(_roles) {\\n        MFI = _MFI;\\n        currentDailyDistribution =\\n            startingDailyDistributionWithoutDecimals *\\n            (1 ether);\\n    }\\n\\n    // how much is going to be distributed, contracts every day\\n    uint256 public currentDailyDistribution;\\n\\n    uint256 public trancheShareTotal;\\n    uint256[] public allTranches;\\n\\n    struct TrancheMeta {\\n        // portion of daily distribution per each tranche\\n        uint256 rewardShare;\\n        uint256 currentDayGains;\\n        uint256 currentDayLosses;\\n        uint256 tomorrowOngoingTotals;\\n        uint256 yesterdayOngoingTotals;\\n        // aggregate all the unclaimed intra-days\\n        uint256 intraDayGains;\\n        uint256 intraDayLosses;\\n        uint256 intraDayRewardGains;\\n        uint256 intraDayRewardLosses;\\n        // how much each claim unit would get if they had staked from the dawn of time\\n        // expressed as fixed point number\\n        // claim amounts are expressed relative to this ongoing aggregate\\n        uint256 aggregateDailyRewardRateFP;\\n        uint256 yesterdayRewardRateFP;\\n        mapping(address => Claim) claims;\\n    }\\n\\n    mapping(uint256 => TrancheMeta) public trancheMetadata;\\n\\n    // last updated day\\n    uint256 public lastUpdatedDay;\\n\\n    mapping(address => uint256) public accruedReward;\\n\\n    /// Set share of tranche\\n    function setTrancheShare(uint256 tranche, uint256 share)\\n        external\\n        onlyOwnerExecActivator\\n    {\\n        require(\\n            trancheMetadata[tranche].rewardShare > 0,\\n            \\\"Tranche is not initialized, please initialize first\\\"\\n        );\\n        _setTrancheShare(tranche, share);\\n    }\\n\\n    function _setTrancheShare(uint256 tranche, uint256 share) internal {\\n        TrancheMeta storage tm = trancheMetadata[tranche];\\n\\n        if (share > tm.rewardShare) {\\n            trancheShareTotal += share - tm.rewardShare;\\n        } else {\\n            trancheShareTotal -= tm.rewardShare - share;\\n        }\\n        tm.rewardShare = share;\\n    }\\n\\n    /// Initialize tranche\\n    function initTranche(uint256 tranche, uint256 share)\\n        external\\n        onlyOwnerExecActivator\\n    {\\n        TrancheMeta storage tm = trancheMetadata[tranche];\\n        require(tm.rewardShare == 0, \\\"Tranche already initialized\\\");\\n        _setTrancheShare(tranche, share);\\n\\n        // simply initialize to 1.0\\n        tm.aggregateDailyRewardRateFP = FP32;\\n        allTranches.push(tranche);\\n    }\\n\\n    /// Start / increase amount of claim\\n    function addToClaimAmount(\\n        uint256 tranche,\\n        address recipient,\\n        uint256 claimAmount\\n    ) external {\\n        require(\\n            isIncentiveReporter(msg.sender),\\n            \\\"Contract not authorized to report incentives\\\"\\n        );\\n        if (currentDailyDistribution > 0) {\\n            TrancheMeta storage tm = trancheMetadata[tranche];\\n            Claim storage claim = tm.claims[recipient];\\n\\n            uint256 currentDay =\\n                claimAmount * (1 days - (block.timestamp % (1 days)));\\n\\n            tm.currentDayGains += currentDay;\\n            claim.intraDayGain += currentDay * currentDailyDistribution;\\n\\n            tm.tomorrowOngoingTotals += claimAmount * 1 days;\\n            updateAccruedReward(tm, recipient, claim);\\n\\n            claim.amount += claimAmount * (1 days);\\n        }\\n    }\\n\\n    /// Decrease amount of claim\\n    function subtractFromClaimAmount(\\n        uint256 tranche,\\n        address recipient,\\n        uint256 subtractAmount\\n    ) external {\\n        require(\\n            isIncentiveReporter(msg.sender),\\n            \\\"Contract not authorized to report incentives\\\"\\n        );\\n        uint256 currentDay = subtractAmount * (block.timestamp % (1 days));\\n\\n        TrancheMeta storage tm = trancheMetadata[tranche];\\n        Claim storage claim = tm.claims[recipient];\\n\\n        tm.currentDayLosses += currentDay;\\n        claim.intraDayLoss += currentDay * currentDailyDistribution;\\n\\n        tm.tomorrowOngoingTotals -= subtractAmount * 1 days;\\n\\n        updateAccruedReward(tm, recipient, claim);\\n        claim.amount -= subtractAmount * (1 days);\\n    }\\n\\n    function updateAccruedReward(\\n        TrancheMeta storage tm,\\n        address recipient,\\n        Claim storage claim\\n    ) internal returns (uint256 rewardDelta) {\\n        if (claim.startingRewardRateFP > 0) {\\n            rewardDelta = calcRewardAmount(tm, claim);\\n            accruedReward[recipient] += rewardDelta;\\n        }\\n        // don't reward for current day (approximately)\\n        claim.startingRewardRateFP =\\n            tm.yesterdayRewardRateFP +\\n            tm.aggregateDailyRewardRateFP;\\n    }\\n\\n    /// @dev additional reward accrued since last update\\n    function calcRewardAmount(TrancheMeta storage tm, Claim storage claim)\\n        internal\\n        view\\n        returns (uint256 rewardAmount)\\n    {\\n        uint256 ours = claim.startingRewardRateFP;\\n        uint256 aggregate = tm.aggregateDailyRewardRateFP;\\n        if (aggregate > ours) {\\n            rewardAmount = (claim.amount * (aggregate - ours)) / FP32;\\n        }\\n    }\\n\\n    function applyIntraDay(TrancheMeta storage tm, Claim storage claim)\\n        internal\\n        view\\n        returns (uint256 gainImpact, uint256 lossImpact)\\n    {\\n        uint256 gain = claim.intraDayGain;\\n        uint256 loss = claim.intraDayLoss;\\n\\n        if (gain + loss > 0) {\\n            gainImpact =\\n                (gain * tm.intraDayRewardGains) /\\n                (tm.intraDayGains + 1);\\n            lossImpact =\\n                (loss * tm.intraDayRewardLosses) /\\n                (tm.intraDayLosses + 1);\\n        }\\n    }\\n\\n    /// Get a view of reward amount\\n    function viewRewardAmount(uint256 tranche, address claimant)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        TrancheMeta storage tm = trancheMetadata[tranche];\\n        Claim storage claim = tm.claims[claimant];\\n\\n        uint256 rewardAmount =\\n            accruedReward[claimant] + calcRewardAmount(tm, claim);\\n        (uint256 gainImpact, uint256 lossImpact) = applyIntraDay(tm, claim);\\n\\n        return rewardAmount + gainImpact - lossImpact;\\n    }\\n\\n    /// Withdraw current reward amount\\n    function withdrawReward(uint256[] calldata tranches)\\n        external\\n        returns (uint256 withdrawAmount)\\n    {\\n        require(\\n            isIncentiveReporter(msg.sender),\\n            \\\"Contract not authorized to report incentives\\\"\\n        );\\n\\n        updateDayTotals();\\n\\n        withdrawAmount = accruedReward[msg.sender];\\n        for (uint256 i; tranches.length > i; i++) {\\n            uint256 tranche = tranches[i];\\n\\n            TrancheMeta storage tm = trancheMetadata[tranche];\\n            Claim storage claim = tm.claims[msg.sender];\\n\\n            withdrawAmount += updateAccruedReward(tm, msg.sender, claim);\\n\\n            (uint256 gainImpact, uint256 lossImpact) = applyIntraDay(tm, claim);\\n\\n            withdrawAmount = withdrawAmount + gainImpact - lossImpact;\\n\\n            tm.intraDayGains -= claim.intraDayGain;\\n            tm.intraDayLosses -= claim.intraDayLoss;\\n            tm.intraDayRewardGains -= gainImpact;\\n            tm.intraDayRewardLosses -= lossImpact;\\n\\n            claim.intraDayGain = 0;\\n        }\\n\\n        accruedReward[msg.sender] = 0;\\n\\n        Fund(fund()).withdraw(MFI, msg.sender, withdrawAmount);\\n    }\\n\\n    function updateDayTotals() internal {\\n        uint256 nowDay = block.timestamp / (1 days);\\n        uint256 dayDiff = nowDay - lastUpdatedDay;\\n\\n        // shrink the daily distribution for every day that has passed\\n        for (uint256 i = 0; i < dayDiff; i++) {\\n            _updateTrancheTotals();\\n\\n            currentDailyDistribution =\\n                (currentDailyDistribution * contractionPerMil) /\\n                1000;\\n\\n            lastUpdatedDay += 1;\\n        }\\n    }\\n\\n    function _updateTrancheTotals() internal {\\n        for (uint256 i; allTranches.length > i; i++) {\\n            uint256 tranche = allTranches[i];\\n            TrancheMeta storage tm = trancheMetadata[tranche];\\n\\n            uint256 todayTotal =\\n                tm.yesterdayOngoingTotals +\\n                    tm.currentDayGains -\\n                    tm.currentDayLosses;\\n\\n            uint256 todayRewardRateFP =\\n                (FP32 * (currentDailyDistribution * tm.rewardShare)) /\\n                    trancheShareTotal /\\n                    todayTotal;\\n\\n            tm.yesterdayRewardRateFP = todayRewardRateFP;\\n\\n            tm.aggregateDailyRewardRateFP += todayRewardRateFP;\\n\\n            tm.intraDayGains += tm.currentDayGains * currentDailyDistribution;\\n\\n            tm.intraDayLosses += tm.currentDayLosses * currentDailyDistribution;\\n\\n            tm.intraDayRewardGains +=\\n                (tm.currentDayGains * todayRewardRateFP) /\\n                FP32;\\n\\n            tm.intraDayRewardLosses +=\\n                (tm.currentDayLosses * todayRewardRateFP) /\\n                FP32;\\n\\n            tm.yesterdayOngoingTotals = tm.tomorrowOngoingTotals;\\n            tm.currentDayGains = 0;\\n            tm.currentDayLosses = 0;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xe13cb7f4a9cb6f63985270c1c238281a227f2714851cf27e03ca6f1fdc1ed3ca\",\"license\":\"BUSL-1.1\"},\"contracts/RoleAware.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Roles.sol\\\";\\n\\n/// @title Role management behavior\\n/// Main characters are for service discovery\\n/// Whereas roles are for access control\\ncontract RoleAware {\\n    Roles public immutable roles;\\n    mapping(uint256 => address) public mainCharacterCache;\\n    mapping(address => mapping(uint256 => bool)) public roleCache;\\n\\n    constructor(address _roles) {\\n        require(_roles != address(0), \\\"Please provide valid roles address\\\");\\n        roles = Roles(_roles);\\n    }\\n\\n    modifier noIntermediary() {\\n        require(\\n            msg.sender == tx.origin,\\n            \\\"Currently no intermediaries allowed for this function call\\\"\\n        );\\n        _;\\n    }\\n\\n    // @dev Throws if called by any account other than the owner or executor\\n    modifier onlyOwnerExec() {\\n        require(\\n            owner() == msg.sender || executor() == msg.sender,\\n            \\\"Roles: caller is not the owner\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyOwnerExecDisabler() {\\n        require(\\n            owner() == msg.sender ||\\n                executor() == msg.sender ||\\n                disabler() == msg.sender,\\n            \\\"Caller is not the owner, executor or authorized disabler\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyOwnerExecActivator() {\\n        require(\\n            owner() == msg.sender ||\\n                executor() == msg.sender ||\\n                isTokenActivator(msg.sender),\\n            \\\"Caller is not the owner, executor or authorized activator\\\"\\n        );\\n        _;\\n    }\\n\\n    function updateRoleCache(uint256 role, address contr) public virtual {\\n        roleCache[contr][role] = roles.getRole(role, contr);\\n    }\\n\\n    function updateMainCharacterCache(uint256 role) public virtual {\\n        mainCharacterCache[role] = roles.mainCharacters(role);\\n    }\\n\\n    function owner() internal view returns (address) {\\n        return roles.owner();\\n    }\\n\\n    function executor() internal returns (address) {\\n        return roles.executor();\\n    }\\n\\n    function disabler() internal view returns (address) {\\n        return mainCharacterCache[DISABLER];\\n    }\\n\\n    function fund() internal view returns (address) {\\n        return mainCharacterCache[FUND];\\n    }\\n\\n    function lending() internal view returns (address) {\\n        return mainCharacterCache[LENDING];\\n    }\\n\\n    function marginRouter() internal view returns (address) {\\n        return mainCharacterCache[MARGIN_ROUTER];\\n    }\\n\\n    function crossMarginTrading() internal view returns (address) {\\n        return mainCharacterCache[CROSS_MARGIN_TRADING];\\n    }\\n\\n    function feeController() internal view returns (address) {\\n        return mainCharacterCache[FEE_CONTROLLER];\\n    }\\n\\n    function price() internal view returns (address) {\\n        return mainCharacterCache[PRICE_CONTROLLER];\\n    }\\n\\n    function admin() internal view returns (address) {\\n        return mainCharacterCache[ADMIN];\\n    }\\n\\n    function incentiveDistributor() internal view returns (address) {\\n        return mainCharacterCache[INCENTIVE_DISTRIBUTION];\\n    }\\n\\n    function tokenAdmin() internal view returns (address) {\\n        return mainCharacterCache[TOKEN_ADMIN];\\n    }\\n\\n    function isBorrower(address contr) internal view returns (bool) {\\n        return roleCache[contr][BORROWER];\\n    }\\n\\n    function isFundTransferer(address contr) internal view returns (bool) {\\n        return roleCache[contr][FUND_TRANSFERER];\\n    }\\n\\n    function isMarginTrader(address contr) internal view returns (bool) {\\n        return roleCache[contr][MARGIN_TRADER];\\n    }\\n\\n    function isFeeSource(address contr) internal view returns (bool) {\\n        return roleCache[contr][FEE_SOURCE];\\n    }\\n\\n    function isMarginCaller(address contr) internal view returns (bool) {\\n        return roleCache[contr][MARGIN_CALLER];\\n    }\\n\\n    function isLiquidator(address contr) internal view returns (bool) {\\n        return roleCache[contr][LIQUIDATOR];\\n    }\\n\\n    function isAuthorizedFundTrader(address contr)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return roleCache[contr][AUTHORIZED_FUND_TRADER];\\n    }\\n\\n    function isIncentiveReporter(address contr) internal view returns (bool) {\\n        return roleCache[contr][INCENTIVE_REPORTER];\\n    }\\n\\n    function isTokenActivator(address contr) internal view returns (bool) {\\n        return roleCache[contr][TOKEN_ACTIVATOR];\\n    }\\n\\n    function isStakePenalizer(address contr) internal view returns (bool) {\\n        return roles.getRole(STAKE_PENALIZER, contr);\\n    }\\n}\\n\",\"keccak256\":\"0xc3fbdad2d0bc97eeb80bea6a4f40cf6059e1cca3de08db5f6522bbdbfda02206\",\"license\":\"BUSL-1.1\"},\"contracts/Roles.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../interfaces/IDependencyController.sol\\\";\\n\\n// we chose not to go with an enum\\n// to make this list easy to extend\\nuint256 constant FUND_TRANSFERER = 1;\\nuint256 constant MARGIN_CALLER = 2;\\nuint256 constant BORROWER = 3;\\nuint256 constant MARGIN_TRADER = 4;\\nuint256 constant FEE_SOURCE = 5;\\nuint256 constant LIQUIDATOR = 6;\\nuint256 constant AUTHORIZED_FUND_TRADER = 7;\\nuint256 constant INCENTIVE_REPORTER = 8;\\nuint256 constant TOKEN_ACTIVATOR = 9;\\nuint256 constant STAKE_PENALIZER = 10;\\n\\nuint256 constant FUND = 101;\\nuint256 constant LENDING = 102;\\nuint256 constant MARGIN_ROUTER = 103;\\nuint256 constant CROSS_MARGIN_TRADING = 104;\\nuint256 constant FEE_CONTROLLER = 105;\\nuint256 constant PRICE_CONTROLLER = 106;\\nuint256 constant ADMIN = 107;\\nuint256 constant INCENTIVE_DISTRIBUTION = 108;\\nuint256 constant TOKEN_ADMIN = 109;\\n\\nuint256 constant DISABLER = 1001;\\nuint256 constant DEPENDENCY_CONTROLLER = 1002;\\n\\n/// @title Manage permissions of contracts and ownership of everything\\n/// owned by a multisig wallet (0xEED9D1c6B4cdEcB3af070D85bfd394E7aF179CBd) during\\n/// beta and will then be transfered to governance\\n/// https://github.com/marginswap/governance\\ncontract Roles is Ownable {\\n    mapping(address => mapping(uint256 => bool)) public roles;\\n    mapping(uint256 => address) public mainCharacters;\\n\\n    constructor() Ownable() {\\n        // token activation from the get-go\\n        roles[msg.sender][TOKEN_ACTIVATOR] = true;\\n    }\\n\\n    /// @dev Throws if called by any account other than the owner.\\n    modifier onlyOwnerExecDepController() {\\n        require(\\n            owner() == msg.sender ||\\n                executor() == msg.sender ||\\n                mainCharacters[DEPENDENCY_CONTROLLER] == msg.sender,\\n            \\\"Roles: caller is not the owner\\\"\\n        );\\n        _;\\n    }\\n\\n    function giveRole(uint256 role, address actor)\\n        external\\n        onlyOwnerExecDepController\\n    {\\n        roles[actor][role] = true;\\n    }\\n\\n    function removeRole(uint256 role, address actor)\\n        external\\n        onlyOwnerExecDepController\\n    {\\n        roles[actor][role] = false;\\n    }\\n\\n    function setMainCharacter(uint256 role, address actor)\\n        external\\n        onlyOwnerExecDepController\\n    {\\n        mainCharacters[role] = actor;\\n    }\\n\\n    function getRole(uint256 role, address contr) external view returns (bool) {\\n        return roles[contr][role];\\n    }\\n\\n    /// @dev current executor\\n    function executor() public returns (address exec) {\\n        address depController = mainCharacters[DEPENDENCY_CONTROLLER];\\n        if (depController != address(0)) {\\n            exec = IDependencyController(depController).currentExecutor();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9e79bffa78d2e02375f4ea3aae3d58388299fda9b0223555730302e1656090fd\",\"license\":\"BUSL-1.1\"},\"interfaces/IDependencyController.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\ninterface IDependencyController {\\n    function currentExecutor() external returns (address);\\n}\\n\",\"keccak256\":\"0xc65a455a81ab4bc8e0737d03691c159f28bfd6885ef8b99ddd8dec558ccfeb32\",\"license\":\"BUSL-1.1\"},\"interfaces/IWETH.sol\":{\"content\":\"pragma solidity >=0.5.0;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function withdraw(uint256) external;\\n}\\n\",\"keccak256\":\"0xf85de70a597a9f21052bd1ad25c755cda197102f4aebdb3c3c20f2405bd7442b\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b5060405162001804380380620018048339810160408190526200003491620000f4565b806001600160a01b0381166200009b5760405162461bcd60e51b815260206004820152602260248201527f506c656173652070726f766964652076616c696420726f6c6573206164647265604482015261737360f01b606482015260840160405180910390fd5b6001600160601b0319606091821b81166080529084901b1660a052620000ca82670de0b6b3a764000062000134565b6002555062000160915050565b80516001600160a01b0381168114620000ef57600080fd5b919050565b60008060006060848603121562000109578283fd5b6200011484620000d7565b9250602084015191506200012b60408501620000d7565b90509250925092565b60008160001904831182151516156200015b57634e487b7160e01b81526011600452602481fd5b500290565b60805160601c60a05160601c611655620001af600039600081816103c00152610e2901526000818161028d015281816104110152818161080001528181610ec70152610f5f01526116556000f3fe608060405234801561001057600080fd5b50600436106101515760003560e01c80636138c248116100cd578063d1e8462111610081578063db38342311610066578063db3834231461037f578063e9c3f77d14610392578063ed29c12b146103bb57610151565b8063d1e8462114610363578063d5d97e781461037657610151565b8063678337f8116100b2578063678337f8146103095780637a1a04df14610312578063c6c9faa11461035057610151565b80636138c248146102ed578063614e3aed1461030057610151565b80632908244711610124578063392f5f6411610109578063392f5f6414610288578063447d52ba146102c75780635a668956146102da57610151565b806329082447146102625780632b5de2861461027557610151565b80630392991514610156578063071060a61461021657806317eef6f31461022b578063189212f014610242575b600080fd5b6101be6101643660046114ae565b600560205280600052604060002060009150905080600001549080600101549080600201549080600301549080600401549080600501549080600601549080600701549080600801549080600901549080600a015490508b565b604080519b8c5260208c019a909a52988a01979097526060890195909552608088019390935260a087019190915260c086015260e0850152610100840152610120830152610140820152610160015b60405180910390f35b6102296102243660046114ae565b6103e2565b005b61023460025481565b60405190815260200161020d565b6102346102503660046113b4565b60076020526000908152604090205481565b61022961027036600461152c565b6104d9565b6102296102833660046114f5565b61064c565b6102af7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161020d565b6102296102d53660046114c6565b6107c1565b6102296102e836600461152c565b6108b2565b6102346102fb3660046114c6565b610a06565b6102346103e781565b61023460035481565b6103406103203660046113f3565b600160209081526000928352604080842090915290825290205460ff1681565b604051901515815260200161020d565b61022961035e3660046114f5565b610a8f565b61023461037136600461141e565b610be6565b61023460065481565b61023461038d3660046114ae565b610ea2565b6102af6103a03660046114ae565b6000602081905290815260409020546001600160a01b031681565b6102af7f000000000000000000000000000000000000000000000000000000000000000081565b6040517fb4ed0b6d000000000000000000000000000000000000000000000000000000008152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063b4ed0b6d9060240160206040518083038186803b15801561045b57600080fd5b505afa15801561046f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061049391906113d7565b60009182526020829052604090912080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03909216919091179055565b336104e2610ec3565b6001600160a01b031614806105065750336104fb610f5b565b6001600160a01b0316145b8061052c57503360009081526001602090815260408083206009845290915290205460ff165b6105a35760405162461bcd60e51b815260206004820152603960248201527f43616c6c6572206973206e6f7420746865206f776e65722c206578656375746f60448201527f72206f7220617574686f72697a656420616374697661746f720000000000000060648201526084015b60405180910390fd5b60008281526005602052604090208054156106005760405162461bcd60e51b815260206004820152601b60248201527f5472616e63686520616c726561647920696e697469616c697a65640000000000604482015260640161059a565b61060a8383610fcc565b64010000000060099091015550600480546001810182556000919091527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0155565b3360009081526001602090815260408083206008845290915290205460ff166106cc5760405162461bcd60e51b815260206004820152602c60248201527f436f6e7472616374206e6f7420617574686f72697a656420746f207265706f7260448201526b7420696e63656e746976657360a01b606482015260840161059a565b600254156107bc5760008381526005602090815260408083206001600160a01b0386168452600b81019092528220909161070962015180426115ca565b6107169062015180611598565b6107209085611579565b905080836001016000828254610736919061154d565b90915550506002546107489082611579565b82600201600082825461075b919061154d565b9091555061076e90508462015180611579565b836003016000828254610781919061154d565b909155506107929050838684611033565b506107a08462015180611579565b8260010160008282546107b3919061154d565b90915550505050505b505050565b6040517f93552a3d000000000000000000000000000000000000000000000000000000008152600481018390526001600160a01b0382811660248301527f000000000000000000000000000000000000000000000000000000000000000016906393552a3d9060440160206040518083038186803b15801561084257600080fd5b505afa158015610856573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061087a919061148e565b6001600160a01b0391909116600090815260016020908152604080832094835293905291909120805460ff1916911515919091179055565b336108bb610ec3565b6001600160a01b031614806108df5750336108d4610f5b565b6001600160a01b0316145b8061090557503360009081526001602090815260408083206009845290915290205460ff165b6109775760405162461bcd60e51b815260206004820152603960248201527f43616c6c6572206973206e6f7420746865206f776e65722c206578656375746f60448201527f72206f7220617574686f72697a656420616374697661746f7200000000000000606482015260840161059a565b6000828152600560205260409020546109f85760405162461bcd60e51b815260206004820152603360248201527f5472616e636865206973206e6f7420696e697469616c697a65642c20706c656160448201527f736520696e697469616c697a6520666972737400000000000000000000000000606482015260840161059a565b610a028282610fcc565b5050565b60008281526005602090815260408083206001600160a01b0385168452600b8101909252822082610a378383611097565b6001600160a01b038616600090815260076020526040902054610a5a919061154d565b9050600080610a6985856110de565b909250905080610a79838561154d565b610a839190611598565b98975050505050505050565b3360009081526001602090815260408083206008845290915290205460ff16610b0f5760405162461bcd60e51b815260206004820152602c60248201527f436f6e7472616374206e6f7420617574686f72697a656420746f207265706f7260448201526b7420696e63656e746976657360a01b606482015260840161059a565b6000610b1e62015180426115ca565b610b289083611579565b60008581526005602090815260408083206001600160a01b0388168452600b8101909252822060028201805494955091939092859291610b6990849061154d565b9091555050600254610b7b9084611579565b816003016000828254610b8e919061154d565b90915550610ba190508462015180611579565b826003016000828254610bb49190611598565b90915550610bc59050828683611033565b50610bd38462015180611579565b8160010160008282546107b39190611598565b3360009081526001602090815260408083206008845290915281205460ff16610c665760405162461bcd60e51b815260206004820152602c60248201527f436f6e7472616374206e6f7420617574686f72697a656420746f207265706f7260448201526b7420696e63656e746976657360a01b606482015260840161059a565b610c6e61115f565b5033600090815260076020526040812054905b80831115610dad576000848483818110610cab57634e487b7160e01b600052603260045260246000fd5b60209081029290920135600081815260058452604080822033808452600b8201909652912091945092909150610ce390839083611033565b610ced908661154d565b9450600080610cfc84846110de565b909250905080610d0c838961154d565b610d169190611598565b96508260020154846005016000828254610d309190611598565b90915550506003830154600685018054600090610d4e908490611598565b9250508190555081846007016000828254610d699190611598565b9250508190555080846008016000828254610d849190611598565b925050819055506000836002018190555050505050508080610da5906115af565b915050610c81565b5033600090815260076020526040812055610df9606560009081526020527f4a7203f705e51df4a56139a9b86b4a0970bed7ab7a3446eaffe2289989c1645c546001600160a01b031690565b6040517fd9caed120000000000000000000000000000000000000000000000000000000081526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600483015233602483015260448201849052919091169063d9caed1290606401600060405180830381600087803b158015610e8457600080fd5b505af1158015610e98573d6000803e3d6000fd5b5050505092915050565b60048181548110610eb257600080fd5b600091825260209091200154905081565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610f1e57600080fd5b505afa158015610f32573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f5691906113d7565b905090565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c34c08e56040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610fb857600080fd5b505af1158015610f32573d6000803e3d6000fd5b6000828152600560205260409020805482111561100b578054610fef9083611598565b60036000828254611000919061154d565b9091555061102f9050565b8054611018908390611598565b600360008282546110299190611598565b90915550505b5550565b80546000901561107a576110478483611097565b6001600160a01b03841660009081526007602052604081208054929350839290919061107490849061154d565b90915550505b836009015484600a015461108e919061154d565b90915592915050565b8054600983015460009190818111156110d6576401000000006110ba8383611598565b85600101546110c99190611579565b6110d39190611565565b92505b505092915050565b600281015460038201546000918291826110f8828461154d565b111561115657600586015461110e90600161154d565b600787015461111d9084611579565b6111279190611565565b93508560060154600161113a919061154d565b60088701546111499083611579565b6111539190611565565b92505b50509250929050565b600061116e6201518042611565565b90506000600654826111809190611598565b905060005b818110156107bc576111956111e3565b6103e86103e76002546111a89190611579565b6111b29190611565565b6002819055506001600660008282546111cb919061154d565b909155508190506111db816115af565b915050611185565b60005b6004548110156113b15760006004828154811061121357634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905060006005600083815260200190815260200160002090506000816002015482600101548360040154611252919061154d565b61125c9190611598565b905060008160035484600001546002546112769190611579565b61128590640100000000611579565b61128f9190611565565b6112999190611565565b90508083600a0181905550808360090160008282546112b8919061154d565b909155505060025460018401546112cf9190611579565b8360050160008282546112e2919061154d565b909155505060028054908401546112f99190611579565b83600601600082825461130c919061154d565b9091555050600183015464010000000090611328908390611579565b6113329190611565565b836007016000828254611345919061154d565b9091555050600283015464010000000090611361908390611579565b61136b9190611565565b83600801600082825461137e919061154d565b909155505050600382015460048301555060006001820181905560029091015550806113a9816115af565b9150506111e6565b50565b6000602082840312156113c5578081fd5b81356113d08161160a565b9392505050565b6000602082840312156113e8578081fd5b81516113d08161160a565b60008060408385031215611405578081fd5b82356114108161160a565b946020939093013593505050565b60008060208385031215611430578182fd5b823567ffffffffffffffff80821115611447578384fd5b818501915085601f83011261145a578384fd5b813581811115611468578485fd5b8660208260051b850101111561147c578485fd5b60209290920196919550909350505050565b60006020828403121561149f578081fd5b815180151581146113d0578182fd5b6000602082840312156114bf578081fd5b5035919050565b600080604083850312156114d8578182fd5b8235915060208301356114ea8161160a565b809150509250929050565b600080600060608486031215611509578081fd5b83359250602084013561151b8161160a565b929592945050506040919091013590565b6000806040838503121561153e578182fd5b50508035926020909101359150565b60008219821115611560576115606115de565b500190565b600082611574576115746115f4565b500490565b6000816000190483118215151615611593576115936115de565b500290565b6000828210156115aa576115aa6115de565b500390565b60006000198214156115c3576115c36115de565b5060010190565b6000826115d9576115d96115f4565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b6001600160a01b03811681146113b157600080fdfea264697066735822122068d00f3a326f996fab82ce00ac4142971c6849518e37630fe2cccb1c28ca83ea64736f6c63430008030033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101515760003560e01c80636138c248116100cd578063d1e8462111610081578063db38342311610066578063db3834231461037f578063e9c3f77d14610392578063ed29c12b146103bb57610151565b8063d1e8462114610363578063d5d97e781461037657610151565b8063678337f8116100b2578063678337f8146103095780637a1a04df14610312578063c6c9faa11461035057610151565b80636138c248146102ed578063614e3aed1461030057610151565b80632908244711610124578063392f5f6411610109578063392f5f6414610288578063447d52ba146102c75780635a668956146102da57610151565b806329082447146102625780632b5de2861461027557610151565b80630392991514610156578063071060a61461021657806317eef6f31461022b578063189212f014610242575b600080fd5b6101be6101643660046114ae565b600560205280600052604060002060009150905080600001549080600101549080600201549080600301549080600401549080600501549080600601549080600701549080600801549080600901549080600a015490508b565b604080519b8c5260208c019a909a52988a01979097526060890195909552608088019390935260a087019190915260c086015260e0850152610100840152610120830152610140820152610160015b60405180910390f35b6102296102243660046114ae565b6103e2565b005b61023460025481565b60405190815260200161020d565b6102346102503660046113b4565b60076020526000908152604090205481565b61022961027036600461152c565b6104d9565b6102296102833660046114f5565b61064c565b6102af7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b03909116815260200161020d565b6102296102d53660046114c6565b6107c1565b6102296102e836600461152c565b6108b2565b6102346102fb3660046114c6565b610a06565b6102346103e781565b61023460035481565b6103406103203660046113f3565b600160209081526000928352604080842090915290825290205460ff1681565b604051901515815260200161020d565b61022961035e3660046114f5565b610a8f565b61023461037136600461141e565b610be6565b61023460065481565b61023461038d3660046114ae565b610ea2565b6102af6103a03660046114ae565b6000602081905290815260409020546001600160a01b031681565b6102af7f000000000000000000000000000000000000000000000000000000000000000081565b6040517fb4ed0b6d000000000000000000000000000000000000000000000000000000008152600481018290527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063b4ed0b6d9060240160206040518083038186803b15801561045b57600080fd5b505afa15801561046f573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061049391906113d7565b60009182526020829052604090912080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b03909216919091179055565b336104e2610ec3565b6001600160a01b031614806105065750336104fb610f5b565b6001600160a01b0316145b8061052c57503360009081526001602090815260408083206009845290915290205460ff165b6105a35760405162461bcd60e51b815260206004820152603960248201527f43616c6c6572206973206e6f7420746865206f776e65722c206578656375746f60448201527f72206f7220617574686f72697a656420616374697661746f720000000000000060648201526084015b60405180910390fd5b60008281526005602052604090208054156106005760405162461bcd60e51b815260206004820152601b60248201527f5472616e63686520616c726561647920696e697469616c697a65640000000000604482015260640161059a565b61060a8383610fcc565b64010000000060099091015550600480546001810182556000919091527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b0155565b3360009081526001602090815260408083206008845290915290205460ff166106cc5760405162461bcd60e51b815260206004820152602c60248201527f436f6e7472616374206e6f7420617574686f72697a656420746f207265706f7260448201526b7420696e63656e746976657360a01b606482015260840161059a565b600254156107bc5760008381526005602090815260408083206001600160a01b0386168452600b81019092528220909161070962015180426115ca565b6107169062015180611598565b6107209085611579565b905080836001016000828254610736919061154d565b90915550506002546107489082611579565b82600201600082825461075b919061154d565b9091555061076e90508462015180611579565b836003016000828254610781919061154d565b909155506107929050838684611033565b506107a08462015180611579565b8260010160008282546107b3919061154d565b90915550505050505b505050565b6040517f93552a3d000000000000000000000000000000000000000000000000000000008152600481018390526001600160a01b0382811660248301527f000000000000000000000000000000000000000000000000000000000000000016906393552a3d9060440160206040518083038186803b15801561084257600080fd5b505afa158015610856573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061087a919061148e565b6001600160a01b0391909116600090815260016020908152604080832094835293905291909120805460ff1916911515919091179055565b336108bb610ec3565b6001600160a01b031614806108df5750336108d4610f5b565b6001600160a01b0316145b8061090557503360009081526001602090815260408083206009845290915290205460ff165b6109775760405162461bcd60e51b815260206004820152603960248201527f43616c6c6572206973206e6f7420746865206f776e65722c206578656375746f60448201527f72206f7220617574686f72697a656420616374697661746f7200000000000000606482015260840161059a565b6000828152600560205260409020546109f85760405162461bcd60e51b815260206004820152603360248201527f5472616e636865206973206e6f7420696e697469616c697a65642c20706c656160448201527f736520696e697469616c697a6520666972737400000000000000000000000000606482015260840161059a565b610a028282610fcc565b5050565b60008281526005602090815260408083206001600160a01b0385168452600b8101909252822082610a378383611097565b6001600160a01b038616600090815260076020526040902054610a5a919061154d565b9050600080610a6985856110de565b909250905080610a79838561154d565b610a839190611598565b98975050505050505050565b3360009081526001602090815260408083206008845290915290205460ff16610b0f5760405162461bcd60e51b815260206004820152602c60248201527f436f6e7472616374206e6f7420617574686f72697a656420746f207265706f7260448201526b7420696e63656e746976657360a01b606482015260840161059a565b6000610b1e62015180426115ca565b610b289083611579565b60008581526005602090815260408083206001600160a01b0388168452600b8101909252822060028201805494955091939092859291610b6990849061154d565b9091555050600254610b7b9084611579565b816003016000828254610b8e919061154d565b90915550610ba190508462015180611579565b826003016000828254610bb49190611598565b90915550610bc59050828683611033565b50610bd38462015180611579565b8160010160008282546107b39190611598565b3360009081526001602090815260408083206008845290915281205460ff16610c665760405162461bcd60e51b815260206004820152602c60248201527f436f6e7472616374206e6f7420617574686f72697a656420746f207265706f7260448201526b7420696e63656e746976657360a01b606482015260840161059a565b610c6e61115f565b5033600090815260076020526040812054905b80831115610dad576000848483818110610cab57634e487b7160e01b600052603260045260246000fd5b60209081029290920135600081815260058452604080822033808452600b8201909652912091945092909150610ce390839083611033565b610ced908661154d565b9450600080610cfc84846110de565b909250905080610d0c838961154d565b610d169190611598565b96508260020154846005016000828254610d309190611598565b90915550506003830154600685018054600090610d4e908490611598565b9250508190555081846007016000828254610d699190611598565b9250508190555080846008016000828254610d849190611598565b925050819055506000836002018190555050505050508080610da5906115af565b915050610c81565b5033600090815260076020526040812055610df9606560009081526020527f4a7203f705e51df4a56139a9b86b4a0970bed7ab7a3446eaffe2289989c1645c546001600160a01b031690565b6040517fd9caed120000000000000000000000000000000000000000000000000000000081526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116600483015233602483015260448201849052919091169063d9caed1290606401600060405180830381600087803b158015610e8457600080fd5b505af1158015610e98573d6000803e3d6000fd5b5050505092915050565b60048181548110610eb257600080fd5b600091825260209091200154905081565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b158015610f1e57600080fd5b505afa158015610f32573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f5691906113d7565b905090565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c34c08e56040518163ffffffff1660e01b8152600401602060405180830381600087803b158015610fb857600080fd5b505af1158015610f32573d6000803e3d6000fd5b6000828152600560205260409020805482111561100b578054610fef9083611598565b60036000828254611000919061154d565b9091555061102f9050565b8054611018908390611598565b600360008282546110299190611598565b90915550505b5550565b80546000901561107a576110478483611097565b6001600160a01b03841660009081526007602052604081208054929350839290919061107490849061154d565b90915550505b836009015484600a015461108e919061154d565b90915592915050565b8054600983015460009190818111156110d6576401000000006110ba8383611598565b85600101546110c99190611579565b6110d39190611565565b92505b505092915050565b600281015460038201546000918291826110f8828461154d565b111561115657600586015461110e90600161154d565b600787015461111d9084611579565b6111279190611565565b93508560060154600161113a919061154d565b60088701546111499083611579565b6111539190611565565b92505b50509250929050565b600061116e6201518042611565565b90506000600654826111809190611598565b905060005b818110156107bc576111956111e3565b6103e86103e76002546111a89190611579565b6111b29190611565565b6002819055506001600660008282546111cb919061154d565b909155508190506111db816115af565b915050611185565b60005b6004548110156113b15760006004828154811061121357634e487b7160e01b600052603260045260246000fd5b9060005260206000200154905060006005600083815260200190815260200160002090506000816002015482600101548360040154611252919061154d565b61125c9190611598565b905060008160035484600001546002546112769190611579565b61128590640100000000611579565b61128f9190611565565b6112999190611565565b90508083600a0181905550808360090160008282546112b8919061154d565b909155505060025460018401546112cf9190611579565b8360050160008282546112e2919061154d565b909155505060028054908401546112f99190611579565b83600601600082825461130c919061154d565b9091555050600183015464010000000090611328908390611579565b6113329190611565565b836007016000828254611345919061154d565b9091555050600283015464010000000090611361908390611579565b61136b9190611565565b83600801600082825461137e919061154d565b909155505050600382015460048301555060006001820181905560029091015550806113a9816115af565b9150506111e6565b50565b6000602082840312156113c5578081fd5b81356113d08161160a565b9392505050565b6000602082840312156113e8578081fd5b81516113d08161160a565b60008060408385031215611405578081fd5b82356114108161160a565b946020939093013593505050565b60008060208385031215611430578182fd5b823567ffffffffffffffff80821115611447578384fd5b818501915085601f83011261145a578384fd5b813581811115611468578485fd5b8660208260051b850101111561147c578485fd5b60209290920196919550909350505050565b60006020828403121561149f578081fd5b815180151581146113d0578182fd5b6000602082840312156114bf578081fd5b5035919050565b600080604083850312156114d8578182fd5b8235915060208301356114ea8161160a565b809150509250929050565b600080600060608486031215611509578081fd5b83359250602084013561151b8161160a565b929592945050506040919091013590565b6000806040838503121561153e578182fd5b50508035926020909101359150565b60008219821115611560576115606115de565b500190565b600082611574576115746115f4565b500490565b6000816000190483118215151615611593576115936115de565b500290565b6000828210156115aa576115aa6115de565b500390565b60006000198214156115c3576115c36115de565b5060010190565b6000826115d9576115d96115f4565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b6001600160a01b03811681146113b157600080fdfea264697066735822122068d00f3a326f996fab82ce00ac4142971c6849518e37630fe2cccb1c28ca83ea64736f6c63430008030033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "title": "Manage distribution of liquidity stake incentives Some efforts have been made to reduce gas cost at claim time and shift gas burden onto those who would want to withdraw",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addToClaimAmount(uint256,address,uint256)": {
        "notice": "Start / increase amount of claim"
      },
      "initTranche(uint256,uint256)": {
        "notice": "Initialize tranche"
      },
      "setTrancheShare(uint256,uint256)": {
        "notice": "Set share of tranche"
      },
      "subtractFromClaimAmount(uint256,address,uint256)": {
        "notice": "Decrease amount of claim"
      },
      "viewRewardAmount(uint256,address)": {
        "notice": "Get a view of reward amount"
      },
      "withdrawReward(uint256[])": {
        "notice": "Withdraw current reward amount"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 11625,
        "contract": "contracts/IncentiveDistribution.sol:IncentiveDistribution",
        "label": "mainCharacterCache",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 11631,
        "contract": "contracts/IncentiveDistribution.sol:IncentiveDistribution",
        "label": "roleCache",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 6617,
        "contract": "contracts/IncentiveDistribution.sol:IncentiveDistribution",
        "label": "currentDailyDistribution",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 6619,
        "contract": "contracts/IncentiveDistribution.sol:IncentiveDistribution",
        "label": "trancheShareTotal",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 6622,
        "contract": "contracts/IncentiveDistribution.sol:IncentiveDistribution",
        "label": "allTranches",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 6655,
        "contract": "contracts/IncentiveDistribution.sol:IncentiveDistribution",
        "label": "trancheMetadata",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint256,t_struct(TrancheMeta)6650_storage)"
      },
      {
        "astId": 6657,
        "contract": "contracts/IncentiveDistribution.sol:IncentiveDistribution",
        "label": "lastUpdatedDay",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 6661,
        "contract": "contracts/IncentiveDistribution.sol:IncentiveDistribution",
        "label": "accruedReward",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_address,t_struct(Claim)6578_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Claim)",
        "numberOfBytes": "32",
        "value": "t_struct(Claim)6578_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_struct(TrancheMeta)6650_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IncentiveDistribution.TrancheMeta)",
        "numberOfBytes": "32",
        "value": "t_struct(TrancheMeta)6650_storage"
      },
      "t_struct(Claim)6578_storage": {
        "encoding": "inplace",
        "label": "struct Claim",
        "members": [
          {
            "astId": 6571,
            "contract": "contracts/IncentiveDistribution.sol:IncentiveDistribution",
            "label": "startingRewardRateFP",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 6573,
            "contract": "contracts/IncentiveDistribution.sol:IncentiveDistribution",
            "label": "amount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 6575,
            "contract": "contracts/IncentiveDistribution.sol:IncentiveDistribution",
            "label": "intraDayGain",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 6577,
            "contract": "contracts/IncentiveDistribution.sol:IncentiveDistribution",
            "label": "intraDayLoss",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(TrancheMeta)6650_storage": {
        "encoding": "inplace",
        "label": "struct IncentiveDistribution.TrancheMeta",
        "members": [
          {
            "astId": 6624,
            "contract": "contracts/IncentiveDistribution.sol:IncentiveDistribution",
            "label": "rewardShare",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 6626,
            "contract": "contracts/IncentiveDistribution.sol:IncentiveDistribution",
            "label": "currentDayGains",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 6628,
            "contract": "contracts/IncentiveDistribution.sol:IncentiveDistribution",
            "label": "currentDayLosses",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 6630,
            "contract": "contracts/IncentiveDistribution.sol:IncentiveDistribution",
            "label": "tomorrowOngoingTotals",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 6632,
            "contract": "contracts/IncentiveDistribution.sol:IncentiveDistribution",
            "label": "yesterdayOngoingTotals",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 6634,
            "contract": "contracts/IncentiveDistribution.sol:IncentiveDistribution",
            "label": "intraDayGains",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 6636,
            "contract": "contracts/IncentiveDistribution.sol:IncentiveDistribution",
            "label": "intraDayLosses",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 6638,
            "contract": "contracts/IncentiveDistribution.sol:IncentiveDistribution",
            "label": "intraDayRewardGains",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 6640,
            "contract": "contracts/IncentiveDistribution.sol:IncentiveDistribution",
            "label": "intraDayRewardLosses",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 6642,
            "contract": "contracts/IncentiveDistribution.sol:IncentiveDistribution",
            "label": "aggregateDailyRewardRateFP",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 6644,
            "contract": "contracts/IncentiveDistribution.sol:IncentiveDistribution",
            "label": "yesterdayRewardRateFP",
            "offset": 0,
            "slot": "10",
            "type": "t_uint256"
          },
          {
            "astId": 6649,
            "contract": "contracts/IncentiveDistribution.sol:IncentiveDistribution",
            "label": "claims",
            "offset": 0,
            "slot": "11",
            "type": "t_mapping(t_address,t_struct(Claim)6578_storage)"
          }
        ],
        "numberOfBytes": "384"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}