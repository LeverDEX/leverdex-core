{
  "0xf00cea88a5fff2e8ea9d0cb9b6aa51746d664432720ef29bb287ccb650f3b878": {
    "name": "Staking",
    "deployment": {
      "_format": "hh-sol-artifact-1",
      "contractName": "Staking",
      "sourceName": "contracts/Staking.sol",
      "abi": [
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "_rewardsToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "_stakingToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "legacyContract",
              "type": "address"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "constructor"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "previousOwner",
              "type": "address"
            },
            {
              "indexed": true,
              "internalType": "address",
              "name": "newOwner",
              "type": "address"
            }
          ],
          "name": "OwnershipTransferred",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "name": "Recovered",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "reward",
              "type": "uint256"
            }
          ],
          "name": "RewardAdded",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "user",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "reward",
              "type": "uint256"
            }
          ],
          "name": "RewardPaid",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "newDuration",
              "type": "uint256"
            }
          ],
          "name": "RewardsDurationUpdated",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "user",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "name": "Staked",
          "type": "event"
        },
        {
          "anonymous": false,
          "inputs": [
            {
              "indexed": true,
              "internalType": "address",
              "name": "user",
              "type": "address"
            },
            {
              "indexed": false,
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "name": "Withdrawn",
          "type": "event"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "name": "balanceOf",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "getRewardForDuration",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "lastTimeRewardApplicable",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "lastUpdateTime",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "legacyCarry",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "name": "legacyStakeAccounts",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "stakeAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "stakeWeight",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "cumulativeStart",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lockEnd",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "lockTime",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address[]",
              "name": "accounts",
              "type": "address[]"
            }
          ],
          "name": "migrate",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "name": "migrated",
          "outputs": [
            {
              "internalType": "bool",
              "name": "",
              "type": "bool"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "reward",
              "type": "uint256"
            }
          ],
          "name": "notifyRewardAmount",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "owner",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "periodFinish",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "tokenAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "tokenAmount",
              "type": "uint256"
            }
          ],
          "name": "recoverERC20",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "renounceOwnership",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "rewardPerToken",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "rewardPerTokenStored",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "rewardRate",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "name": "rewards",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "rewardsDuration",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "rewardsToken",
          "outputs": [
            {
              "internalType": "contract IERC20",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "t",
              "type": "uint256"
            }
          ],
          "name": "setLockTime",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "_rewardsDuration",
              "type": "uint256"
            }
          ],
          "name": "setRewardsDuration",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "name": "stake",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "name": "stakeStart",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "stakingToken",
          "outputs": [
            {
              "internalType": "contract IERC20",
              "name": "",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "startingWeights",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "totalSupply",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "newOwner",
              "type": "address"
            }
          ],
          "name": "transferOwnership",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            }
          ],
          "name": "updatePeriodFinish",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ],
          "name": "userRewardPerTokenPaid",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "account",
              "type": "address"
            }
          ],
          "name": "viewRewardAmount",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function"
        },
        {
          "inputs": [],
          "name": "withdrawReward",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        },
        {
          "inputs": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            }
          ],
          "name": "withdrawStake",
          "outputs": [],
          "stateMutability": "nonpayable",
          "type": "function"
        }
      ],
      "bytecode": "0x60806040526000600555600060065562278d0060075562278d00600a553480156200002957600080fd5b50604051620021f2380380620021f28339810160408190526200004c91620000f2565b6001600081815581546001600160a01b031916339081179092556040518291907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350600380546001600160a01b039485166001600160a01b0319918216179091556004805493851693821693909317909255600280549190931691161790556200013b565b80516001600160a01b0381168114620000ed57600080fd5b919050565b60008060006060848603121562000107578283fd5b6200011284620000d5565b92506200012260208501620000d5565b91506200013260408501620000d5565b90509250925092565b6120a7806200014b6000396000f3fe608060405234801561001057600080fd5b506004361061020b5760003560e01c806380faa57d1161012a578063c885bc58116100bd578063d1af0c7d1161008c578063df136d6511610071578063df136d6514610480578063ebe2b12b14610489578063f2fde38b146104925761020b565b8063d1af0c7d1461045a578063dbe85f701461046d5761020b565b8063c885bc581461042e578063c8f33c9114610436578063cc1a378f1461043f578063cd3daf9d146104525761020b565b8063a204cf85116100f9578063a204cf85146103f6578063a694fc3a146103ff578063ae04d45d14610412578063be7b51cc146104255761020b565b806380faa57d146103aa5780638980f11f146103b25780638b876347146103c55780638da5cb5b146103e55761020b565b80633c6b16ab116101a257806370a082311161017157806370a082311461035b578063715018a61461036e57806372f702f3146103765780637b0a47ee146103a15761020b565b80633c6b16ab146102ad5780634ba0a5ee146102c0578063556f6e6b146102f3578063568a2d98146103065761020b565b80631c1f78eb116101de5780631c1f78eb1461027457806325d5971f1461027c5780632e558d6914610291578063386a9525146102a45761020b565b80630700037d146102105780630d6680871461024357806312a7f6611461024c57806318160ddd1461026c575b600080fd5b61023061021e366004611d93565b600c6020526000908152604090205481565b6040519081526020015b60405180910390f35b610230600a5481565b61023061025a366004611d93565b600d6020526000908152604090205481565b6102306104a5565b6102306104ac565b61028f61028a366004611e66565b6104ca565b005b61028f61029f366004611dd6565b610803565b61023060075481565b61028f6102bb366004611e66565b610c79565b6102e36102ce366004611d93565b600e6020526000908152604090205460ff1681565b604051901515815260200161023a565b61028f610301366004611e66565b610eff565b61033b610314366004611d93565b60106020526000908152604090208054600182015460028301546003909301549192909184565b60408051948552602085019390935291830152606082015260800161023a565b610230610369366004611d93565b610fbb565b61028f610fda565b600454610389906001600160a01b031681565b6040516001600160a01b03909116815260200161023a565b61023060065481565b610230611096565b61028f6103c0366004611dad565b6110a4565b6102306103d3366004611d93565b600b6020526000908152604090205481565b6001546001600160a01b0316610389565b610230600f5481565b61028f61040d366004611e66565b61116a565b61028f610420366004611e66565b611329565b61023060115481565b61028f611388565b61023060085481565b61028f61044d366004611e66565b6114ac565b6102306115de565b600354610389906001600160a01b031681565b61023061047b366004611d93565b611632565b61023060095481565b61023060055481565b61028f6104a0366004611d93565b6116a4565b6012545b90565b60006104c56007546006546117ee90919063ffffffff16565b905090565b600260005414156105225760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b6002600055336105306115de565b60095561053b611096565b6008556001600160a01b038116156105825761055681611632565b6001600160a01b0382166000908152600c6020908152604080832093909355600954600b909152919020555b600082116105d25760405162461bcd60e51b815260206004820152601160248201527f43616e6e6f7420776974686472617720300000000000000000000000000000006044820152606401610519565b600a54336000908152600d60205260409020546105ef9190611f38565b4210156105fb57600080fd5b6012546106089083611801565b601255336000908152601360205260409020546106259083611801565b33600090815260136020908152604080832093909355600e9052205460ff16156107ad576002546040517fe57466fd00000000000000000000000000000000000000000000000000000000815233600482015260009182916001600160a01b039091169063e57466fd9060240160806040518083038186803b1580156106aa57600080fd5b505afa1580156106be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106e29190611e96565b50909350909150506801a055690d9db8000082106107425760405162461bcd60e51b815260206004820152601560248201527f4d696772617465206163636f756e7420666972737400000000000000000000006044820152606401610519565b33600090815260106020908152604080832081516080810183528154815260018201549381019390935260028101549183019190915260030154606082015261078a9061180d565b905084811061079c57600094506107a9565b6107a68186611fc6565b94505b5050505b6004546107c4906001600160a01b031633846119b7565b60405182815233907f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5906020015b60405180910390a250506001600055565b6001546001600160a01b0316331461085d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610519565b600260009054906101000a90046001600160a01b03166001600160a01b031663fb3935ee6040518163ffffffff1660e01b815260040160206040518083038186803b1580156108ab57600080fd5b505afa1580156108bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e39190611e7e565b600f819055600254604080517f8275198200000000000000000000000000000000000000000000000000000000815290516000926001600160a01b0316916382751982916004808301926020929190829003018186803b15801561094657600080fd5b505afa15801561095a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061097e9190611e7e565b90506000805b80851115610c715760008686838181106109c7577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020160208101906109dc9190611d93565b9050610a096040518060800160405280600081526020016000815260200160008152602001600081525090565b6002546040517fe57466fd0000000000000000000000000000000000000000000000000000000081526001600160a01b0384811660048301529091169063e57466fd9060240160806040518083038186803b158015610a6757600080fd5b505afa158015610a7b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a9f9190611e96565b606085015260408401526020830152808252601254610abe9082611a83565b6012556001600160a01b038316600090815260136020526040902054610ae49082611a83565b6001600160a01b038416600090815260136020526040902055600a546060830151610b0f9190611fc6565b6001600160a01b0384166000908152600d6020908152604080832093909355600e815282822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001908117909155601082529183902085518155908501519181019190915590830151600282015560608301516003909101819055421015610c42576000428360600151610ba79190611fc6565b905062278d00811115610c4057600060036276a700610bc68482611fc6565b8b87602001518c610bd79190611f89565b610be19190611f50565b610beb9190611f89565b610bf59190611f50565b610bff9190611f50565b6001600160a01b0386166000908152600c6020526040812080549293508392909190610c2c908490611f38565b90915550610c3c90508188611f38565b9650505b505b8460116000828254610c549190611f38565b925050819055505050508080610c6990612009565b915050610984565b505050505050565b6001546001600160a01b03163314610cd35760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610519565b6000610cdd6115de565b600955610ce8611096565b6008556001600160a01b03811615610d2f57610d0381611632565b6001600160a01b0382166000908152600c6020908152604080832093909355600954600b909152919020555b60115415610d4c57601154610d449083611fc6565b600060115591505b6005544210610d6b57600754610d63908390611a8f565b600655610db4565b600554600090610d7b9042611801565b90506000610d94600654836117ee90919063ffffffff16565b600754909150610dae90610da88684611a83565b90611a8f565b60065550505b6003546040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015610e1157600080fd5b505afa158015610e25573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e499190611e7e565b9050610e6060075482611a8f90919063ffffffff16565b6006541115610eb15760405162461bcd60e51b815260206004820152601860248201527f50726f76696465642072657761726420746f6f206869676800000000000000006044820152606401610519565b426008819055600754610ec49190611a83565b6005556040518381527fde88a922e0d3b88b24e9623efeb464919c6bf9f66857a65e2bfcf2ce87a9433d9060200160405180910390a1505050565b6001546001600160a01b03163314610f595760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610519565b6000610f636115de565b600955610f6e611096565b6008556001600160a01b03811615610fb557610f8981611632565b6001600160a01b0382166000908152600c6020908152604080832093909355600954600b909152919020555b50600555565b6001600160a01b0381166000908152601360205260409020545b919050565b6001546001600160a01b031633146110345760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610519565b6001546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600180547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055565b60006104c542600554611a9b565b6001546001600160a01b031633146110fe5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610519565b6111246111136001546001600160a01b031690565b6001600160a01b03841690836119b7565b604080516001600160a01b0384168152602081018390527f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa28910160405180910390a15050565b600260005414156111bd5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610519565b6002600055336111cb6115de565b6009556111d6611096565b6008556001600160a01b0381161561121d576111f181611632565b6001600160a01b0382166000908152600c6020908152604080832093909355600954600b909152919020555b6000821161126d5760405162461bcd60e51b815260206004820152600e60248201527f43616e6e6f74207374616b6520300000000000000000000000000000000000006044820152606401610519565b60125461127a9083611a83565b601255336000908152601360205260409020546112979083611a83565b336000818152601360205260409020919091556004546112c4916001600160a01b03909116903085611ab1565b60405182815233907f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d9060200160405180910390a2336000908152600d602052604090205461132057336000908152600d602052604090204290555b50506001600055565b6001546001600160a01b031633146113835760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610519565b600a55565b600260005414156113db5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610519565b6002600055336113e96115de565b6009556113f4611096565b6008556001600160a01b0381161561143b5761140f81611632565b6001600160a01b0382166000908152600c6020908152604080832093909355600954600b909152919020555b336000908152600c6020526040902054801561132057336000818152600c602052604081205560035461147a916001600160a01b0390911690836119b7565b60405181815233907fe2403640ba68fed3a2f88b7557551d1993f84b99bb10ff833f0cf8db0c5e0486906020016107f2565b6001546001600160a01b031633146115065760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610519565b60055442116115a35760405162461bcd60e51b815260206004820152605860248201527f50726576696f7573207265776172647320706572696f64206d7573742062652060448201527f636f6d706c657465206265666f7265206368616e67696e67207468652064757260648201527f6174696f6e20666f7220746865206e657720706572696f640000000000000000608482015260a401610519565b60078190556040518181527ffb46ca5a5e06d4540d6387b930a7c978bce0db5f449ec6b3f5d07c6e1d44f2d39060200160405180910390a150565b6000601254600014156115f457506009546104a9565b6104c5611629601254610da8670de0b6b3a764000061162360065461162360085461161d611096565b90611801565b906117ee565b60095490611a83565b6001600160a01b0381166000908152600c6020908152604080832054600b90925282205461169e919061169890670de0b6b3a764000090610da8906116799061161d6115de565b6001600160a01b038816600090815260136020526040902054906117ee565b90611a83565b92915050565b6001546001600160a01b031633146116fe5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610519565b6001600160a01b03811661177a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610519565b6001546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b60006117fa8284611f89565b9392505050565b60006117fa8284611fc6565b600080600260009054906101000a90046001600160a01b03166001600160a01b031663c8d65d596040518163ffffffff1660e01b815260040160206040518083038186803b15801561185e57600080fd5b505afa158015611872573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118969190611e7e565b90506000600f5460016118a99190611f38565b602085015160408601516118bd9085611fc6565b6118c79190611f89565b6118d19190611f50565b90506000600260009054906101000a90046001600160a01b03166001600160a01b031663fb3935ee6040518163ffffffff1660e01b815260040160206040518083038186803b15801561192357600080fd5b505afa158015611937573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061195b9190611e7e565b611966906001611f38565b6020860151604087015161197a9086611fc6565b6119849190611f89565b61198e9190611f50565b90508082106119a35760009350505050610fd5565b6119ad8282611fc6565b9350505050610fd5565b6040516001600160a01b038316602482015260448101829052611a7e9084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152611b08565b505050565b60006117fa8284611f38565b60006117fa8284611f50565b6000818310611aaa57816117fa565b5090919050565b6040516001600160a01b0380851660248301528316604482015260648101829052611b029085907f23b872dd00000000000000000000000000000000000000000000000000000000906084016119fc565b50505050565b6000611b5d826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611bed9092919063ffffffff16565b805190915015611a7e5780806020019051810190611b7b9190611e46565b611a7e5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610519565b6060611bfc8484600085611c04565b949350505050565b606082471015611c7c5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610519565b843b611cca5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610519565b600080866001600160a01b03168587604051611ce69190611ecb565b60006040518083038185875af1925050503d8060008114611d23576040519150601f19603f3d011682016040523d82523d6000602084013e611d28565b606091505b5091509150611d38828286611d43565b979650505050505050565b60608315611d525750816117fa565b825115611d625782518084602001fd5b8160405162461bcd60e51b81526004016105199190611ee7565b80356001600160a01b0381168114610fd557600080fd5b600060208284031215611da4578081fd5b6117fa82611d7c565b60008060408385031215611dbf578081fd5b611dc883611d7c565b946020939093013593505050565b60008060208385031215611de8578182fd5b823567ffffffffffffffff80821115611dff578384fd5b818501915085601f830112611e12578384fd5b813581811115611e20578485fd5b8660208260051b8501011115611e34578485fd5b60209290920196919550909350505050565b600060208284031215611e57578081fd5b815180151581146117fa578182fd5b600060208284031215611e77578081fd5b5035919050565b600060208284031215611e8f578081fd5b5051919050565b60008060008060808587031215611eab578182fd5b505082516020840151604085015160609095015191969095509092509050565b60008251611edd818460208701611fdd565b9190910192915050565b6000602082528251806020840152611f06816040850160208701611fdd565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b60008219821115611f4b57611f4b612042565b500190565b600082611f84577f4e487b710000000000000000000000000000000000000000000000000000000081526012600452602481fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611fc157611fc1612042565b500290565b600082821015611fd857611fd8612042565b500390565b60005b83811015611ff8578181015183820152602001611fe0565b83811115611b025750506000910152565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561203b5761203b612042565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fdfea2646970667358221220665e6045dc536be3860da71f2d7e42195dcc7eac1bd466680666ec319b53076464736f6c63430008030033",
      "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061020b5760003560e01c806380faa57d1161012a578063c885bc58116100bd578063d1af0c7d1161008c578063df136d6511610071578063df136d6514610480578063ebe2b12b14610489578063f2fde38b146104925761020b565b8063d1af0c7d1461045a578063dbe85f701461046d5761020b565b8063c885bc581461042e578063c8f33c9114610436578063cc1a378f1461043f578063cd3daf9d146104525761020b565b8063a204cf85116100f9578063a204cf85146103f6578063a694fc3a146103ff578063ae04d45d14610412578063be7b51cc146104255761020b565b806380faa57d146103aa5780638980f11f146103b25780638b876347146103c55780638da5cb5b146103e55761020b565b80633c6b16ab116101a257806370a082311161017157806370a082311461035b578063715018a61461036e57806372f702f3146103765780637b0a47ee146103a15761020b565b80633c6b16ab146102ad5780634ba0a5ee146102c0578063556f6e6b146102f3578063568a2d98146103065761020b565b80631c1f78eb116101de5780631c1f78eb1461027457806325d5971f1461027c5780632e558d6914610291578063386a9525146102a45761020b565b80630700037d146102105780630d6680871461024357806312a7f6611461024c57806318160ddd1461026c575b600080fd5b61023061021e366004611d93565b600c6020526000908152604090205481565b6040519081526020015b60405180910390f35b610230600a5481565b61023061025a366004611d93565b600d6020526000908152604090205481565b6102306104a5565b6102306104ac565b61028f61028a366004611e66565b6104ca565b005b61028f61029f366004611dd6565b610803565b61023060075481565b61028f6102bb366004611e66565b610c79565b6102e36102ce366004611d93565b600e6020526000908152604090205460ff1681565b604051901515815260200161023a565b61028f610301366004611e66565b610eff565b61033b610314366004611d93565b60106020526000908152604090208054600182015460028301546003909301549192909184565b60408051948552602085019390935291830152606082015260800161023a565b610230610369366004611d93565b610fbb565b61028f610fda565b600454610389906001600160a01b031681565b6040516001600160a01b03909116815260200161023a565b61023060065481565b610230611096565b61028f6103c0366004611dad565b6110a4565b6102306103d3366004611d93565b600b6020526000908152604090205481565b6001546001600160a01b0316610389565b610230600f5481565b61028f61040d366004611e66565b61116a565b61028f610420366004611e66565b611329565b61023060115481565b61028f611388565b61023060085481565b61028f61044d366004611e66565b6114ac565b6102306115de565b600354610389906001600160a01b031681565b61023061047b366004611d93565b611632565b61023060095481565b61023060055481565b61028f6104a0366004611d93565b6116a4565b6012545b90565b60006104c56007546006546117ee90919063ffffffff16565b905090565b600260005414156105225760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b6002600055336105306115de565b60095561053b611096565b6008556001600160a01b038116156105825761055681611632565b6001600160a01b0382166000908152600c6020908152604080832093909355600954600b909152919020555b600082116105d25760405162461bcd60e51b815260206004820152601160248201527f43616e6e6f7420776974686472617720300000000000000000000000000000006044820152606401610519565b600a54336000908152600d60205260409020546105ef9190611f38565b4210156105fb57600080fd5b6012546106089083611801565b601255336000908152601360205260409020546106259083611801565b33600090815260136020908152604080832093909355600e9052205460ff16156107ad576002546040517fe57466fd00000000000000000000000000000000000000000000000000000000815233600482015260009182916001600160a01b039091169063e57466fd9060240160806040518083038186803b1580156106aa57600080fd5b505afa1580156106be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106e29190611e96565b50909350909150506801a055690d9db8000082106107425760405162461bcd60e51b815260206004820152601560248201527f4d696772617465206163636f756e7420666972737400000000000000000000006044820152606401610519565b33600090815260106020908152604080832081516080810183528154815260018201549381019390935260028101549183019190915260030154606082015261078a9061180d565b905084811061079c57600094506107a9565b6107a68186611fc6565b94505b5050505b6004546107c4906001600160a01b031633846119b7565b60405182815233907f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5906020015b60405180910390a250506001600055565b6001546001600160a01b0316331461085d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610519565b600260009054906101000a90046001600160a01b03166001600160a01b031663fb3935ee6040518163ffffffff1660e01b815260040160206040518083038186803b1580156108ab57600080fd5b505afa1580156108bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e39190611e7e565b600f819055600254604080517f8275198200000000000000000000000000000000000000000000000000000000815290516000926001600160a01b0316916382751982916004808301926020929190829003018186803b15801561094657600080fd5b505afa15801561095a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061097e9190611e7e565b90506000805b80851115610c715760008686838181106109c7577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020160208101906109dc9190611d93565b9050610a096040518060800160405280600081526020016000815260200160008152602001600081525090565b6002546040517fe57466fd0000000000000000000000000000000000000000000000000000000081526001600160a01b0384811660048301529091169063e57466fd9060240160806040518083038186803b158015610a6757600080fd5b505afa158015610a7b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a9f9190611e96565b606085015260408401526020830152808252601254610abe9082611a83565b6012556001600160a01b038316600090815260136020526040902054610ae49082611a83565b6001600160a01b038416600090815260136020526040902055600a546060830151610b0f9190611fc6565b6001600160a01b0384166000908152600d6020908152604080832093909355600e815282822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001908117909155601082529183902085518155908501519181019190915590830151600282015560608301516003909101819055421015610c42576000428360600151610ba79190611fc6565b905062278d00811115610c4057600060036276a700610bc68482611fc6565b8b87602001518c610bd79190611f89565b610be19190611f50565b610beb9190611f89565b610bf59190611f50565b610bff9190611f50565b6001600160a01b0386166000908152600c6020526040812080549293508392909190610c2c908490611f38565b90915550610c3c90508188611f38565b9650505b505b8460116000828254610c549190611f38565b925050819055505050508080610c6990612009565b915050610984565b505050505050565b6001546001600160a01b03163314610cd35760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610519565b6000610cdd6115de565b600955610ce8611096565b6008556001600160a01b03811615610d2f57610d0381611632565b6001600160a01b0382166000908152600c6020908152604080832093909355600954600b909152919020555b60115415610d4c57601154610d449083611fc6565b600060115591505b6005544210610d6b57600754610d63908390611a8f565b600655610db4565b600554600090610d7b9042611801565b90506000610d94600654836117ee90919063ffffffff16565b600754909150610dae90610da88684611a83565b90611a8f565b60065550505b6003546040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015610e1157600080fd5b505afa158015610e25573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e499190611e7e565b9050610e6060075482611a8f90919063ffffffff16565b6006541115610eb15760405162461bcd60e51b815260206004820152601860248201527f50726f76696465642072657761726420746f6f206869676800000000000000006044820152606401610519565b426008819055600754610ec49190611a83565b6005556040518381527fde88a922e0d3b88b24e9623efeb464919c6bf9f66857a65e2bfcf2ce87a9433d9060200160405180910390a1505050565b6001546001600160a01b03163314610f595760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610519565b6000610f636115de565b600955610f6e611096565b6008556001600160a01b03811615610fb557610f8981611632565b6001600160a01b0382166000908152600c6020908152604080832093909355600954600b909152919020555b50600555565b6001600160a01b0381166000908152601360205260409020545b919050565b6001546001600160a01b031633146110345760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610519565b6001546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600180547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055565b60006104c542600554611a9b565b6001546001600160a01b031633146110fe5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610519565b6111246111136001546001600160a01b031690565b6001600160a01b03841690836119b7565b604080516001600160a01b0384168152602081018390527f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa28910160405180910390a15050565b600260005414156111bd5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610519565b6002600055336111cb6115de565b6009556111d6611096565b6008556001600160a01b0381161561121d576111f181611632565b6001600160a01b0382166000908152600c6020908152604080832093909355600954600b909152919020555b6000821161126d5760405162461bcd60e51b815260206004820152600e60248201527f43616e6e6f74207374616b6520300000000000000000000000000000000000006044820152606401610519565b60125461127a9083611a83565b601255336000908152601360205260409020546112979083611a83565b336000818152601360205260409020919091556004546112c4916001600160a01b03909116903085611ab1565b60405182815233907f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d9060200160405180910390a2336000908152600d602052604090205461132057336000908152600d602052604090204290555b50506001600055565b6001546001600160a01b031633146113835760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610519565b600a55565b600260005414156113db5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610519565b6002600055336113e96115de565b6009556113f4611096565b6008556001600160a01b0381161561143b5761140f81611632565b6001600160a01b0382166000908152600c6020908152604080832093909355600954600b909152919020555b336000908152600c6020526040902054801561132057336000818152600c602052604081205560035461147a916001600160a01b0390911690836119b7565b60405181815233907fe2403640ba68fed3a2f88b7557551d1993f84b99bb10ff833f0cf8db0c5e0486906020016107f2565b6001546001600160a01b031633146115065760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610519565b60055442116115a35760405162461bcd60e51b815260206004820152605860248201527f50726576696f7573207265776172647320706572696f64206d7573742062652060448201527f636f6d706c657465206265666f7265206368616e67696e67207468652064757260648201527f6174696f6e20666f7220746865206e657720706572696f640000000000000000608482015260a401610519565b60078190556040518181527ffb46ca5a5e06d4540d6387b930a7c978bce0db5f449ec6b3f5d07c6e1d44f2d39060200160405180910390a150565b6000601254600014156115f457506009546104a9565b6104c5611629601254610da8670de0b6b3a764000061162360065461162360085461161d611096565b90611801565b906117ee565b60095490611a83565b6001600160a01b0381166000908152600c6020908152604080832054600b90925282205461169e919061169890670de0b6b3a764000090610da8906116799061161d6115de565b6001600160a01b038816600090815260136020526040902054906117ee565b90611a83565b92915050565b6001546001600160a01b031633146116fe5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610519565b6001600160a01b03811661177a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610519565b6001546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b60006117fa8284611f89565b9392505050565b60006117fa8284611fc6565b600080600260009054906101000a90046001600160a01b03166001600160a01b031663c8d65d596040518163ffffffff1660e01b815260040160206040518083038186803b15801561185e57600080fd5b505afa158015611872573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118969190611e7e565b90506000600f5460016118a99190611f38565b602085015160408601516118bd9085611fc6565b6118c79190611f89565b6118d19190611f50565b90506000600260009054906101000a90046001600160a01b03166001600160a01b031663fb3935ee6040518163ffffffff1660e01b815260040160206040518083038186803b15801561192357600080fd5b505afa158015611937573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061195b9190611e7e565b611966906001611f38565b6020860151604087015161197a9086611fc6565b6119849190611f89565b61198e9190611f50565b90508082106119a35760009350505050610fd5565b6119ad8282611fc6565b9350505050610fd5565b6040516001600160a01b038316602482015260448101829052611a7e9084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152611b08565b505050565b60006117fa8284611f38565b60006117fa8284611f50565b6000818310611aaa57816117fa565b5090919050565b6040516001600160a01b0380851660248301528316604482015260648101829052611b029085907f23b872dd00000000000000000000000000000000000000000000000000000000906084016119fc565b50505050565b6000611b5d826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611bed9092919063ffffffff16565b805190915015611a7e5780806020019051810190611b7b9190611e46565b611a7e5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610519565b6060611bfc8484600085611c04565b949350505050565b606082471015611c7c5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610519565b843b611cca5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610519565b600080866001600160a01b03168587604051611ce69190611ecb565b60006040518083038185875af1925050503d8060008114611d23576040519150601f19603f3d011682016040523d82523d6000602084013e611d28565b606091505b5091509150611d38828286611d43565b979650505050505050565b60608315611d525750816117fa565b825115611d625782518084602001fd5b8160405162461bcd60e51b81526004016105199190611ee7565b80356001600160a01b0381168114610fd557600080fd5b600060208284031215611da4578081fd5b6117fa82611d7c565b60008060408385031215611dbf578081fd5b611dc883611d7c565b946020939093013593505050565b60008060208385031215611de8578182fd5b823567ffffffffffffffff80821115611dff578384fd5b818501915085601f830112611e12578384fd5b813581811115611e20578485fd5b8660208260051b8501011115611e34578485fd5b60209290920196919550909350505050565b600060208284031215611e57578081fd5b815180151581146117fa578182fd5b600060208284031215611e77578081fd5b5035919050565b600060208284031215611e8f578081fd5b5051919050565b60008060008060808587031215611eab578182fd5b505082516020840151604085015160609095015191969095509092509050565b60008251611edd818460208701611fdd565b9190910192915050565b6000602082528251806020840152611f06816040850160208701611fdd565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b60008219821115611f4b57611f4b612042565b500190565b600082611f84577f4e487b710000000000000000000000000000000000000000000000000000000081526012600452602481fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611fc157611fc1612042565b500290565b600082821015611fd857611fd8612042565b500390565b60005b83811015611ff8578181015183820152602001611fe0565b83811115611b025750506000910152565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561203b5761203b612042565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fdfea2646970667358221220665e6045dc536be3860da71f2d7e42195dcc7eac1bd466680666ec319b53076464736f6c63430008030033",
      "linkReferences": {},
      "deployedLinkReferences": {},
      "devdoc": {
        "kind": "dev",
        "methods": {
          "owner()": {
            "details": "Returns the address of the current owner."
          },
          "renounceOwnership()": {
            "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
          },
          "transferOwnership(address)": {
            "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
          }
        },
        "version": 1
      },
      "evm": {
        "bytecode": {
          "generatedSources": [
            {
              "ast": {
                "nodeType": "YulBlock",
                "src": "0:586:48",
                "statements": [
                  {
                    "nodeType": "YulBlock",
                    "src": "6:3:48",
                    "statements": []
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "74:117:48",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "84:22:48",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "99:6:48"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "93:5:48"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "93:13:48"
                          },
                          "variableNames": [
                            {
                              "name": "value",
                              "nodeType": "YulIdentifier",
                              "src": "84:5:48"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "169:16:48",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "178:1:48",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "181:1:48",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "171:6:48"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "171:12:48"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "171:12:48"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "128:5:48"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "139:5:48"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "arguments": [
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "154:3:48",
                                                "type": "",
                                                "value": "160"
                                              },
                                              {
                                                "kind": "number",
                                                "nodeType": "YulLiteral",
                                                "src": "159:1:48",
                                                "type": "",
                                                "value": "1"
                                              }
                                            ],
                                            "functionName": {
                                              "name": "shl",
                                              "nodeType": "YulIdentifier",
                                              "src": "150:3:48"
                                            },
                                            "nodeType": "YulFunctionCall",
                                            "src": "150:11:48"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "163:1:48",
                                            "type": "",
                                            "value": "1"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "sub",
                                          "nodeType": "YulIdentifier",
                                          "src": "146:3:48"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "146:19:48"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "135:3:48"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "135:31:48"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "125:2:48"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "125:42:48"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "118:6:48"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "118:50:48"
                          },
                          "nodeType": "YulIf",
                          "src": "115:2:48"
                        }
                      ]
                    },
                    "name": "abi_decode_address_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nodeType": "YulTypedName",
                        "src": "53:6:48",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "64:5:48",
                        "type": ""
                      }
                    ],
                    "src": "14:177:48"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "311:273:48",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "357:26:48",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "366:6:48"
                                    },
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "374:6:48"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "359:6:48"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "359:22:48"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "359:22:48"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "332:7:48"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "341:9:48"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "328:3:48"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "328:23:48"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "353:2:48",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "324:3:48"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "324:32:48"
                          },
                          "nodeType": "YulIf",
                          "src": "321:2:48"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "392:50:48",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "432:9:48"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_address_fromMemory",
                              "nodeType": "YulIdentifier",
                              "src": "402:29:48"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "402:40:48"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "392:6:48"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "451:59:48",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "495:9:48"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "506:2:48",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "491:3:48"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "491:18:48"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_address_fromMemory",
                              "nodeType": "YulIdentifier",
                              "src": "461:29:48"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "461:49:48"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "451:6:48"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "519:59:48",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "563:9:48"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "574:2:48",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "559:3:48"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "559:18:48"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_address_fromMemory",
                              "nodeType": "YulIdentifier",
                              "src": "529:29:48"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "529:49:48"
                          },
                          "variableNames": [
                            {
                              "name": "value2",
                              "nodeType": "YulIdentifier",
                              "src": "519:6:48"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_addresst_addresst_address_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "261:9:48",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "272:7:48",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "284:6:48",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "292:6:48",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "300:6:48",
                        "type": ""
                      }
                    ],
                    "src": "196:388:48"
                  }
                ]
              },
              "contents": "{\n    { }\n    function abi_decode_address_fromMemory(offset) -> value\n    {\n        value := mload(offset)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_addresst_addresst_address_fromMemory(headStart, dataEnd) -> value0, value1, value2\n    {\n        if slt(sub(dataEnd, headStart), 96) { revert(value0, value0) }\n        value0 := abi_decode_address_fromMemory(headStart)\n        value1 := abi_decode_address_fromMemory(add(headStart, 32))\n        value2 := abi_decode_address_fromMemory(add(headStart, 64))\n    }\n}",
              "id": 48,
              "language": "Yul",
              "name": "#utility.yul"
            }
          ],
          "linkReferences": {},
          "object": "60806040526000600555600060065562278d0060075562278d00600a553480156200002957600080fd5b50604051620021f2380380620021f28339810160408190526200004c91620000f2565b6001600081815581546001600160a01b031916339081179092556040518291907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350600380546001600160a01b039485166001600160a01b0319918216179091556004805493851693821693909317909255600280549190931691161790556200013b565b80516001600160a01b0381168114620000ed57600080fd5b919050565b60008060006060848603121562000107578283fd5b6200011284620000d5565b92506200012260208501620000d5565b91506200013260408501620000d5565b90509250925092565b6120a7806200014b6000396000f3fe608060405234801561001057600080fd5b506004361061020b5760003560e01c806380faa57d1161012a578063c885bc58116100bd578063d1af0c7d1161008c578063df136d6511610071578063df136d6514610480578063ebe2b12b14610489578063f2fde38b146104925761020b565b8063d1af0c7d1461045a578063dbe85f701461046d5761020b565b8063c885bc581461042e578063c8f33c9114610436578063cc1a378f1461043f578063cd3daf9d146104525761020b565b8063a204cf85116100f9578063a204cf85146103f6578063a694fc3a146103ff578063ae04d45d14610412578063be7b51cc146104255761020b565b806380faa57d146103aa5780638980f11f146103b25780638b876347146103c55780638da5cb5b146103e55761020b565b80633c6b16ab116101a257806370a082311161017157806370a082311461035b578063715018a61461036e57806372f702f3146103765780637b0a47ee146103a15761020b565b80633c6b16ab146102ad5780634ba0a5ee146102c0578063556f6e6b146102f3578063568a2d98146103065761020b565b80631c1f78eb116101de5780631c1f78eb1461027457806325d5971f1461027c5780632e558d6914610291578063386a9525146102a45761020b565b80630700037d146102105780630d6680871461024357806312a7f6611461024c57806318160ddd1461026c575b600080fd5b61023061021e366004611d93565b600c6020526000908152604090205481565b6040519081526020015b60405180910390f35b610230600a5481565b61023061025a366004611d93565b600d6020526000908152604090205481565b6102306104a5565b6102306104ac565b61028f61028a366004611e66565b6104ca565b005b61028f61029f366004611dd6565b610803565b61023060075481565b61028f6102bb366004611e66565b610c79565b6102e36102ce366004611d93565b600e6020526000908152604090205460ff1681565b604051901515815260200161023a565b61028f610301366004611e66565b610eff565b61033b610314366004611d93565b60106020526000908152604090208054600182015460028301546003909301549192909184565b60408051948552602085019390935291830152606082015260800161023a565b610230610369366004611d93565b610fbb565b61028f610fda565b600454610389906001600160a01b031681565b6040516001600160a01b03909116815260200161023a565b61023060065481565b610230611096565b61028f6103c0366004611dad565b6110a4565b6102306103d3366004611d93565b600b6020526000908152604090205481565b6001546001600160a01b0316610389565b610230600f5481565b61028f61040d366004611e66565b61116a565b61028f610420366004611e66565b611329565b61023060115481565b61028f611388565b61023060085481565b61028f61044d366004611e66565b6114ac565b6102306115de565b600354610389906001600160a01b031681565b61023061047b366004611d93565b611632565b61023060095481565b61023060055481565b61028f6104a0366004611d93565b6116a4565b6012545b90565b60006104c56007546006546117ee90919063ffffffff16565b905090565b600260005414156105225760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b6002600055336105306115de565b60095561053b611096565b6008556001600160a01b038116156105825761055681611632565b6001600160a01b0382166000908152600c6020908152604080832093909355600954600b909152919020555b600082116105d25760405162461bcd60e51b815260206004820152601160248201527f43616e6e6f7420776974686472617720300000000000000000000000000000006044820152606401610519565b600a54336000908152600d60205260409020546105ef9190611f38565b4210156105fb57600080fd5b6012546106089083611801565b601255336000908152601360205260409020546106259083611801565b33600090815260136020908152604080832093909355600e9052205460ff16156107ad576002546040517fe57466fd00000000000000000000000000000000000000000000000000000000815233600482015260009182916001600160a01b039091169063e57466fd9060240160806040518083038186803b1580156106aa57600080fd5b505afa1580156106be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106e29190611e96565b50909350909150506801a055690d9db8000082106107425760405162461bcd60e51b815260206004820152601560248201527f4d696772617465206163636f756e7420666972737400000000000000000000006044820152606401610519565b33600090815260106020908152604080832081516080810183528154815260018201549381019390935260028101549183019190915260030154606082015261078a9061180d565b905084811061079c57600094506107a9565b6107a68186611fc6565b94505b5050505b6004546107c4906001600160a01b031633846119b7565b60405182815233907f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5906020015b60405180910390a250506001600055565b6001546001600160a01b0316331461085d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610519565b600260009054906101000a90046001600160a01b03166001600160a01b031663fb3935ee6040518163ffffffff1660e01b815260040160206040518083038186803b1580156108ab57600080fd5b505afa1580156108bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e39190611e7e565b600f819055600254604080517f8275198200000000000000000000000000000000000000000000000000000000815290516000926001600160a01b0316916382751982916004808301926020929190829003018186803b15801561094657600080fd5b505afa15801561095a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061097e9190611e7e565b90506000805b80851115610c715760008686838181106109c7577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020160208101906109dc9190611d93565b9050610a096040518060800160405280600081526020016000815260200160008152602001600081525090565b6002546040517fe57466fd0000000000000000000000000000000000000000000000000000000081526001600160a01b0384811660048301529091169063e57466fd9060240160806040518083038186803b158015610a6757600080fd5b505afa158015610a7b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a9f9190611e96565b606085015260408401526020830152808252601254610abe9082611a83565b6012556001600160a01b038316600090815260136020526040902054610ae49082611a83565b6001600160a01b038416600090815260136020526040902055600a546060830151610b0f9190611fc6565b6001600160a01b0384166000908152600d6020908152604080832093909355600e815282822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001908117909155601082529183902085518155908501519181019190915590830151600282015560608301516003909101819055421015610c42576000428360600151610ba79190611fc6565b905062278d00811115610c4057600060036276a700610bc68482611fc6565b8b87602001518c610bd79190611f89565b610be19190611f50565b610beb9190611f89565b610bf59190611f50565b610bff9190611f50565b6001600160a01b0386166000908152600c6020526040812080549293508392909190610c2c908490611f38565b90915550610c3c90508188611f38565b9650505b505b8460116000828254610c549190611f38565b925050819055505050508080610c6990612009565b915050610984565b505050505050565b6001546001600160a01b03163314610cd35760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610519565b6000610cdd6115de565b600955610ce8611096565b6008556001600160a01b03811615610d2f57610d0381611632565b6001600160a01b0382166000908152600c6020908152604080832093909355600954600b909152919020555b60115415610d4c57601154610d449083611fc6565b600060115591505b6005544210610d6b57600754610d63908390611a8f565b600655610db4565b600554600090610d7b9042611801565b90506000610d94600654836117ee90919063ffffffff16565b600754909150610dae90610da88684611a83565b90611a8f565b60065550505b6003546040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015610e1157600080fd5b505afa158015610e25573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e499190611e7e565b9050610e6060075482611a8f90919063ffffffff16565b6006541115610eb15760405162461bcd60e51b815260206004820152601860248201527f50726f76696465642072657761726420746f6f206869676800000000000000006044820152606401610519565b426008819055600754610ec49190611a83565b6005556040518381527fde88a922e0d3b88b24e9623efeb464919c6bf9f66857a65e2bfcf2ce87a9433d9060200160405180910390a1505050565b6001546001600160a01b03163314610f595760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610519565b6000610f636115de565b600955610f6e611096565b6008556001600160a01b03811615610fb557610f8981611632565b6001600160a01b0382166000908152600c6020908152604080832093909355600954600b909152919020555b50600555565b6001600160a01b0381166000908152601360205260409020545b919050565b6001546001600160a01b031633146110345760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610519565b6001546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600180547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055565b60006104c542600554611a9b565b6001546001600160a01b031633146110fe5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610519565b6111246111136001546001600160a01b031690565b6001600160a01b03841690836119b7565b604080516001600160a01b0384168152602081018390527f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa28910160405180910390a15050565b600260005414156111bd5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610519565b6002600055336111cb6115de565b6009556111d6611096565b6008556001600160a01b0381161561121d576111f181611632565b6001600160a01b0382166000908152600c6020908152604080832093909355600954600b909152919020555b6000821161126d5760405162461bcd60e51b815260206004820152600e60248201527f43616e6e6f74207374616b6520300000000000000000000000000000000000006044820152606401610519565b60125461127a9083611a83565b601255336000908152601360205260409020546112979083611a83565b336000818152601360205260409020919091556004546112c4916001600160a01b03909116903085611ab1565b60405182815233907f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d9060200160405180910390a2336000908152600d602052604090205461132057336000908152600d602052604090204290555b50506001600055565b6001546001600160a01b031633146113835760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610519565b600a55565b600260005414156113db5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610519565b6002600055336113e96115de565b6009556113f4611096565b6008556001600160a01b0381161561143b5761140f81611632565b6001600160a01b0382166000908152600c6020908152604080832093909355600954600b909152919020555b336000908152600c6020526040902054801561132057336000818152600c602052604081205560035461147a916001600160a01b0390911690836119b7565b60405181815233907fe2403640ba68fed3a2f88b7557551d1993f84b99bb10ff833f0cf8db0c5e0486906020016107f2565b6001546001600160a01b031633146115065760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610519565b60055442116115a35760405162461bcd60e51b815260206004820152605860248201527f50726576696f7573207265776172647320706572696f64206d7573742062652060448201527f636f6d706c657465206265666f7265206368616e67696e67207468652064757260648201527f6174696f6e20666f7220746865206e657720706572696f640000000000000000608482015260a401610519565b60078190556040518181527ffb46ca5a5e06d4540d6387b930a7c978bce0db5f449ec6b3f5d07c6e1d44f2d39060200160405180910390a150565b6000601254600014156115f457506009546104a9565b6104c5611629601254610da8670de0b6b3a764000061162360065461162360085461161d611096565b90611801565b906117ee565b60095490611a83565b6001600160a01b0381166000908152600c6020908152604080832054600b90925282205461169e919061169890670de0b6b3a764000090610da8906116799061161d6115de565b6001600160a01b038816600090815260136020526040902054906117ee565b90611a83565b92915050565b6001546001600160a01b031633146116fe5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610519565b6001600160a01b03811661177a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610519565b6001546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b60006117fa8284611f89565b9392505050565b60006117fa8284611fc6565b600080600260009054906101000a90046001600160a01b03166001600160a01b031663c8d65d596040518163ffffffff1660e01b815260040160206040518083038186803b15801561185e57600080fd5b505afa158015611872573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118969190611e7e565b90506000600f5460016118a99190611f38565b602085015160408601516118bd9085611fc6565b6118c79190611f89565b6118d19190611f50565b90506000600260009054906101000a90046001600160a01b03166001600160a01b031663fb3935ee6040518163ffffffff1660e01b815260040160206040518083038186803b15801561192357600080fd5b505afa158015611937573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061195b9190611e7e565b611966906001611f38565b6020860151604087015161197a9086611fc6565b6119849190611f89565b61198e9190611f50565b90508082106119a35760009350505050610fd5565b6119ad8282611fc6565b9350505050610fd5565b6040516001600160a01b038316602482015260448101829052611a7e9084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152611b08565b505050565b60006117fa8284611f38565b60006117fa8284611f50565b6000818310611aaa57816117fa565b5090919050565b6040516001600160a01b0380851660248301528316604482015260648101829052611b029085907f23b872dd00000000000000000000000000000000000000000000000000000000906084016119fc565b50505050565b6000611b5d826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611bed9092919063ffffffff16565b805190915015611a7e5780806020019051810190611b7b9190611e46565b611a7e5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610519565b6060611bfc8484600085611c04565b949350505050565b606082471015611c7c5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610519565b843b611cca5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610519565b600080866001600160a01b03168587604051611ce69190611ecb565b60006040518083038185875af1925050503d8060008114611d23576040519150601f19603f3d011682016040523d82523d6000602084013e611d28565b606091505b5091509150611d38828286611d43565b979650505050505050565b60608315611d525750816117fa565b825115611d625782518084602001fd5b8160405162461bcd60e51b81526004016105199190611ee7565b80356001600160a01b0381168114610fd557600080fd5b600060208284031215611da4578081fd5b6117fa82611d7c565b60008060408385031215611dbf578081fd5b611dc883611d7c565b946020939093013593505050565b60008060208385031215611de8578182fd5b823567ffffffffffffffff80821115611dff578384fd5b818501915085601f830112611e12578384fd5b813581811115611e20578485fd5b8660208260051b8501011115611e34578485fd5b60209290920196919550909350505050565b600060208284031215611e57578081fd5b815180151581146117fa578182fd5b600060208284031215611e77578081fd5b5035919050565b600060208284031215611e8f578081fd5b5051919050565b60008060008060808587031215611eab578182fd5b505082516020840151604085015160609095015191969095509092509050565b60008251611edd818460208701611fdd565b9190910192915050565b6000602082528251806020840152611f06816040850160208701611fdd565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b60008219821115611f4b57611f4b612042565b500190565b600082611f84577f4e487b710000000000000000000000000000000000000000000000000000000081526012600452602481fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611fc157611fc1612042565b500290565b600082821015611fd857611fd8612042565b500390565b60005b83811015611ff8578181015183820152602001611fe0565b83811115611b025750506000910152565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561203b5761203b612042565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fdfea2646970667358221220665e6045dc536be3860da71f2d7e42195dcc7eac1bd466680666ec319b53076464736f6c63430008030033",
          "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 PUSH1 0x5 SSTORE PUSH1 0x0 PUSH1 0x6 SSTORE PUSH3 0x278D00 PUSH1 0x7 SSTORE PUSH3 0x278D00 PUSH1 0xA SSTORE CALLVALUE DUP1 ISZERO PUSH3 0x29 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x21F2 CODESIZE SUB DUP1 PUSH3 0x21F2 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 DUP2 SWAP1 MSTORE PUSH3 0x4C SWAP2 PUSH3 0xF2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x0 DUP2 DUP2 SSTORE DUP2 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT AND CALLER SWAP1 DUP2 OR SWAP1 SWAP3 SSTORE PUSH1 0x40 MLOAD DUP3 SWAP2 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP3 SWAP1 LOG3 POP PUSH1 0x3 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP5 DUP6 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT SWAP2 DUP3 AND OR SWAP1 SWAP2 SSTORE PUSH1 0x4 DUP1 SLOAD SWAP4 DUP6 AND SWAP4 DUP3 AND SWAP4 SWAP1 SWAP4 OR SWAP1 SWAP3 SSTORE PUSH1 0x2 DUP1 SLOAD SWAP2 SWAP1 SWAP4 AND SWAP2 AND OR SWAP1 SSTORE PUSH3 0x13B JUMP JUMPDEST DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH3 0xED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 PUSH1 0x60 DUP5 DUP7 SUB SLT ISZERO PUSH3 0x107 JUMPI DUP3 DUP4 REVERT JUMPDEST PUSH3 0x112 DUP5 PUSH3 0xD5 JUMP JUMPDEST SWAP3 POP PUSH3 0x122 PUSH1 0x20 DUP6 ADD PUSH3 0xD5 JUMP JUMPDEST SWAP2 POP PUSH3 0x132 PUSH1 0x40 DUP6 ADD PUSH3 0xD5 JUMP JUMPDEST SWAP1 POP SWAP3 POP SWAP3 POP SWAP3 JUMP JUMPDEST PUSH2 0x20A7 DUP1 PUSH3 0x14B PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x20B JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x80FAA57D GT PUSH2 0x12A JUMPI DUP1 PUSH4 0xC885BC58 GT PUSH2 0xBD JUMPI DUP1 PUSH4 0xD1AF0C7D GT PUSH2 0x8C JUMPI DUP1 PUSH4 0xDF136D65 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xDF136D65 EQ PUSH2 0x480 JUMPI DUP1 PUSH4 0xEBE2B12B EQ PUSH2 0x489 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x492 JUMPI PUSH2 0x20B JUMP JUMPDEST DUP1 PUSH4 0xD1AF0C7D EQ PUSH2 0x45A JUMPI DUP1 PUSH4 0xDBE85F70 EQ PUSH2 0x46D JUMPI PUSH2 0x20B JUMP JUMPDEST DUP1 PUSH4 0xC885BC58 EQ PUSH2 0x42E JUMPI DUP1 PUSH4 0xC8F33C91 EQ PUSH2 0x436 JUMPI DUP1 PUSH4 0xCC1A378F EQ PUSH2 0x43F JUMPI DUP1 PUSH4 0xCD3DAF9D EQ PUSH2 0x452 JUMPI PUSH2 0x20B JUMP JUMPDEST DUP1 PUSH4 0xA204CF85 GT PUSH2 0xF9 JUMPI DUP1 PUSH4 0xA204CF85 EQ PUSH2 0x3F6 JUMPI DUP1 PUSH4 0xA694FC3A EQ PUSH2 0x3FF JUMPI DUP1 PUSH4 0xAE04D45D EQ PUSH2 0x412 JUMPI DUP1 PUSH4 0xBE7B51CC EQ PUSH2 0x425 JUMPI PUSH2 0x20B JUMP JUMPDEST DUP1 PUSH4 0x80FAA57D EQ PUSH2 0x3AA JUMPI DUP1 PUSH4 0x8980F11F EQ PUSH2 0x3B2 JUMPI DUP1 PUSH4 0x8B876347 EQ PUSH2 0x3C5 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x3E5 JUMPI PUSH2 0x20B JUMP JUMPDEST DUP1 PUSH4 0x3C6B16AB GT PUSH2 0x1A2 JUMPI DUP1 PUSH4 0x70A08231 GT PUSH2 0x171 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x35B JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x36E JUMPI DUP1 PUSH4 0x72F702F3 EQ PUSH2 0x376 JUMPI DUP1 PUSH4 0x7B0A47EE EQ PUSH2 0x3A1 JUMPI PUSH2 0x20B JUMP JUMPDEST DUP1 PUSH4 0x3C6B16AB EQ PUSH2 0x2AD JUMPI DUP1 PUSH4 0x4BA0A5EE EQ PUSH2 0x2C0 JUMPI DUP1 PUSH4 0x556F6E6B EQ PUSH2 0x2F3 JUMPI DUP1 PUSH4 0x568A2D98 EQ PUSH2 0x306 JUMPI PUSH2 0x20B JUMP JUMPDEST DUP1 PUSH4 0x1C1F78EB GT PUSH2 0x1DE JUMPI DUP1 PUSH4 0x1C1F78EB EQ PUSH2 0x274 JUMPI DUP1 PUSH4 0x25D5971F EQ PUSH2 0x27C JUMPI DUP1 PUSH4 0x2E558D69 EQ PUSH2 0x291 JUMPI DUP1 PUSH4 0x386A9525 EQ PUSH2 0x2A4 JUMPI PUSH2 0x20B JUMP JUMPDEST DUP1 PUSH4 0x700037D EQ PUSH2 0x210 JUMPI DUP1 PUSH4 0xD668087 EQ PUSH2 0x243 JUMPI DUP1 PUSH4 0x12A7F661 EQ PUSH2 0x24C JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x26C JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x230 PUSH2 0x21E CALLDATASIZE PUSH1 0x4 PUSH2 0x1D93 JUMP JUMPDEST PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x230 PUSH1 0xA SLOAD DUP2 JUMP JUMPDEST PUSH2 0x230 PUSH2 0x25A CALLDATASIZE PUSH1 0x4 PUSH2 0x1D93 JUMP JUMPDEST PUSH1 0xD PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x230 PUSH2 0x4A5 JUMP JUMPDEST PUSH2 0x230 PUSH2 0x4AC JUMP JUMPDEST PUSH2 0x28F PUSH2 0x28A CALLDATASIZE PUSH1 0x4 PUSH2 0x1E66 JUMP JUMPDEST PUSH2 0x4CA JUMP JUMPDEST STOP JUMPDEST PUSH2 0x28F PUSH2 0x29F CALLDATASIZE PUSH1 0x4 PUSH2 0x1DD6 JUMP JUMPDEST PUSH2 0x803 JUMP JUMPDEST PUSH2 0x230 PUSH1 0x7 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x28F PUSH2 0x2BB CALLDATASIZE PUSH1 0x4 PUSH2 0x1E66 JUMP JUMPDEST PUSH2 0xC79 JUMP JUMPDEST PUSH2 0x2E3 PUSH2 0x2CE CALLDATASIZE PUSH1 0x4 PUSH2 0x1D93 JUMP JUMPDEST PUSH1 0xE PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x23A JUMP JUMPDEST PUSH2 0x28F PUSH2 0x301 CALLDATASIZE PUSH1 0x4 PUSH2 0x1E66 JUMP JUMPDEST PUSH2 0xEFF JUMP JUMPDEST PUSH2 0x33B PUSH2 0x314 CALLDATASIZE PUSH1 0x4 PUSH2 0x1D93 JUMP JUMPDEST PUSH1 0x10 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 DUP4 ADD SLOAD PUSH1 0x3 SWAP1 SWAP4 ADD SLOAD SWAP2 SWAP3 SWAP1 SWAP2 DUP5 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP5 DUP6 MSTORE PUSH1 0x20 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE SWAP2 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD PUSH2 0x23A JUMP JUMPDEST PUSH2 0x230 PUSH2 0x369 CALLDATASIZE PUSH1 0x4 PUSH2 0x1D93 JUMP JUMPDEST PUSH2 0xFBB JUMP JUMPDEST PUSH2 0x28F PUSH2 0xFDA JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH2 0x389 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x23A JUMP JUMPDEST PUSH2 0x230 PUSH1 0x6 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x230 PUSH2 0x1096 JUMP JUMPDEST PUSH2 0x28F PUSH2 0x3C0 CALLDATASIZE PUSH1 0x4 PUSH2 0x1DAD JUMP JUMPDEST PUSH2 0x10A4 JUMP JUMPDEST PUSH2 0x230 PUSH2 0x3D3 CALLDATASIZE PUSH1 0x4 PUSH2 0x1D93 JUMP JUMPDEST PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x389 JUMP JUMPDEST PUSH2 0x230 PUSH1 0xF SLOAD DUP2 JUMP JUMPDEST PUSH2 0x28F PUSH2 0x40D CALLDATASIZE PUSH1 0x4 PUSH2 0x1E66 JUMP JUMPDEST PUSH2 0x116A JUMP JUMPDEST PUSH2 0x28F PUSH2 0x420 CALLDATASIZE PUSH1 0x4 PUSH2 0x1E66 JUMP JUMPDEST PUSH2 0x1329 JUMP JUMPDEST PUSH2 0x230 PUSH1 0x11 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x28F PUSH2 0x1388 JUMP JUMPDEST PUSH2 0x230 PUSH1 0x8 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x28F PUSH2 0x44D CALLDATASIZE PUSH1 0x4 PUSH2 0x1E66 JUMP JUMPDEST PUSH2 0x14AC JUMP JUMPDEST PUSH2 0x230 PUSH2 0x15DE JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH2 0x389 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x230 PUSH2 0x47B CALLDATASIZE PUSH1 0x4 PUSH2 0x1D93 JUMP JUMPDEST PUSH2 0x1632 JUMP JUMPDEST PUSH2 0x230 PUSH1 0x9 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x230 PUSH1 0x5 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x28F PUSH2 0x4A0 CALLDATASIZE PUSH1 0x4 PUSH2 0x1D93 JUMP JUMPDEST PUSH2 0x16A4 JUMP JUMPDEST PUSH1 0x12 SLOAD JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4C5 PUSH1 0x7 SLOAD PUSH1 0x6 SLOAD PUSH2 0x17EE SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SLOAD EQ ISZERO PUSH2 0x522 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x0 SSTORE CALLER PUSH2 0x530 PUSH2 0x15DE JUMP JUMPDEST PUSH1 0x9 SSTORE PUSH2 0x53B PUSH2 0x1096 JUMP JUMPDEST PUSH1 0x8 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH2 0x582 JUMPI PUSH2 0x556 DUP2 PUSH2 0x1632 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE PUSH1 0x9 SLOAD PUSH1 0xB SWAP1 SWAP2 MSTORE SWAP2 SWAP1 KECCAK256 SSTORE JUMPDEST PUSH1 0x0 DUP3 GT PUSH2 0x5D2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43616E6E6F742077697468647261772030000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x519 JUMP JUMPDEST PUSH1 0xA SLOAD CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x5EF SWAP2 SWAP1 PUSH2 0x1F38 JUMP JUMPDEST TIMESTAMP LT ISZERO PUSH2 0x5FB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x12 SLOAD PUSH2 0x608 SWAP1 DUP4 PUSH2 0x1801 JUMP JUMPDEST PUSH1 0x12 SSTORE CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x13 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x625 SWAP1 DUP4 PUSH2 0x1801 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x13 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE PUSH1 0xE SWAP1 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x7AD JUMPI PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD PUSH32 0xE57466FD00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x0 SWAP2 DUP3 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0xE57466FD SWAP1 PUSH1 0x24 ADD PUSH1 0x80 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6AA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x6BE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x6E2 SWAP2 SWAP1 PUSH2 0x1E96 JUMP JUMPDEST POP SWAP1 SWAP4 POP SWAP1 SWAP2 POP POP PUSH9 0x1A055690D9DB80000 DUP3 LT PUSH2 0x742 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4D696772617465206163636F756E742066697273740000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x519 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x10 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP2 MLOAD PUSH1 0x80 DUP2 ADD DUP4 MSTORE DUP2 SLOAD DUP2 MSTORE PUSH1 0x1 DUP3 ADD SLOAD SWAP4 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x2 DUP2 ADD SLOAD SWAP2 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x3 ADD SLOAD PUSH1 0x60 DUP3 ADD MSTORE PUSH2 0x78A SWAP1 PUSH2 0x180D JUMP JUMPDEST SWAP1 POP DUP5 DUP2 LT PUSH2 0x79C JUMPI PUSH1 0x0 SWAP5 POP PUSH2 0x7A9 JUMP JUMPDEST PUSH2 0x7A6 DUP2 DUP7 PUSH2 0x1FC6 JUMP JUMPDEST SWAP5 POP JUMPDEST POP POP POP JUMPDEST PUSH1 0x4 SLOAD PUSH2 0x7C4 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER DUP5 PUSH2 0x19B7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP3 DUP2 MSTORE CALLER SWAP1 PUSH32 0x7084F5476618D8E60B11EF0D7D3F06914655ADB8793E28FF7F018D4C76D505D5 SWAP1 PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP PUSH1 0x1 PUSH1 0x0 SSTORE JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x85D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x519 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xFB3935EE PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x8AB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x8BF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x8E3 SWAP2 SWAP1 PUSH2 0x1E7E JUMP JUMPDEST PUSH1 0xF DUP2 SWAP1 SSTORE PUSH1 0x2 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH32 0x8275198200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SWAP1 MLOAD PUSH1 0x0 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 PUSH4 0x82751982 SWAP2 PUSH1 0x4 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x946 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x95A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x97E SWAP2 SWAP1 PUSH2 0x1E7E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 JUMPDEST DUP1 DUP6 GT ISZERO PUSH2 0xC71 JUMPI PUSH1 0x0 DUP7 DUP7 DUP4 DUP2 DUP2 LT PUSH2 0x9C7 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x9DC SWAP2 SWAP1 PUSH2 0x1D93 JUMP JUMPDEST SWAP1 POP PUSH2 0xA09 PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD PUSH32 0xE57466FD00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE SWAP1 SWAP2 AND SWAP1 PUSH4 0xE57466FD SWAP1 PUSH1 0x24 ADD PUSH1 0x80 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xA67 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xA7B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xA9F SWAP2 SWAP1 PUSH2 0x1E96 JUMP JUMPDEST PUSH1 0x60 DUP6 ADD MSTORE PUSH1 0x40 DUP5 ADD MSTORE PUSH1 0x20 DUP4 ADD MSTORE DUP1 DUP3 MSTORE PUSH1 0x12 SLOAD PUSH2 0xABE SWAP1 DUP3 PUSH2 0x1A83 JUMP JUMPDEST PUSH1 0x12 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x13 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0xAE4 SWAP1 DUP3 PUSH2 0x1A83 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x13 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE PUSH1 0xA SLOAD PUSH1 0x60 DUP4 ADD MLOAD PUSH2 0xB0F SWAP2 SWAP1 PUSH2 0x1FC6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xD PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE PUSH1 0xE DUP2 MSTORE DUP3 DUP3 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x1 SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x10 DUP3 MSTORE SWAP2 DUP4 SWAP1 KECCAK256 DUP6 MLOAD DUP2 SSTORE SWAP1 DUP6 ADD MLOAD SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 SSTORE SWAP1 DUP4 ADD MLOAD PUSH1 0x2 DUP3 ADD SSTORE PUSH1 0x60 DUP4 ADD MLOAD PUSH1 0x3 SWAP1 SWAP2 ADD DUP2 SWAP1 SSTORE TIMESTAMP LT ISZERO PUSH2 0xC42 JUMPI PUSH1 0x0 TIMESTAMP DUP4 PUSH1 0x60 ADD MLOAD PUSH2 0xBA7 SWAP2 SWAP1 PUSH2 0x1FC6 JUMP JUMPDEST SWAP1 POP PUSH3 0x278D00 DUP2 GT ISZERO PUSH2 0xC40 JUMPI PUSH1 0x0 PUSH1 0x3 PUSH3 0x76A700 PUSH2 0xBC6 DUP5 DUP3 PUSH2 0x1FC6 JUMP JUMPDEST DUP12 DUP8 PUSH1 0x20 ADD MLOAD DUP13 PUSH2 0xBD7 SWAP2 SWAP1 PUSH2 0x1F89 JUMP JUMPDEST PUSH2 0xBE1 SWAP2 SWAP1 PUSH2 0x1F50 JUMP JUMPDEST PUSH2 0xBEB SWAP2 SWAP1 PUSH2 0x1F89 JUMP JUMPDEST PUSH2 0xBF5 SWAP2 SWAP1 PUSH2 0x1F50 JUMP JUMPDEST PUSH2 0xBFF SWAP2 SWAP1 PUSH2 0x1F50 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD SWAP3 SWAP4 POP DUP4 SWAP3 SWAP1 SWAP2 SWAP1 PUSH2 0xC2C SWAP1 DUP5 SWAP1 PUSH2 0x1F38 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP PUSH2 0xC3C SWAP1 POP DUP2 DUP9 PUSH2 0x1F38 JUMP JUMPDEST SWAP7 POP POP JUMPDEST POP JUMPDEST DUP5 PUSH1 0x11 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0xC54 SWAP2 SWAP1 PUSH2 0x1F38 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP POP POP POP DUP1 DUP1 PUSH2 0xC69 SWAP1 PUSH2 0x2009 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x984 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xCD3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x519 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xCDD PUSH2 0x15DE JUMP JUMPDEST PUSH1 0x9 SSTORE PUSH2 0xCE8 PUSH2 0x1096 JUMP JUMPDEST PUSH1 0x8 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH2 0xD2F JUMPI PUSH2 0xD03 DUP2 PUSH2 0x1632 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE PUSH1 0x9 SLOAD PUSH1 0xB SWAP1 SWAP2 MSTORE SWAP2 SWAP1 KECCAK256 SSTORE JUMPDEST PUSH1 0x11 SLOAD ISZERO PUSH2 0xD4C JUMPI PUSH1 0x11 SLOAD PUSH2 0xD44 SWAP1 DUP4 PUSH2 0x1FC6 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x11 SSTORE SWAP2 POP JUMPDEST PUSH1 0x5 SLOAD TIMESTAMP LT PUSH2 0xD6B JUMPI PUSH1 0x7 SLOAD PUSH2 0xD63 SWAP1 DUP4 SWAP1 PUSH2 0x1A8F JUMP JUMPDEST PUSH1 0x6 SSTORE PUSH2 0xDB4 JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x0 SWAP1 PUSH2 0xD7B SWAP1 TIMESTAMP PUSH2 0x1801 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xD94 PUSH1 0x6 SLOAD DUP4 PUSH2 0x17EE SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x7 SLOAD SWAP1 SWAP2 POP PUSH2 0xDAE SWAP1 PUSH2 0xDA8 DUP7 DUP5 PUSH2 0x1A83 JUMP JUMPDEST SWAP1 PUSH2 0x1A8F JUMP JUMPDEST PUSH1 0x6 SSTORE POP POP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x40 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x0 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xE11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xE25 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xE49 SWAP2 SWAP1 PUSH2 0x1E7E JUMP JUMPDEST SWAP1 POP PUSH2 0xE60 PUSH1 0x7 SLOAD DUP3 PUSH2 0x1A8F SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x6 SLOAD GT ISZERO PUSH2 0xEB1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x50726F76696465642072657761726420746F6F20686967680000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x519 JUMP JUMPDEST TIMESTAMP PUSH1 0x8 DUP2 SWAP1 SSTORE PUSH1 0x7 SLOAD PUSH2 0xEC4 SWAP2 SWAP1 PUSH2 0x1A83 JUMP JUMPDEST PUSH1 0x5 SSTORE PUSH1 0x40 MLOAD DUP4 DUP2 MSTORE PUSH32 0xDE88A922E0D3B88B24E9623EFEB464919C6BF9F66857A65E2BFCF2CE87A9433D SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xF59 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x519 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF63 PUSH2 0x15DE JUMP JUMPDEST PUSH1 0x9 SSTORE PUSH2 0xF6E PUSH2 0x1096 JUMP JUMPDEST PUSH1 0x8 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH2 0xFB5 JUMPI PUSH2 0xF89 DUP2 PUSH2 0x1632 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE PUSH1 0x9 SLOAD PUSH1 0xB SWAP1 SWAP2 MSTORE SWAP2 SWAP1 KECCAK256 SSTORE JUMPDEST POP PUSH1 0x5 SSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x13 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x1034 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x519 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x0 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP4 SWAP1 LOG3 PUSH1 0x1 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4C5 TIMESTAMP PUSH1 0x5 SLOAD PUSH2 0x1A9B JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x10FE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x519 JUMP JUMPDEST PUSH2 0x1124 PUSH2 0x1113 PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 DUP4 PUSH2 0x19B7 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP4 SWAP1 MSTORE PUSH32 0x8C1256B8896378CD5044F80C202F9772B9D77DC85C8A6EB51967210B09BFAA28 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SLOAD EQ ISZERO PUSH2 0x11BD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x519 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SSTORE CALLER PUSH2 0x11CB PUSH2 0x15DE JUMP JUMPDEST PUSH1 0x9 SSTORE PUSH2 0x11D6 PUSH2 0x1096 JUMP JUMPDEST PUSH1 0x8 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH2 0x121D JUMPI PUSH2 0x11F1 DUP2 PUSH2 0x1632 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE PUSH1 0x9 SLOAD PUSH1 0xB SWAP1 SWAP2 MSTORE SWAP2 SWAP1 KECCAK256 SSTORE JUMPDEST PUSH1 0x0 DUP3 GT PUSH2 0x126D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43616E6E6F74207374616B652030000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x519 JUMP JUMPDEST PUSH1 0x12 SLOAD PUSH2 0x127A SWAP1 DUP4 PUSH2 0x1A83 JUMP JUMPDEST PUSH1 0x12 SSTORE CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x13 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x1297 SWAP1 DUP4 PUSH2 0x1A83 JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x13 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP2 SWAP1 SWAP2 SSTORE PUSH1 0x4 SLOAD PUSH2 0x12C4 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 ADDRESS DUP6 PUSH2 0x1AB1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP3 DUP2 MSTORE CALLER SWAP1 PUSH32 0x9E71BC8EEA02A63969F509818F2DAFB9254532904319F9DBDA79B67BD34A5F3D SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x1320 JUMPI CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 TIMESTAMP SWAP1 SSTORE JUMPDEST POP POP PUSH1 0x1 PUSH1 0x0 SSTORE JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x1383 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x519 JUMP JUMPDEST PUSH1 0xA SSTORE JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SLOAD EQ ISZERO PUSH2 0x13DB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x519 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SSTORE CALLER PUSH2 0x13E9 PUSH2 0x15DE JUMP JUMPDEST PUSH1 0x9 SSTORE PUSH2 0x13F4 PUSH2 0x1096 JUMP JUMPDEST PUSH1 0x8 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH2 0x143B JUMPI PUSH2 0x140F DUP2 PUSH2 0x1632 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE PUSH1 0x9 SLOAD PUSH1 0xB SWAP1 SWAP2 MSTORE SWAP2 SWAP1 KECCAK256 SSTORE JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP1 ISZERO PUSH2 0x1320 JUMPI CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SSTORE PUSH1 0x3 SLOAD PUSH2 0x147A SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 DUP4 PUSH2 0x19B7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 MSTORE CALLER SWAP1 PUSH32 0xE2403640BA68FED3A2F88B7557551D1993F84B99BB10FF833F0CF8DB0C5E0486 SWAP1 PUSH1 0x20 ADD PUSH2 0x7F2 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x1506 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x519 JUMP JUMPDEST PUSH1 0x5 SLOAD TIMESTAMP GT PUSH2 0x15A3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x58 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x50726576696F7573207265776172647320706572696F64206D75737420626520 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x636F6D706C657465206265666F7265206368616E67696E672074686520647572 PUSH1 0x64 DUP3 ADD MSTORE PUSH32 0x6174696F6E20666F7220746865206E657720706572696F640000000000000000 PUSH1 0x84 DUP3 ADD MSTORE PUSH1 0xA4 ADD PUSH2 0x519 JUMP JUMPDEST PUSH1 0x7 DUP2 SWAP1 SSTORE PUSH1 0x40 MLOAD DUP2 DUP2 MSTORE PUSH32 0xFB46CA5A5E06D4540D6387B930A7C978BCE0DB5F449EC6B3F5D07C6E1D44F2D3 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x12 SLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x15F4 JUMPI POP PUSH1 0x9 SLOAD PUSH2 0x4A9 JUMP JUMPDEST PUSH2 0x4C5 PUSH2 0x1629 PUSH1 0x12 SLOAD PUSH2 0xDA8 PUSH8 0xDE0B6B3A7640000 PUSH2 0x1623 PUSH1 0x6 SLOAD PUSH2 0x1623 PUSH1 0x8 SLOAD PUSH2 0x161D PUSH2 0x1096 JUMP JUMPDEST SWAP1 PUSH2 0x1801 JUMP JUMPDEST SWAP1 PUSH2 0x17EE JUMP JUMPDEST PUSH1 0x9 SLOAD SWAP1 PUSH2 0x1A83 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD PUSH1 0xB SWAP1 SWAP3 MSTORE DUP3 KECCAK256 SLOAD PUSH2 0x169E SWAP2 SWAP1 PUSH2 0x1698 SWAP1 PUSH8 0xDE0B6B3A7640000 SWAP1 PUSH2 0xDA8 SWAP1 PUSH2 0x1679 SWAP1 PUSH2 0x161D PUSH2 0x15DE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x13 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 PUSH2 0x17EE JUMP JUMPDEST SWAP1 PUSH2 0x1A83 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x16FE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x519 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x177A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x519 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP5 AND SWAP3 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 PUSH1 0x1 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x17FA DUP3 DUP5 PUSH2 0x1F89 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x17FA DUP3 DUP5 PUSH2 0x1FC6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xC8D65D59 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x185E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1872 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1896 SWAP2 SWAP1 PUSH2 0x1E7E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0xF SLOAD PUSH1 0x1 PUSH2 0x18A9 SWAP2 SWAP1 PUSH2 0x1F38 JUMP JUMPDEST PUSH1 0x20 DUP6 ADD MLOAD PUSH1 0x40 DUP7 ADD MLOAD PUSH2 0x18BD SWAP1 DUP6 PUSH2 0x1FC6 JUMP JUMPDEST PUSH2 0x18C7 SWAP2 SWAP1 PUSH2 0x1F89 JUMP JUMPDEST PUSH2 0x18D1 SWAP2 SWAP1 PUSH2 0x1F50 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xFB3935EE PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1923 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1937 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x195B SWAP2 SWAP1 PUSH2 0x1E7E JUMP JUMPDEST PUSH2 0x1966 SWAP1 PUSH1 0x1 PUSH2 0x1F38 JUMP JUMPDEST PUSH1 0x20 DUP7 ADD MLOAD PUSH1 0x40 DUP8 ADD MLOAD PUSH2 0x197A SWAP1 DUP7 PUSH2 0x1FC6 JUMP JUMPDEST PUSH2 0x1984 SWAP2 SWAP1 PUSH2 0x1F89 JUMP JUMPDEST PUSH2 0x198E SWAP2 SWAP1 PUSH2 0x1F50 JUMP JUMPDEST SWAP1 POP DUP1 DUP3 LT PUSH2 0x19A3 JUMPI PUSH1 0x0 SWAP4 POP POP POP POP PUSH2 0xFD5 JUMP JUMPDEST PUSH2 0x19AD DUP3 DUP3 PUSH2 0x1FC6 JUMP JUMPDEST SWAP4 POP POP POP POP PUSH2 0xFD5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x1A7E SWAP1 DUP5 SWAP1 PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 SWAP1 PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE PUSH2 0x1B08 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x17FA DUP3 DUP5 PUSH2 0x1F38 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x17FA DUP3 DUP5 PUSH2 0x1F50 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0x1AAA JUMPI DUP2 PUSH2 0x17FA JUMP JUMPDEST POP SWAP1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x24 DUP4 ADD MSTORE DUP4 AND PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x1B02 SWAP1 DUP6 SWAP1 PUSH32 0x23B872DD00000000000000000000000000000000000000000000000000000000 SWAP1 PUSH1 0x84 ADD PUSH2 0x19FC JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1B5D DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1BED SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0x1A7E JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x1B7B SWAP2 SWAP1 PUSH2 0x1E46 JUMP JUMPDEST PUSH2 0x1A7E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6F74207375636365656400000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x519 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1BFC DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0x1C04 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0x1C7C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E636520666F PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x722063616C6C0000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x519 JUMP JUMPDEST DUP5 EXTCODESIZE PUSH2 0x1CCA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x519 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0x1CE6 SWAP2 SWAP1 PUSH2 0x1ECB JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1D23 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1D28 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x1D38 DUP3 DUP3 DUP7 PUSH2 0x1D43 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x1D52 JUMPI POP DUP2 PUSH2 0x17FA JUMP JUMPDEST DUP3 MLOAD ISZERO PUSH2 0x1D62 JUMPI DUP3 MLOAD DUP1 DUP5 PUSH1 0x20 ADD REVERT JUMPDEST DUP2 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x519 SWAP2 SWAP1 PUSH2 0x1EE7 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xFD5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1DA4 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x17FA DUP3 PUSH2 0x1D7C JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1DBF JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x1DC8 DUP4 PUSH2 0x1D7C JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1DE8 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1DFF JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1E12 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x1E20 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP7 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x1E34 JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH1 0x20 SWAP3 SWAP1 SWAP3 ADD SWAP7 SWAP2 SWAP6 POP SWAP1 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1E57 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x17FA JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1E77 JUMPI DUP1 DUP2 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1E8F JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1EAB JUMPI DUP2 DUP3 REVERT JUMPDEST POP POP DUP3 MLOAD PUSH1 0x20 DUP5 ADD MLOAD PUSH1 0x40 DUP6 ADD MLOAD PUSH1 0x60 SWAP1 SWAP6 ADD MLOAD SWAP2 SWAP7 SWAP1 SWAP6 POP SWAP1 SWAP3 POP SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x1EDD DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x1FDD JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x1F06 DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x1FDD JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x1F4B JUMPI PUSH2 0x1F4B PUSH2 0x2042 JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x1F84 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 DUP2 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x1FC1 JUMPI PUSH2 0x1FC1 PUSH2 0x2042 JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x1FD8 JUMPI PUSH2 0x1FD8 PUSH2 0x2042 JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1FF8 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1FE0 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x1B02 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 EQ ISZERO PUSH2 0x203B JUMPI PUSH2 0x203B PUSH2 0x2042 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH7 0x5E6045DC536BE3 DUP7 0xD 0xA7 0x1F 0x2D PUSH31 0x42195DCC7EAC1BD466680666EC319B53076464736F6C634300080300330000 ",
          "sourceMap": "424:9711:29:-:0;;;709:1;679:31;;744:1;716:29;;784:7;751:40;;900:7;874:33;;1435:268;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;1637:1:1;1743:7;:22;;;909:18:0;;-1:-1:-1;;;;;;909:18:0;665:10:5;909:18:0;;;;;;942:43;;665:10:5;;1743:7:1;942:43:0;;1743:7:1;;942:43:0;-1:-1:-1;1567:12:29::1;:36:::0;;-1:-1:-1;;;;;1567:36:29;;::::1;-1:-1:-1::0;;;;;;1567:36:29;;::::1;;::::0;;;1613:12:::1;:36:::0;;;;::::1;::::0;;::::1;::::0;;;::::1;::::0;;;1659:6:::1;:37:::0;;;;;::::1;::::0;::::1;;::::0;;424:9711;;14:177:48;93:13;;-1:-1:-1;;;;;135:31:48;;125:42;;115:2;;181:1;178;171:12;115:2;74:117;;;:::o;196:388::-;;;;353:2;341:9;332:7;328:23;324:32;321:2;;;374:6;366;359:22;321:2;402:40;432:9;402:40;:::i;:::-;392:50;;461:49;506:2;495:9;491:18;461:49;:::i;:::-;451:59;;529:49;574:2;563:9;559:18;529:49;:::i;:::-;519:59;;311:273;;;;;:::o;:::-;424:9711:29;;;;;;"
        },
        "deployedBytecode": {
          "generatedSources": [
            {
              "ast": {
                "nodeType": "YulBlock",
                "src": "0:10728:48",
                "statements": [
                  {
                    "nodeType": "YulBlock",
                    "src": "6:3:48",
                    "statements": []
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "63:147:48",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "73:29:48",
                          "value": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "95:6:48"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "82:12:48"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "82:20:48"
                          },
                          "variableNames": [
                            {
                              "name": "value",
                              "nodeType": "YulIdentifier",
                              "src": "73:5:48"
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "188:16:48",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "197:1:48",
                                      "type": "",
                                      "value": "0"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "200:1:48",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "190:6:48"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "190:12:48"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "190:12:48"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "124:5:48"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "name": "value",
                                        "nodeType": "YulIdentifier",
                                        "src": "135:5:48"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "142:42:48",
                                        "type": "",
                                        "value": "0xffffffffffffffffffffffffffffffffffffffff"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "131:3:48"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "131:54:48"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "121:2:48"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "121:65:48"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "114:6:48"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "114:73:48"
                          },
                          "nodeType": "YulIf",
                          "src": "111:2:48"
                        }
                      ]
                    },
                    "name": "abi_decode_address",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "offset",
                        "nodeType": "YulTypedName",
                        "src": "42:6:48",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "53:5:48",
                        "type": ""
                      }
                    ],
                    "src": "14:196:48"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "285:126:48",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "331:26:48",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "340:6:48"
                                    },
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "348:6:48"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "333:6:48"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "333:22:48"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "333:22:48"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "306:7:48"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "315:9:48"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "302:3:48"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "302:23:48"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "327:2:48",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "298:3:48"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "298:32:48"
                          },
                          "nodeType": "YulIf",
                          "src": "295:2:48"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "366:39:48",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "395:9:48"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_address",
                              "nodeType": "YulIdentifier",
                              "src": "376:18:48"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "376:29:48"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "366:6:48"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_address",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "251:9:48",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "262:7:48",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "274:6:48",
                        "type": ""
                      }
                    ],
                    "src": "215:196:48"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "503:177:48",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "549:26:48",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value1",
                                      "nodeType": "YulIdentifier",
                                      "src": "558:6:48"
                                    },
                                    {
                                      "name": "value1",
                                      "nodeType": "YulIdentifier",
                                      "src": "566:6:48"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "551:6:48"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "551:22:48"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "551:22:48"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "524:7:48"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "533:9:48"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "520:3:48"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "520:23:48"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "545:2:48",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "516:3:48"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "516:32:48"
                          },
                          "nodeType": "YulIf",
                          "src": "513:2:48"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "584:39:48",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "613:9:48"
                              }
                            ],
                            "functionName": {
                              "name": "abi_decode_address",
                              "nodeType": "YulIdentifier",
                              "src": "594:18:48"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "594:29:48"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "584:6:48"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "632:42:48",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "659:9:48"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "670:2:48",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "655:3:48"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "655:18:48"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "642:12:48"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "642:32:48"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "632:6:48"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_addresst_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "461:9:48",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "472:7:48",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "484:6:48",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "492:6:48",
                        "type": ""
                      }
                    ],
                    "src": "416:264:48"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "790:560:48",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "836:26:48",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "845:6:48"
                                    },
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "853:6:48"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "838:6:48"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "838:22:48"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "838:22:48"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "811:7:48"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "820:9:48"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "807:3:48"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "807:23:48"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "832:2:48",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "803:3:48"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "803:32:48"
                          },
                          "nodeType": "YulIf",
                          "src": "800:2:48"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "871:37:48",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "898:9:48"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "885:12:48"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "885:23:48"
                          },
                          "variables": [
                            {
                              "name": "offset",
                              "nodeType": "YulTypedName",
                              "src": "875:6:48",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "917:28:48",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "927:18:48",
                            "type": "",
                            "value": "0xffffffffffffffff"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "921:2:48",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "972:26:48",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "981:6:48"
                                    },
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "989:6:48"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "974:6:48"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "974:22:48"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "974:22:48"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "960:6:48"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "968:2:48"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "957:2:48"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "957:14:48"
                          },
                          "nodeType": "YulIf",
                          "src": "954:2:48"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1007:32:48",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1021:9:48"
                              },
                              {
                                "name": "offset",
                                "nodeType": "YulIdentifier",
                                "src": "1032:6:48"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1017:3:48"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1017:22:48"
                          },
                          "variables": [
                            {
                              "name": "_2",
                              "nodeType": "YulTypedName",
                              "src": "1011:2:48",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1087:26:48",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "1096:6:48"
                                    },
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "1104:6:48"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "1089:6:48"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1089:22:48"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1089:22:48"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_2",
                                        "nodeType": "YulIdentifier",
                                        "src": "1066:2:48"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "1070:4:48",
                                        "type": "",
                                        "value": "0x1f"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "1062:3:48"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1062:13:48"
                                  },
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "1077:7:48"
                                  }
                                ],
                                "functionName": {
                                  "name": "slt",
                                  "nodeType": "YulIdentifier",
                                  "src": "1058:3:48"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1058:27:48"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "1051:6:48"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1051:35:48"
                          },
                          "nodeType": "YulIf",
                          "src": "1048:2:48"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1122:30:48",
                          "value": {
                            "arguments": [
                              {
                                "name": "_2",
                                "nodeType": "YulIdentifier",
                                "src": "1149:2:48"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "1136:12:48"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1136:16:48"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nodeType": "YulTypedName",
                              "src": "1126:6:48",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1179:26:48",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "1188:6:48"
                                    },
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "1196:6:48"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "1181:6:48"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1181:22:48"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1181:22:48"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "1167:6:48"
                              },
                              {
                                "name": "_1",
                                "nodeType": "YulIdentifier",
                                "src": "1175:2:48"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "1164:2:48"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1164:14:48"
                          },
                          "nodeType": "YulIf",
                          "src": "1161:2:48"
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1263:26:48",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "1272:6:48"
                                    },
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "1280:6:48"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "1265:6:48"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1265:22:48"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1265:22:48"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "_2",
                                        "nodeType": "YulIdentifier",
                                        "src": "1228:2:48"
                                      },
                                      {
                                        "arguments": [
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "1236:1:48",
                                            "type": "",
                                            "value": "5"
                                          },
                                          {
                                            "name": "length",
                                            "nodeType": "YulIdentifier",
                                            "src": "1239:6:48"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "shl",
                                          "nodeType": "YulIdentifier",
                                          "src": "1232:3:48"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "1232:14:48"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "add",
                                      "nodeType": "YulIdentifier",
                                      "src": "1224:3:48"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1224:23:48"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "1249:2:48",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "1220:3:48"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1220:32:48"
                              },
                              {
                                "name": "dataEnd",
                                "nodeType": "YulIdentifier",
                                "src": "1254:7:48"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "1217:2:48"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1217:45:48"
                          },
                          "nodeType": "YulIf",
                          "src": "1214:2:48"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1298:21:48",
                          "value": {
                            "arguments": [
                              {
                                "name": "_2",
                                "nodeType": "YulIdentifier",
                                "src": "1312:2:48"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1316:2:48",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "1308:3:48"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1308:11:48"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "1298:6:48"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1328:16:48",
                          "value": {
                            "name": "length",
                            "nodeType": "YulIdentifier",
                            "src": "1338:6:48"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "1328:6:48"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptr",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "748:9:48",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "759:7:48",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "771:6:48",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "779:6:48",
                        "type": ""
                      }
                    ],
                    "src": "685:665:48"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1433:219:48",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1479:26:48",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "1488:6:48"
                                    },
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "1496:6:48"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "1481:6:48"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1481:22:48"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1481:22:48"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "1454:7:48"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1463:9:48"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "1450:3:48"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1450:23:48"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1475:2:48",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "1446:3:48"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1446:32:48"
                          },
                          "nodeType": "YulIf",
                          "src": "1443:2:48"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "1514:29:48",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1533:9:48"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "1527:5:48"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1527:16:48"
                          },
                          "variables": [
                            {
                              "name": "value",
                              "nodeType": "YulTypedName",
                              "src": "1518:5:48",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1596:26:48",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "1605:6:48"
                                    },
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "1613:6:48"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "1598:6:48"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1598:22:48"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1598:22:48"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value",
                                    "nodeType": "YulIdentifier",
                                    "src": "1565:5:48"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "value",
                                            "nodeType": "YulIdentifier",
                                            "src": "1586:5:48"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "iszero",
                                          "nodeType": "YulIdentifier",
                                          "src": "1579:6:48"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "1579:13:48"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nodeType": "YulIdentifier",
                                      "src": "1572:6:48"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "1572:21:48"
                                  }
                                ],
                                "functionName": {
                                  "name": "eq",
                                  "nodeType": "YulIdentifier",
                                  "src": "1562:2:48"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1562:32:48"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "1555:6:48"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1555:40:48"
                          },
                          "nodeType": "YulIf",
                          "src": "1552:2:48"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1631:15:48",
                          "value": {
                            "name": "value",
                            "nodeType": "YulIdentifier",
                            "src": "1641:5:48"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "1631:6:48"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_bool_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "1399:9:48",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "1410:7:48",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "1422:6:48",
                        "type": ""
                      }
                    ],
                    "src": "1355:297:48"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1727:120:48",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1773:26:48",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "1782:6:48"
                                    },
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "1790:6:48"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "1775:6:48"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1775:22:48"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1775:22:48"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "1748:7:48"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1757:9:48"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "1744:3:48"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1744:23:48"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1769:2:48",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "1740:3:48"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1740:32:48"
                          },
                          "nodeType": "YulIf",
                          "src": "1737:2:48"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "1808:33:48",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "1831:9:48"
                              }
                            ],
                            "functionName": {
                              "name": "calldataload",
                              "nodeType": "YulIdentifier",
                              "src": "1818:12:48"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1818:23:48"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "1808:6:48"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "1693:9:48",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "1704:7:48",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "1716:6:48",
                        "type": ""
                      }
                    ],
                    "src": "1657:190:48"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "1933:113:48",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "1979:26:48",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "1988:6:48"
                                    },
                                    {
                                      "name": "value0",
                                      "nodeType": "YulIdentifier",
                                      "src": "1996:6:48"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "1981:6:48"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "1981:22:48"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "1981:22:48"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "1954:7:48"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "1963:9:48"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "1950:3:48"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "1950:23:48"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "1975:2:48",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "1946:3:48"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "1946:32:48"
                          },
                          "nodeType": "YulIf",
                          "src": "1943:2:48"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2014:26:48",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2030:9:48"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "2024:5:48"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2024:16:48"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "2014:6:48"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_uint256_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "1899:9:48",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "1910:7:48",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "1922:6:48",
                        "type": ""
                      }
                    ],
                    "src": "1852:194:48"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2183:246:48",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "2230:26:48",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "value2",
                                      "nodeType": "YulIdentifier",
                                      "src": "2239:6:48"
                                    },
                                    {
                                      "name": "value2",
                                      "nodeType": "YulIdentifier",
                                      "src": "2247:6:48"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "2232:6:48"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "2232:22:48"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "2232:22:48"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "dataEnd",
                                    "nodeType": "YulIdentifier",
                                    "src": "2204:7:48"
                                  },
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2213:9:48"
                                  }
                                ],
                                "functionName": {
                                  "name": "sub",
                                  "nodeType": "YulIdentifier",
                                  "src": "2200:3:48"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2200:23:48"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2225:3:48",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "slt",
                              "nodeType": "YulIdentifier",
                              "src": "2196:3:48"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2196:33:48"
                          },
                          "nodeType": "YulIf",
                          "src": "2193:2:48"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2265:26:48",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2281:9:48"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "2275:5:48"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2275:16:48"
                          },
                          "variableNames": [
                            {
                              "name": "value0",
                              "nodeType": "YulIdentifier",
                              "src": "2265:6:48"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2300:35:48",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2320:9:48"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2331:2:48",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2316:3:48"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2316:18:48"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "2310:5:48"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2310:25:48"
                          },
                          "variableNames": [
                            {
                              "name": "value1",
                              "nodeType": "YulIdentifier",
                              "src": "2300:6:48"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2344:35:48",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2364:9:48"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2375:2:48",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2360:3:48"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2360:18:48"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "2354:5:48"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2354:25:48"
                          },
                          "variableNames": [
                            {
                              "name": "value2",
                              "nodeType": "YulIdentifier",
                              "src": "2344:6:48"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2388:35:48",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "2408:9:48"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2419:2:48",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2404:3:48"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2404:18:48"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "2398:5:48"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2398:25:48"
                          },
                          "variableNames": [
                            {
                              "name": "value3",
                              "nodeType": "YulIdentifier",
                              "src": "2388:6:48"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_decode_tuple_t_uint256t_uint256t_uint256t_uint256_fromMemory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "2125:9:48",
                        "type": ""
                      },
                      {
                        "name": "dataEnd",
                        "nodeType": "YulTypedName",
                        "src": "2136:7:48",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "2148:6:48",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "2156:6:48",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "2164:6:48",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "2172:6:48",
                        "type": ""
                      }
                    ],
                    "src": "2051:378:48"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2571:137:48",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "2581:27:48",
                          "value": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "2601:6:48"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "2595:5:48"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2595:13:48"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nodeType": "YulTypedName",
                              "src": "2585:6:48",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "2643:6:48"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2651:4:48",
                                    "type": "",
                                    "value": "0x20"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "2639:3:48"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2639:17:48"
                              },
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "2658:3:48"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "2663:6:48"
                              }
                            ],
                            "functionName": {
                              "name": "copy_memory_to_memory",
                              "nodeType": "YulIdentifier",
                              "src": "2617:21:48"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2617:53:48"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2617:53:48"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "2679:23:48",
                          "value": {
                            "arguments": [
                              {
                                "name": "pos",
                                "nodeType": "YulIdentifier",
                                "src": "2690:3:48"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "2695:6:48"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "2686:3:48"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2686:16:48"
                          },
                          "variableNames": [
                            {
                              "name": "end",
                              "nodeType": "YulIdentifier",
                              "src": "2679:3:48"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "pos",
                        "nodeType": "YulTypedName",
                        "src": "2547:3:48",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "2552:6:48",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "end",
                        "nodeType": "YulTypedName",
                        "src": "2563:3:48",
                        "type": ""
                      }
                    ],
                    "src": "2434:274:48"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "2814:125:48",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "2824:26:48",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2836:9:48"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "2847:2:48",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "2832:3:48"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2832:18:48"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "2824:4:48"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "2866:9:48"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "2881:6:48"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "2889:42:48",
                                    "type": "",
                                    "value": "0xffffffffffffffffffffffffffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "2877:3:48"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "2877:55:48"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "2859:6:48"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "2859:74:48"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "2859:74:48"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "2783:9:48",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "2794:6:48",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "2805:4:48",
                        "type": ""
                      }
                    ],
                    "src": "2713:226:48"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3101:241:48",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "3111:26:48",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3123:9:48"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3134:2:48",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3119:3:48"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3119:18:48"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "3111:4:48"
                            }
                          ]
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "3146:52:48",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "3156:42:48",
                            "type": "",
                            "value": "0xffffffffffffffffffffffffffffffffffffffff"
                          },
                          "variables": [
                            {
                              "name": "_1",
                              "nodeType": "YulTypedName",
                              "src": "3150:2:48",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3214:9:48"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "3229:6:48"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "3237:2:48"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "3225:3:48"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3225:15:48"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3207:6:48"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3207:34:48"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3207:34:48"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3261:9:48"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3272:2:48",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3257:3:48"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3257:18:48"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value1",
                                    "nodeType": "YulIdentifier",
                                    "src": "3281:6:48"
                                  },
                                  {
                                    "name": "_1",
                                    "nodeType": "YulIdentifier",
                                    "src": "3289:2:48"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "3277:3:48"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3277:15:48"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3250:6:48"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3250:43:48"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3250:43:48"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3313:9:48"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3324:2:48",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3309:3:48"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3309:18:48"
                              },
                              {
                                "name": "value2",
                                "nodeType": "YulIdentifier",
                                "src": "3329:6:48"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3302:6:48"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3302:34:48"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3302:34:48"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "3054:9:48",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "3065:6:48",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "3073:6:48",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "3081:6:48",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "3092:4:48",
                        "type": ""
                      }
                    ],
                    "src": "2944:398:48"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3476:168:48",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "3486:26:48",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3498:9:48"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3509:2:48",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3494:3:48"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3494:18:48"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "3486:4:48"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3528:9:48"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "3543:6:48"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3551:42:48",
                                    "type": "",
                                    "value": "0xffffffffffffffffffffffffffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "3539:3:48"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3539:55:48"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3521:6:48"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3521:74:48"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3521:74:48"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "3615:9:48"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "3626:2:48",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "3611:3:48"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3611:18:48"
                              },
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "3631:6:48"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3604:6:48"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3604:34:48"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3604:34:48"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "3437:9:48",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "3448:6:48",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "3456:6:48",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "3467:4:48",
                        "type": ""
                      }
                    ],
                    "src": "3347:297:48"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3744:92:48",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "3754:26:48",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3766:9:48"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3777:2:48",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3762:3:48"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3762:18:48"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "3754:4:48"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3796:9:48"
                              },
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "value0",
                                        "nodeType": "YulIdentifier",
                                        "src": "3821:6:48"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nodeType": "YulIdentifier",
                                      "src": "3814:6:48"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "3814:14:48"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "3807:6:48"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "3807:22:48"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "3789:6:48"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3789:41:48"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "3789:41:48"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "3713:9:48",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "3724:6:48",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "3735:4:48",
                        "type": ""
                      }
                    ],
                    "src": "3649:187:48"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "3956:125:48",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "3966:26:48",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "3978:9:48"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "3989:2:48",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "3974:3:48"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "3974:18:48"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "3966:4:48"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4008:9:48"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "4023:6:48"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4031:42:48",
                                    "type": "",
                                    "value": "0xffffffffffffffffffffffffffffffffffffffff"
                                  }
                                ],
                                "functionName": {
                                  "name": "and",
                                  "nodeType": "YulIdentifier",
                                  "src": "4019:3:48"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4019:55:48"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4001:6:48"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4001:74:48"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4001:74:48"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_contract$_IERC20_$227__to_t_address__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "3925:9:48",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "3936:6:48",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "3947:4:48",
                        "type": ""
                      }
                    ],
                    "src": "3841:240:48"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "4207:321:48",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4224:9:48"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4235:2:48",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4217:6:48"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4217:21:48"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4217:21:48"
                        },
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "4247:27:48",
                          "value": {
                            "arguments": [
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "4267:6:48"
                              }
                            ],
                            "functionName": {
                              "name": "mload",
                              "nodeType": "YulIdentifier",
                              "src": "4261:5:48"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4261:13:48"
                          },
                          "variables": [
                            {
                              "name": "length",
                              "nodeType": "YulTypedName",
                              "src": "4251:6:48",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4294:9:48"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4305:2:48",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4290:3:48"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4290:18:48"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "4310:6:48"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4283:6:48"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4283:34:48"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4283:34:48"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "value0",
                                    "nodeType": "YulIdentifier",
                                    "src": "4352:6:48"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4360:2:48",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4348:3:48"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4348:15:48"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4369:9:48"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4380:2:48",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4365:3:48"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4365:18:48"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "4385:6:48"
                              }
                            ],
                            "functionName": {
                              "name": "copy_memory_to_memory",
                              "nodeType": "YulIdentifier",
                              "src": "4326:21:48"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4326:66:48"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4326:66:48"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "4401:121:48",
                          "value": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4417:9:48"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "arguments": [
                                          {
                                            "name": "length",
                                            "nodeType": "YulIdentifier",
                                            "src": "4436:6:48"
                                          },
                                          {
                                            "kind": "number",
                                            "nodeType": "YulLiteral",
                                            "src": "4444:2:48",
                                            "type": "",
                                            "value": "31"
                                          }
                                        ],
                                        "functionName": {
                                          "name": "add",
                                          "nodeType": "YulIdentifier",
                                          "src": "4432:3:48"
                                        },
                                        "nodeType": "YulFunctionCall",
                                        "src": "4432:15:48"
                                      },
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "4449:66:48",
                                        "type": "",
                                        "value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "and",
                                      "nodeType": "YulIdentifier",
                                      "src": "4428:3:48"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "4428:88:48"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4413:3:48"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4413:104:48"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4519:2:48",
                                "type": "",
                                "value": "64"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "4409:3:48"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4409:113:48"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "4401:4:48"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "4176:9:48",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "4187:6:48",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "4198:4:48",
                        "type": ""
                      }
                    ],
                    "src": "4086:442:48"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "4707:318:48",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "4724:9:48"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4735:2:48",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4717:6:48"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4717:21:48"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4717:21:48"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4758:9:48"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4769:2:48",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4754:3:48"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4754:18:48"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "4774:2:48",
                                "type": "",
                                "value": "88"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4747:6:48"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4747:30:48"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4747:30:48"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4797:9:48"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4808:2:48",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4793:3:48"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4793:18:48"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "4813:34:48",
                                "type": "",
                                "value": "Previous rewards period must be "
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4786:6:48"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4786:62:48"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4786:62:48"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4868:9:48"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4879:2:48",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4864:3:48"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4864:18:48"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "4884:34:48",
                                "type": "",
                                "value": "complete before changing the dur"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4857:6:48"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4857:62:48"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4857:62:48"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "4939:9:48"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "4950:3:48",
                                    "type": "",
                                    "value": "128"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "4935:3:48"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "4935:19:48"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "4956:26:48",
                                "type": "",
                                "value": "ation for the new period"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "4928:6:48"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "4928:55:48"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "4928:55:48"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "4992:27:48",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5004:9:48"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5015:3:48",
                                "type": "",
                                "value": "160"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "5000:3:48"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5000:19:48"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "4992:4:48"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_07f2725172f5941b576a01ec7036d341e0c837e280f27b110cb3e6fd2f2c4a56__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "4684:9:48",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "4698:4:48",
                        "type": ""
                      }
                    ],
                    "src": "4533:492:48"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "5204:228:48",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5221:9:48"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5232:2:48",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "5214:6:48"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5214:21:48"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5214:21:48"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5255:9:48"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5266:2:48",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5251:3:48"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5251:18:48"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5271:2:48",
                                "type": "",
                                "value": "38"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "5244:6:48"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5244:30:48"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5244:30:48"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5294:9:48"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5305:2:48",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5290:3:48"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5290:18:48"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "5310:34:48",
                                "type": "",
                                "value": "Ownable: new owner is the zero a"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "5283:6:48"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5283:62:48"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5283:62:48"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5365:9:48"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5376:2:48",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5361:3:48"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5361:18:48"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "5381:8:48",
                                "type": "",
                                "value": "ddress"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "5354:6:48"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5354:36:48"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5354:36:48"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "5399:27:48",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5411:9:48"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5422:3:48",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "5407:3:48"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5407:19:48"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "5399:4:48"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "5181:9:48",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "5195:4:48",
                        "type": ""
                      }
                    ],
                    "src": "5030:402:48"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "5611:171:48",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5628:9:48"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5639:2:48",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "5621:6:48"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5621:21:48"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5621:21:48"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5662:9:48"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5673:2:48",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5658:3:48"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5658:18:48"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5678:2:48",
                                "type": "",
                                "value": "21"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "5651:6:48"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5651:30:48"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5651:30:48"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "5701:9:48"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "5712:2:48",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "5697:3:48"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "5697:18:48"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "5717:23:48",
                                "type": "",
                                "value": "Migrate account first"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "5690:6:48"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5690:51:48"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5690:51:48"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "5750:26:48",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5762:9:48"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5773:2:48",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "5758:3:48"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5758:18:48"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "5750:4:48"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_271d28679ffc475275171ac55b009a00a6f78f6adf068327c76e7639656e6c6c__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "5588:9:48",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "5602:4:48",
                        "type": ""
                      }
                    ],
                    "src": "5437:345:48"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "5961:164:48",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "5978:9:48"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "5989:2:48",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "5971:6:48"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "5971:21:48"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "5971:21:48"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "6012:9:48"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6023:2:48",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6008:3:48"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6008:18:48"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6028:2:48",
                                "type": "",
                                "value": "14"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6001:6:48"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6001:30:48"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6001:30:48"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "6051:9:48"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6062:2:48",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6047:3:48"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6047:18:48"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "6067:16:48",
                                "type": "",
                                "value": "Cannot stake 0"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6040:6:48"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6040:44:48"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6040:44:48"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "6093:26:48",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6105:9:48"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6116:2:48",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "6101:3:48"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6101:18:48"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "6093:4:48"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_2972ce884b95fc24c703b7f04fae79e4ca7287e77fa26ed09d1faa4263e887ab__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "5938:9:48",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "5952:4:48",
                        "type": ""
                      }
                    ],
                    "src": "5787:338:48"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "6304:228:48",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6321:9:48"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6332:2:48",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6314:6:48"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6314:21:48"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6314:21:48"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "6355:9:48"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6366:2:48",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6351:3:48"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6351:18:48"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6371:2:48",
                                "type": "",
                                "value": "38"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6344:6:48"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6344:30:48"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6344:30:48"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "6394:9:48"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6405:2:48",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6390:3:48"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6390:18:48"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "6410:34:48",
                                "type": "",
                                "value": "Address: insufficient balance fo"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6383:6:48"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6383:62:48"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6383:62:48"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "6465:9:48"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6476:2:48",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6461:3:48"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6461:18:48"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "6481:8:48",
                                "type": "",
                                "value": "r call"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6454:6:48"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6454:36:48"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6454:36:48"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "6499:27:48",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6511:9:48"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6522:3:48",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "6507:3:48"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6507:19:48"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "6499:4:48"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "6281:9:48",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "6295:4:48",
                        "type": ""
                      }
                    ],
                    "src": "6130:402:48"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "6711:167:48",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6728:9:48"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6739:2:48",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6721:6:48"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6721:21:48"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6721:21:48"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "6762:9:48"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6773:2:48",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6758:3:48"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6758:18:48"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6778:2:48",
                                "type": "",
                                "value": "17"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6751:6:48"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6751:30:48"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6751:30:48"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "6801:9:48"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "6812:2:48",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "6797:3:48"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "6797:18:48"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "6817:19:48",
                                "type": "",
                                "value": "Cannot withdraw 0"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "6790:6:48"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6790:47:48"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "6790:47:48"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "6846:26:48",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "6858:9:48"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "6869:2:48",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "6854:3:48"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "6854:18:48"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "6846:4:48"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_8d85b8e7f4404d04d93e8d532ad219ceeba0becfbc18622bad46b31e08b1f0b0__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "6688:9:48",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "6702:4:48",
                        "type": ""
                      }
                    ],
                    "src": "6537:341:48"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "7057:182:48",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7074:9:48"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7085:2:48",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7067:6:48"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7067:21:48"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7067:21:48"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7108:9:48"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7119:2:48",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7104:3:48"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7104:18:48"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7124:2:48",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7097:6:48"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7097:30:48"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7097:30:48"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7147:9:48"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7158:2:48",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7143:3:48"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7143:18:48"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "7163:34:48",
                                "type": "",
                                "value": "Ownable: caller is not the owner"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7136:6:48"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7136:62:48"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7136:62:48"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "7207:26:48",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7219:9:48"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7230:2:48",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "7215:3:48"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7215:18:48"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "7207:4:48"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "7034:9:48",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "7048:4:48",
                        "type": ""
                      }
                    ],
                    "src": "6883:356:48"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "7418:174:48",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7435:9:48"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7446:2:48",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7428:6:48"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7428:21:48"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7428:21:48"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7469:9:48"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7480:2:48",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7465:3:48"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7465:18:48"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7485:2:48",
                                "type": "",
                                "value": "24"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7458:6:48"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7458:30:48"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7458:30:48"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7508:9:48"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7519:2:48",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7504:3:48"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7504:18:48"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "7524:26:48",
                                "type": "",
                                "value": "Provided reward too high"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7497:6:48"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7497:54:48"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7497:54:48"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "7560:26:48",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7572:9:48"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7583:2:48",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "7568:3:48"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7568:18:48"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "7560:4:48"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_af294828ccb7807394ab9c640e14eb2534ed0e75bb2e1346f1bb81dd84cda810__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "7395:9:48",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "7409:4:48",
                        "type": ""
                      }
                    ],
                    "src": "7244:348:48"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "7771:179:48",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7788:9:48"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7799:2:48",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7781:6:48"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7781:21:48"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7781:21:48"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7822:9:48"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7833:2:48",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7818:3:48"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7818:18:48"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7838:2:48",
                                "type": "",
                                "value": "29"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7811:6:48"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7811:30:48"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7811:30:48"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "7861:9:48"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "7872:2:48",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "7857:3:48"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "7857:18:48"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "7877:31:48",
                                "type": "",
                                "value": "Address: call to non-contract"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "7850:6:48"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7850:59:48"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "7850:59:48"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "7918:26:48",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "7930:9:48"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "7941:2:48",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "7926:3:48"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "7926:18:48"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "7918:4:48"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "7748:9:48",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "7762:4:48",
                        "type": ""
                      }
                    ],
                    "src": "7597:353:48"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "8129:232:48",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8146:9:48"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8157:2:48",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8139:6:48"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8139:21:48"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8139:21:48"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8180:9:48"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8191:2:48",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8176:3:48"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8176:18:48"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8196:2:48",
                                "type": "",
                                "value": "42"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8169:6:48"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8169:30:48"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8169:30:48"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8219:9:48"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8230:2:48",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8215:3:48"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8215:18:48"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "8235:34:48",
                                "type": "",
                                "value": "SafeERC20: ERC20 operation did n"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8208:6:48"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8208:62:48"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8208:62:48"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8290:9:48"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8301:2:48",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8286:3:48"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8286:18:48"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "8306:12:48",
                                "type": "",
                                "value": "ot succeed"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8279:6:48"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8279:40:48"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8279:40:48"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "8328:27:48",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8340:9:48"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8351:3:48",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "8336:3:48"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8336:19:48"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "8328:4:48"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "8106:9:48",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "8120:4:48",
                        "type": ""
                      }
                    ],
                    "src": "7955:406:48"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "8540:181:48",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8557:9:48"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8568:2:48",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8550:6:48"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8550:21:48"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8550:21:48"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8591:9:48"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8602:2:48",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8587:3:48"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8587:18:48"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8607:2:48",
                                "type": "",
                                "value": "31"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8580:6:48"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8580:30:48"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8580:30:48"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "8630:9:48"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "8641:2:48",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "8626:3:48"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "8626:18:48"
                              },
                              {
                                "kind": "string",
                                "nodeType": "YulLiteral",
                                "src": "8646:33:48",
                                "type": "",
                                "value": "ReentrancyGuard: reentrant call"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8619:6:48"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8619:61:48"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8619:61:48"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "8689:26:48",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8701:9:48"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8712:2:48",
                                "type": "",
                                "value": "96"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "8697:3:48"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8697:18:48"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "8689:4:48"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619__to_t_string_memory_ptr__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "8517:9:48",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "8531:4:48",
                        "type": ""
                      }
                    ],
                    "src": "8366:355:48"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "8827:76:48",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "8837:26:48",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8849:9:48"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "8860:2:48",
                                "type": "",
                                "value": "32"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "8845:3:48"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8845:18:48"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "8837:4:48"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "8879:9:48"
                              },
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "8890:6:48"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "8872:6:48"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "8872:25:48"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "8872:25:48"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "8796:9:48",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "8807:6:48",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "8818:4:48",
                        "type": ""
                      }
                    ],
                    "src": "8726:177:48"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "9093:206:48",
                      "statements": [
                        {
                          "nodeType": "YulAssignment",
                          "src": "9103:27:48",
                          "value": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9115:9:48"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "9126:3:48",
                                "type": "",
                                "value": "128"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "9111:3:48"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9111:19:48"
                          },
                          "variableNames": [
                            {
                              "name": "tail",
                              "nodeType": "YulIdentifier",
                              "src": "9103:4:48"
                            }
                          ]
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "name": "headStart",
                                "nodeType": "YulIdentifier",
                                "src": "9146:9:48"
                              },
                              {
                                "name": "value0",
                                "nodeType": "YulIdentifier",
                                "src": "9157:6:48"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9139:6:48"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9139:25:48"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9139:25:48"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9184:9:48"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9195:2:48",
                                    "type": "",
                                    "value": "32"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9180:3:48"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9180:18:48"
                              },
                              {
                                "name": "value1",
                                "nodeType": "YulIdentifier",
                                "src": "9200:6:48"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9173:6:48"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9173:34:48"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9173:34:48"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9227:9:48"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9238:2:48",
                                    "type": "",
                                    "value": "64"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9223:3:48"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9223:18:48"
                              },
                              {
                                "name": "value2",
                                "nodeType": "YulIdentifier",
                                "src": "9243:6:48"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9216:6:48"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9216:34:48"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9216:34:48"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "name": "headStart",
                                    "nodeType": "YulIdentifier",
                                    "src": "9270:9:48"
                                  },
                                  {
                                    "kind": "number",
                                    "nodeType": "YulLiteral",
                                    "src": "9281:2:48",
                                    "type": "",
                                    "value": "96"
                                  }
                                ],
                                "functionName": {
                                  "name": "add",
                                  "nodeType": "YulIdentifier",
                                  "src": "9266:3:48"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9266:18:48"
                              },
                              {
                                "name": "value3",
                                "nodeType": "YulIdentifier",
                                "src": "9286:6:48"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "9259:6:48"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9259:34:48"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "9259:34:48"
                        }
                      ]
                    },
                    "name": "abi_encode_tuple_t_uint256_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256_t_uint256__fromStack_reversed",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "headStart",
                        "nodeType": "YulTypedName",
                        "src": "9038:9:48",
                        "type": ""
                      },
                      {
                        "name": "value3",
                        "nodeType": "YulTypedName",
                        "src": "9049:6:48",
                        "type": ""
                      },
                      {
                        "name": "value2",
                        "nodeType": "YulTypedName",
                        "src": "9057:6:48",
                        "type": ""
                      },
                      {
                        "name": "value1",
                        "nodeType": "YulTypedName",
                        "src": "9065:6:48",
                        "type": ""
                      },
                      {
                        "name": "value0",
                        "nodeType": "YulTypedName",
                        "src": "9073:6:48",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "tail",
                        "nodeType": "YulTypedName",
                        "src": "9084:4:48",
                        "type": ""
                      }
                    ],
                    "src": "8908:391:48"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "9352:80:48",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "9379:22:48",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "9381:16:48"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "9381:18:48"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "9381:18:48"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "9368:1:48"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "y",
                                    "nodeType": "YulIdentifier",
                                    "src": "9375:1:48"
                                  }
                                ],
                                "functionName": {
                                  "name": "not",
                                  "nodeType": "YulIdentifier",
                                  "src": "9371:3:48"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9371:6:48"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "9365:2:48"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9365:13:48"
                          },
                          "nodeType": "YulIf",
                          "src": "9362:2:48"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "9410:16:48",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "9421:1:48"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "9424:1:48"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "9417:3:48"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9417:9:48"
                          },
                          "variableNames": [
                            {
                              "name": "sum",
                              "nodeType": "YulIdentifier",
                              "src": "9410:3:48"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "checked_add_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "9335:1:48",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "9338:1:48",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "sum",
                        "nodeType": "YulTypedName",
                        "src": "9344:3:48",
                        "type": ""
                      }
                    ],
                    "src": "9304:128:48"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "9483:228:48",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "9514:168:48",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "r",
                                      "nodeType": "YulIdentifier",
                                      "src": "9535:1:48"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "9538:77:48",
                                      "type": "",
                                      "value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "9528:6:48"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "9528:88:48"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "9528:88:48"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "9636:1:48",
                                      "type": "",
                                      "value": "4"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "9639:4:48",
                                      "type": "",
                                      "value": "0x12"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "9629:6:48"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "9629:15:48"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "9629:15:48"
                              },
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "name": "r",
                                      "nodeType": "YulIdentifier",
                                      "src": "9664:1:48"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "9667:4:48",
                                      "type": "",
                                      "value": "0x24"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "revert",
                                    "nodeType": "YulIdentifier",
                                    "src": "9657:6:48"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "9657:15:48"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "9657:15:48"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "9503:1:48"
                              }
                            ],
                            "functionName": {
                              "name": "iszero",
                              "nodeType": "YulIdentifier",
                              "src": "9496:6:48"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9496:9:48"
                          },
                          "nodeType": "YulIf",
                          "src": "9493:2:48"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "9691:14:48",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "9700:1:48"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "9703:1:48"
                              }
                            ],
                            "functionName": {
                              "name": "div",
                              "nodeType": "YulIdentifier",
                              "src": "9696:3:48"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9696:9:48"
                          },
                          "variableNames": [
                            {
                              "name": "r",
                              "nodeType": "YulIdentifier",
                              "src": "9691:1:48"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "checked_div_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "9468:1:48",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "9471:1:48",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "r",
                        "nodeType": "YulTypedName",
                        "src": "9477:1:48",
                        "type": ""
                      }
                    ],
                    "src": "9437:274:48"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "9768:176:48",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "9887:22:48",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "9889:16:48"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "9889:18:48"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "9889:18:48"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "arguments": [
                                  {
                                    "arguments": [
                                      {
                                        "name": "x",
                                        "nodeType": "YulIdentifier",
                                        "src": "9799:1:48"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "iszero",
                                      "nodeType": "YulIdentifier",
                                      "src": "9792:6:48"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "9792:9:48"
                                  }
                                ],
                                "functionName": {
                                  "name": "iszero",
                                  "nodeType": "YulIdentifier",
                                  "src": "9785:6:48"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9785:17:48"
                              },
                              {
                                "arguments": [
                                  {
                                    "name": "y",
                                    "nodeType": "YulIdentifier",
                                    "src": "9807:1:48"
                                  },
                                  {
                                    "arguments": [
                                      {
                                        "kind": "number",
                                        "nodeType": "YulLiteral",
                                        "src": "9814:66:48",
                                        "type": "",
                                        "value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
                                      },
                                      {
                                        "name": "x",
                                        "nodeType": "YulIdentifier",
                                        "src": "9882:1:48"
                                      }
                                    ],
                                    "functionName": {
                                      "name": "div",
                                      "nodeType": "YulIdentifier",
                                      "src": "9810:3:48"
                                    },
                                    "nodeType": "YulFunctionCall",
                                    "src": "9810:74:48"
                                  }
                                ],
                                "functionName": {
                                  "name": "gt",
                                  "nodeType": "YulIdentifier",
                                  "src": "9804:2:48"
                                },
                                "nodeType": "YulFunctionCall",
                                "src": "9804:81:48"
                              }
                            ],
                            "functionName": {
                              "name": "and",
                              "nodeType": "YulIdentifier",
                              "src": "9781:3:48"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9781:105:48"
                          },
                          "nodeType": "YulIf",
                          "src": "9778:2:48"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "9918:20:48",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "9933:1:48"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "9936:1:48"
                              }
                            ],
                            "functionName": {
                              "name": "mul",
                              "nodeType": "YulIdentifier",
                              "src": "9929:3:48"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "9929:9:48"
                          },
                          "variableNames": [
                            {
                              "name": "product",
                              "nodeType": "YulIdentifier",
                              "src": "9918:7:48"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "checked_mul_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "9747:1:48",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "9750:1:48",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "product",
                        "nodeType": "YulTypedName",
                        "src": "9756:7:48",
                        "type": ""
                      }
                    ],
                    "src": "9716:228:48"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "9998:76:48",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "10020:22:48",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "10022:16:48"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "10022:18:48"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "10022:18:48"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "10014:1:48"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "10017:1:48"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "10011:2:48"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10011:8:48"
                          },
                          "nodeType": "YulIf",
                          "src": "10008:2:48"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "10051:17:48",
                          "value": {
                            "arguments": [
                              {
                                "name": "x",
                                "nodeType": "YulIdentifier",
                                "src": "10063:1:48"
                              },
                              {
                                "name": "y",
                                "nodeType": "YulIdentifier",
                                "src": "10066:1:48"
                              }
                            ],
                            "functionName": {
                              "name": "sub",
                              "nodeType": "YulIdentifier",
                              "src": "10059:3:48"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10059:9:48"
                          },
                          "variableNames": [
                            {
                              "name": "diff",
                              "nodeType": "YulIdentifier",
                              "src": "10051:4:48"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "checked_sub_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "x",
                        "nodeType": "YulTypedName",
                        "src": "9980:1:48",
                        "type": ""
                      },
                      {
                        "name": "y",
                        "nodeType": "YulTypedName",
                        "src": "9983:1:48",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "diff",
                        "nodeType": "YulTypedName",
                        "src": "9989:4:48",
                        "type": ""
                      }
                    ],
                    "src": "9949:125:48"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "10132:205:48",
                      "statements": [
                        {
                          "nodeType": "YulVariableDeclaration",
                          "src": "10142:10:48",
                          "value": {
                            "kind": "number",
                            "nodeType": "YulLiteral",
                            "src": "10151:1:48",
                            "type": "",
                            "value": "0"
                          },
                          "variables": [
                            {
                              "name": "i",
                              "nodeType": "YulTypedName",
                              "src": "10146:1:48",
                              "type": ""
                            }
                          ]
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "10211:63:48",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "name": "dst",
                                          "nodeType": "YulIdentifier",
                                          "src": "10236:3:48"
                                        },
                                        {
                                          "name": "i",
                                          "nodeType": "YulIdentifier",
                                          "src": "10241:1:48"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "10232:3:48"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "10232:11:48"
                                    },
                                    {
                                      "arguments": [
                                        {
                                          "arguments": [
                                            {
                                              "name": "src",
                                              "nodeType": "YulIdentifier",
                                              "src": "10255:3:48"
                                            },
                                            {
                                              "name": "i",
                                              "nodeType": "YulIdentifier",
                                              "src": "10260:1:48"
                                            }
                                          ],
                                          "functionName": {
                                            "name": "add",
                                            "nodeType": "YulIdentifier",
                                            "src": "10251:3:48"
                                          },
                                          "nodeType": "YulFunctionCall",
                                          "src": "10251:11:48"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "mload",
                                        "nodeType": "YulIdentifier",
                                        "src": "10245:5:48"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "10245:18:48"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "10225:6:48"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "10225:39:48"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "10225:39:48"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "i",
                                "nodeType": "YulIdentifier",
                                "src": "10172:1:48"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "10175:6:48"
                              }
                            ],
                            "functionName": {
                              "name": "lt",
                              "nodeType": "YulIdentifier",
                              "src": "10169:2:48"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10169:13:48"
                          },
                          "nodeType": "YulForLoop",
                          "post": {
                            "nodeType": "YulBlock",
                            "src": "10183:19:48",
                            "statements": [
                              {
                                "nodeType": "YulAssignment",
                                "src": "10185:15:48",
                                "value": {
                                  "arguments": [
                                    {
                                      "name": "i",
                                      "nodeType": "YulIdentifier",
                                      "src": "10194:1:48"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "10197:2:48",
                                      "type": "",
                                      "value": "32"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "add",
                                    "nodeType": "YulIdentifier",
                                    "src": "10190:3:48"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "10190:10:48"
                                },
                                "variableNames": [
                                  {
                                    "name": "i",
                                    "nodeType": "YulIdentifier",
                                    "src": "10185:1:48"
                                  }
                                ]
                              }
                            ]
                          },
                          "pre": {
                            "nodeType": "YulBlock",
                            "src": "10165:3:48",
                            "statements": []
                          },
                          "src": "10161:113:48"
                        },
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "10300:31:48",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [
                                    {
                                      "arguments": [
                                        {
                                          "name": "dst",
                                          "nodeType": "YulIdentifier",
                                          "src": "10313:3:48"
                                        },
                                        {
                                          "name": "length",
                                          "nodeType": "YulIdentifier",
                                          "src": "10318:6:48"
                                        }
                                      ],
                                      "functionName": {
                                        "name": "add",
                                        "nodeType": "YulIdentifier",
                                        "src": "10309:3:48"
                                      },
                                      "nodeType": "YulFunctionCall",
                                      "src": "10309:16:48"
                                    },
                                    {
                                      "kind": "number",
                                      "nodeType": "YulLiteral",
                                      "src": "10327:1:48",
                                      "type": "",
                                      "value": "0"
                                    }
                                  ],
                                  "functionName": {
                                    "name": "mstore",
                                    "nodeType": "YulIdentifier",
                                    "src": "10302:6:48"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "10302:27:48"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "10302:27:48"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "i",
                                "nodeType": "YulIdentifier",
                                "src": "10289:1:48"
                              },
                              {
                                "name": "length",
                                "nodeType": "YulIdentifier",
                                "src": "10292:6:48"
                              }
                            ],
                            "functionName": {
                              "name": "gt",
                              "nodeType": "YulIdentifier",
                              "src": "10286:2:48"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10286:13:48"
                          },
                          "nodeType": "YulIf",
                          "src": "10283:2:48"
                        }
                      ]
                    },
                    "name": "copy_memory_to_memory",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "src",
                        "nodeType": "YulTypedName",
                        "src": "10110:3:48",
                        "type": ""
                      },
                      {
                        "name": "dst",
                        "nodeType": "YulTypedName",
                        "src": "10115:3:48",
                        "type": ""
                      },
                      {
                        "name": "length",
                        "nodeType": "YulTypedName",
                        "src": "10120:6:48",
                        "type": ""
                      }
                    ],
                    "src": "10079:258:48"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "10389:148:48",
                      "statements": [
                        {
                          "body": {
                            "nodeType": "YulBlock",
                            "src": "10480:22:48",
                            "statements": [
                              {
                                "expression": {
                                  "arguments": [],
                                  "functionName": {
                                    "name": "panic_error_0x11",
                                    "nodeType": "YulIdentifier",
                                    "src": "10482:16:48"
                                  },
                                  "nodeType": "YulFunctionCall",
                                  "src": "10482:18:48"
                                },
                                "nodeType": "YulExpressionStatement",
                                "src": "10482:18:48"
                              }
                            ]
                          },
                          "condition": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "10405:5:48"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10412:66:48",
                                "type": "",
                                "value": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
                              }
                            ],
                            "functionName": {
                              "name": "eq",
                              "nodeType": "YulIdentifier",
                              "src": "10402:2:48"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10402:77:48"
                          },
                          "nodeType": "YulIf",
                          "src": "10399:2:48"
                        },
                        {
                          "nodeType": "YulAssignment",
                          "src": "10511:20:48",
                          "value": {
                            "arguments": [
                              {
                                "name": "value",
                                "nodeType": "YulIdentifier",
                                "src": "10522:5:48"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10529:1:48",
                                "type": "",
                                "value": "1"
                              }
                            ],
                            "functionName": {
                              "name": "add",
                              "nodeType": "YulIdentifier",
                              "src": "10518:3:48"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10518:13:48"
                          },
                          "variableNames": [
                            {
                              "name": "ret",
                              "nodeType": "YulIdentifier",
                              "src": "10511:3:48"
                            }
                          ]
                        }
                      ]
                    },
                    "name": "increment_t_uint256",
                    "nodeType": "YulFunctionDefinition",
                    "parameters": [
                      {
                        "name": "value",
                        "nodeType": "YulTypedName",
                        "src": "10371:5:48",
                        "type": ""
                      }
                    ],
                    "returnVariables": [
                      {
                        "name": "ret",
                        "nodeType": "YulTypedName",
                        "src": "10381:3:48",
                        "type": ""
                      }
                    ],
                    "src": "10342:195:48"
                  },
                  {
                    "body": {
                      "nodeType": "YulBlock",
                      "src": "10574:152:48",
                      "statements": [
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10591:1:48",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10594:77:48",
                                "type": "",
                                "value": "35408467139433450592217433187231851964531694900788300625387963629091585785856"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10584:6:48"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10584:88:48"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10584:88:48"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10688:1:48",
                                "type": "",
                                "value": "4"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10691:4:48",
                                "type": "",
                                "value": "0x11"
                              }
                            ],
                            "functionName": {
                              "name": "mstore",
                              "nodeType": "YulIdentifier",
                              "src": "10681:6:48"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10681:15:48"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10681:15:48"
                        },
                        {
                          "expression": {
                            "arguments": [
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10712:1:48",
                                "type": "",
                                "value": "0"
                              },
                              {
                                "kind": "number",
                                "nodeType": "YulLiteral",
                                "src": "10715:4:48",
                                "type": "",
                                "value": "0x24"
                              }
                            ],
                            "functionName": {
                              "name": "revert",
                              "nodeType": "YulIdentifier",
                              "src": "10705:6:48"
                            },
                            "nodeType": "YulFunctionCall",
                            "src": "10705:15:48"
                          },
                          "nodeType": "YulExpressionStatement",
                          "src": "10705:15:48"
                        }
                      ]
                    },
                    "name": "panic_error_0x11",
                    "nodeType": "YulFunctionDefinition",
                    "src": "10542:184:48"
                  }
                ]
              },
              "contents": "{\n    { }\n    function abi_decode_address(offset) -> value\n    {\n        value := calldataload(offset)\n        if iszero(eq(value, and(value, 0xffffffffffffffffffffffffffffffffffffffff))) { revert(0, 0) }\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        value0 := abi_decode_address(headStart)\n    }\n    function abi_decode_tuple_t_addresst_uint256(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 64) { revert(value1, value1) }\n        value0 := abi_decode_address(headStart)\n        value1 := calldataload(add(headStart, 32))\n    }\n    function abi_decode_tuple_t_array$_t_address_$dyn_calldata_ptr(headStart, dataEnd) -> value0, value1\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        let offset := calldataload(headStart)\n        let _1 := 0xffffffffffffffff\n        if gt(offset, _1) { revert(value0, value0) }\n        let _2 := add(headStart, offset)\n        if iszero(slt(add(_2, 0x1f), dataEnd)) { revert(value0, value0) }\n        let length := calldataload(_2)\n        if gt(length, _1) { revert(value0, value0) }\n        if gt(add(add(_2, shl(5, length)), 32), dataEnd) { revert(value0, value0) }\n        value0 := add(_2, 32)\n        value1 := length\n    }\n    function abi_decode_tuple_t_bool_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        let value := mload(headStart)\n        if iszero(eq(value, iszero(iszero(value)))) { revert(value0, value0) }\n        value0 := value\n    }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_decode_tuple_t_uint256_fromMemory(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(value0, value0) }\n        value0 := mload(headStart)\n    }\n    function abi_decode_tuple_t_uint256t_uint256t_uint256t_uint256_fromMemory(headStart, dataEnd) -> value0, value1, value2, value3\n    {\n        if slt(sub(dataEnd, headStart), 128) { revert(value2, value2) }\n        value0 := mload(headStart)\n        value1 := mload(add(headStart, 32))\n        value2 := mload(add(headStart, 64))\n        value3 := mload(add(headStart, 96))\n    }\n    function abi_encode_tuple_packed_t_bytes_memory_ptr__to_t_bytes_memory_ptr__nonPadded_inplace_fromStack_reversed(pos, value0) -> end\n    {\n        let length := mload(value0)\n        copy_memory_to_memory(add(value0, 0x20), pos, length)\n        end := add(pos, length)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_tuple_t_address_t_address_t_uint256__to_t_address_t_address_t_uint256__fromStack_reversed(headStart, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 96)\n        let _1 := 0xffffffffffffffffffffffffffffffffffffffff\n        mstore(headStart, and(value0, _1))\n        mstore(add(headStart, 32), and(value1, _1))\n        mstore(add(headStart, 64), value2)\n    }\n    function abi_encode_tuple_t_address_t_uint256__to_t_address_t_uint256__fromStack_reversed(headStart, value1, value0) -> tail\n    {\n        tail := add(headStart, 64)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n        mstore(add(headStart, 32), value1)\n    }\n    function abi_encode_tuple_t_bool__to_t_bool__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, iszero(iszero(value0)))\n    }\n    function abi_encode_tuple_t_contract$_IERC20_$227__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffffffffffffffffffffffffffff))\n    }\n    function abi_encode_tuple_t_string_memory_ptr__to_t_string_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        mstore(headStart, 32)\n        let length := mload(value0)\n        mstore(add(headStart, 32), length)\n        copy_memory_to_memory(add(value0, 32), add(headStart, 64), length)\n        tail := add(add(headStart, and(add(length, 31), 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0)), 64)\n    }\n    function abi_encode_tuple_t_stringliteral_07f2725172f5941b576a01ec7036d341e0c837e280f27b110cb3e6fd2f2c4a56__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 88)\n        mstore(add(headStart, 64), \"Previous rewards period must be \")\n        mstore(add(headStart, 96), \"complete before changing the dur\")\n        mstore(add(headStart, 128), \"ation for the new period\")\n        tail := add(headStart, 160)\n    }\n    function abi_encode_tuple_t_stringliteral_245f15ff17f551913a7a18385165551503906a406f905ac1c2437281a7cd0cfe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Ownable: new owner is the zero a\")\n        mstore(add(headStart, 96), \"ddress\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_271d28679ffc475275171ac55b009a00a6f78f6adf068327c76e7639656e6c6c__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 21)\n        mstore(add(headStart, 64), \"Migrate account first\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_2972ce884b95fc24c703b7f04fae79e4ca7287e77fa26ed09d1faa4263e887ab__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 14)\n        mstore(add(headStart, 64), \"Cannot stake 0\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_565f1a77334fc4792800921178c71e4521acffab18ff9e7885b49377ee80ab4c__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 38)\n        mstore(add(headStart, 64), \"Address: insufficient balance fo\")\n        mstore(add(headStart, 96), \"r call\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_8d85b8e7f4404d04d93e8d532ad219ceeba0becfbc18622bad46b31e08b1f0b0__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 17)\n        mstore(add(headStart, 64), \"Cannot withdraw 0\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_9924ebdf1add33d25d4ef888e16131f0a5687b0580a36c21b5c301a6c462effe__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 32)\n        mstore(add(headStart, 64), \"Ownable: caller is not the owner\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_af294828ccb7807394ab9c640e14eb2534ed0e75bb2e1346f1bb81dd84cda810__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 24)\n        mstore(add(headStart, 64), \"Provided reward too high\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_cc2e4e38850b7c0a3e942cfed89b71c77302df25bcb2ec297a0c4ff9ff6b90ad__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 29)\n        mstore(add(headStart, 64), \"Address: call to non-contract\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_stringliteral_e11ad79d1e4a7f2e5f376964cb99e8e8f7904e3fc16a109f7a7ecb9aa7956dcd__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 42)\n        mstore(add(headStart, 64), \"SafeERC20: ERC20 operation did n\")\n        mstore(add(headStart, 96), \"ot succeed\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_ebf73bba305590e4764d5cb53b69bffd6d4d092d1a67551cb346f8cfcdab8619__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 31)\n        mstore(add(headStart, 64), \"ReentrancyGuard: reentrant call\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_uint256__to_t_uint256__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, value0)\n    }\n    function abi_encode_tuple_t_uint256_t_uint256_t_uint256_t_uint256__to_t_uint256_t_uint256_t_uint256_t_uint256__fromStack_reversed(headStart, value3, value2, value1, value0) -> tail\n    {\n        tail := add(headStart, 128)\n        mstore(headStart, value0)\n        mstore(add(headStart, 32), value1)\n        mstore(add(headStart, 64), value2)\n        mstore(add(headStart, 96), value3)\n    }\n    function checked_add_t_uint256(x, y) -> sum\n    {\n        if gt(x, not(y)) { panic_error_0x11() }\n        sum := add(x, y)\n    }\n    function checked_div_t_uint256(x, y) -> r\n    {\n        if iszero(y)\n        {\n            mstore(r, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n            mstore(4, 0x12)\n            revert(r, 0x24)\n        }\n        r := div(x, y)\n    }\n    function checked_mul_t_uint256(x, y) -> product\n    {\n        if and(iszero(iszero(x)), gt(y, div(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, x))) { panic_error_0x11() }\n        product := mul(x, y)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        if lt(x, y) { panic_error_0x11() }\n        diff := sub(x, y)\n    }\n    function copy_memory_to_memory(src, dst, length)\n    {\n        let i := 0\n        for { } lt(i, length) { i := add(i, 32) }\n        {\n            mstore(add(dst, i), mload(add(src, i)))\n        }\n        if gt(i, length) { mstore(add(dst, length), 0) }\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, 35408467139433450592217433187231851964531694900788300625387963629091585785856)\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n}",
              "id": 48,
              "language": "Yul",
              "name": "#utility.yul"
            }
          ],
          "immutableReferences": {},
          "linkReferences": {},
          "object": "608060405234801561001057600080fd5b506004361061020b5760003560e01c806380faa57d1161012a578063c885bc58116100bd578063d1af0c7d1161008c578063df136d6511610071578063df136d6514610480578063ebe2b12b14610489578063f2fde38b146104925761020b565b8063d1af0c7d1461045a578063dbe85f701461046d5761020b565b8063c885bc581461042e578063c8f33c9114610436578063cc1a378f1461043f578063cd3daf9d146104525761020b565b8063a204cf85116100f9578063a204cf85146103f6578063a694fc3a146103ff578063ae04d45d14610412578063be7b51cc146104255761020b565b806380faa57d146103aa5780638980f11f146103b25780638b876347146103c55780638da5cb5b146103e55761020b565b80633c6b16ab116101a257806370a082311161017157806370a082311461035b578063715018a61461036e57806372f702f3146103765780637b0a47ee146103a15761020b565b80633c6b16ab146102ad5780634ba0a5ee146102c0578063556f6e6b146102f3578063568a2d98146103065761020b565b80631c1f78eb116101de5780631c1f78eb1461027457806325d5971f1461027c5780632e558d6914610291578063386a9525146102a45761020b565b80630700037d146102105780630d6680871461024357806312a7f6611461024c57806318160ddd1461026c575b600080fd5b61023061021e366004611d93565b600c6020526000908152604090205481565b6040519081526020015b60405180910390f35b610230600a5481565b61023061025a366004611d93565b600d6020526000908152604090205481565b6102306104a5565b6102306104ac565b61028f61028a366004611e66565b6104ca565b005b61028f61029f366004611dd6565b610803565b61023060075481565b61028f6102bb366004611e66565b610c79565b6102e36102ce366004611d93565b600e6020526000908152604090205460ff1681565b604051901515815260200161023a565b61028f610301366004611e66565b610eff565b61033b610314366004611d93565b60106020526000908152604090208054600182015460028301546003909301549192909184565b60408051948552602085019390935291830152606082015260800161023a565b610230610369366004611d93565b610fbb565b61028f610fda565b600454610389906001600160a01b031681565b6040516001600160a01b03909116815260200161023a565b61023060065481565b610230611096565b61028f6103c0366004611dad565b6110a4565b6102306103d3366004611d93565b600b6020526000908152604090205481565b6001546001600160a01b0316610389565b610230600f5481565b61028f61040d366004611e66565b61116a565b61028f610420366004611e66565b611329565b61023060115481565b61028f611388565b61023060085481565b61028f61044d366004611e66565b6114ac565b6102306115de565b600354610389906001600160a01b031681565b61023061047b366004611d93565b611632565b61023060095481565b61023060055481565b61028f6104a0366004611d93565b6116a4565b6012545b90565b60006104c56007546006546117ee90919063ffffffff16565b905090565b600260005414156105225760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b6002600055336105306115de565b60095561053b611096565b6008556001600160a01b038116156105825761055681611632565b6001600160a01b0382166000908152600c6020908152604080832093909355600954600b909152919020555b600082116105d25760405162461bcd60e51b815260206004820152601160248201527f43616e6e6f7420776974686472617720300000000000000000000000000000006044820152606401610519565b600a54336000908152600d60205260409020546105ef9190611f38565b4210156105fb57600080fd5b6012546106089083611801565b601255336000908152601360205260409020546106259083611801565b33600090815260136020908152604080832093909355600e9052205460ff16156107ad576002546040517fe57466fd00000000000000000000000000000000000000000000000000000000815233600482015260009182916001600160a01b039091169063e57466fd9060240160806040518083038186803b1580156106aa57600080fd5b505afa1580156106be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106e29190611e96565b50909350909150506801a055690d9db8000082106107425760405162461bcd60e51b815260206004820152601560248201527f4d696772617465206163636f756e7420666972737400000000000000000000006044820152606401610519565b33600090815260106020908152604080832081516080810183528154815260018201549381019390935260028101549183019190915260030154606082015261078a9061180d565b905084811061079c57600094506107a9565b6107a68186611fc6565b94505b5050505b6004546107c4906001600160a01b031633846119b7565b60405182815233907f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5906020015b60405180910390a250506001600055565b6001546001600160a01b0316331461085d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610519565b600260009054906101000a90046001600160a01b03166001600160a01b031663fb3935ee6040518163ffffffff1660e01b815260040160206040518083038186803b1580156108ab57600080fd5b505afa1580156108bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e39190611e7e565b600f819055600254604080517f8275198200000000000000000000000000000000000000000000000000000000815290516000926001600160a01b0316916382751982916004808301926020929190829003018186803b15801561094657600080fd5b505afa15801561095a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061097e9190611e7e565b90506000805b80851115610c715760008686838181106109c7577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020160208101906109dc9190611d93565b9050610a096040518060800160405280600081526020016000815260200160008152602001600081525090565b6002546040517fe57466fd0000000000000000000000000000000000000000000000000000000081526001600160a01b0384811660048301529091169063e57466fd9060240160806040518083038186803b158015610a6757600080fd5b505afa158015610a7b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a9f9190611e96565b606085015260408401526020830152808252601254610abe9082611a83565b6012556001600160a01b038316600090815260136020526040902054610ae49082611a83565b6001600160a01b038416600090815260136020526040902055600a546060830151610b0f9190611fc6565b6001600160a01b0384166000908152600d6020908152604080832093909355600e815282822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001908117909155601082529183902085518155908501519181019190915590830151600282015560608301516003909101819055421015610c42576000428360600151610ba79190611fc6565b905062278d00811115610c4057600060036276a700610bc68482611fc6565b8b87602001518c610bd79190611f89565b610be19190611f50565b610beb9190611f89565b610bf59190611f50565b610bff9190611f50565b6001600160a01b0386166000908152600c6020526040812080549293508392909190610c2c908490611f38565b90915550610c3c90508188611f38565b9650505b505b8460116000828254610c549190611f38565b925050819055505050508080610c6990612009565b915050610984565b505050505050565b6001546001600160a01b03163314610cd35760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610519565b6000610cdd6115de565b600955610ce8611096565b6008556001600160a01b03811615610d2f57610d0381611632565b6001600160a01b0382166000908152600c6020908152604080832093909355600954600b909152919020555b60115415610d4c57601154610d449083611fc6565b600060115591505b6005544210610d6b57600754610d63908390611a8f565b600655610db4565b600554600090610d7b9042611801565b90506000610d94600654836117ee90919063ffffffff16565b600754909150610dae90610da88684611a83565b90611a8f565b60065550505b6003546040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015610e1157600080fd5b505afa158015610e25573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e499190611e7e565b9050610e6060075482611a8f90919063ffffffff16565b6006541115610eb15760405162461bcd60e51b815260206004820152601860248201527f50726f76696465642072657761726420746f6f206869676800000000000000006044820152606401610519565b426008819055600754610ec49190611a83565b6005556040518381527fde88a922e0d3b88b24e9623efeb464919c6bf9f66857a65e2bfcf2ce87a9433d9060200160405180910390a1505050565b6001546001600160a01b03163314610f595760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610519565b6000610f636115de565b600955610f6e611096565b6008556001600160a01b03811615610fb557610f8981611632565b6001600160a01b0382166000908152600c6020908152604080832093909355600954600b909152919020555b50600555565b6001600160a01b0381166000908152601360205260409020545b919050565b6001546001600160a01b031633146110345760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610519565b6001546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600180547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055565b60006104c542600554611a9b565b6001546001600160a01b031633146110fe5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610519565b6111246111136001546001600160a01b031690565b6001600160a01b03841690836119b7565b604080516001600160a01b0384168152602081018390527f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa28910160405180910390a15050565b600260005414156111bd5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610519565b6002600055336111cb6115de565b6009556111d6611096565b6008556001600160a01b0381161561121d576111f181611632565b6001600160a01b0382166000908152600c6020908152604080832093909355600954600b909152919020555b6000821161126d5760405162461bcd60e51b815260206004820152600e60248201527f43616e6e6f74207374616b6520300000000000000000000000000000000000006044820152606401610519565b60125461127a9083611a83565b601255336000908152601360205260409020546112979083611a83565b336000818152601360205260409020919091556004546112c4916001600160a01b03909116903085611ab1565b60405182815233907f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d9060200160405180910390a2336000908152600d602052604090205461132057336000908152600d602052604090204290555b50506001600055565b6001546001600160a01b031633146113835760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610519565b600a55565b600260005414156113db5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610519565b6002600055336113e96115de565b6009556113f4611096565b6008556001600160a01b0381161561143b5761140f81611632565b6001600160a01b0382166000908152600c6020908152604080832093909355600954600b909152919020555b336000908152600c6020526040902054801561132057336000818152600c602052604081205560035461147a916001600160a01b0390911690836119b7565b60405181815233907fe2403640ba68fed3a2f88b7557551d1993f84b99bb10ff833f0cf8db0c5e0486906020016107f2565b6001546001600160a01b031633146115065760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610519565b60055442116115a35760405162461bcd60e51b815260206004820152605860248201527f50726576696f7573207265776172647320706572696f64206d7573742062652060448201527f636f6d706c657465206265666f7265206368616e67696e67207468652064757260648201527f6174696f6e20666f7220746865206e657720706572696f640000000000000000608482015260a401610519565b60078190556040518181527ffb46ca5a5e06d4540d6387b930a7c978bce0db5f449ec6b3f5d07c6e1d44f2d39060200160405180910390a150565b6000601254600014156115f457506009546104a9565b6104c5611629601254610da8670de0b6b3a764000061162360065461162360085461161d611096565b90611801565b906117ee565b60095490611a83565b6001600160a01b0381166000908152600c6020908152604080832054600b90925282205461169e919061169890670de0b6b3a764000090610da8906116799061161d6115de565b6001600160a01b038816600090815260136020526040902054906117ee565b90611a83565b92915050565b6001546001600160a01b031633146116fe5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610519565b6001600160a01b03811661177a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610519565b6001546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b60006117fa8284611f89565b9392505050565b60006117fa8284611fc6565b600080600260009054906101000a90046001600160a01b03166001600160a01b031663c8d65d596040518163ffffffff1660e01b815260040160206040518083038186803b15801561185e57600080fd5b505afa158015611872573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118969190611e7e565b90506000600f5460016118a99190611f38565b602085015160408601516118bd9085611fc6565b6118c79190611f89565b6118d19190611f50565b90506000600260009054906101000a90046001600160a01b03166001600160a01b031663fb3935ee6040518163ffffffff1660e01b815260040160206040518083038186803b15801561192357600080fd5b505afa158015611937573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061195b9190611e7e565b611966906001611f38565b6020860151604087015161197a9086611fc6565b6119849190611f89565b61198e9190611f50565b90508082106119a35760009350505050610fd5565b6119ad8282611fc6565b9350505050610fd5565b6040516001600160a01b038316602482015260448101829052611a7e9084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152611b08565b505050565b60006117fa8284611f38565b60006117fa8284611f50565b6000818310611aaa57816117fa565b5090919050565b6040516001600160a01b0380851660248301528316604482015260648101829052611b029085907f23b872dd00000000000000000000000000000000000000000000000000000000906084016119fc565b50505050565b6000611b5d826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611bed9092919063ffffffff16565b805190915015611a7e5780806020019051810190611b7b9190611e46565b611a7e5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610519565b6060611bfc8484600085611c04565b949350505050565b606082471015611c7c5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610519565b843b611cca5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610519565b600080866001600160a01b03168587604051611ce69190611ecb565b60006040518083038185875af1925050503d8060008114611d23576040519150601f19603f3d011682016040523d82523d6000602084013e611d28565b606091505b5091509150611d38828286611d43565b979650505050505050565b60608315611d525750816117fa565b825115611d625782518084602001fd5b8160405162461bcd60e51b81526004016105199190611ee7565b80356001600160a01b0381168114610fd557600080fd5b600060208284031215611da4578081fd5b6117fa82611d7c565b60008060408385031215611dbf578081fd5b611dc883611d7c565b946020939093013593505050565b60008060208385031215611de8578182fd5b823567ffffffffffffffff80821115611dff578384fd5b818501915085601f830112611e12578384fd5b813581811115611e20578485fd5b8660208260051b8501011115611e34578485fd5b60209290920196919550909350505050565b600060208284031215611e57578081fd5b815180151581146117fa578182fd5b600060208284031215611e77578081fd5b5035919050565b600060208284031215611e8f578081fd5b5051919050565b60008060008060808587031215611eab578182fd5b505082516020840151604085015160609095015191969095509092509050565b60008251611edd818460208701611fdd565b9190910192915050565b6000602082528251806020840152611f06816040850160208701611fdd565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b60008219821115611f4b57611f4b612042565b500190565b600082611f84577f4e487b710000000000000000000000000000000000000000000000000000000081526012600452602481fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611fc157611fc1612042565b500290565b600082821015611fd857611fd8612042565b500390565b60005b83811015611ff8578181015183820152602001611fe0565b83811115611b025750506000910152565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561203b5761203b612042565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fdfea2646970667358221220665e6045dc536be3860da71f2d7e42195dcc7eac1bd466680666ec319b53076464736f6c63430008030033",
          "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x20B JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0x80FAA57D GT PUSH2 0x12A JUMPI DUP1 PUSH4 0xC885BC58 GT PUSH2 0xBD JUMPI DUP1 PUSH4 0xD1AF0C7D GT PUSH2 0x8C JUMPI DUP1 PUSH4 0xDF136D65 GT PUSH2 0x71 JUMPI DUP1 PUSH4 0xDF136D65 EQ PUSH2 0x480 JUMPI DUP1 PUSH4 0xEBE2B12B EQ PUSH2 0x489 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x492 JUMPI PUSH2 0x20B JUMP JUMPDEST DUP1 PUSH4 0xD1AF0C7D EQ PUSH2 0x45A JUMPI DUP1 PUSH4 0xDBE85F70 EQ PUSH2 0x46D JUMPI PUSH2 0x20B JUMP JUMPDEST DUP1 PUSH4 0xC885BC58 EQ PUSH2 0x42E JUMPI DUP1 PUSH4 0xC8F33C91 EQ PUSH2 0x436 JUMPI DUP1 PUSH4 0xCC1A378F EQ PUSH2 0x43F JUMPI DUP1 PUSH4 0xCD3DAF9D EQ PUSH2 0x452 JUMPI PUSH2 0x20B JUMP JUMPDEST DUP1 PUSH4 0xA204CF85 GT PUSH2 0xF9 JUMPI DUP1 PUSH4 0xA204CF85 EQ PUSH2 0x3F6 JUMPI DUP1 PUSH4 0xA694FC3A EQ PUSH2 0x3FF JUMPI DUP1 PUSH4 0xAE04D45D EQ PUSH2 0x412 JUMPI DUP1 PUSH4 0xBE7B51CC EQ PUSH2 0x425 JUMPI PUSH2 0x20B JUMP JUMPDEST DUP1 PUSH4 0x80FAA57D EQ PUSH2 0x3AA JUMPI DUP1 PUSH4 0x8980F11F EQ PUSH2 0x3B2 JUMPI DUP1 PUSH4 0x8B876347 EQ PUSH2 0x3C5 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x3E5 JUMPI PUSH2 0x20B JUMP JUMPDEST DUP1 PUSH4 0x3C6B16AB GT PUSH2 0x1A2 JUMPI DUP1 PUSH4 0x70A08231 GT PUSH2 0x171 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x35B JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x36E JUMPI DUP1 PUSH4 0x72F702F3 EQ PUSH2 0x376 JUMPI DUP1 PUSH4 0x7B0A47EE EQ PUSH2 0x3A1 JUMPI PUSH2 0x20B JUMP JUMPDEST DUP1 PUSH4 0x3C6B16AB EQ PUSH2 0x2AD JUMPI DUP1 PUSH4 0x4BA0A5EE EQ PUSH2 0x2C0 JUMPI DUP1 PUSH4 0x556F6E6B EQ PUSH2 0x2F3 JUMPI DUP1 PUSH4 0x568A2D98 EQ PUSH2 0x306 JUMPI PUSH2 0x20B JUMP JUMPDEST DUP1 PUSH4 0x1C1F78EB GT PUSH2 0x1DE JUMPI DUP1 PUSH4 0x1C1F78EB EQ PUSH2 0x274 JUMPI DUP1 PUSH4 0x25D5971F EQ PUSH2 0x27C JUMPI DUP1 PUSH4 0x2E558D69 EQ PUSH2 0x291 JUMPI DUP1 PUSH4 0x386A9525 EQ PUSH2 0x2A4 JUMPI PUSH2 0x20B JUMP JUMPDEST DUP1 PUSH4 0x700037D EQ PUSH2 0x210 JUMPI DUP1 PUSH4 0xD668087 EQ PUSH2 0x243 JUMPI DUP1 PUSH4 0x12A7F661 EQ PUSH2 0x24C JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x26C JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x230 PUSH2 0x21E CALLDATASIZE PUSH1 0x4 PUSH2 0x1D93 JUMP JUMPDEST PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x230 PUSH1 0xA SLOAD DUP2 JUMP JUMPDEST PUSH2 0x230 PUSH2 0x25A CALLDATASIZE PUSH1 0x4 PUSH2 0x1D93 JUMP JUMPDEST PUSH1 0xD PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x230 PUSH2 0x4A5 JUMP JUMPDEST PUSH2 0x230 PUSH2 0x4AC JUMP JUMPDEST PUSH2 0x28F PUSH2 0x28A CALLDATASIZE PUSH1 0x4 PUSH2 0x1E66 JUMP JUMPDEST PUSH2 0x4CA JUMP JUMPDEST STOP JUMPDEST PUSH2 0x28F PUSH2 0x29F CALLDATASIZE PUSH1 0x4 PUSH2 0x1DD6 JUMP JUMPDEST PUSH2 0x803 JUMP JUMPDEST PUSH2 0x230 PUSH1 0x7 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x28F PUSH2 0x2BB CALLDATASIZE PUSH1 0x4 PUSH2 0x1E66 JUMP JUMPDEST PUSH2 0xC79 JUMP JUMPDEST PUSH2 0x2E3 PUSH2 0x2CE CALLDATASIZE PUSH1 0x4 PUSH2 0x1D93 JUMP JUMPDEST PUSH1 0xE PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x23A JUMP JUMPDEST PUSH2 0x28F PUSH2 0x301 CALLDATASIZE PUSH1 0x4 PUSH2 0x1E66 JUMP JUMPDEST PUSH2 0xEFF JUMP JUMPDEST PUSH2 0x33B PUSH2 0x314 CALLDATASIZE PUSH1 0x4 PUSH2 0x1D93 JUMP JUMPDEST PUSH1 0x10 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 DUP4 ADD SLOAD PUSH1 0x3 SWAP1 SWAP4 ADD SLOAD SWAP2 SWAP3 SWAP1 SWAP2 DUP5 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP5 DUP6 MSTORE PUSH1 0x20 DUP6 ADD SWAP4 SWAP1 SWAP4 MSTORE SWAP2 DUP4 ADD MSTORE PUSH1 0x60 DUP3 ADD MSTORE PUSH1 0x80 ADD PUSH2 0x23A JUMP JUMPDEST PUSH2 0x230 PUSH2 0x369 CALLDATASIZE PUSH1 0x4 PUSH2 0x1D93 JUMP JUMPDEST PUSH2 0xFBB JUMP JUMPDEST PUSH2 0x28F PUSH2 0xFDA JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH2 0x389 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH2 0x23A JUMP JUMPDEST PUSH2 0x230 PUSH1 0x6 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x230 PUSH2 0x1096 JUMP JUMPDEST PUSH2 0x28F PUSH2 0x3C0 CALLDATASIZE PUSH1 0x4 PUSH2 0x1DAD JUMP JUMPDEST PUSH2 0x10A4 JUMP JUMPDEST PUSH2 0x230 PUSH2 0x3D3 CALLDATASIZE PUSH1 0x4 PUSH2 0x1D93 JUMP JUMPDEST PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x389 JUMP JUMPDEST PUSH2 0x230 PUSH1 0xF SLOAD DUP2 JUMP JUMPDEST PUSH2 0x28F PUSH2 0x40D CALLDATASIZE PUSH1 0x4 PUSH2 0x1E66 JUMP JUMPDEST PUSH2 0x116A JUMP JUMPDEST PUSH2 0x28F PUSH2 0x420 CALLDATASIZE PUSH1 0x4 PUSH2 0x1E66 JUMP JUMPDEST PUSH2 0x1329 JUMP JUMPDEST PUSH2 0x230 PUSH1 0x11 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x28F PUSH2 0x1388 JUMP JUMPDEST PUSH2 0x230 PUSH1 0x8 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x28F PUSH2 0x44D CALLDATASIZE PUSH1 0x4 PUSH2 0x1E66 JUMP JUMPDEST PUSH2 0x14AC JUMP JUMPDEST PUSH2 0x230 PUSH2 0x15DE JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH2 0x389 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP2 JUMP JUMPDEST PUSH2 0x230 PUSH2 0x47B CALLDATASIZE PUSH1 0x4 PUSH2 0x1D93 JUMP JUMPDEST PUSH2 0x1632 JUMP JUMPDEST PUSH2 0x230 PUSH1 0x9 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x230 PUSH1 0x5 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x28F PUSH2 0x4A0 CALLDATASIZE PUSH1 0x4 PUSH2 0x1D93 JUMP JUMPDEST PUSH2 0x16A4 JUMP JUMPDEST PUSH1 0x12 SLOAD JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4C5 PUSH1 0x7 SLOAD PUSH1 0x6 SLOAD PUSH2 0x17EE SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SLOAD EQ ISZERO PUSH2 0x522 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x2 PUSH1 0x0 SSTORE CALLER PUSH2 0x530 PUSH2 0x15DE JUMP JUMPDEST PUSH1 0x9 SSTORE PUSH2 0x53B PUSH2 0x1096 JUMP JUMPDEST PUSH1 0x8 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH2 0x582 JUMPI PUSH2 0x556 DUP2 PUSH2 0x1632 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE PUSH1 0x9 SLOAD PUSH1 0xB SWAP1 SWAP2 MSTORE SWAP2 SWAP1 KECCAK256 SSTORE JUMPDEST PUSH1 0x0 DUP3 GT PUSH2 0x5D2 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x11 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43616E6E6F742077697468647261772030000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x519 JUMP JUMPDEST PUSH1 0xA SLOAD CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x5EF SWAP2 SWAP1 PUSH2 0x1F38 JUMP JUMPDEST TIMESTAMP LT ISZERO PUSH2 0x5FB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x12 SLOAD PUSH2 0x608 SWAP1 DUP4 PUSH2 0x1801 JUMP JUMPDEST PUSH1 0x12 SSTORE CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x13 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x625 SWAP1 DUP4 PUSH2 0x1801 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x13 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE PUSH1 0xE SWAP1 MSTORE KECCAK256 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x7AD JUMPI PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD PUSH32 0xE57466FD00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x0 SWAP2 DUP3 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0xE57466FD SWAP1 PUSH1 0x24 ADD PUSH1 0x80 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x6AA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x6BE JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x6E2 SWAP2 SWAP1 PUSH2 0x1E96 JUMP JUMPDEST POP SWAP1 SWAP4 POP SWAP1 SWAP2 POP POP PUSH9 0x1A055690D9DB80000 DUP3 LT PUSH2 0x742 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x15 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4D696772617465206163636F756E742066697273740000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x519 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x10 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 DUP2 MLOAD PUSH1 0x80 DUP2 ADD DUP4 MSTORE DUP2 SLOAD DUP2 MSTORE PUSH1 0x1 DUP3 ADD SLOAD SWAP4 DUP2 ADD SWAP4 SWAP1 SWAP4 MSTORE PUSH1 0x2 DUP2 ADD SLOAD SWAP2 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x3 ADD SLOAD PUSH1 0x60 DUP3 ADD MSTORE PUSH2 0x78A SWAP1 PUSH2 0x180D JUMP JUMPDEST SWAP1 POP DUP5 DUP2 LT PUSH2 0x79C JUMPI PUSH1 0x0 SWAP5 POP PUSH2 0x7A9 JUMP JUMPDEST PUSH2 0x7A6 DUP2 DUP7 PUSH2 0x1FC6 JUMP JUMPDEST SWAP5 POP JUMPDEST POP POP POP JUMPDEST PUSH1 0x4 SLOAD PUSH2 0x7C4 SWAP1 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER DUP5 PUSH2 0x19B7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP3 DUP2 MSTORE CALLER SWAP1 PUSH32 0x7084F5476618D8E60B11EF0D7D3F06914655ADB8793E28FF7F018D4C76D505D5 SWAP1 PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP PUSH1 0x1 PUSH1 0x0 SSTORE JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x85D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x519 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xFB3935EE PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x8AB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x8BF JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x8E3 SWAP2 SWAP1 PUSH2 0x1E7E JUMP JUMPDEST PUSH1 0xF DUP2 SWAP1 SSTORE PUSH1 0x2 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH32 0x8275198200000000000000000000000000000000000000000000000000000000 DUP2 MSTORE SWAP1 MLOAD PUSH1 0x0 SWAP3 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP2 PUSH4 0x82751982 SWAP2 PUSH1 0x4 DUP1 DUP4 ADD SWAP3 PUSH1 0x20 SWAP3 SWAP2 SWAP1 DUP3 SWAP1 SUB ADD DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x946 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x95A JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x97E SWAP2 SWAP1 PUSH2 0x1E7E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 DUP1 JUMPDEST DUP1 DUP6 GT ISZERO PUSH2 0xC71 JUMPI PUSH1 0x0 DUP7 DUP7 DUP4 DUP2 DUP2 LT PUSH2 0x9C7 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST SWAP1 POP PUSH1 0x20 MUL ADD PUSH1 0x20 DUP2 ADD SWAP1 PUSH2 0x9DC SWAP2 SWAP1 PUSH2 0x1D93 JUMP JUMPDEST SWAP1 POP PUSH2 0xA09 PUSH1 0x40 MLOAD DUP1 PUSH1 0x80 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x40 MLOAD PUSH32 0xE57466FD00000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND PUSH1 0x4 DUP4 ADD MSTORE SWAP1 SWAP2 AND SWAP1 PUSH4 0xE57466FD SWAP1 PUSH1 0x24 ADD PUSH1 0x80 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xA67 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xA7B JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xA9F SWAP2 SWAP1 PUSH2 0x1E96 JUMP JUMPDEST PUSH1 0x60 DUP6 ADD MSTORE PUSH1 0x40 DUP5 ADD MSTORE PUSH1 0x20 DUP4 ADD MSTORE DUP1 DUP3 MSTORE PUSH1 0x12 SLOAD PUSH2 0xABE SWAP1 DUP3 PUSH2 0x1A83 JUMP JUMPDEST PUSH1 0x12 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x13 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0xAE4 SWAP1 DUP3 PUSH2 0x1A83 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x13 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE PUSH1 0xA SLOAD PUSH1 0x60 DUP4 ADD MLOAD PUSH2 0xB0F SWAP2 SWAP1 PUSH2 0x1FC6 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xD PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE PUSH1 0xE DUP2 MSTORE DUP3 DUP3 KECCAK256 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00 AND PUSH1 0x1 SWAP1 DUP2 OR SWAP1 SWAP2 SSTORE PUSH1 0x10 DUP3 MSTORE SWAP2 DUP4 SWAP1 KECCAK256 DUP6 MLOAD DUP2 SSTORE SWAP1 DUP6 ADD MLOAD SWAP2 DUP2 ADD SWAP2 SWAP1 SWAP2 SSTORE SWAP1 DUP4 ADD MLOAD PUSH1 0x2 DUP3 ADD SSTORE PUSH1 0x60 DUP4 ADD MLOAD PUSH1 0x3 SWAP1 SWAP2 ADD DUP2 SWAP1 SSTORE TIMESTAMP LT ISZERO PUSH2 0xC42 JUMPI PUSH1 0x0 TIMESTAMP DUP4 PUSH1 0x60 ADD MLOAD PUSH2 0xBA7 SWAP2 SWAP1 PUSH2 0x1FC6 JUMP JUMPDEST SWAP1 POP PUSH3 0x278D00 DUP2 GT ISZERO PUSH2 0xC40 JUMPI PUSH1 0x0 PUSH1 0x3 PUSH3 0x76A700 PUSH2 0xBC6 DUP5 DUP3 PUSH2 0x1FC6 JUMP JUMPDEST DUP12 DUP8 PUSH1 0x20 ADD MLOAD DUP13 PUSH2 0xBD7 SWAP2 SWAP1 PUSH2 0x1F89 JUMP JUMPDEST PUSH2 0xBE1 SWAP2 SWAP1 PUSH2 0x1F50 JUMP JUMPDEST PUSH2 0xBEB SWAP2 SWAP1 PUSH2 0x1F89 JUMP JUMPDEST PUSH2 0xBF5 SWAP2 SWAP1 PUSH2 0x1F50 JUMP JUMPDEST PUSH2 0xBFF SWAP2 SWAP1 PUSH2 0x1F50 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 DUP1 SLOAD SWAP3 SWAP4 POP DUP4 SWAP3 SWAP1 SWAP2 SWAP1 PUSH2 0xC2C SWAP1 DUP5 SWAP1 PUSH2 0x1F38 JUMP JUMPDEST SWAP1 SWAP2 SSTORE POP PUSH2 0xC3C SWAP1 POP DUP2 DUP9 PUSH2 0x1F38 JUMP JUMPDEST SWAP7 POP POP JUMPDEST POP JUMPDEST DUP5 PUSH1 0x11 PUSH1 0x0 DUP3 DUP3 SLOAD PUSH2 0xC54 SWAP2 SWAP1 PUSH2 0x1F38 JUMP JUMPDEST SWAP3 POP POP DUP2 SWAP1 SSTORE POP POP POP POP DUP1 DUP1 PUSH2 0xC69 SWAP1 PUSH2 0x2009 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x984 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xCD3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x519 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xCDD PUSH2 0x15DE JUMP JUMPDEST PUSH1 0x9 SSTORE PUSH2 0xCE8 PUSH2 0x1096 JUMP JUMPDEST PUSH1 0x8 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH2 0xD2F JUMPI PUSH2 0xD03 DUP2 PUSH2 0x1632 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE PUSH1 0x9 SLOAD PUSH1 0xB SWAP1 SWAP2 MSTORE SWAP2 SWAP1 KECCAK256 SSTORE JUMPDEST PUSH1 0x11 SLOAD ISZERO PUSH2 0xD4C JUMPI PUSH1 0x11 SLOAD PUSH2 0xD44 SWAP1 DUP4 PUSH2 0x1FC6 JUMP JUMPDEST PUSH1 0x0 PUSH1 0x11 SSTORE SWAP2 POP JUMPDEST PUSH1 0x5 SLOAD TIMESTAMP LT PUSH2 0xD6B JUMPI PUSH1 0x7 SLOAD PUSH2 0xD63 SWAP1 DUP4 SWAP1 PUSH2 0x1A8F JUMP JUMPDEST PUSH1 0x6 SSTORE PUSH2 0xDB4 JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0x0 SWAP1 PUSH2 0xD7B SWAP1 TIMESTAMP PUSH2 0x1801 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0xD94 PUSH1 0x6 SLOAD DUP4 PUSH2 0x17EE SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x7 SLOAD SWAP1 SWAP2 POP PUSH2 0xDAE SWAP1 PUSH2 0xDA8 DUP7 DUP5 PUSH2 0x1A83 JUMP JUMPDEST SWAP1 PUSH2 0x1A8F JUMP JUMPDEST PUSH1 0x6 SSTORE POP POP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x40 MLOAD PUSH32 0x70A0823100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE ADDRESS PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x0 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH4 0x70A08231 SWAP1 PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0xE11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0xE25 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0xE49 SWAP2 SWAP1 PUSH2 0x1E7E JUMP JUMPDEST SWAP1 POP PUSH2 0xE60 PUSH1 0x7 SLOAD DUP3 PUSH2 0x1A8F SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST PUSH1 0x6 SLOAD GT ISZERO PUSH2 0xEB1 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x18 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x50726F76696465642072657761726420746F6F20686967680000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x519 JUMP JUMPDEST TIMESTAMP PUSH1 0x8 DUP2 SWAP1 SSTORE PUSH1 0x7 SLOAD PUSH2 0xEC4 SWAP2 SWAP1 PUSH2 0x1A83 JUMP JUMPDEST PUSH1 0x5 SSTORE PUSH1 0x40 MLOAD DUP4 DUP2 MSTORE PUSH32 0xDE88A922E0D3B88B24E9623EFEB464919C6BF9F66857A65E2BFCF2CE87A9433D SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0xF59 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x519 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xF63 PUSH2 0x15DE JUMP JUMPDEST PUSH1 0x9 SSTORE PUSH2 0xF6E PUSH2 0x1096 JUMP JUMPDEST PUSH1 0x8 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH2 0xFB5 JUMPI PUSH2 0xF89 DUP2 PUSH2 0x1632 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE PUSH1 0x9 SLOAD PUSH1 0xB SWAP1 SWAP2 MSTORE SWAP2 SWAP1 KECCAK256 SSTORE JUMPDEST POP PUSH1 0x5 SSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x13 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD JUMPDEST SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x1034 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x519 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x0 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 DUP4 SWAP1 LOG3 PUSH1 0x1 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x4C5 TIMESTAMP PUSH1 0x5 SLOAD PUSH2 0x1A9B JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x10FE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x519 JUMP JUMPDEST PUSH2 0x1124 PUSH2 0x1113 PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND SWAP1 DUP4 PUSH2 0x19B7 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 AND DUP2 MSTORE PUSH1 0x20 DUP2 ADD DUP4 SWAP1 MSTORE PUSH32 0x8C1256B8896378CD5044F80C202F9772B9D77DC85C8A6EB51967210B09BFAA28 SWAP2 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SLOAD EQ ISZERO PUSH2 0x11BD JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x519 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SSTORE CALLER PUSH2 0x11CB PUSH2 0x15DE JUMP JUMPDEST PUSH1 0x9 SSTORE PUSH2 0x11D6 PUSH2 0x1096 JUMP JUMPDEST PUSH1 0x8 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH2 0x121D JUMPI PUSH2 0x11F1 DUP2 PUSH2 0x1632 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE PUSH1 0x9 SLOAD PUSH1 0xB SWAP1 SWAP2 MSTORE SWAP2 SWAP1 KECCAK256 SSTORE JUMPDEST PUSH1 0x0 DUP3 GT PUSH2 0x126D JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0xE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x43616E6E6F74207374616B652030000000000000000000000000000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x519 JUMP JUMPDEST PUSH1 0x12 SLOAD PUSH2 0x127A SWAP1 DUP4 PUSH2 0x1A83 JUMP JUMPDEST PUSH1 0x12 SSTORE CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x13 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x1297 SWAP1 DUP4 PUSH2 0x1A83 JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x13 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SWAP2 SWAP1 SWAP2 SSTORE PUSH1 0x4 SLOAD PUSH2 0x12C4 SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 ADDRESS DUP6 PUSH2 0x1AB1 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP3 DUP2 MSTORE CALLER SWAP1 PUSH32 0x9E71BC8EEA02A63969F509818F2DAFB9254532904319F9DBDA79B67BD34A5F3D SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x1320 JUMPI CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xD PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 TIMESTAMP SWAP1 SSTORE JUMPDEST POP POP PUSH1 0x1 PUSH1 0x0 SSTORE JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x1383 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x519 JUMP JUMPDEST PUSH1 0xA SSTORE JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SLOAD EQ ISZERO PUSH2 0x13DB JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1F PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5265656E7472616E637947756172643A207265656E7472616E742063616C6C00 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x519 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x0 SSTORE CALLER PUSH2 0x13E9 PUSH2 0x15DE JUMP JUMPDEST PUSH1 0x9 SSTORE PUSH2 0x13F4 PUSH2 0x1096 JUMP JUMPDEST PUSH1 0x8 SSTORE PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND ISZERO PUSH2 0x143B JUMPI PUSH2 0x140F DUP2 PUSH2 0x1632 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE PUSH1 0x9 SLOAD PUSH1 0xB SWAP1 SWAP2 MSTORE SWAP2 SWAP1 KECCAK256 SSTORE JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP1 ISZERO PUSH2 0x1320 JUMPI CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SSTORE PUSH1 0x3 SLOAD PUSH2 0x147A SWAP2 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND SWAP1 DUP4 PUSH2 0x19B7 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 MSTORE CALLER SWAP1 PUSH32 0xE2403640BA68FED3A2F88B7557551D1993F84B99BB10FF833F0CF8DB0C5E0486 SWAP1 PUSH1 0x20 ADD PUSH2 0x7F2 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x1506 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x519 JUMP JUMPDEST PUSH1 0x5 SLOAD TIMESTAMP GT PUSH2 0x15A3 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x58 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x50726576696F7573207265776172647320706572696F64206D75737420626520 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x636F6D706C657465206265666F7265206368616E67696E672074686520647572 PUSH1 0x64 DUP3 ADD MSTORE PUSH32 0x6174696F6E20666F7220746865206E657720706572696F640000000000000000 PUSH1 0x84 DUP3 ADD MSTORE PUSH1 0xA4 ADD PUSH2 0x519 JUMP JUMPDEST PUSH1 0x7 DUP2 SWAP1 SSTORE PUSH1 0x40 MLOAD DUP2 DUP2 MSTORE PUSH32 0xFB46CA5A5E06D4540D6387B930A7C978BCE0DB5F449EC6B3F5D07C6E1D44F2D3 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x12 SLOAD PUSH1 0x0 EQ ISZERO PUSH2 0x15F4 JUMPI POP PUSH1 0x9 SLOAD PUSH2 0x4A9 JUMP JUMPDEST PUSH2 0x4C5 PUSH2 0x1629 PUSH1 0x12 SLOAD PUSH2 0xDA8 PUSH8 0xDE0B6B3A7640000 PUSH2 0x1623 PUSH1 0x6 SLOAD PUSH2 0x1623 PUSH1 0x8 SLOAD PUSH2 0x161D PUSH2 0x1096 JUMP JUMPDEST SWAP1 PUSH2 0x1801 JUMP JUMPDEST SWAP1 PUSH2 0x17EE JUMP JUMPDEST PUSH1 0x9 SLOAD SWAP1 PUSH2 0x1A83 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xC PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SLOAD PUSH1 0xB SWAP1 SWAP3 MSTORE DUP3 KECCAK256 SLOAD PUSH2 0x169E SWAP2 SWAP1 PUSH2 0x1698 SWAP1 PUSH8 0xDE0B6B3A7640000 SWAP1 PUSH2 0xDA8 SWAP1 PUSH2 0x1679 SWAP1 PUSH2 0x161D PUSH2 0x15DE JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP9 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x13 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 PUSH2 0x17EE JUMP JUMPDEST SWAP1 PUSH2 0x1A83 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND CALLER EQ PUSH2 0x16FE JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A2063616C6C6572206973206E6F7420746865206F776E6572 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x519 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x177A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x4F776E61626C653A206E6577206F776E657220697320746865207A65726F2061 PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6464726573730000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x519 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP5 AND SWAP3 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 PUSH1 0x1 DUP1 SLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFF0000000000000000000000000000000000000000 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH2 0x17FA DUP3 DUP5 PUSH2 0x1F89 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x17FA DUP3 DUP5 PUSH2 0x1FC6 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xC8D65D59 PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x185E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1872 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x1896 SWAP2 SWAP1 PUSH2 0x1E7E JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0xF SLOAD PUSH1 0x1 PUSH2 0x18A9 SWAP2 SWAP1 PUSH2 0x1F38 JUMP JUMPDEST PUSH1 0x20 DUP6 ADD MLOAD PUSH1 0x40 DUP7 ADD MLOAD PUSH2 0x18BD SWAP1 DUP6 PUSH2 0x1FC6 JUMP JUMPDEST PUSH2 0x18C7 SWAP2 SWAP1 PUSH2 0x1F89 JUMP JUMPDEST PUSH2 0x18D1 SWAP2 SWAP1 PUSH2 0x1F50 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH1 0x2 PUSH1 0x0 SWAP1 SLOAD SWAP1 PUSH2 0x100 EXP SWAP1 DIV PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH4 0xFB3935EE PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP7 DUP1 EXTCODESIZE ISZERO DUP1 ISZERO PUSH2 0x1923 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP GAS STATICCALL ISZERO DUP1 ISZERO PUSH2 0x1937 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0x40 MLOAD RETURNDATASIZE PUSH1 0x1F NOT PUSH1 0x1F DUP3 ADD AND DUP3 ADD DUP1 PUSH1 0x40 MSTORE POP DUP2 ADD SWAP1 PUSH2 0x195B SWAP2 SWAP1 PUSH2 0x1E7E JUMP JUMPDEST PUSH2 0x1966 SWAP1 PUSH1 0x1 PUSH2 0x1F38 JUMP JUMPDEST PUSH1 0x20 DUP7 ADD MLOAD PUSH1 0x40 DUP8 ADD MLOAD PUSH2 0x197A SWAP1 DUP7 PUSH2 0x1FC6 JUMP JUMPDEST PUSH2 0x1984 SWAP2 SWAP1 PUSH2 0x1F89 JUMP JUMPDEST PUSH2 0x198E SWAP2 SWAP1 PUSH2 0x1F50 JUMP JUMPDEST SWAP1 POP DUP1 DUP3 LT PUSH2 0x19A3 JUMPI PUSH1 0x0 SWAP4 POP POP POP POP PUSH2 0xFD5 JUMP JUMPDEST PUSH2 0x19AD DUP3 DUP3 PUSH2 0x1FC6 JUMP JUMPDEST SWAP4 POP POP POP POP PUSH2 0xFD5 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP4 AND PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x1A7E SWAP1 DUP5 SWAP1 PUSH32 0xA9059CBB00000000000000000000000000000000000000000000000000000000 SWAP1 PUSH1 0x64 ADD JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 DUP2 DUP5 SUB ADD DUP2 MSTORE SWAP2 SWAP1 MSTORE PUSH1 0x20 DUP2 ADD DUP1 MLOAD PUSH28 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH32 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 MSTORE PUSH2 0x1B08 JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x17FA DUP3 DUP5 PUSH2 0x1F38 JUMP JUMPDEST PUSH1 0x0 PUSH2 0x17FA DUP3 DUP5 PUSH2 0x1F50 JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH2 0x1AAA JUMPI DUP2 PUSH2 0x17FA JUMP JUMPDEST POP SWAP1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP1 DUP6 AND PUSH1 0x24 DUP4 ADD MSTORE DUP4 AND PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 DUP2 ADD DUP3 SWAP1 MSTORE PUSH2 0x1B02 SWAP1 DUP6 SWAP1 PUSH32 0x23B872DD00000000000000000000000000000000000000000000000000000000 SWAP1 PUSH1 0x84 ADD PUSH2 0x19FC JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x1B5D DUP3 PUSH1 0x40 MLOAD DUP1 PUSH1 0x40 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x20 DUP2 MSTORE PUSH1 0x20 ADD PUSH32 0x5361666545524332303A206C6F772D6C6576656C2063616C6C206661696C6564 DUP2 MSTORE POP DUP6 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND PUSH2 0x1BED SWAP1 SWAP3 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST DUP1 MLOAD SWAP1 SWAP2 POP ISZERO PUSH2 0x1A7E JUMPI DUP1 DUP1 PUSH1 0x20 ADD SWAP1 MLOAD DUP2 ADD SWAP1 PUSH2 0x1B7B SWAP2 SWAP1 PUSH2 0x1E46 JUMP JUMPDEST PUSH2 0x1A7E JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x2A PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x5361666545524332303A204552433230206F7065726174696F6E20646964206E PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x6F74207375636365656400000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x519 JUMP JUMPDEST PUSH1 0x60 PUSH2 0x1BFC DUP5 DUP5 PUSH1 0x0 DUP6 PUSH2 0x1C04 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP3 SELFBALANCE LT ISZERO PUSH2 0x1C7C JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x26 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A20696E73756666696369656E742062616C616E636520666F PUSH1 0x44 DUP3 ADD MSTORE PUSH32 0x722063616C6C0000000000000000000000000000000000000000000000000000 PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD PUSH2 0x519 JUMP JUMPDEST DUP5 EXTCODESIZE PUSH2 0x1CCA JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x1D PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x416464726573733A2063616C6C20746F206E6F6E2D636F6E7472616374000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x519 JUMP JUMPDEST PUSH1 0x0 DUP1 DUP7 PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND DUP6 DUP8 PUSH1 0x40 MLOAD PUSH2 0x1CE6 SWAP2 SWAP1 PUSH2 0x1ECB JUMP JUMPDEST PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP8 GAS CALL SWAP3 POP POP POP RETURNDATASIZE DUP1 PUSH1 0x0 DUP2 EQ PUSH2 0x1D23 JUMPI PUSH1 0x40 MLOAD SWAP2 POP PUSH1 0x1F NOT PUSH1 0x3F RETURNDATASIZE ADD AND DUP3 ADD PUSH1 0x40 MSTORE RETURNDATASIZE DUP3 MSTORE RETURNDATASIZE PUSH1 0x0 PUSH1 0x20 DUP5 ADD RETURNDATACOPY PUSH2 0x1D28 JUMP JUMPDEST PUSH1 0x60 SWAP2 POP JUMPDEST POP SWAP2 POP SWAP2 POP PUSH2 0x1D38 DUP3 DUP3 DUP7 PUSH2 0x1D43 JUMP JUMPDEST SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x60 DUP4 ISZERO PUSH2 0x1D52 JUMPI POP DUP2 PUSH2 0x17FA JUMP JUMPDEST DUP3 MLOAD ISZERO PUSH2 0x1D62 JUMPI DUP3 MLOAD DUP1 DUP5 PUSH1 0x20 ADD REVERT JUMPDEST DUP2 PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x519 SWAP2 SWAP1 PUSH2 0x1EE7 JUMP JUMPDEST DUP1 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0xFD5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1DA4 JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x17FA DUP3 PUSH2 0x1D7C JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1DBF JUMPI DUP1 DUP2 REVERT JUMPDEST PUSH2 0x1DC8 DUP4 PUSH2 0x1D7C JUMP JUMPDEST SWAP5 PUSH1 0x20 SWAP4 SWAP1 SWAP4 ADD CALLDATALOAD SWAP4 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x20 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x1DE8 JUMPI DUP2 DUP3 REVERT JUMPDEST DUP3 CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP1 DUP3 GT ISZERO PUSH2 0x1DFF JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 DUP6 ADD SWAP2 POP DUP6 PUSH1 0x1F DUP4 ADD SLT PUSH2 0x1E12 JUMPI DUP4 DUP5 REVERT JUMPDEST DUP2 CALLDATALOAD DUP2 DUP2 GT ISZERO PUSH2 0x1E20 JUMPI DUP5 DUP6 REVERT JUMPDEST DUP7 PUSH1 0x20 DUP3 PUSH1 0x5 SHL DUP6 ADD ADD GT ISZERO PUSH2 0x1E34 JUMPI DUP5 DUP6 REVERT JUMPDEST PUSH1 0x20 SWAP3 SWAP1 SWAP3 ADD SWAP7 SWAP2 SWAP6 POP SWAP1 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1E57 JUMPI DUP1 DUP2 REVERT JUMPDEST DUP2 MLOAD DUP1 ISZERO ISZERO DUP2 EQ PUSH2 0x17FA JUMPI DUP2 DUP3 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1E77 JUMPI DUP1 DUP2 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x1E8F JUMPI DUP1 DUP2 REVERT JUMPDEST POP MLOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x80 DUP6 DUP8 SUB SLT ISZERO PUSH2 0x1EAB JUMPI DUP2 DUP3 REVERT JUMPDEST POP POP DUP3 MLOAD PUSH1 0x20 DUP5 ADD MLOAD PUSH1 0x40 DUP6 ADD MLOAD PUSH1 0x60 SWAP1 SWAP6 ADD MLOAD SWAP2 SWAP7 SWAP1 SWAP6 POP SWAP1 SWAP3 POP SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 MLOAD PUSH2 0x1EDD DUP2 DUP5 PUSH1 0x20 DUP8 ADD PUSH2 0x1FDD JUMP JUMPDEST SWAP2 SWAP1 SWAP2 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 MSTORE DUP3 MLOAD DUP1 PUSH1 0x20 DUP5 ADD MSTORE PUSH2 0x1F06 DUP2 PUSH1 0x40 DUP6 ADD PUSH1 0x20 DUP8 ADD PUSH2 0x1FDD JUMP JUMPDEST PUSH1 0x1F ADD PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFE0 AND SWAP2 SWAP1 SWAP2 ADD PUSH1 0x40 ADD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 NOT DUP3 GT ISZERO PUSH2 0x1F4B JUMPI PUSH2 0x1F4B PUSH2 0x2042 JUMP JUMPDEST POP ADD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 PUSH2 0x1F84 JUMPI PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 DUP2 MSTORE PUSH1 0x12 PUSH1 0x4 MSTORE PUSH1 0x24 DUP2 REVERT JUMPDEST POP DIV SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DIV DUP4 GT DUP3 ISZERO ISZERO AND ISZERO PUSH2 0x1FC1 JUMPI PUSH2 0x1FC1 PUSH2 0x2042 JUMP JUMPDEST POP MUL SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 LT ISZERO PUSH2 0x1FD8 JUMPI PUSH2 0x1FD8 PUSH2 0x2042 JUMP JUMPDEST POP SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x1FF8 JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x1FE0 JUMP JUMPDEST DUP4 DUP2 GT ISZERO PUSH2 0x1B02 JUMPI POP POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP JUMPDEST PUSH1 0x0 PUSH32 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP3 EQ ISZERO PUSH2 0x203B JUMPI PUSH2 0x203B PUSH2 0x2042 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP JUMPDEST PUSH32 0x4E487B7100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH7 0x5E6045DC536BE3 DUP7 0xD 0xA7 0x1F 0x2D PUSH31 0x42195DCC7EAC1BD466680666EC319B53076464736F6C634300080300330000 ",
          "sourceMap": "424:9711:29:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;977:42;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;8872:25:48;;;8860:2;8845:18;977:42:29;;;;;;;;874:33;;;;;;1026:45;;;;;;:::i;:::-;;;;;;;;;;;;;;1748:91;;;:::i;2783:119::-;;;:::i;4117:900::-;;;;;;:::i;:::-;;:::i;:::-;;7600:1790;;;;;;:::i;:::-;;:::i;751:40::-;;;;;;5388:1220;;;;;;:::i;:::-;;:::i;1077:40::-;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;3814:14:48;;3807:22;3789:41;;3777:2;3762:18;1077:40:29;3744:92:48;6650:160:29;;;;;;:::i;:::-;;:::i;1205:59::-;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;9139:25:48;;;9195:2;9180:18;;9173:34;;;;9223:18;;;9216:34;9281:2;9266:18;;9259:34;9126:3;9111:19;1205:59:29;9093:206:48;1845:110:29;;;;;;:::i;:::-;;:::i;1700:145:0:-;;;:::i;647:26:29:-;;;;;-1:-1:-1;;;;;647:26:29;;;;;;-1:-1:-1;;;;;2877:55:48;;;2859:74;;2847:2;2832:18;647:26:29;2814:125:48;716:29:29;;;;;;1961:129;;;:::i;6922:227::-;;;;;;:::i;:::-;;:::i;914:57::-;;;;;;:::i;:::-;;;;;;;;;;;;;;1068:85:0;1140:6;;-1:-1:-1;;;;;1140:6:0;1068:85;;1169:30:29;;;;;;3613:498;;;;;;:::i;:::-;;:::i;7514:80::-;;;;;;:::i;:::-;;:::i;1271:26::-;;;;;;5023:305;;;:::i;797:29::-;;;;;;7155:353;;;;;;:::i;:::-;;:::i;2096:406::-;;;:::i;615:26::-;;;;;-1:-1:-1;;;;;615:26:29;;;2508:269;;;;;;:::i;:::-;;:::i;832:35::-;;;;;;679:31;;;;;;1994:240:0;;;;;;:::i;:::-;;:::i;1748:91:29:-;1820:12;;1748:91;;:::o;2783:119::-;2838:7;2864:31;2879:15;;2864:10;;:14;;:31;;;;:::i;:::-;2857:38;;2783:119;:::o;4117:900::-;1680:1:1;2260:7;;:19;;2252:63;;;;-1:-1:-1;;;2252:63:1;;8568:2:48;2252:63:1;;;8550:21:48;8607:2;8587:18;;;8580:30;8646:33;8626:18;;;8619:61;8697:18;;2252:63:1;;;;;;;;;1680:1;2390:7;:18;4215:10:29::1;9511:16;:14;:16::i;:::-;9488:20;:39:::0;9554:26:::1;:24;:26::i;:::-;9537:14;:43:::0;-1:-1:-1;;;;;9594:21:29;::::1;::::0;9590:164:::1;;9650:25;9667:7;9650:16;:25::i;:::-;-1:-1:-1::0;;;;;9631:16:29;::::1;;::::0;;;:7:::1;:16;::::0;;;;;;;:44;;;;9723:20:::1;::::0;9689:22:::1;:31:::0;;;;;;:54;9590:164:::1;4258:1:::2;4249:6;:10;4241:40;;;::::0;-1:-1:-1;;;4241:40:29;;6739:2:48;4241:40:29::2;::::0;::::2;6721:21:48::0;6778:2;6758:18;;;6751:30;6817:19;6797:18;;;6790:47;6854:18;;4241:40:29::2;6711:167:48::0;4241:40:29::2;4343:8;::::0;4329:10:::2;4318:22;::::0;;;:10:::2;:22;::::0;;;;;:33:::2;::::0;4343:8;4318:33:::2;:::i;:::-;4299:15;:52;;4291:61;;;::::0;::::2;;4378:12;::::0;:24:::2;::::0;4395:6;4378:16:::2;:24::i;:::-;4363:12;:39:::0;4446:10:::2;4436:21;::::0;;;:9:::2;:21;::::0;;;;;:33:::2;::::0;4462:6;4436:25:::2;:33::i;:::-;4422:10;4412:21;::::0;;;:9:::2;:21;::::0;;;;;;;:57;;;;4484:8:::2;:20:::0;;;;::::2;;4480:431;;;4585:6;::::0;:32:::2;::::0;;;;4606:10:::2;4585:32;::::0;::::2;2859:74:48::0;4520:9:29::2;::::0;;;-1:-1:-1;;;;;4585:6:29;;::::2;::::0;:20:::2;::::0;2832:18:48;;4585:32:29::2;;;;;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;-1:-1:-1::0;4567:50:29;;-1:-1:-1;4567:50:29;;-1:-1:-1;;1153:10:29::2;4639:14:::0;::::2;4631:48;;;::::0;-1:-1:-1;;;4631:48:29;;5639:2:48;4631:48:29::2;::::0;::::2;5621:21:48::0;5678:2;5658:18;;;5651:30;5717:23;5697:18;;;5690:51;5758:18;;4631:48:29::2;5611:171:48::0;4631:48:29::2;4747:10;4694:18;4727:31:::0;;;:19:::2;:31;::::0;;;;;;;4715:44;;::::2;::::0;::::2;::::0;;;;;;::::2;::::0;::::2;::::0;;;::::2;::::0;;;;::::2;::::0;::::2;::::0;;;;;;;;::::2;;::::0;;;;;::::2;::::0;:11:::2;:44::i;:::-;4694:65;;4791:6;4777:10;:20;4773:128;;4826:1;4817:10;;4773:128;;;4866:20;4876:10:::0;4866:20;::::2;:::i;:::-;;;4773:128;4480:431;;;;4921:12;::::0;:45:::2;::::0;-1:-1:-1;;;;;4921:12:29::2;4947:10;4959:6:::0;4921:25:::2;:45::i;:::-;4981:29;::::0;8872:25:48;;;4991:10:29::2;::::0;4981:29:::2;::::0;8860:2:48;8845:18;4981:29:29::2;;;;;;;;-1:-1:-1::0;;1637:1:1;2563:7;:22;4117:900:29:o;7600:1790::-;1140:6:0;;-1:-1:-1;;;;;1140:6:0;665:10:5;1280:23:0;1272:68;;;;-1:-1:-1;;;1272:68:0;;7085:2:48;1272:68:0;;;7067:21:48;;;7104:18;;;7097:30;7163:34;7143:18;;;7136:62;7215:18;;1272:68:0;7057:182:48;1272:68:0;7693:6:29::1;;;;;;;;;-1:-1:-1::0;;;;;7693:6:29::1;-1:-1:-1::0;;;;;7693:26:29::1;;:28;;;;;;;;;;;;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;7675:15;:46:::0;;;7807:6:::1;::::0;:21:::1;::::0;;;;;;;7731:24:::1;::::0;-1:-1:-1;;;;;7807:6:29::1;::::0;:19:::1;::::0;:21:::1;::::0;;::::1;::::0;::::1;::::0;;;;;;;;:6;:21;::::1;;::::0;::::1;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;7783:45;;7839:20;7874:9:::0;7869:1515:::1;7885:19:::0;;::::1;7869:1515;;;7925:22;7950:8;;7959:1;7950:11;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;7925:36;;7975:27;-1:-1:-1::0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;7975:27:29::1;8181:6;::::0;:36:::1;::::0;;;;-1:-1:-1;;;;;2877:55:48;;;8181:36:29::1;::::0;::::1;2859:74:48::0;8181:6:29;;::::1;::::0;:20:::1;::::0;2832:18:48;;8181:36:29::1;;;;;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;::::0;::::1;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;8149:15;::::0;::::1;8016:201:::0;8108:23:::1;::::0;::::1;8016:201:::0;8071:19:::1;::::0;::::1;8016:201:::0;;;;8297:12:::1;::::0;:24:::1;::::0;8016:201;8297:16:::1;:24::i;:::-;8282:12;:39:::0;-1:-1:-1;;;;;8363:25:29;::::1;;::::0;;;:9:::1;:25;::::0;;;;;:37:::1;::::0;8393:6;8363:29:::1;:37::i;:::-;-1:-1:-1::0;;;;;8335:25:29;::::1;;::::0;;;:9:::1;:25;::::0;;;;:65;8461:8:::1;::::0;8443:15:::1;::::0;::::1;::::0;:26:::1;::::0;8461:8;8443:26:::1;:::i;:::-;-1:-1:-1::0;;;;;8414:26:29;::::1;;::::0;;;:10:::1;:26;::::0;;;;;;;:55;;;;8483:8:::1;:24:::0;;;;;:31;;;::::1;8510:4;8483:31:::0;;::::1;::::0;;;8528:19:::1;:35:::0;;;;;;:45;;;;;;::::1;::::0;;;::::1;::::0;;;;;;::::1;::::0;::::1;::::0;::::1;::::0;::::1;::::0;::::1;::::0;::::1;::::0;;::::1;::::0;;;8610:15:::1;-1:-1:-1::0;8588:745:29::1;;;8645:17;8683:15;8665:7;:15;;;:33;;;;:::i;:::-;8645:53;;8732:7;8720:9;:19;8716:603;;;8979:13;9202:1;9163:7;9110:19;9120:9:::0;9163:7;9110:19:::1;:::i;:::-;9089:16;9038:7;:19;;;9022:13;:35;;;;:::i;:::-;9021:84;;;;:::i;:::-;9020:110;;;;:::i;:::-;9019:152;;;;:::i;:::-;:184;;;;:::i;:::-;-1:-1:-1::0;;;;;9225:23:29;::::1;;::::0;;;:7:::1;:23;::::0;;;;:32;;8979:224;;-1:-1:-1;8979:224:29;;9225:23;;;:32:::1;::::0;8979:224;;9225:32:::1;:::i;:::-;::::0;;;-1:-1:-1;9279:21:29::1;::::0;-1:-1:-1;9295:5:29;9279:21;::::1;:::i;:::-;;;8716:603;;8588:745;;9361:12;9346:11;;:27;;;;;;;:::i;:::-;;;;;;;;7869:1515;;;7906:3;;;;;:::i;:::-;;;;7869:1515;;;;1350:1:0;;;7600:1790:29::0;;:::o;5388:1220::-;1140:6:0;;-1:-1:-1;;;;;1140:6:0;665:10:5;1280:23:0;1272:68;;;;-1:-1:-1;;;1272:68:0;;7085:2:48;1272:68:0;;;7067:21:48;;;7104:18;;;7097:30;7163:34;7143:18;;;7136:62;7215:18;;1272:68:0;7057:182:48;1272:68:0;5496:1:29::1;9511:16;:14;:16::i;:::-;9488:20;:39:::0;9554:26:::1;:24;:26::i;:::-;9537:14;:43:::0;-1:-1:-1;;;;;9594:21:29;::::1;::::0;9590:164:::1;;9650:25;9667:7;9650:16;:25::i;:::-;-1:-1:-1::0;;;;;9631:16:29;::::1;;::::0;;;:7:::1;:16;::::0;;;;;;;:44;;;;9723:20:::1;::::0;9689:22:::1;:31:::0;;;;;;:54;9590:164:::1;5518:11:::2;::::0;:15;5514:96:::2;;5559:11;::::0;5549:21:::2;::::0;;::::2;:::i;:::-;5598:1;5584:11;:15:::0;5549:21;-1:-1:-1;5514:96:29::2;5642:12;;5623:15;:31;5619:312;;5694:15;::::0;5683:27:::2;::::0;:6;;:10:::2;:27::i;:::-;5670:10;:40:::0;5619:312:::2;;;5761:12;::::0;5741:17:::2;::::0;5761:33:::2;::::0;5778:15:::2;5761:16;:33::i;:::-;5741:53;;5808:16;5827:25;5841:10;;5827:9;:13;;:25;;;;:::i;:::-;5904:15;::::0;5808:44;;-1:-1:-1;5879:41:29::2;::::0;:20:::2;:6:::0;5808:44;5879:10:::2;:20::i;:::-;:24:::0;::::2;:41::i;:::-;5866:10;:54:::0;-1:-1:-1;;5619:312:29::2;6303:12;::::0;:37:::2;::::0;;;;6334:4:::2;6303:37;::::0;::::2;2859:74:48::0;6285:15:29::2;::::0;-1:-1:-1;;;;;6303:12:29::2;::::0;:22:::2;::::0;2832:18:48;;6303:37:29::2;;;;;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;::::0;::::2;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;6285:55;;6385:28;6397:15;;6385:7;:11;;:28;;;;:::i;:::-;6371:10;;:42;;6350:113;;;::::0;-1:-1:-1;;;6350:113:29;;7446:2:48;6350:113:29::2;::::0;::::2;7428:21:48::0;7485:2;7465:18;;;7458:30;7524:26;7504:18;;;7497:54;7568:18;;6350:113:29::2;7418:174:48::0;6350:113:29::2;6491:15;6474:14;:32:::0;;;6551:15:::2;::::0;6531:36:::2;::::0;6491:15;6531:19:::2;:36::i;:::-;6516:12;:51:::0;6582:19:::2;::::0;8872:25:48;;;6582:19:29::2;::::0;8860:2:48;8845:18;6582:19:29::2;;;;;;;9763:1;1350::0::1;5388:1220:29::0;:::o;6650:160::-;1140:6:0;;-1:-1:-1;;;;;1140:6:0;665:10:5;1280:23:0;1272:68;;;;-1:-1:-1;;;1272:68:0;;7085:2:48;1272:68:0;;;7067:21:48;;;7104:18;;;7097:30;7163:34;7143:18;;;7136:62;7215:18;;1272:68:0;7057:182:48;1272:68:0;6761:1:29::1;9511:16;:14;:16::i;:::-;9488:20;:39:::0;9554:26:::1;:24;:26::i;:::-;9537:14;:43:::0;-1:-1:-1;;;;;9594:21:29;::::1;::::0;9590:164:::1;;9650:25;9667:7;9650:16;:25::i;:::-;-1:-1:-1::0;;;;;9631:16:29;::::1;;::::0;;;:7:::1;:16;::::0;;;;;;;:44;;;;9723:20:::1;::::0;9689:22:::1;:31:::0;;;;;;:54;9590:164:::1;-1:-1:-1::0;6779:12:29::2;:24:::0;6650:160::o;1845:110::-;-1:-1:-1;;;;;1930:18:29;;1904:7;1930:18;;;:9;:18;;;;;;1845:110;;;;:::o;1700:145:0:-;1140:6;;-1:-1:-1;;;;;1140:6:0;665:10:5;1280:23:0;1272:68;;;;-1:-1:-1;;;1272:68:0;;7085:2:48;1272:68:0;;;7067:21:48;;;7104:18;;;7097:30;7163:34;7143:18;;;7136:62;7215:18;;1272:68:0;7057:182:48;1272:68:0;1790:6:::1;::::0;1769:40:::1;::::0;1806:1:::1;::::0;-1:-1:-1;;;;;1790:6:0::1;::::0;1769:40:::1;::::0;1806:1;;1769:40:::1;1819:6;:19:::0;;;::::1;::::0;;1700:145::o;1961:129:29:-;2018:7;2044:39;2053:15;2070:12;;2044:8;:39::i;6922:227::-;1140:6:0;;-1:-1:-1;;;;;1140:6:0;665:10:5;1280:23:0;1272:68;;;;-1:-1:-1;;;1272:68:0;;7085:2:48;1272:68:0;;;7067:21:48;;;7104:18;;;7097:30;7163:34;7143:18;;;7136:62;7215:18;;1272:68:0;7057:182:48;1272:68:0;7036:55:29::1;7070:7;1140:6:0::0;;-1:-1:-1;;;;;1140:6:0;1068:85;;7070:7:29::1;-1:-1:-1::0;;;;;7036:33:29;::::1;::::0;7079:11;7036:33:::1;:55::i;:::-;7106:36;::::0;;-1:-1:-1;;;;;3539:55:48;;3521:74;;3626:2;3611:18;;3604:34;;;7106:36:29::1;::::0;3494:18:48;7106:36:29::1;;;;;;;6922:227:::0;;:::o;3613:498::-;1680:1:1;2260:7;;:19;;2252:63;;;;-1:-1:-1;;;2252:63:1;;8568:2:48;2252:63:1;;;8550:21:48;8607:2;8587:18;;;8580:30;8646:33;8626:18;;;8619:61;8697:18;;2252:63:1;8540:181:48;2252:63:1;1680:1;2390:7;:18;3703:10:29::1;9511:16;:14;:16::i;:::-;9488:20;:39:::0;9554:26:::1;:24;:26::i;:::-;9537:14;:43:::0;-1:-1:-1;;;;;9594:21:29;::::1;::::0;9590:164:::1;;9650:25;9667:7;9650:16;:25::i;:::-;-1:-1:-1::0;;;;;9631:16:29;::::1;;::::0;;;:7:::1;:16;::::0;;;;;;;:44;;;;9723:20:::1;::::0;9689:22:::1;:31:::0;;;;;;:54;9590:164:::1;3746:1:::2;3737:6;:10;3729:37;;;::::0;-1:-1:-1;;;3729:37:29;;5989:2:48;3729:37:29::2;::::0;::::2;5971:21:48::0;6028:2;6008:18;;;6001:30;6067:16;6047:18;;;6040:44;6101:18;;3729:37:29::2;5961:164:48::0;3729:37:29::2;3791:12;::::0;:24:::2;::::0;3808:6;3791:16:::2;:24::i;:::-;3776:12;:39:::0;3859:10:::2;3849:21;::::0;;;:9:::2;:21;::::0;;;;;:33:::2;::::0;3875:6;3849:25:::2;:33::i;:::-;3835:10;3825:21;::::0;;;:9:::2;:21;::::0;;;;:57;;;;3892:12:::2;::::0;:64:::2;::::0;-1:-1:-1;;;;;3892:12:29;;::::2;::::0;3942:4:::2;3949:6:::0;3892:29:::2;:64::i;:::-;3971:26;::::0;8872:25:48;;;3978:10:29::2;::::0;3971:26:::2;::::0;8860:2:48;8845:18;3971:26:29::2;;;;;;;4022:10;4011:22;::::0;;;:10:::2;:22;::::0;;;;;4007:98:::2;;4065:10;4054:22;::::0;;;:10:::2;:22;::::0;;;;4079:15:::2;4054:40:::0;;4007:98:::2;-1:-1:-1::0;;1637:1:1;2563:7;:22;3613:498:29:o;7514:80::-;1140:6:0;;-1:-1:-1;;;;;1140:6:0;665:10:5;1280:23:0;1272:68;;;;-1:-1:-1;;;1272:68:0;;7085:2:48;1272:68:0;;;7067:21:48;;;7104:18;;;7097:30;7163:34;7143:18;;;7136:62;7215:18;;1272:68:0;7057:182:48;1272:68:0;7575:8:29::1;:12:::0;7514:80::o;5023:305::-;1680:1:1;2260:7;;:19;;2252:63;;;;-1:-1:-1;;;2252:63:1;;8568:2:48;2252:63:1;;;8550:21:48;8607:2;8587:18;;;8580:30;8646:33;8626:18;;;8619:61;8697:18;;2252:63:1;8540:181:48;2252:63:1;1680:1;2390:7;:18;5082:10:29::1;9511:16;:14;:16::i;:::-;9488:20;:39:::0;9554:26:::1;:24;:26::i;:::-;9537:14;:43:::0;-1:-1:-1;;;;;9594:21:29;::::1;::::0;9590:164:::1;;9650:25;9667:7;9650:16;:25::i;:::-;-1:-1:-1::0;;;;;9631:16:29;::::1;;::::0;;;:7:::1;:16;::::0;;;;;;;:44;;;;9723:20:::1;::::0;9689:22:::1;:31:::0;;;;;;:54;9590:164:::1;5129:10:::2;5104:14;5121:19:::0;;;:7:::2;:19;::::0;;;;;5154:10;;5150:172:::2;;5188:10;5202:1;5180:19:::0;;;:7:::2;:19;::::0;;;;:23;5217:12:::2;::::0;:45:::2;::::0;-1:-1:-1;;;;;5217:12:29;;::::2;::::0;5255:6;5217:25:::2;:45::i;:::-;5281:30;::::0;8872:25:48;;;5292:10:29::2;::::0;5281:30:::2;::::0;8860:2:48;8845:18;5281:30:29::2;8827:76:48::0;7155:353:29;1140:6:0;;-1:-1:-1;;;;;1140:6:0;665:10:5;1280:23:0;1272:68;;;;-1:-1:-1;;;1272:68:0;;7085:2:48;1272:68:0;;;7067:21:48;;;7104:18;;;7097:30;7163:34;7143:18;;;7136:62;7215:18;;1272:68:0;7057:182:48;1272:68:0;7277:12:29::1;;7259:15;:30;7238:165;;;::::0;-1:-1:-1;;;7238:165:29;;4735:2:48;7238:165:29::1;::::0;::::1;4717:21:48::0;4774:2;4754:18;;;4747:30;4813:34;4793:18;;;4786:62;4884:34;4864:18;;;4857:62;4956:26;4935:19;;;4928:55;5000:19;;7238:165:29::1;4707:318:48::0;7238:165:29::1;7413:15;:34:::0;;;7462:39:::1;::::0;8872:25:48;;;7462:39:29::1;::::0;8860:2:48;8845:18;7462:39:29::1;;;;;;;7155:353:::0;:::o;2096:406::-;2143:7;2166:12;;2182:1;2166:17;2162:75;;;-1:-1:-1;2206:20:29;;2199:27;;2162:75;2265:230;2307:174;2468:12;;2307:135;2437:4;2307:104;2400:10;;2307:67;2359:14;;2307:26;:24;:26::i;:::-;:51;;:67::i;:::-;:92;;:104::i;:174::-;2265:20;;;:24;:230::i;2508:269::-;-1:-1:-1;;;;;2753:16:29;;2572:7;2753:16;;;:7;:16;;;;;;;;;2671:22;:31;;;;;;2610:160;;2753:16;2610:121;;2726:4;;2610:94;;2650:53;;:16;:14;:16::i;:53::-;-1:-1:-1;;;;;2610:18:29;;;;;;:9;:18;;;;;;;:39;:94::i;:121::-;:142;;:160::i;:::-;2591:179;2508:269;-1:-1:-1;;2508:269:29:o;1994:240:0:-;1140:6;;-1:-1:-1;;;;;1140:6:0;665:10:5;1280:23:0;1272:68;;;;-1:-1:-1;;;1272:68:0;;7085:2:48;1272:68:0;;;7067:21:48;;;7104:18;;;7097:30;7163:34;7143:18;;;7136:62;7215:18;;1272:68:0;7057:182:48;1272:68:0;-1:-1:-1;;;;;2082:22:0;::::1;2074:73;;;::::0;-1:-1:-1;;;2074:73:0;;5232:2:48;2074:73:0::1;::::0;::::1;5214:21:48::0;5271:2;5251:18;;;5244:30;5310:34;5290:18;;;5283:62;5381:8;5361:18;;;5354:36;5407:19;;2074:73:0::1;5204:228:48::0;2074:73:0::1;2183:6;::::0;2162:38:::1;::::0;-1:-1:-1;;;;;2162:38:0;;::::1;::::0;2183:6:::1;::::0;2162:38:::1;::::0;2183:6:::1;::::0;2162:38:::1;2210:6;:17:::0;;;::::1;-1:-1:-1::0;;;;;2210:17:0;;;::::1;::::0;;;::::1;::::0;;1994:240::o;3382:96:7:-;3440:7;3466:5;3470:1;3466;:5;:::i;:::-;3459:12;3382:96;-1:-1:-1;;;3382:96:7:o;3039:::-;3097:7;3123:5;3127:1;3123;:5;:::i;2908:647:29:-;3005:7;3028:19;3050:6;;;;;;;;;-1:-1:-1;;;;;3050:6:29;-1:-1:-1;;;;;3050:34:29;;:36;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;3028:58;;3097:22;3217:15;;3235:1;3217:19;;;;:::i;:::-;3177;;;;3150:23;;;;3136:37;;:11;:37;:::i;:::-;3135:61;;;;:::i;:::-;3134:103;;;;:::i;:::-;3097:140;;3248:21;3367:6;;;;;;;;;-1:-1:-1;;;;;3367:6:29;-1:-1:-1;;;;;3367:26:29;;:28;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;:32;;3398:1;3367:32;:::i;:::-;3327:19;;;;3300:23;;;;3286:37;;:11;:37;:::i;:::-;3285:61;;;;:::i;:::-;3284:116;;;;:::i;:::-;3248:152;;3433:13;3415:14;:31;3411:138;;3469:1;3462:8;;;;;;;3411:138;3508:30;3524:14;3508:13;:30;:::i;:::-;3501:37;;;;;;;634:175:3;743:58;;-1:-1:-1;;;;;3539:55:48;;743:58:3;;;3521:74:48;3611:18;;;3604:34;;;716:86:3;;736:5;;766:23;;3494:18:48;;743:58:3;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;716:19;:86::i;:::-;634:175;;;:::o;2672:96:7:-;2730:7;2756:5;2760:1;2756;:5;:::i;3767:96::-;3825:7;3851:5;3855:1;3851;:5;:::i;391:104:6:-;449:7;479:1;475;:5;:13;;487:1;475:13;;;-1:-1:-1;483:1:6;;391:104;-1:-1:-1;391:104:6:o;815:203:3:-;942:68;;-1:-1:-1;;;;;3225:15:48;;;942:68:3;;;3207:34:48;3277:15;;3257:18;;;3250:43;3309:18;;;3302:34;;;915:96:3;;935:5;;965:27;;3119:18:48;;942:68:3;3101:241:48;915:96:3;815:203;;;;:::o;3022:751::-;3441:23;3467:69;3495:4;3467:69;;;;;;;;;;;;;;;;;3475:5;-1:-1:-1;;;;;3467:27:3;;;:69;;;;;:::i;:::-;3550:17;;3441:95;;-1:-1:-1;3550:21:3;3546:221;;3690:10;3679:30;;;;;;;;;;;;:::i;:::-;3671:85;;;;-1:-1:-1;;;3671:85:3;;8157:2:48;3671:85:3;;;8139:21:48;8196:2;8176:18;;;8169:30;8235:34;8215:18;;;8208:62;8306:12;8286:18;;;8279:40;8336:19;;3671:85:3;8129:232:48;3573:193:4;3676:12;3707:52;3729:6;3737:4;3743:1;3746:12;3707:21;:52::i;:::-;3700:59;3573:193;-1:-1:-1;;;;3573:193:4:o;4600:523::-;4727:12;4784:5;4759:21;:30;;4751:81;;;;-1:-1:-1;;;4751:81:4;;6332:2:48;4751:81:4;;;6314:21:48;6371:2;6351:18;;;6344:30;6410:34;6390:18;;;6383:62;6481:8;6461:18;;;6454:36;6507:19;;4751:81:4;6304:228:48;4751:81:4;1078:20;;4842:60;;;;-1:-1:-1;;;4842:60:4;;7799:2:48;4842:60:4;;;7781:21:48;7838:2;7818:18;;;7811:30;7877:31;7857:18;;;7850:59;7926:18;;4842:60:4;7771:179:48;4842:60:4;4973:12;4987:23;5014:6;-1:-1:-1;;;;;5014:11:4;5034:5;5042:4;5014:33;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4972:75;;;;5064:52;5082:7;5091:10;5103:12;5064:17;:52::i;:::-;5057:59;4600:523;-1:-1:-1;;;;;;;4600:523:4:o;7083:725::-;7198:12;7226:7;7222:580;;;-1:-1:-1;7256:10:4;7249:17;;7222:580;7367:17;;:21;7363:429;;7625:10;7619:17;7685:15;7672:10;7668:2;7664:19;7657:44;7574:145;7764:12;7757:20;;-1:-1:-1;;;7757:20:4;;;;;;;;:::i;14:196:48:-;82:20;;-1:-1:-1;;;;;131:54:48;;121:65;;111:2;;200:1;197;190:12;215:196;;327:2;315:9;306:7;302:23;298:32;295:2;;;348:6;340;333:22;295:2;376:29;395:9;376:29;:::i;416:264::-;;;545:2;533:9;524:7;520:23;516:32;513:2;;;566:6;558;551:22;513:2;594:29;613:9;594:29;:::i;:::-;584:39;670:2;655:18;;;;642:32;;-1:-1:-1;;;503:177:48:o;685:665::-;;;832:2;820:9;811:7;807:23;803:32;800:2;;;853:6;845;838:22;800:2;898:9;885:23;927:18;968:2;960:6;957:14;954:2;;;989:6;981;974:22;954:2;1032:6;1021:9;1017:22;1007:32;;1077:7;1070:4;1066:2;1062:13;1058:27;1048:2;;1104:6;1096;1089:22;1048:2;1149;1136:16;1175:2;1167:6;1164:14;1161:2;;;1196:6;1188;1181:22;1161:2;1254:7;1249:2;1239:6;1236:1;1232:14;1228:2;1224:23;1220:32;1217:45;1214:2;;;1280:6;1272;1265:22;1214:2;1316;1308:11;;;;;1338:6;;-1:-1:-1;790:560:48;;-1:-1:-1;;;;790:560:48:o;1355:297::-;;1475:2;1463:9;1454:7;1450:23;1446:32;1443:2;;;1496:6;1488;1481:22;1443:2;1533:9;1527:16;1586:5;1579:13;1572:21;1565:5;1562:32;1552:2;;1613:6;1605;1598:22;1657:190;;1769:2;1757:9;1748:7;1744:23;1740:32;1737:2;;;1790:6;1782;1775:22;1737:2;-1:-1:-1;1818:23:48;;1727:120;-1:-1:-1;1727:120:48:o;1852:194::-;;1975:2;1963:9;1954:7;1950:23;1946:32;1943:2;;;1996:6;1988;1981:22;1943:2;-1:-1:-1;2024:16:48;;1933:113;-1:-1:-1;1933:113:48:o;2051:378::-;;;;;2225:3;2213:9;2204:7;2200:23;2196:33;2193:2;;;2247:6;2239;2232:22;2193:2;-1:-1:-1;;2275:16:48;;2331:2;2316:18;;2310:25;2375:2;2360:18;;2354:25;2419:2;2404:18;;;2398:25;2275:16;;2310:25;;-1:-1:-1;2398:25:48;;-1:-1:-1;2183:246:48;-1:-1:-1;2183:246:48:o;2434:274::-;;2601:6;2595:13;2617:53;2663:6;2658:3;2651:4;2643:6;2639:17;2617:53;:::i;:::-;2686:16;;;;;2571:137;-1:-1:-1;;2571:137:48:o;4086:442::-;;4235:2;4224:9;4217:21;4267:6;4261:13;4310:6;4305:2;4294:9;4290:18;4283:34;4326:66;4385:6;4380:2;4369:9;4365:18;4360:2;4352:6;4348:15;4326:66;:::i;:::-;4444:2;4432:15;4449:66;4428:88;4413:104;;;;4519:2;4409:113;;4207:321;-1:-1:-1;;4207:321:48:o;9304:128::-;;9375:1;9371:6;9368:1;9365:13;9362:2;;;9381:18;;:::i;:::-;-1:-1:-1;9417:9:48;;9352:80::o;9437:274::-;;9503:1;9493:2;;9538:77;9535:1;9528:88;9639:4;9636:1;9629:15;9667:4;9664:1;9657:15;9493:2;-1:-1:-1;9696:9:48;;9483:228::o;9716:::-;;9882:1;9814:66;9810:74;9807:1;9804:81;9799:1;9792:9;9785:17;9781:105;9778:2;;;9889:18;;:::i;:::-;-1:-1:-1;9929:9:48;;9768:176::o;9949:125::-;;10017:1;10014;10011:8;10008:2;;;10022:18;;:::i;:::-;-1:-1:-1;10059:9:48;;9998:76::o;10079:258::-;10151:1;10161:113;10175:6;10172:1;10169:13;10161:113;;;10251:11;;;10245:18;10232:11;;;10225:39;10197:2;10190:10;10161:113;;;10292:6;10289:1;10286:13;10283:2;;;-1:-1:-1;;10327:1:48;10309:16;;10302:27;10132:205::o;10342:195::-;;10412:66;10405:5;10402:77;10399:2;;;10482:18;;:::i;:::-;-1:-1:-1;10529:1:48;10518:13;;10389:148::o;10542:184::-;10594:77;10591:1;10584:88;10691:4;10688:1;10681:15;10715:4;10712:1;10705:15"
        },
        "gasEstimates": {
          "creation": {
            "codeDepositCost": "1671800",
            "executionCost": "infinite",
            "totalCost": "infinite"
          },
          "external": {
            "balanceOf(address)": "infinite",
            "getRewardForDuration()": "infinite",
            "lastTimeRewardApplicable()": "1128",
            "lastUpdateTime()": "1051",
            "legacyCarry()": "1095",
            "legacyStakeAccounts(address)": "3833",
            "lockTime()": "1053",
            "migrate(address[])": "infinite",
            "migrated(address)": "1299",
            "notifyRewardAmount(uint256)": "infinite",
            "owner()": "1143",
            "periodFinish()": "1072",
            "recoverERC20(address,uint256)": "infinite",
            "renounceOwnership()": "24214",
            "rewardPerToken()": "infinite",
            "rewardPerTokenStored()": "1050",
            "rewardRate()": "1095",
            "rewards(address)": "1255",
            "rewardsDuration()": "1096",
            "rewardsToken()": "1104",
            "setLockTime(uint256)": "21153",
            "setRewardsDuration(uint256)": "23040",
            "stake(uint256)": "infinite",
            "stakeStart(address)": "1299",
            "stakingToken()": "1126",
            "startingWeights()": "1029",
            "totalSupply()": "1110",
            "transferOwnership(address)": "24495",
            "updatePeriodFinish(uint256)": "infinite",
            "userRewardPerTokenPaid(address)": "1298",
            "viewRewardAmount(address)": "infinite",
            "withdrawReward()": "infinite",
            "withdrawStake(uint256)": "infinite"
          },
          "internal": {
            "_rewardDiff(struct StakeAccount memory)": "infinite"
          }
        },
        "methodIdentifiers": {
          "balanceOf(address)": "70a08231",
          "getRewardForDuration()": "1c1f78eb",
          "lastTimeRewardApplicable()": "80faa57d",
          "lastUpdateTime()": "c8f33c91",
          "legacyCarry()": "be7b51cc",
          "legacyStakeAccounts(address)": "568a2d98",
          "lockTime()": "0d668087",
          "migrate(address[])": "2e558d69",
          "migrated(address)": "4ba0a5ee",
          "notifyRewardAmount(uint256)": "3c6b16ab",
          "owner()": "8da5cb5b",
          "periodFinish()": "ebe2b12b",
          "recoverERC20(address,uint256)": "8980f11f",
          "renounceOwnership()": "715018a6",
          "rewardPerToken()": "cd3daf9d",
          "rewardPerTokenStored()": "df136d65",
          "rewardRate()": "7b0a47ee",
          "rewards(address)": "0700037d",
          "rewardsDuration()": "386a9525",
          "rewardsToken()": "d1af0c7d",
          "setLockTime(uint256)": "ae04d45d",
          "setRewardsDuration(uint256)": "cc1a378f",
          "stake(uint256)": "a694fc3a",
          "stakeStart(address)": "12a7f661",
          "stakingToken()": "72f702f3",
          "startingWeights()": "a204cf85",
          "totalSupply()": "18160ddd",
          "transferOwnership(address)": "f2fde38b",
          "updatePeriodFinish(uint256)": "556f6e6b",
          "userRewardPerTokenPaid(address)": "8b876347",
          "viewRewardAmount(address)": "dbe85f70",
          "withdrawReward()": "c885bc58",
          "withdrawStake(uint256)": "25d5971f"
        }
      },
      "metadata": "{\"compiler\":{\"version\":\"0.8.3+commit.8d00100c\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardsToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stakingToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"legacyContract\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Recovered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newDuration\",\"type\":\"uint256\"}],\"name\":\"RewardsDurationUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardForDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTimeRewardApplicable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdateTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"legacyCarry\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"legacyStakeAccounts\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"stakeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"stakeWeight\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cumulativeStart\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lockEnd\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lockTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"accounts\",\"type\":\"address[]\"}],\"name\":\"migrate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"migrated\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"notifyRewardAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"periodFinish\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenAmount\",\"type\":\"uint256\"}],\"name\":\"recoverERC20\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerTokenStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"t\",\"type\":\"uint256\"}],\"name\":\"setLockTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardsDuration\",\"type\":\"uint256\"}],\"name\":\"setRewardsDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakeStart\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startingWeights\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"updatePeriodFinish\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRewardPerTokenPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"viewRewardAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdrawStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Staking.sol\":\"Staking\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":5000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\",\"keccak256\":\"0x1cae4f85f114ff17b90414f5da67365b1d00337abb5bce9bf944eb78a2c0673c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x1278c76b840063ff5e14a2d7c5707812c1eabc2342ed040bf862c2d7552102fe\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x99f5c21018d796db7833a2100bb0e7411999e248a3c950fb526eee5d2bf47cb7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xf930d2df426bfcfc1f7415be724f04081c96f4fb9ec8d0e3a521c07692dface0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\",\"keccak256\":\"0xa1477864def7febd9826918e50482a1ee7068b337b03804a7e0e98c674ac57c2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2526b7c6a366fc211bbc176078ab02b83833e7682abcc5b3bed9d700b34e2a3e\",\"license\":\"MIT\"},\"contracts/Roles.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../interfaces/IDependencyController.sol\\\";\\n\\n// we chose not to go with an enum\\n// to make this list easy to extend\\nuint256 constant FUND_TRANSFERER = 1;\\nuint256 constant MARGIN_CALLER = 2;\\nuint256 constant BORROWER = 3;\\nuint256 constant MARGIN_TRADER = 4;\\nuint256 constant FEE_SOURCE = 5;\\nuint256 constant LIQUIDATOR = 6;\\nuint256 constant AUTHORIZED_FUND_TRADER = 7;\\nuint256 constant INCENTIVE_REPORTER = 8;\\nuint256 constant TOKEN_ACTIVATOR = 9;\\nuint256 constant STAKE_PENALIZER = 10;\\nuint256 constant LENDER = 11;\\n\\nuint256 constant FUND = 101;\\nuint256 constant LENDING = 102;\\nuint256 constant MARGIN_ROUTER = 103;\\nuint256 constant CROSS_MARGIN_TRADING = 104;\\nuint256 constant FEE_CONTROLLER = 105;\\nuint256 constant PRICE_CONTROLLER = 106;\\nuint256 constant ADMIN = 107;\\nuint256 constant INCENTIVE_DISTRIBUTION = 108;\\nuint256 constant TOKEN_ADMIN = 109;\\n\\nuint256 constant DISABLER = 1001;\\nuint256 constant DEPENDENCY_CONTROLLER = 1002;\\n\\n/// @title Manage permissions of contracts and ownership of everything\\n/// owned by a multisig wallet (0xEED9D1c6B4cdEcB3af070D85bfd394E7aF179CBd) during\\n/// beta and will then be transfered to governance\\n/// https://github.com/marginswap/governance\\ncontract Roles is Ownable {\\n    mapping(address => mapping(uint256 => bool)) public roles;\\n    mapping(uint256 => address) public mainCharacters;\\n\\n    constructor() Ownable() {\\n        // token activation from the get-go\\n        roles[msg.sender][TOKEN_ACTIVATOR] = true;\\n    }\\n\\n    /// @dev Throws if called by any account other than the owner.\\n    modifier onlyOwnerExecDepController() {\\n        require(\\n            owner() == msg.sender ||\\n                executor() == msg.sender ||\\n                mainCharacters[DEPENDENCY_CONTROLLER] == msg.sender,\\n            \\\"Roles: caller is not the owner\\\"\\n        );\\n        _;\\n    }\\n\\n    function giveRole(uint256 role, address actor)\\n        external\\n        onlyOwnerExecDepController\\n    {\\n        roles[actor][role] = true;\\n    }\\n\\n    function removeRole(uint256 role, address actor)\\n        external\\n        onlyOwnerExecDepController\\n    {\\n        roles[actor][role] = false;\\n    }\\n\\n    function setMainCharacter(uint256 role, address actor)\\n        external\\n        onlyOwnerExecDepController\\n    {\\n        mainCharacters[role] = actor;\\n    }\\n\\n    function getRole(uint256 role, address contr) external view returns (bool) {\\n        return roles[contr][role];\\n    }\\n\\n    /// @dev current executor\\n    function executor() public returns (address exec) {\\n        address depController = mainCharacters[DEPENDENCY_CONTROLLER];\\n        if (depController != address(0)) {\\n            exec = IDependencyController(depController).currentExecutor();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7ba8d9671c7dd24ae361f1531b6fa8f10af7a8a47a38c27eb0a3fe8fc1e23ae7\",\"license\":\"BUSL-1.1\"},\"contracts/Staking.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"./TokenStaking.sol\\\";\\n\\n// https://docs.synthetix.io/contracts/source/contracts/stakingrewards\\ncontract Staking is ReentrancyGuard, Ownable {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    /* ========== STATE VARIABLES ========== */\\n\\n    TokenStaking legacy;\\n\\n    IERC20 public rewardsToken;\\n    IERC20 public stakingToken;\\n    uint256 public periodFinish = 0;\\n    uint256 public rewardRate = 0;\\n    uint256 public rewardsDuration = 30 days;\\n    uint256 public lastUpdateTime;\\n    uint256 public rewardPerTokenStored;\\n\\n    uint256 public lockTime = 30 days;\\n\\n    mapping(address => uint256) public userRewardPerTokenPaid;\\n    mapping(address => uint256) public rewards;\\n\\n    mapping(address => uint256) public stakeStart;\\n    mapping(address => bool) public migrated;\\n    uint256 constant MAX_WEIGHT = 3 * 10**19;\\n    uint256 public startingWeights;\\n    mapping(address => StakeAccount) public legacyStakeAccounts;\\n\\n    uint256 public legacyCarry;\\n\\n    uint256 private _totalSupply;\\n    mapping(address => uint256) private _balances;\\n\\n    /* ========== CONSTRUCTOR ========== */\\n\\n    constructor(\\n        address _rewardsToken,\\n        address _stakingToken,\\n        address legacyContract\\n    ) Ownable() {\\n        rewardsToken = IERC20(_rewardsToken);\\n        stakingToken = IERC20(_stakingToken);\\n        legacy = TokenStaking(legacyContract);\\n    }\\n\\n    /* ========== VIEWS ========== */\\n\\n    function totalSupply() external view returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function balanceOf(address account) external view returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    function lastTimeRewardApplicable() public view returns (uint256) {\\n        return Math.min(block.timestamp, periodFinish);\\n    }\\n\\n    function rewardPerToken() public view returns (uint256) {\\n        if (_totalSupply == 0) {\\n            return rewardPerTokenStored;\\n        }\\n        return\\n            rewardPerTokenStored.add(\\n                lastTimeRewardApplicable()\\n                    .sub(lastUpdateTime)\\n                    .mul(rewardRate)\\n                    .mul(1e18)\\n                    .div(_totalSupply)\\n            );\\n    }\\n\\n    function viewRewardAmount(address account) public view returns (uint256) {\\n        return\\n            _balances[account]\\n                .mul(rewardPerToken().sub(userRewardPerTokenPaid[account]))\\n                .div(1e18)\\n                .add(rewards[account]);\\n    }\\n\\n    function getRewardForDuration() external view returns (uint256) {\\n        return rewardRate.mul(rewardsDuration);\\n    }\\n\\n    function _rewardDiff(StakeAccount memory account)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 totalReward = legacy.viewUpdatedCumulativeReward();\\n\\n        uint256 startingReward =\\n            ((totalReward - account.cumulativeStart) * account.stakeWeight) /\\n                (startingWeights + 1);\\n\\n        uint256 currentReward =\\n            ((totalReward - account.cumulativeStart) * account.stakeWeight) /\\n                (legacy.totalCurrentWeights() + 1);\\n\\n        if (startingReward >= currentReward) {\\n            return 0;\\n        } else {\\n            return currentReward - startingReward;\\n        }\\n    }\\n\\n    /* ========== MUTATIVE FUNCTIONS ========== */\\n\\n    function stake(uint256 amount)\\n        external\\n        nonReentrant\\n        updateReward(msg.sender)\\n    {\\n        require(amount > 0, \\\"Cannot stake 0\\\");\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[msg.sender] = _balances[msg.sender].add(amount);\\n        stakingToken.safeTransferFrom(msg.sender, address(this), amount);\\n        emit Staked(msg.sender, amount);\\n        if (stakeStart[msg.sender] == 0) {\\n            stakeStart[msg.sender] = block.timestamp;\\n        }\\n    }\\n\\n    function withdrawStake(uint256 amount)\\n        external\\n        nonReentrant\\n        updateReward(msg.sender)\\n    {\\n        require(amount > 0, \\\"Cannot withdraw 0\\\");\\n        require(block.timestamp >= stakeStart[msg.sender] + lockTime);\\n\\n        _totalSupply = _totalSupply.sub(amount);\\n        _balances[msg.sender] = _balances[msg.sender].sub(amount);\\n\\n        if (migrated[msg.sender]) {\\n            uint256 w;\\n            uint256 __;\\n            (__, w, __, __) = legacy.stakeAccounts(msg.sender);\\n            require(w < MAX_WEIGHT, \\\"Migrate account first\\\");\\n\\n            uint256 rewardDiff = _rewardDiff(legacyStakeAccounts[msg.sender]);\\n            if (rewardDiff >= amount) {\\n                amount = 0;\\n            } else {\\n                amount -= rewardDiff;\\n            }\\n        }\\n\\n        stakingToken.safeTransfer(msg.sender, amount);\\n        emit Withdrawn(msg.sender, amount);\\n    }\\n\\n    function withdrawReward() public nonReentrant updateReward(msg.sender) {\\n        uint256 reward = rewards[msg.sender];\\n        if (reward > 0) {\\n            rewards[msg.sender] = 0;\\n            rewardsToken.safeTransfer(msg.sender, reward);\\n            emit RewardPaid(msg.sender, reward);\\n        }\\n    }\\n\\n    /* ========== RESTRICTED FUNCTIONS ========== */\\n\\n    function notifyRewardAmount(uint256 reward)\\n        external\\n        onlyOwner\\n        updateReward(address(0))\\n    {\\n        if (legacyCarry > 0) {\\n            reward -= legacyCarry;\\n            legacyCarry = 0;\\n        }\\n        if (block.timestamp >= periodFinish) {\\n            rewardRate = reward.div(rewardsDuration);\\n        } else {\\n            uint256 remaining = periodFinish.sub(block.timestamp);\\n            uint256 leftover = remaining.mul(rewardRate);\\n            rewardRate = reward.add(leftover).div(rewardsDuration);\\n        }\\n\\n        // Ensure the provided reward amount is not more than the balance in the contract.\\n        // This keeps the reward rate in the right range, preventing overflows due to\\n        // very high values of rewardRate in the earned and rewardsPerToken functions;\\n        // Reward + leftover must be less than 2^256 / 10^18 to avoid overflow.\\n        uint256 balance = rewardsToken.balanceOf(address(this));\\n        require(\\n            rewardRate <= balance.div(rewardsDuration),\\n            \\\"Provided reward too high\\\"\\n        );\\n\\n        lastUpdateTime = block.timestamp;\\n        periodFinish = block.timestamp.add(rewardsDuration);\\n        emit RewardAdded(reward);\\n    }\\n\\n    // End rewards emission earlier\\n    function updatePeriodFinish(uint256 timestamp)\\n        external\\n        onlyOwner\\n        updateReward(address(0))\\n    {\\n        periodFinish = timestamp;\\n    }\\n\\n    // Added to support recovering LP Rewards from other systems such as BAL to be distributed to holders\\n    function recoverERC20(address tokenAddress, uint256 tokenAmount)\\n        external\\n        onlyOwner\\n    {\\n        IERC20(tokenAddress).safeTransfer(owner(), tokenAmount);\\n        emit Recovered(tokenAddress, tokenAmount);\\n    }\\n\\n    function setRewardsDuration(uint256 _rewardsDuration) external onlyOwner {\\n        require(\\n            block.timestamp > periodFinish,\\n            \\\"Previous rewards period must be complete before changing the duration for the new period\\\"\\n        );\\n        rewardsDuration = _rewardsDuration;\\n        emit RewardsDurationUpdated(rewardsDuration);\\n    }\\n\\n    function setLockTime(uint256 t) external onlyOwner {\\n        lockTime = t;\\n    }\\n\\n    function migrate(address[] calldata accounts) external onlyOwner {\\n        startingWeights = legacy.totalCurrentWeights();\\n        uint256 _startingWeights = startingWeights;\\n        uint256 _rewardTarget = legacy.rewardTarget();\\n\\n        uint256 _legacyCarry;\\n        for (uint256 i; accounts.length > i; i++) {\\n            address accountAddress = accounts[i];\\n            StakeAccount memory account;\\n            (\\n                account.stakeAmount,\\n                account.stakeWeight,\\n                account.cumulativeStart,\\n                account.lockEnd\\n            ) = legacy.stakeAccounts(accountAddress);\\n            uint256 amount = account.stakeAmount;\\n\\n            _totalSupply = _totalSupply.add(amount);\\n            _balances[accountAddress] = _balances[accountAddress].add(amount);\\n            stakeStart[accountAddress] = account.lockEnd - lockTime;\\n            migrated[accountAddress] = true;\\n            legacyStakeAccounts[accountAddress] = account;\\n\\n            if (account.lockEnd > block.timestamp) {\\n                uint256 remaining = account.lockEnd - block.timestamp;\\n                if (remaining > 30 days) {\\n                    // bonus is the additional 1 / 3 of reward that a 3 month should get relative to standard\\n                    // 1 month lockup\\n                    // calculated for their remaining reward period\\n                    uint256 bonus =\\n                        (((_rewardTarget * account.stakeWeight) /\\n                            _startingWeights) * (90 days - remaining)) /\\n                            (90 days) /\\n                            3;\\n                    rewards[accountAddress] += bonus;\\n                    _legacyCarry += bonus;\\n                }\\n            }\\n            legacyCarry += _legacyCarry;\\n        }\\n    }\\n\\n    /* ========== MODIFIERS ========== */\\n\\n    modifier updateReward(address account) {\\n        rewardPerTokenStored = rewardPerToken();\\n        lastUpdateTime = lastTimeRewardApplicable();\\n        if (account != address(0)) {\\n            rewards[account] = viewRewardAmount(account);\\n            userRewardPerTokenPaid[account] = rewardPerTokenStored;\\n        }\\n        _;\\n    }\\n\\n    /* ========== EVENTS ========== */\\n\\n    event RewardAdded(uint256 reward);\\n    event Staked(address indexed user, uint256 amount);\\n    event Withdrawn(address indexed user, uint256 amount);\\n    event RewardPaid(address indexed user, uint256 reward);\\n    event RewardsDurationUpdated(uint256 newDuration);\\n    event Recovered(address token, uint256 amount);\\n}\\n\",\"keccak256\":\"0x579e9acceddda193235af1804303b8583caebf91be11b94a2bf6cea950bc9d19\"},\"contracts/TokenStaking.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./Roles.sol\\\";\\n\\nstruct StakeAccount {\\n    uint256 stakeAmount;\\n    uint256 stakeWeight;\\n    uint256 cumulativeStart;\\n    uint256 lockEnd;\\n}\\n\\nabstract contract TokenStaking {\\n    using SafeERC20 for IERC20;\\n\\n    IERC20 public immutable stakeToken;\\n    /// Margenswap (MFI) token address\\n    IERC20 public immutable MFI;\\n    Roles roles;\\n\\n    mapping(address => StakeAccount) public stakeAccounts;\\n\\n    uint256 public cumulativeReward;\\n    uint256 public lastCumulativeUpdateBlock;\\n    uint256 public totalCurrentWeights;\\n    uint256 public totalCurrentRewardPerBlock;\\n    uint256 public rewardTarget;\\n\\n    constructor(\\n        address _MFI,\\n        address _stakeToken,\\n        uint256 initialRewardPerBlock,\\n        address _roles\\n    ) {\\n        MFI = IERC20(_MFI);\\n        stakeToken = IERC20(_stakeToken);\\n        roles = Roles(_roles);\\n\\n        lastCumulativeUpdateBlock = block.number;\\n        totalCurrentRewardPerBlock = initialRewardPerBlock;\\n    }\\n\\n    // TODO: function to load up with MFI\\n\\n    function setTotalRewardPerBlock(uint256 rewardPerBlock) external {\\n        require(msg.sender == roles.owner() || msg.sender == roles.executor(), \\\"Not authorized\\\");\\n        updateCumulativeReward();\\n        totalCurrentRewardPerBlock = rewardPerBlock;\\n    }\\n\\n    function add2RewardTarget(uint256 amount) external {\\n        MFI.safeTransferFrom(msg.sender, address(this), amount);\\n        updateCumulativeReward();\\n        rewardTarget += amount;\\n    }\\n\\n    function removeFromRewardTarget(uint256 amount, address recipient) external {\\n        require(msg.sender == roles.owner() || msg.sender == roles.executor(), \\\"Not authorized\\\");\\n        MFI.safeTransfer(recipient, amount);\\n        updateCumulativeReward();\\n        rewardTarget -= amount;\\n        require(rewardTarget >= cumulativeReward, \\\"Trying to remove too much\\\");\\n    }\\n\\n    function stake(uint256 amount, uint256 duration) external {\\n        stakeToken.safeTransferFrom(msg.sender, address(this), amount);\\n\\n        StakeAccount storage account = stakeAccounts[msg.sender];\\n        uint256 extantAmount = account.stakeAmount;\\n\\n        if (extantAmount > 0) {\\n            _withdrawReward(msg.sender, account);\\n        }\\n\\n        account.stakeAmount = extantAmount + amount;\\n        uint256 w =\\n            duration >= 90 days\\n                ? 3\\n                : (duration >= 30 days ? 2 : (duration >= 1 weeks ? 1 : 0));\\n        account.stakeWeight += w * amount;\\n        totalCurrentWeights += w * amount;\\n        account.cumulativeStart = updateCumulativeReward();\\n\\n        account.lockEnd = max(block.timestamp + duration, account.lockEnd);\\n    }\\n\\n    function withdrawStake(uint256 amount) external {\\n        StakeAccount storage account = stakeAccounts[msg.sender];\\n        require(block.timestamp >= account.lockEnd, \\\"Stake is still locked\\\");\\n        _withdrawReward(msg.sender, account);\\n        uint256 weightDiff =\\n            (amount * account.stakeWeight) / account.stakeAmount;\\n        account.stakeWeight -= weightDiff;\\n        totalCurrentWeights -= weightDiff;\\n        account.stakeAmount -= amount;\\n        account.cumulativeStart = updateCumulativeReward();\\n    }\\n\\n    function viewUpdatedCumulativeReward() public view returns (uint256) {\\n        return\\n            min(\\n                rewardTarget,\\n                cumulativeReward +\\n                    (block.number - lastCumulativeUpdateBlock) *\\n                    totalCurrentRewardPerBlock\\n            );\\n    }\\n\\n    function updateCumulativeReward() public returns (uint256) {\\n        if (block.number > lastCumulativeUpdateBlock) {\\n            cumulativeReward = viewUpdatedCumulativeReward();\\n            lastCumulativeUpdateBlock = block.number;\\n        }\\n        return cumulativeReward;\\n    }\\n\\n    function _viewRewardAmount(StakeAccount storage account)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 totalReward = viewUpdatedCumulativeReward();\\n        return\\n            ((totalReward - account.cumulativeStart) * account.stakeWeight) /\\n            (totalCurrentWeights + 1);\\n    }\\n\\n    function viewRewardAmount(address account) external view returns (uint256) {\\n        return _viewRewardAmount(stakeAccounts[account]);\\n    }\\n\\n    function _withdrawReward(address recipient, StakeAccount storage account)\\n        internal\\n    {\\n        if (account.stakeWeight > 0) {\\n            uint256 reward =\\n                min(_viewRewardAmount(account), MFI.balanceOf(address(this)));\\n\\n            MFI.safeTransfer(recipient, reward);\\n        }\\n    }\\n\\n    function withdrawReward() external {\\n        StakeAccount storage account = stakeAccounts[msg.sender];\\n        _withdrawReward(msg.sender, account);\\n        account.cumulativeStart = cumulativeReward;\\n    }\\n\\n    /// @dev minimum\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a > b) {\\n            return b;\\n        } else {\\n            return a;\\n        }\\n    }\\n\\n    /// @dev maximum\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a > b) {\\n            return a;\\n        } else {\\n            return b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x78f49aa9c875afcf38039cd120149ec6b57047aaaf1bfdf4de941d054cbd7e34\",\"license\":\"BUSL-1.1\"},\"interfaces/IDependencyController.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\ninterface IDependencyController {\\n    function currentExecutor() external returns (address);\\n}\\n\",\"keccak256\":\"0xc65a455a81ab4bc8e0737d03691c159f28bfd6885ef8b99ddd8dec558ccfeb32\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
      "storageLayout": {
        "storage": [
          {
            "astId": 120,
            "contract": "contracts/Staking.sol:Staking",
            "label": "_status",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 7,
            "contract": "contracts/Staking.sol:Staking",
            "label": "_owner",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 11438,
            "contract": "contracts/Staking.sol:Staking",
            "label": "legacy",
            "offset": 0,
            "slot": "2",
            "type": "t_contract(TokenStaking)12891"
          },
          {
            "astId": 11441,
            "contract": "contracts/Staking.sol:Staking",
            "label": "rewardsToken",
            "offset": 0,
            "slot": "3",
            "type": "t_contract(IERC20)227"
          },
          {
            "astId": 11444,
            "contract": "contracts/Staking.sol:Staking",
            "label": "stakingToken",
            "offset": 0,
            "slot": "4",
            "type": "t_contract(IERC20)227"
          },
          {
            "astId": 11447,
            "contract": "contracts/Staking.sol:Staking",
            "label": "periodFinish",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 11450,
            "contract": "contracts/Staking.sol:Staking",
            "label": "rewardRate",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 11453,
            "contract": "contracts/Staking.sol:Staking",
            "label": "rewardsDuration",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          },
          {
            "astId": 11455,
            "contract": "contracts/Staking.sol:Staking",
            "label": "lastUpdateTime",
            "offset": 0,
            "slot": "8",
            "type": "t_uint256"
          },
          {
            "astId": 11457,
            "contract": "contracts/Staking.sol:Staking",
            "label": "rewardPerTokenStored",
            "offset": 0,
            "slot": "9",
            "type": "t_uint256"
          },
          {
            "astId": 11460,
            "contract": "contracts/Staking.sol:Staking",
            "label": "lockTime",
            "offset": 0,
            "slot": "10",
            "type": "t_uint256"
          },
          {
            "astId": 11464,
            "contract": "contracts/Staking.sol:Staking",
            "label": "userRewardPerTokenPaid",
            "offset": 0,
            "slot": "11",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 11468,
            "contract": "contracts/Staking.sol:Staking",
            "label": "rewards",
            "offset": 0,
            "slot": "12",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 11472,
            "contract": "contracts/Staking.sol:Staking",
            "label": "stakeStart",
            "offset": 0,
            "slot": "13",
            "type": "t_mapping(t_address,t_uint256)"
          },
          {
            "astId": 11476,
            "contract": "contracts/Staking.sol:Staking",
            "label": "migrated",
            "offset": 0,
            "slot": "14",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 11485,
            "contract": "contracts/Staking.sol:Staking",
            "label": "startingWeights",
            "offset": 0,
            "slot": "15",
            "type": "t_uint256"
          },
          {
            "astId": 11490,
            "contract": "contracts/Staking.sol:Staking",
            "label": "legacyStakeAccounts",
            "offset": 0,
            "slot": "16",
            "type": "t_mapping(t_address,t_struct(StakeAccount)12362_storage)"
          },
          {
            "astId": 11492,
            "contract": "contracts/Staking.sol:Staking",
            "label": "legacyCarry",
            "offset": 0,
            "slot": "17",
            "type": "t_uint256"
          },
          {
            "astId": 11494,
            "contract": "contracts/Staking.sol:Staking",
            "label": "_totalSupply",
            "offset": 0,
            "slot": "18",
            "type": "t_uint256"
          },
          {
            "astId": 11498,
            "contract": "contracts/Staking.sol:Staking",
            "label": "_balances",
            "offset": 0,
            "slot": "19",
            "type": "t_mapping(t_address,t_uint256)"
          }
        ],
        "types": {
          "t_address": {
            "encoding": "inplace",
            "label": "address",
            "numberOfBytes": "20"
          },
          "t_bool": {
            "encoding": "inplace",
            "label": "bool",
            "numberOfBytes": "1"
          },
          "t_contract(IERC20)227": {
            "encoding": "inplace",
            "label": "contract IERC20",
            "numberOfBytes": "20"
          },
          "t_contract(TokenStaking)12891": {
            "encoding": "inplace",
            "label": "contract TokenStaking",
            "numberOfBytes": "20"
          },
          "t_mapping(t_address,t_bool)": {
            "encoding": "mapping",
            "key": "t_address",
            "label": "mapping(address => bool)",
            "numberOfBytes": "32",
            "value": "t_bool"
          },
          "t_mapping(t_address,t_struct(StakeAccount)12362_storage)": {
            "encoding": "mapping",
            "key": "t_address",
            "label": "mapping(address => struct StakeAccount)",
            "numberOfBytes": "32",
            "value": "t_struct(StakeAccount)12362_storage"
          },
          "t_mapping(t_address,t_uint256)": {
            "encoding": "mapping",
            "key": "t_address",
            "label": "mapping(address => uint256)",
            "numberOfBytes": "32",
            "value": "t_uint256"
          },
          "t_struct(StakeAccount)12362_storage": {
            "encoding": "inplace",
            "label": "struct StakeAccount",
            "members": [
              {
                "astId": 12355,
                "contract": "contracts/Staking.sol:Staking",
                "label": "stakeAmount",
                "offset": 0,
                "slot": "0",
                "type": "t_uint256"
              },
              {
                "astId": 12357,
                "contract": "contracts/Staking.sol:Staking",
                "label": "stakeWeight",
                "offset": 0,
                "slot": "1",
                "type": "t_uint256"
              },
              {
                "astId": 12359,
                "contract": "contracts/Staking.sol:Staking",
                "label": "cumulativeStart",
                "offset": 0,
                "slot": "2",
                "type": "t_uint256"
              },
              {
                "astId": 12361,
                "contract": "contracts/Staking.sol:Staking",
                "label": "lockEnd",
                "offset": 0,
                "slot": "3",
                "type": "t_uint256"
              }
            ],
            "numberOfBytes": "128"
          },
          "t_uint256": {
            "encoding": "inplace",
            "label": "uint256",
            "numberOfBytes": "32"
          }
        }
      },
      "userdoc": {
        "kind": "user",
        "methods": {},
        "version": 1
      },
      "solcInput": "{\n  \"language\": \"Solidity\",\n  \"sources\": {\n    \"contracts/Admin.sol\": {\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./RoleAware.sol\\\";\\nimport \\\"./Fund.sol\\\";\\nimport \\\"./CrossMarginTrading.sol\\\";\\nimport \\\"../libraries/IncentiveReporter.sol\\\";\\n\\n/** \\n@title Here we support staking for MFI incentives as well as\\nstaking to perform the maintenance role.\\n*/\\ncontract Admin is RoleAware {\\n    /// Margenswap (MFI) token address\\n    address public immutable MFI;\\n    mapping(address => uint256) public stakes;\\n    uint256 public totalStakes;\\n\\n    uint256 public constant mfiStakeTranche = 1;\\n\\n    uint256 public maintenanceStakePerBlock = 15 ether;\\n    mapping(address => address) public nextMaintenanceStaker;\\n    mapping(address => mapping(address => bool)) public maintenanceDelegateTo;\\n    address public currentMaintenanceStaker;\\n    address public prevMaintenanceStaker;\\n    uint256 public currentMaintenanceStakerStartBlock;\\n    address public immutable lockedMFI;\\n\\n    constructor(\\n        address _MFI,\\n        address _lockedMFI,\\n        address lockedMFIDelegate,\\n        address _roles\\n    ) RoleAware(_roles) {\\n        MFI = _MFI;\\n        lockedMFI = _lockedMFI;\\n\\n        // for initialization purposes and to ensure availability of service\\n        // the team's locked MFI participate in maintenance staking only\\n        // (not in the incentive staking part)\\n        // this implies some trust of the team to execute, which we deem reasonable\\n        // since the locked stake is temporary and diminishing as well as the fact\\n        // that the team is heavily invested in the protocol and incentivized\\n        // by fees like any other maintainer\\n        // furthermore others could step in to liquidate via the attacker route\\n        // and take away the team fees if they were delinquent\\n        nextMaintenanceStaker[_lockedMFI] = _lockedMFI;\\n        currentMaintenanceStaker = _lockedMFI;\\n        prevMaintenanceStaker = _lockedMFI;\\n        maintenanceDelegateTo[_lockedMFI][lockedMFIDelegate] = true;\\n        currentMaintenanceStakerStartBlock = block.number;\\n    }\\n\\n    /// Maintence stake setter\\n    function setMaintenanceStakePerBlock(uint256 amount)\\n        external\\n        onlyOwnerExec\\n    {\\n        maintenanceStakePerBlock = amount;\\n    }\\n\\n    function _stake(address holder, uint256 amount) internal {\\n        Fund(fund()).depositFor(holder, MFI, amount);\\n\\n        stakes[holder] += amount;\\n        totalStakes += amount;\\n\\n        IncentiveReporter.addToClaimAmount(MFI, holder, amount);\\n    }\\n\\n    function _withdrawStake(\\n        address holder,\\n        uint256 amount,\\n        address recipient\\n    ) internal {\\n        // overflow failure desirable\\n        stakes[holder] -= amount;\\n        totalStakes -= amount;\\n        Fund(fund()).withdraw(MFI, recipient, amount);\\n\\n        IncentiveReporter.subtractFromClaimAmount(MFI, holder, amount);\\n    }\\n\\n    /// Withdraw stake for sender\\n    function withdrawStake(uint256 amount) external {\\n        require(\\n            !isAuthorizedStaker(msg.sender),\\n            \\\"You can't withdraw while you're authorized staker\\\"\\n        );\\n        _withdrawStake(msg.sender, amount, msg.sender);\\n    }\\n\\n    /// Deposit maintenance stake\\n    function depositMaintenanceStake(uint256 amount) external {\\n        require(\\n            amount + stakes[msg.sender] >= maintenanceStakePerBlock,\\n            \\\"Insufficient stake to call even one block\\\"\\n        );\\n        _stake(msg.sender, amount);\\n        if (nextMaintenanceStaker[msg.sender] == address(0)) {\\n            nextMaintenanceStaker[msg.sender] = getUpdatedCurrentStaker();\\n            nextMaintenanceStaker[prevMaintenanceStaker] = msg.sender;\\n        }\\n    }\\n\\n    function getMaintenanceStakerStake(address staker)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        if (staker == lockedMFI) {\\n            return IERC20(MFI).balanceOf(lockedMFI) / 2;\\n        } else {\\n            return stakes[staker];\\n        }\\n    }\\n\\n    function getUpdatedCurrentStaker() public returns (address) {\\n        uint256 currentStake =\\n            getMaintenanceStakerStake(currentMaintenanceStaker);\\n        if (\\n            (block.number - currentMaintenanceStakerStartBlock) *\\n                maintenanceStakePerBlock >=\\n            currentStake\\n        ) {\\n            currentMaintenanceStakerStartBlock = block.number;\\n\\n            prevMaintenanceStaker = currentMaintenanceStaker;\\n            currentMaintenanceStaker = nextMaintenanceStaker[\\n                currentMaintenanceStaker\\n            ];\\n            currentStake = getMaintenanceStakerStake(currentMaintenanceStaker);\\n\\n            if (maintenanceStakePerBlock > currentStake) {\\n                // delete current from daisy chain\\n                address nextOne =\\n                    nextMaintenanceStaker[currentMaintenanceStaker];\\n                nextMaintenanceStaker[prevMaintenanceStaker] = nextOne;\\n                nextMaintenanceStaker[currentMaintenanceStaker] = address(0);\\n\\n                currentMaintenanceStaker = nextOne;\\n                currentStake = getMaintenanceStakerStake(\\n                    currentMaintenanceStaker\\n                );\\n            }\\n        }\\n\\n        return currentMaintenanceStaker;\\n    }\\n\\n    function viewCurrentMaintenanceStaker()\\n        public\\n        view\\n        returns (address staker, uint256 startBlock)\\n    {\\n        staker = currentMaintenanceStaker;\\n        uint256 currentStake = getMaintenanceStakerStake(staker);\\n        startBlock = currentMaintenanceStakerStartBlock;\\n        if (\\n            (block.number - startBlock) * maintenanceStakePerBlock >=\\n            currentStake\\n        ) {\\n            staker = nextMaintenanceStaker[staker];\\n            currentStake = getMaintenanceStakerStake(staker);\\n            startBlock = block.number;\\n\\n            if (maintenanceStakePerBlock > currentStake) {\\n                staker = nextMaintenanceStaker[staker];\\n            }\\n        }\\n    }\\n\\n    /// Add a delegate for staker\\n    function addDelegate(address forStaker, address delegate) external {\\n        require(\\n            msg.sender == forStaker ||\\n                maintenanceDelegateTo[forStaker][msg.sender],\\n            \\\"msg.sender not authorized to delegate for staker\\\"\\n        );\\n        maintenanceDelegateTo[forStaker][delegate] = true;\\n    }\\n\\n    /// Remove a delegate for staker\\n    function removeDelegate(address forStaker, address delegate) external {\\n        require(\\n            msg.sender == forStaker ||\\n                maintenanceDelegateTo[forStaker][msg.sender],\\n            \\\"msg.sender not authorized to delegate for staker\\\"\\n        );\\n        maintenanceDelegateTo[forStaker][delegate] = false;\\n    }\\n\\n    function isAuthorizedStaker(address caller)\\n        public\\n        returns (bool isAuthorized)\\n    {\\n        address currentStaker = getUpdatedCurrentStaker();\\n        isAuthorized =\\n            currentStaker == caller ||\\n            maintenanceDelegateTo[currentStaker][caller];\\n    }\\n\\n    /// Penalize a staker\\n    function penalizeMaintenanceStake(\\n        address maintainer,\\n        uint256 penalty,\\n        address recipient\\n    ) external returns (uint256 stakeTaken) {\\n        require(\\n            isStakePenalizer(msg.sender),\\n            \\\"msg.sender not authorized to penalize stakers\\\"\\n        );\\n        if (penalty > stakes[maintainer]) {\\n            stakeTaken = stakes[maintainer];\\n        } else {\\n            stakeTaken = penalty;\\n        }\\n        _withdrawStake(maintainer, stakeTaken, recipient);\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/IERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\"\n    },\n    \"contracts/RoleAware.sol\": {\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Roles.sol\\\";\\n\\n/// @title Role management behavior\\n/// Main characters are for service discovery\\n/// Whereas roles are for access control\\ncontract RoleAware {\\n    Roles public immutable roles;\\n    mapping(uint256 => address) public mainCharacterCache;\\n    mapping(address => mapping(uint256 => bool)) public roleCache;\\n\\n    constructor(address _roles) {\\n        require(_roles != address(0), \\\"Please provide valid roles address\\\");\\n        roles = Roles(_roles);\\n    }\\n\\n    modifier noIntermediary() {\\n        require(\\n            msg.sender == tx.origin,\\n            \\\"Currently no intermediaries allowed for this function call\\\"\\n        );\\n        _;\\n    }\\n\\n    // @dev Throws if called by any account other than the owner or executor\\n    modifier onlyOwnerExec() {\\n        require(\\n            owner() == msg.sender || executor() == msg.sender,\\n            \\\"Roles: caller is not the owner\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyOwnerExecDisabler() {\\n        require(\\n            owner() == msg.sender ||\\n                executor() == msg.sender ||\\n                disabler() == msg.sender,\\n            \\\"Caller is not the owner, executor or authorized disabler\\\"\\n        );\\n        _;\\n    }\\n\\n    modifier onlyOwnerExecActivator() {\\n        require(\\n            owner() == msg.sender ||\\n                executor() == msg.sender ||\\n                isTokenActivator(msg.sender),\\n            \\\"Caller is not the owner, executor or authorized activator\\\"\\n        );\\n        _;\\n    }\\n\\n    function updateRoleCache(uint256 role, address contr) public virtual {\\n        roleCache[contr][role] = roles.getRole(role, contr);\\n    }\\n\\n    function updateMainCharacterCache(uint256 role) public virtual {\\n        mainCharacterCache[role] = roles.mainCharacters(role);\\n    }\\n\\n    function owner() internal view returns (address) {\\n        return roles.owner();\\n    }\\n\\n    function executor() internal returns (address) {\\n        return roles.executor();\\n    }\\n\\n    function disabler() internal view returns (address) {\\n        return mainCharacterCache[DISABLER];\\n    }\\n\\n    function fund() internal view returns (address) {\\n        return mainCharacterCache[FUND];\\n    }\\n\\n    function lending() internal view returns (address) {\\n        return mainCharacterCache[LENDING];\\n    }\\n\\n    function marginRouter() internal view returns (address) {\\n        return mainCharacterCache[MARGIN_ROUTER];\\n    }\\n\\n    function crossMarginTrading() internal view returns (address) {\\n        return mainCharacterCache[CROSS_MARGIN_TRADING];\\n    }\\n\\n    function feeController() internal view returns (address) {\\n        return mainCharacterCache[FEE_CONTROLLER];\\n    }\\n\\n    function price() internal view returns (address) {\\n        return mainCharacterCache[PRICE_CONTROLLER];\\n    }\\n\\n    function admin() internal view returns (address) {\\n        return mainCharacterCache[ADMIN];\\n    }\\n\\n    function incentiveDistributor() internal view returns (address) {\\n        return mainCharacterCache[INCENTIVE_DISTRIBUTION];\\n    }\\n\\n    function tokenAdmin() internal view returns (address) {\\n        return mainCharacterCache[TOKEN_ADMIN];\\n    }\\n\\n    function isBorrower(address contr) internal view returns (bool) {\\n        return roleCache[contr][BORROWER];\\n    }\\n\\n    function isFundTransferer(address contr) internal view returns (bool) {\\n        return roleCache[contr][FUND_TRANSFERER];\\n    }\\n\\n    function isMarginTrader(address contr) internal view returns (bool) {\\n        return roleCache[contr][MARGIN_TRADER];\\n    }\\n\\n    function isFeeSource(address contr) internal view returns (bool) {\\n        return roleCache[contr][FEE_SOURCE];\\n    }\\n\\n    function isMarginCaller(address contr) internal view returns (bool) {\\n        return roleCache[contr][MARGIN_CALLER];\\n    }\\n\\n    function isLiquidator(address contr) internal view returns (bool) {\\n        return roleCache[contr][LIQUIDATOR];\\n    }\\n\\n    function isAuthorizedFundTrader(address contr)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return roleCache[contr][AUTHORIZED_FUND_TRADER];\\n    }\\n\\n    function isIncentiveReporter(address contr) internal view returns (bool) {\\n        return roleCache[contr][INCENTIVE_REPORTER];\\n    }\\n\\n    function isTokenActivator(address contr) internal view returns (bool) {\\n        return roleCache[contr][TOKEN_ACTIVATOR];\\n    }\\n\\n    function isStakePenalizer(address contr) internal view returns (bool) {\\n        return roleCache[contr][STAKE_PENALIZER];\\n    }\\n\\n    function isLender(address contr) internal view returns (bool) {\\n        return roleCache[contr][LENDER];\\n    }\\n}\\n\"\n    },\n    \"contracts/Fund.sol\": {\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"../interfaces/IWETH.sol\\\";\\nimport \\\"./RoleAware.sol\\\";\\n\\n/// @title Manage funding\\ncontract Fund is RoleAware {\\n    using SafeERC20 for IERC20;\\n    /// wrapped ether\\n    address public immutable WETH;\\n\\n    constructor(address _WETH, address _roles) RoleAware(_roles) {\\n        WETH = _WETH;\\n    }\\n\\n    /// Deposit an active token\\n    function deposit(address depositToken, uint256 depositAmount) external {\\n        IERC20(depositToken).safeTransferFrom(\\n            msg.sender,\\n            address(this),\\n            depositAmount\\n        );\\n    }\\n\\n    /// Deposit token on behalf of `sender`\\n    function depositFor(\\n        address sender,\\n        address depositToken,\\n        uint256 depositAmount\\n    ) external {\\n        require(isFundTransferer(msg.sender), \\\"Unauthorized deposit\\\");\\n        IERC20(depositToken).safeTransferFrom(\\n            sender,\\n            address(this),\\n            depositAmount\\n        );\\n    }\\n\\n    /// Deposit to wrapped ether\\n    function depositToWETH() external payable {\\n        IWETH(WETH).deposit{value: msg.value}();\\n    }\\n\\n    // withdrawers role\\n    function withdraw(\\n        address withdrawalToken,\\n        address recipient,\\n        uint256 withdrawalAmount\\n    ) external {\\n        require(isFundTransferer(msg.sender), \\\"Unauthorized withdraw\\\");\\n        IERC20(withdrawalToken).safeTransfer(recipient, withdrawalAmount);\\n    }\\n\\n    // withdrawers role\\n    function withdrawETH(address recipient, uint256 withdrawalAmount) external {\\n        require(isFundTransferer(msg.sender), \\\"Unauthorized withdraw\\\");\\n        IWETH(WETH).withdraw(withdrawalAmount);\\n        Address.sendValue(payable(recipient), withdrawalAmount);\\n    }\\n}\\n\"\n    },\n    \"contracts/CrossMarginTrading.sol\": {\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./Fund.sol\\\";\\nimport \\\"./Lending.sol\\\";\\nimport \\\"./RoleAware.sol\\\";\\nimport \\\"./CrossMarginLiquidation.sol\\\";\\n\\n// Goal: all external functions only accessible to margintrader role\\n// except for view functions of course\\n\\ncontract CrossMarginTrading is CrossMarginLiquidation, IMarginTrading {\\n    constructor(\\n        address _peg,\\n        address _amm1Factory,\\n        address _amm2Factory,\\n        address _amm3Factory,\\n        bytes32 _amm1InitHash,\\n        bytes32 _amm2InitHash,\\n        bytes32 _amm3InitHash,\\n        uint256 _feeBase,\\n        address _roles\\n    )\\n        RoleAware(_roles)\\n        PriceAware(_peg)\\n        UniswapStyleLib(\\n            _amm1Factory,\\n            _amm2Factory,\\n            _amm3Factory,\\n            _amm1InitHash,\\n            _amm2InitHash,\\n            _amm3InitHash,\\n            _feeBase\\n        )\\n    {}\\n\\n    /// @dev admin function to set the token cap\\n    function setTokenCap(address token, uint256 cap)\\n        external\\n        onlyOwnerExecActivator\\n    {\\n        tokenCaps[token] = cap;\\n    }\\n\\n    /// @dev setter for cooling off period for withdrawing funds after deposit\\n    function setCoolingOffPeriod(uint256 blocks) external onlyOwnerExec {\\n        coolingOffPeriod = blocks;\\n    }\\n\\n    /// @dev admin function to set leverage\\n    function setLeveragePercent(uint256 _leveragePercent)\\n        external\\n        onlyOwnerExec\\n    {\\n        leveragePercent = _leveragePercent;\\n    }\\n\\n    /// @dev admin function to set liquidation threshold\\n    function setLiquidationThresholdPercent(uint256 threshold)\\n        external\\n        onlyOwnerExec\\n    {\\n        liquidationThresholdPercent = threshold;\\n    }\\n\\n    /// @dev gets called by router to affirm a deposit to an account\\n    function registerDeposit(\\n        address trader,\\n        address token,\\n        uint256 depositAmount\\n    ) external override returns (uint256 extinguishableDebt) {\\n        require(isMarginTrader(msg.sender), \\\"Calling contr. not authorized\\\");\\n\\n        CrossMarginAccount storage account = marginAccounts[trader];\\n        account.lastDepositBlock = block.number;\\n\\n        uint256 currentBorrowed = account.borrowed[token];\\n        if (currentBorrowed > 0) {\\n            (uint256 borrowAmount, uint256 yieldQuotientFP) =\\n                Lending(lending()).applyBorrowInterest(\\n                    currentBorrowed,\\n                    token,\\n                    account.borrowedYieldQuotientsFP[token]\\n                );\\n            account.borrowed[token] = borrowAmount;\\n            account.borrowedYieldQuotientsFP[token] = yieldQuotientFP;\\n            extinguishableDebt = min(depositAmount, borrowAmount);\\n            extinguishDebt(account, token, extinguishableDebt);\\n        }\\n\\n        // no overflow because depositAmount >= extinguishableDebt\\n        uint256 addedHolding = depositAmount - extinguishableDebt;\\n        _registerDeposit(account, token, addedHolding);\\n    }\\n\\n    function _registerDeposit(\\n        CrossMarginAccount storage account,\\n        address token,\\n        uint256 addedHolding\\n    ) internal {\\n        addHolding(account, token, addedHolding);\\n\\n        totalLong[token] += addedHolding;\\n        require(\\n            tokenCaps[token] >= totalLong[token],\\n            \\\"Exceeds global token cap\\\"\\n        );\\n    }\\n\\n    /// @dev gets called by router to affirm borrowing event\\n    function registerBorrow(\\n        address trader,\\n        address borrowToken,\\n        uint256 borrowAmount\\n    ) external override {\\n        require(isMarginTrader(msg.sender), \\\"Calling contr. not authorized\\\");\\n        CrossMarginAccount storage account = marginAccounts[trader];\\n        addHolding(account, borrowToken, borrowAmount);\\n        _registerBorrow(account, borrowToken, borrowAmount);\\n    }\\n\\n    function _registerBorrow(\\n        CrossMarginAccount storage account,\\n        address borrowToken,\\n        uint256 borrowAmount\\n    ) internal {\\n        totalLong[borrowToken] += borrowAmount;\\n        require(\\n            tokenCaps[borrowToken] >= totalLong[borrowToken],\\n            \\\"Exceeds global token cap\\\"\\n        );\\n\\n        borrow(account, borrowToken, borrowAmount);\\n    }\\n\\n    function registerRawBorrow(\\n        address trader,\\n        address borrowToken,\\n        uint256 borrowAmount\\n    ) external onlyOwnerExec {\\n        CrossMarginAccount storage account = marginAccounts[trader];\\n        account.borrowTokens.push(borrowToken);\\n        account.borrowedYieldQuotientsFP[borrowToken] = Lending(lending())\\n            .getUpdatedBorrowYieldAccuFP(borrowToken);\\n\\n        account.borrowed[borrowToken] = borrowAmount;\\n        Lending(lending()).registerBorrow(borrowToken, borrowAmount);\\n    }\\n\\n    /// @dev gets called by router to affirm withdrawal of tokens from account\\n    function registerWithdrawal(\\n        address trader,\\n        address withdrawToken,\\n        uint256 withdrawAmount\\n    ) external override {\\n        require(isMarginTrader(msg.sender), \\\"Calling contr not authorized\\\");\\n        CrossMarginAccount storage account = marginAccounts[trader];\\n        _registerWithdrawal(account, withdrawToken, withdrawAmount);\\n    }\\n\\n    function _registerWithdrawal(\\n        CrossMarginAccount storage account,\\n        address withdrawToken,\\n        uint256 withdrawAmount\\n    ) internal {\\n        require(\\n            block.number > account.lastDepositBlock + coolingOffPeriod,\\n            \\\"No withdrawal soon after deposit\\\"\\n        );\\n\\n        totalLong[withdrawToken] -= withdrawAmount;\\n        // throws on underflow\\n        account.holdings[withdrawToken] =\\n            account.holdings[withdrawToken] -\\n            withdrawAmount;\\n        require(positiveBalance(account), \\\"Insufficient balance\\\");\\n    }\\n\\n    /// @dev overcollateralized borrowing on a cross margin account, called by router\\n    function registerOvercollateralizedBorrow(\\n        address trader,\\n        address depositToken,\\n        uint256 depositAmount,\\n        address borrowToken,\\n        uint256 withdrawAmount\\n    ) external override {\\n        require(isMarginTrader(msg.sender), \\\"Calling contr. not authorized\\\");\\n\\n        CrossMarginAccount storage account = marginAccounts[trader];\\n\\n        _registerDeposit(account, depositToken, depositAmount);\\n        _registerBorrow(account, borrowToken, withdrawAmount);\\n        _registerWithdrawal(account, borrowToken, withdrawAmount);\\n\\n        account.lastDepositBlock = block.number;\\n    }\\n\\n    /// @dev gets called by router to register a trade and borrow and extinguish as necessary\\n    function registerTradeAndBorrow(\\n        address trader,\\n        address tokenFrom,\\n        address tokenTo,\\n        uint256 inAmount,\\n        uint256 outAmount\\n    )\\n        external\\n        override\\n        returns (uint256 extinguishableDebt, uint256 borrowAmount)\\n    {\\n        require(isMarginTrader(msg.sender), \\\"Calling contr. not an authorized\\\");\\n\\n        CrossMarginAccount storage account = marginAccounts[trader];\\n\\n        if (account.borrowed[tokenTo] > 0) {\\n            (uint256 extantBorrow, uint256 yieldQuotientFP) =\\n                Lending(lending()).applyBorrowInterest(\\n                    account.borrowed[tokenTo],\\n                    tokenTo,\\n                    account.borrowedYieldQuotientsFP[tokenTo]\\n                );\\n            account.borrowed[tokenTo] = extantBorrow;\\n            account.borrowedYieldQuotientsFP[tokenTo] = yieldQuotientFP;\\n\\n            extinguishableDebt = min(outAmount, extantBorrow);\\n            extinguishDebt(account, tokenTo, extinguishableDebt);\\n        }\\n\\n        uint256 sellAmount = inAmount;\\n        uint256 fromHoldings = account.holdings[tokenFrom];\\n        if (inAmount > fromHoldings) {\\n            sellAmount = fromHoldings;\\n            /// won't overflow\\n            borrowAmount = inAmount - sellAmount;\\n        }\\n\\n        if (inAmount > borrowAmount) {\\n            totalLong[tokenFrom] -= inAmount - borrowAmount;\\n        }\\n        if (outAmount > extinguishableDebt) {\\n            totalLong[tokenTo] += outAmount - extinguishableDebt;\\n        }\\n        require(\\n            tokenCaps[tokenTo] >= totalLong[tokenTo],\\n            \\\"Exceeds global token cap\\\"\\n        );\\n\\n        adjustAmounts(\\n            account,\\n            tokenFrom,\\n            tokenTo,\\n            sellAmount,\\n            outAmount - extinguishableDebt\\n        );\\n\\n        if (borrowAmount > 0) {\\n            borrow(account, tokenFrom, borrowAmount);\\n        }\\n    }\\n\\n    /// @dev can get called by router to register the dissolution of an account\\n    function registerLiquidation(address trader) external override {\\n        require(isMarginTrader(msg.sender), \\\"Calling contr. not authorized\\\");\\n        CrossMarginAccount storage account = marginAccounts[trader];\\n        require(loanInPeg(account) == 0, \\\"Can't liquidate: borrowing\\\");\\n\\n        deleteAccount(account);\\n    }\\n\\n    /// @dev currently holding in this token\\n    function viewBalanceInToken(address trader, address token)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        CrossMarginAccount storage account = marginAccounts[trader];\\n        return account.holdings[token];\\n    }\\n\\n    /// @dev view function to display account held assets state\\n    function getHoldingAmounts(address trader)\\n        external\\n        view\\n        override\\n        returns (\\n            address[] memory holdingTokens,\\n            uint256[] memory holdingAmounts\\n        )\\n    {\\n        CrossMarginAccount storage account = marginAccounts[trader];\\n        holdingTokens = account.holdingTokens;\\n\\n        holdingAmounts = new uint256[](account.holdingTokens.length);\\n        for (uint256 idx = 0; holdingTokens.length > idx; idx++) {\\n            address tokenAddress = holdingTokens[idx];\\n            holdingAmounts[idx] = account.holdings[tokenAddress];\\n        }\\n    }\\n\\n    /// @dev view function to display account borrowing state\\n    function getBorrowAmounts(address trader)\\n        external\\n        view\\n        override\\n        returns (address[] memory borrowTokens, uint256[] memory borrowAmounts)\\n    {\\n        CrossMarginAccount storage account = marginAccounts[trader];\\n        borrowTokens = account.borrowTokens;\\n\\n        borrowAmounts = new uint256[](account.borrowTokens.length);\\n        for (uint256 idx = 0; borrowTokens.length > idx; idx++) {\\n            address tokenAddress = borrowTokens[idx];\\n            borrowAmounts[idx] = Lending(lending()).viewWithBorrowInterest(\\n                account.borrowed[tokenAddress],\\n                tokenAddress,\\n                account.borrowedYieldQuotientsFP[tokenAddress]\\n            );\\n        }\\n    }\\n\\n    /// @dev view function to get loan amount in peg\\n    function viewLoanInPeg(address trader)\\n        external\\n        view\\n        returns (uint256 amount)\\n    {\\n        CrossMarginAccount storage account = marginAccounts[trader];\\n        return\\n            viewTokensInPegWithYield(\\n                account.borrowTokens,\\n                account.borrowed,\\n                account.borrowedYieldQuotientsFP\\n            );\\n    }\\n\\n    /// @dev total of assets of account, expressed in reference currency\\n    function viewHoldingsInPeg(address trader) external view returns (uint256) {\\n        CrossMarginAccount storage account = marginAccounts[trader];\\n        return viewTokensInPeg(account.holdingTokens, account.holdings);\\n    }\\n\\n    /// @dev can this trader be liquidated?\\n    function canBeLiquidated(address trader) external view returns (bool) {\\n        CrossMarginAccount storage account = marginAccounts[trader];\\n        uint256 loan =\\n            viewTokensInPegWithYield(\\n                account.borrowTokens,\\n                account.borrowed,\\n                account.borrowedYieldQuotientsFP\\n            );\\n\\n        uint256 holdings =\\n            viewTokensInPeg(account.holdingTokens, account.holdings);\\n\\n        return liquidationThresholdPercent * loan >= 100 * holdings;\\n    }\\n}\\n\"\n    },\n    \"libraries/IncentiveReporter.sol\": {\n      \"content\": \"library IncentiveReporter {\\n    event AddToClaim(address topic, address indexed claimant, uint256 amount);\\n    event SubtractFromClaim(\\n        address topic,\\n        address indexed claimant,\\n        uint256 amount\\n    );\\n\\n    /// Start / increase amount of claim\\n    function addToClaimAmount(\\n        address topic,\\n        address recipient,\\n        uint256 claimAmount\\n    ) internal {\\n        emit AddToClaim(topic, recipient, claimAmount);\\n    }\\n\\n    /// Decrease amount of claim\\n    function subtractFromClaimAmount(\\n        address topic,\\n        address recipient,\\n        uint256 subtractAmount\\n    ) internal {\\n        emit SubtractFromClaim(topic, recipient, subtractAmount);\\n    }\\n}\\n\"\n    },\n    \"contracts/Roles.sol\": {\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"../interfaces/IDependencyController.sol\\\";\\n\\n// we chose not to go with an enum\\n// to make this list easy to extend\\nuint256 constant FUND_TRANSFERER = 1;\\nuint256 constant MARGIN_CALLER = 2;\\nuint256 constant BORROWER = 3;\\nuint256 constant MARGIN_TRADER = 4;\\nuint256 constant FEE_SOURCE = 5;\\nuint256 constant LIQUIDATOR = 6;\\nuint256 constant AUTHORIZED_FUND_TRADER = 7;\\nuint256 constant INCENTIVE_REPORTER = 8;\\nuint256 constant TOKEN_ACTIVATOR = 9;\\nuint256 constant STAKE_PENALIZER = 10;\\nuint256 constant LENDER = 11;\\n\\nuint256 constant FUND = 101;\\nuint256 constant LENDING = 102;\\nuint256 constant MARGIN_ROUTER = 103;\\nuint256 constant CROSS_MARGIN_TRADING = 104;\\nuint256 constant FEE_CONTROLLER = 105;\\nuint256 constant PRICE_CONTROLLER = 106;\\nuint256 constant ADMIN = 107;\\nuint256 constant INCENTIVE_DISTRIBUTION = 108;\\nuint256 constant TOKEN_ADMIN = 109;\\n\\nuint256 constant DISABLER = 1001;\\nuint256 constant DEPENDENCY_CONTROLLER = 1002;\\n\\n/// @title Manage permissions of contracts and ownership of everything\\n/// owned by a multisig wallet (0xEED9D1c6B4cdEcB3af070D85bfd394E7aF179CBd) during\\n/// beta and will then be transfered to governance\\n/// https://github.com/marginswap/governance\\ncontract Roles is Ownable {\\n    mapping(address => mapping(uint256 => bool)) public roles;\\n    mapping(uint256 => address) public mainCharacters;\\n\\n    constructor() Ownable() {\\n        // token activation from the get-go\\n        roles[msg.sender][TOKEN_ACTIVATOR] = true;\\n    }\\n\\n    /// @dev Throws if called by any account other than the owner.\\n    modifier onlyOwnerExecDepController() {\\n        require(\\n            owner() == msg.sender ||\\n                executor() == msg.sender ||\\n                mainCharacters[DEPENDENCY_CONTROLLER] == msg.sender,\\n            \\\"Roles: caller is not the owner\\\"\\n        );\\n        _;\\n    }\\n\\n    function giveRole(uint256 role, address actor)\\n        external\\n        onlyOwnerExecDepController\\n    {\\n        roles[actor][role] = true;\\n    }\\n\\n    function removeRole(uint256 role, address actor)\\n        external\\n        onlyOwnerExecDepController\\n    {\\n        roles[actor][role] = false;\\n    }\\n\\n    function setMainCharacter(uint256 role, address actor)\\n        external\\n        onlyOwnerExecDepController\\n    {\\n        mainCharacters[role] = actor;\\n    }\\n\\n    function getRole(uint256 role, address contr) external view returns (bool) {\\n        return roles[contr][role];\\n    }\\n\\n    /// @dev current executor\\n    function executor() public returns (address exec) {\\n        address depController = mainCharacters[DEPENDENCY_CONTROLLER];\\n        if (depController != address(0)) {\\n            exec = IDependencyController(depController).currentExecutor();\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/access/Ownable.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor () {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n}\\n\"\n    },\n    \"interfaces/IDependencyController.sol\": {\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\ninterface IDependencyController {\\n    function currentExecutor() external returns (address);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Context.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/Address.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\"\n    },\n    \"interfaces/IWETH.sol\": {\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IWETH {\\n    function deposit() external payable;\\n\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    function withdraw(uint256) external;\\n}\\n\"\n    },\n    \"contracts/Lending.sol\": {\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Fund.sol\\\";\\nimport \\\"./HourlyBondSubscriptionLending.sol\\\";\\nimport \\\"../libraries/IncentiveReporter.sol\\\";\\n\\n// TODO activate bonds for lending\\n\\n/// @title Manage lending for a variety of bond issuers\\ncontract Lending is RoleAware, HourlyBondSubscriptionLending {\\n    /// mapping issuers to tokens\\n    /// (in crossmargin, the issuers are tokens  themselves)\\n    mapping(address => address) public issuerTokens;\\n\\n    /// In case of shortfall, adjust debt\\n    mapping(address => uint256) public haircuts;\\n\\n    /// map of available issuers\\n    mapping(address => bool) public activeIssuers;\\n\\n    uint256 constant BORROW_RATE_UPDATE_WINDOW = 60 minutes;\\n\\n    address public immutable MFI;\\n\\n    constructor(address _MFI, address _roles) RoleAware(_roles) {\\n        MFI = _MFI;\\n    }\\n\\n    /// Make a issuer available for protocol\\n    function activateIssuer(address issuer) external {\\n        activateIssuer(issuer, issuer);\\n    }\\n\\n    /// Make issuer != token available for protocol (isol. margin)\\n    function activateIssuer(address issuer, address token)\\n        public\\n        onlyOwnerExecActivator\\n    {\\n        activeIssuers[issuer] = true;\\n        issuerTokens[issuer] = token;\\n    }\\n\\n    /// Remove a issuer from trading availability\\n    function deactivateIssuer(address issuer) external onlyOwnerExecActivator {\\n        activeIssuers[issuer] = false;\\n    }\\n\\n    /// Set lending cap\\n    function setLendingCap(address issuer, uint256 cap)\\n        external\\n        onlyOwnerExecActivator\\n    {\\n        lendingMeta[issuer].lendingCap = cap;\\n    }\\n\\n    /// Set withdrawal window\\n    function setWithdrawalWindow(uint256 window) external onlyOwnerExec {\\n        withdrawalWindow = window;\\n    }\\n\\n    function setNormalRatePerPercent(uint256 rate) external onlyOwnerExec {\\n        normalRatePerPercent = rate;\\n    }\\n\\n    function setHighRatePerPercent(uint256 rate) external onlyOwnerExec {\\n        highRatePerPercent = rate;\\n    }\\n\\n    /// Set hourly yield APR for issuer\\n    function setHourlyYieldAPR(address issuer, uint256 aprPercent)\\n        external\\n        onlyOwnerExecActivator\\n    {\\n        YieldAccumulator storage yieldAccumulator =\\n            hourlyBondYieldAccumulators[issuer];\\n\\n        if (yieldAccumulator.accumulatorFP == 0) {\\n            uint256 yieldFP = FP48 + (FP48 * aprPercent) / 100 / (24 * 365);\\n            hourlyBondYieldAccumulators[issuer] = YieldAccumulator({\\n                accumulatorFP: FP48,\\n                lastUpdated: block.timestamp,\\n                hourlyYieldFP: yieldFP\\n            });\\n        } else {\\n            YieldAccumulator storage yA =\\n                getUpdatedHourlyYield(\\n                    issuer,\\n                    yieldAccumulator,\\n                    RATE_UPDATE_WINDOW\\n                );\\n            yA.hourlyYieldFP = (FP48 * (100 + aprPercent)) / 100 / (24 * 365);\\n        }\\n    }\\n\\n    /// @dev how much interest has accrued to a borrowed balance over time\\n    function applyBorrowInterest(\\n        uint256 balance,\\n        address issuer,\\n        uint256 yieldQuotientFP\\n    ) external returns (uint256 balanceWithInterest, uint256 accumulatorFP) {\\n        require(isBorrower(msg.sender), \\\"Not approved call\\\");\\n\\n        YieldAccumulator storage yA = borrowYieldAccumulators[issuer];\\n        updateBorrowYieldAccu(yA);\\n        accumulatorFP = yA.accumulatorFP;\\n\\n        balanceWithInterest = applyInterest(\\n            balance,\\n            accumulatorFP,\\n            yieldQuotientFP\\n        );\\n\\n        uint256 deltaAmount = balanceWithInterest - balance;\\n        LendingMetadata storage meta = lendingMeta[issuer];\\n        meta.totalBorrowed += deltaAmount;\\n    }\\n\\n    /// @dev view function to get balance with borrowing interest applied\\n    function viewWithBorrowInterest(\\n        uint256 balance,\\n        address issuer,\\n        uint256 yieldQuotientFP\\n    ) external view returns (uint256) {\\n        uint256 accumulatorFP =\\n            viewCumulativeYieldFP(\\n                borrowYieldAccumulators[issuer],\\n                block.timestamp\\n            );\\n        return applyInterest(balance, accumulatorFP, yieldQuotientFP);\\n    }\\n\\n    /// @dev gets called by router to register if a trader borrows issuers\\n    function registerBorrow(address issuer, uint256 amount) external {\\n        require(isBorrower(msg.sender), \\\"Not approved borrower\\\");\\n        require(activeIssuers[issuer], \\\"Not approved issuer\\\");\\n\\n        LendingMetadata storage meta = lendingMeta[issuer];\\n        meta.totalBorrowed += amount;\\n\\n        getUpdatedHourlyYield(\\n            issuer,\\n            hourlyBondYieldAccumulators[issuer],\\n            BORROW_RATE_UPDATE_WINDOW\\n        );\\n\\n        require(\\n            meta.totalLending >= meta.totalBorrowed,\\n            \\\"Insufficient lending\\\"\\n        );\\n    }\\n\\n    /// @dev gets called when external sources provide lending\\n    function registerLend(address issuer, uint256 amount) external {\\n        require(isLender(msg.sender), \\\"Not an approved lender\\\");\\n        require(activeIssuers[issuer], \\\"Not approved issuer\\\");\\n        LendingMetadata storage meta = lendingMeta[issuer];\\n        addToTotalLending(meta, amount);\\n\\n        getUpdatedHourlyYield(\\n            issuer,\\n            hourlyBondYieldAccumulators[issuer],\\n            RATE_UPDATE_WINDOW\\n        );\\n    }\\n\\n    /// @dev gets called when external sources pay withdraw their bobnd\\n    function registerWithdrawal(address issuer, uint256 amount) external {\\n        require(isLender(msg.sender), \\\"Not an approved lender\\\");\\n        require(activeIssuers[issuer], \\\"Not approved issuer\\\");\\n        LendingMetadata storage meta = lendingMeta[issuer];\\n        subtractFromTotalLending(meta, amount);\\n\\n        getUpdatedHourlyYield(\\n            issuer,\\n            hourlyBondYieldAccumulators[issuer],\\n            RATE_UPDATE_WINDOW\\n        );\\n    }\\n\\n    /// @dev gets called by router if loan is extinguished\\n    function payOff(address issuer, uint256 amount) external {\\n        require(isBorrower(msg.sender), \\\"Not approved borrower\\\");\\n        lendingMeta[issuer].totalBorrowed -= amount;\\n    }\\n\\n    /// @dev get the borrow yield for a specific issuer/token\\n    function viewAccumulatedBorrowingYieldFP(address issuer)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        YieldAccumulator storage yA = borrowYieldAccumulators[issuer];\\n        return viewCumulativeYieldFP(yA, block.timestamp);\\n    }\\n\\n    function viewAPRPer10k(YieldAccumulator storage yA)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 hourlyYieldFP = yA.hourlyYieldFP;\\n\\n        uint256 aprFP =\\n            ((hourlyYieldFP * 10_000 - FP48 * 10_000) * 365 days) / (1 hours);\\n\\n        return aprFP / FP48;\\n    }\\n\\n    /// @dev get current borrowing interest per 10k for a token / issuer\\n    function viewBorrowAPRPer10k(address issuer)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return viewAPRPer10k(borrowYieldAccumulators[issuer]);\\n    }\\n\\n    /// @dev get current lending APR per 10k for a token / issuer\\n    function viewHourlyBondAPRPer10k(address issuer)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return viewAPRPer10k(hourlyBondYieldAccumulators[issuer]);\\n    }\\n\\n    /// @dev In a liquidity crunch make a fallback bond until liquidity is good again\\n    function makeFallbackBond(\\n        address issuer,\\n        address holder,\\n        uint256 amount\\n    ) external {\\n        require(isLender(msg.sender), \\\"Not an approved lender\\\");\\n        _makeHourlyBond(issuer, holder, amount);\\n    }\\n\\n    /// @dev withdraw an hour bond\\n    function withdrawHourlyBond(address issuer, uint256 amount) external {\\n        HourlyBond storage bond = hourlyBondAccounts[issuer][msg.sender];\\n        super._withdrawHourlyBond(issuer, bond, amount, msg.sender);\\n\\n        if (bond.amount == 0) {\\n            delete hourlyBondAccounts[issuer][msg.sender];\\n        }\\n\\n        disburse(issuer, msg.sender, amount);\\n\\n        IncentiveReporter.subtractFromClaimAmount(issuer, msg.sender, amount);\\n    }\\n\\n    /// Shut down hourly bond account for `issuer`\\n    function closeHourlyBondAccount(address issuer) external {\\n        HourlyBond storage bond = hourlyBondAccounts[issuer][msg.sender];\\n\\n        uint256 amount = bond.amount;\\n        super._withdrawHourlyBond(issuer, bond, amount, msg.sender);\\n\\n        disburse(issuer, msg.sender, amount);\\n\\n        delete hourlyBondAccounts[issuer][msg.sender];\\n\\n        IncentiveReporter.subtractFromClaimAmount(issuer, msg.sender, amount);\\n    }\\n\\n    /// @dev buy hourly bond subscription\\n    function buyHourlyBondSubscription(address issuer, uint256 amount)\\n        external\\n    {\\n        require(activeIssuers[issuer], \\\"Not approved issuer\\\");\\n\\n        collectToken(issuer, msg.sender, amount);\\n\\n        super._makeHourlyBond(issuer, msg.sender, amount);\\n\\n        IncentiveReporter.addToClaimAmount(issuer, msg.sender, amount);\\n    }\\n\\n    function initBorrowYieldAccumulator(address issuer)\\n        external\\n        onlyOwnerExecActivator\\n    {\\n        YieldAccumulator storage yA = borrowYieldAccumulators[issuer];\\n        require(yA.accumulatorFP == 0, \\\"don't re-initialize\\\");\\n\\n        yA.accumulatorFP = FP48;\\n        yA.lastUpdated = block.timestamp;\\n        yA.hourlyYieldFP = FP48 + (FP48 * borrowMinAPR) / 1000 / (365 * 24);\\n    }\\n\\n    function setBorrowingFactorPercent(uint256 borrowingFactor)\\n        external\\n        onlyOwnerExec\\n    {\\n        borrowingFactorPercent = borrowingFactor;\\n    }\\n\\n    function issuanceBalance(address issuer)\\n        internal\\n        view\\n        override\\n        returns (uint256)\\n    {\\n        address token = issuerTokens[issuer];\\n        if (token == issuer) {\\n            // cross margin\\n            return IERC20(token).balanceOf(fund());\\n        } else {\\n            return lendingMeta[issuer].totalLending - haircuts[issuer];\\n        }\\n    }\\n\\n    function disburse(\\n        address issuer,\\n        address recipient,\\n        uint256 amount\\n    ) internal {\\n        uint256 haircutAmount = haircuts[issuer];\\n        if (haircutAmount > 0 && amount > 0) {\\n            uint256 totalLending = lendingMeta[issuer].totalLending;\\n            uint256 adjustment =\\n                (amount * min(totalLending, haircutAmount)) / totalLending;\\n            amount = amount - adjustment;\\n            haircuts[issuer] -= adjustment;\\n        }\\n\\n        address token = issuerTokens[issuer];\\n        Fund(fund()).withdraw(token, recipient, amount);\\n    }\\n\\n    function collectToken(\\n        address issuer,\\n        address source,\\n        uint256 amount\\n    ) internal {\\n        Fund(fund()).depositFor(source, issuerTokens[issuer], amount);\\n    }\\n\\n    function haircut(uint256 amount) external {\\n        haircuts[msg.sender] += amount;\\n    }\\n\\n    function addIncentive(\\n        address token,\\n        uint256 amount,\\n        uint256 endTimestamp\\n    ) external onlyOwnerExecActivator {\\n        LendingMetadata storage meta = lendingMeta[token];\\n        meta.incentiveEnd = endTimestamp;\\n        meta.incentiveTarget = amount;\\n        meta.incentiveLastUpdated = block.timestamp;\\n    }\\n\\n    function disburseIncentive(\\n        HourlyBond storage bond,\\n        LendingMetadata storage meta,\\n        address holder\\n    ) internal override {\\n        uint256 allocationDelta =\\n            meta.cumulIncentiveAllocationFP - bond.incentiveAllocationStart;\\n        if (allocationDelta > 0) {\\n            uint256 disburseAmount = (allocationDelta * bond.amount) / FP48;\\n            Fund(fund()).withdraw(MFI, holder, disburseAmount);\\n            bond.incentiveAllocationStart += allocationDelta;\\n        }\\n    }\\n\\n    function withdrawIncentive(address token) external {\\n        LendingMetadata storage meta = lendingMeta[token];\\n        updateIncentiveAllocation(meta);\\n        disburseIncentive(\\n            hourlyBondAccounts[token][msg.sender],\\n            meta,\\n            msg.sender\\n        );\\n    }\\n}\\n\"\n    },\n    \"contracts/CrossMarginLiquidation.sol\": {\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./CrossMarginAccounts.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./Admin.sol\\\";\\n\\n/** \\n@title Handles liquidation of accounts below maintenance threshold\\n@notice Liquidation can be called by the authorized staker, \\nas determined in the Admin contract.\\nIf the authorized staker is delinquent, other participants can jump\\nin and attack, taking their fees and potentially even their stake,\\ndepending how delinquent the responsible authorized staker is.\\n*/\\nabstract contract CrossMarginLiquidation is CrossMarginAccounts {\\n    event LiquidationShortfall(uint256 amount);\\n    event AccountLiquidated(address account);\\n\\n    struct Liquidation {\\n        uint256 buy;\\n        uint256 sell;\\n        uint256 blockNum;\\n    }\\n\\n    /// record kept around until a stake attacker can claim their reward\\n    struct AccountLiqRecord {\\n        uint256 blockNum;\\n        address loser;\\n        uint256 amount;\\n        address stakeAttacker;\\n    }\\n\\n    mapping(address => Liquidation) liquidationAmounts;\\n    address[] internal liquidationTokens;\\n    address[] internal tradersToLiquidate;\\n\\n    mapping(address => uint256) public maintenanceFailures;\\n    mapping(address => AccountLiqRecord) public stakeAttackRecords;\\n    uint256 public avgLiquidationPerCall = 10;\\n\\n    uint256 public liqStakeAttackWindow = 5;\\n    uint256 public MAINTAINER_CUT_PERCENT = 5;\\n\\n    uint256 public failureThreshold = 10;\\n\\n    /// Set failure threshold\\n    function setFailureThreshold(uint256 threshFactor) external onlyOwnerExec {\\n        failureThreshold = threshFactor;\\n    }\\n\\n    /// Set liquidity stake attack window\\n    function setLiqStakeAttackWindow(uint256 window) external onlyOwnerExec {\\n        liqStakeAttackWindow = window;\\n    }\\n\\n    /// Set maintainer's percent cut\\n    function setMaintainerCutPercent(uint256 cut) external onlyOwnerExec {\\n        MAINTAINER_CUT_PERCENT = cut;\\n    }\\n\\n    /// @dev calcLiquidationAmounts does a number of tasks in this contract\\n    /// and some of them are not straightforward.\\n    /// First of all it aggregates liquidation amounts,\\n    /// as well as which traders are ripe for liquidation, in storage (not in memory)\\n    /// owing to the fact that arrays can't be pushed to and hash maps don't\\n    /// exist in memory.\\n    /// Then it also returns any stake attack funds if the stake was unsuccessful\\n    /// (i.e. current caller is authorized). Also see context below.\\n    function calcLiquidationAmounts(\\n        address[] memory liquidationCandidates,\\n        bool isAuthorized\\n    ) internal returns (uint256 attackReturns) {\\n        liquidationTokens = new address[](0);\\n        tradersToLiquidate = new address[](0);\\n\\n        for (\\n            uint256 traderIndex = 0;\\n            liquidationCandidates.length > traderIndex;\\n            traderIndex++\\n        ) {\\n            address traderAddress = liquidationCandidates[traderIndex];\\n            CrossMarginAccount storage account = marginAccounts[traderAddress];\\n\\n            if (belowMaintenanceThreshold(account)) {\\n                tradersToLiquidate.push(traderAddress);\\n                uint256 len = account.holdingTokens.length;\\n                for (uint256 sellIdx = 0; len > sellIdx; sellIdx++) {\\n                    address token = account.holdingTokens[sellIdx];\\n                    Liquidation storage liquidation = liquidationAmounts[token];\\n\\n                    if (liquidation.blockNum != block.number) {\\n                        liquidation.sell = account.holdings[token];\\n                        liquidation.buy = 0;\\n                        liquidation.blockNum = block.number;\\n                        liquidationTokens.push(token);\\n                    } else {\\n                        liquidation.sell += account.holdings[token];\\n                    }\\n                }\\n\\n                len = account.borrowTokens.length;\\n                for (uint256 buyIdx = 0; len > buyIdx; buyIdx++) {\\n                    address token = account.borrowTokens[buyIdx];\\n                    Liquidation storage liquidation = liquidationAmounts[token];\\n\\n                    (uint256 loanAmount, ) =\\n                        Lending(lending()).applyBorrowInterest(\\n                            account.borrowed[token],\\n                            token,\\n                            account.borrowedYieldQuotientsFP[token]\\n                        );\\n\\n                    Lending(lending()).payOff(token, loanAmount);\\n\\n                    if (liquidation.blockNum != block.number) {\\n                        liquidation.sell = 0;\\n                        liquidation.buy = loanAmount;\\n                        liquidation.blockNum = block.number;\\n                        liquidationTokens.push(token);\\n                    } else {\\n                        liquidation.buy += loanAmount;\\n                    }\\n                }\\n            }\\n\\n            AccountLiqRecord storage liqAttackRecord =\\n                stakeAttackRecords[traderAddress];\\n            if (isAuthorized) {\\n                attackReturns += _disburseLiqAttack(liqAttackRecord);\\n            }\\n        }\\n    }\\n\\n    function _disburseLiqAttack(AccountLiqRecord storage liqAttackRecord)\\n        internal\\n        returns (uint256 returnAmount)\\n    {\\n        if (liqAttackRecord.amount > 0) {\\n            // validate attack records, if any\\n            uint256 blockDiff =\\n                min(\\n                    block.number - liqAttackRecord.blockNum,\\n                    liqStakeAttackWindow\\n                );\\n\\n            uint256 attackerCut =\\n                (liqAttackRecord.amount * blockDiff) / liqStakeAttackWindow;\\n\\n            Fund(fund()).withdraw(\\n                PriceAware.peg,\\n                liqAttackRecord.stakeAttacker,\\n                attackerCut\\n            );\\n\\n            Admin a = Admin(admin());\\n            uint256 penalty =\\n                (a.maintenanceStakePerBlock() * attackerCut) /\\n                    (1 + avgLiquidationPerCall);\\n            a.penalizeMaintenanceStake(\\n                liqAttackRecord.loser,\\n                penalty,\\n                liqAttackRecord.stakeAttacker\\n            );\\n\\n            // return remainder, after cut was taken to authorized stakekr\\n            returnAmount = liqAttackRecord.amount - attackerCut;\\n        }\\n    }\\n\\n    /// Disburse liquidity stake attacks\\n    function disburseLiqStakeAttacks(address[] memory liquidatedAccounts)\\n        external\\n    {\\n        for (uint256 i = 0; liquidatedAccounts.length > i; i++) {\\n            address liqAccount = liquidatedAccounts[i];\\n            AccountLiqRecord storage liqAttackRecord =\\n                stakeAttackRecords[liqAccount];\\n            if (\\n                block.number > liqAttackRecord.blockNum + liqStakeAttackWindow\\n            ) {\\n                _disburseLiqAttack(liqAttackRecord);\\n                delete stakeAttackRecords[liqAccount];\\n            }\\n        }\\n    }\\n\\n    function liquidateFromPeg() internal returns (uint256 pegAmount) {\\n        uint256 len = liquidationTokens.length;\\n        for (uint256 tokenIdx = 0; len > tokenIdx; tokenIdx++) {\\n            address buyToken = liquidationTokens[tokenIdx];\\n            Liquidation storage liq = liquidationAmounts[buyToken];\\n            if (liq.buy > liq.sell) {\\n                pegAmount += PriceAware.liquidateFromPeg(\\n                    buyToken,\\n                    liq.buy - liq.sell\\n                );\\n                delete liquidationAmounts[buyToken];\\n            }\\n        }\\n    }\\n\\n    function liquidateToPeg() internal returns (uint256 pegAmount) {\\n        uint256 len = liquidationTokens.length;\\n        for (uint256 tokenIndex = 0; len > tokenIndex; tokenIndex++) {\\n            address token = liquidationTokens[tokenIndex];\\n            Liquidation storage liq = liquidationAmounts[token];\\n            if (liq.sell > liq.buy) {\\n                uint256 sellAmount = liq.sell - liq.buy;\\n                pegAmount += PriceAware.liquidateToPeg(token, sellAmount);\\n                delete liquidationAmounts[token];\\n            }\\n        }\\n    }\\n\\n    function maintainerIsFailing() internal view returns (bool) {\\n        (address currentMaintainer, ) =\\n            Admin(admin()).viewCurrentMaintenanceStaker();\\n        return\\n            maintenanceFailures[currentMaintainer] >\\n            failureThreshold * avgLiquidationPerCall;\\n    }\\n\\n    /// called by maintenance stakers to liquidate accounts below liquidation threshold\\n    function liquidate(address[] memory liquidationCandidates)\\n        external\\n        noIntermediary\\n        returns (uint256 maintainerCut)\\n    {\\n        bool isAuthorized = Admin(admin()).isAuthorizedStaker(msg.sender);\\n        bool canTakeNow = isAuthorized || maintainerIsFailing();\\n\\n        // calcLiquidationAmounts does a lot of the work here\\n        // * aggregates both sell and buy side targets to be liquidated\\n        // * returns attacker cuts to them\\n        // * aggregates any returned fees from unauthorized (attacking) attempts\\n        maintainerCut = calcLiquidationAmounts(\\n            liquidationCandidates,\\n            isAuthorized\\n        );\\n\\n        uint256 sale2pegAmount = liquidateToPeg();\\n        uint256 peg2targetCost = liquidateFromPeg();\\n        delete liquidationTokens;\\n\\n        // this may be a bit imprecise, since individual shortfalls may be obscured\\n        // by overall returns and the maintainer cut is taken out of the net total,\\n        // but it gives us the general picture\\n        uint256 costWithCut =\\n            (peg2targetCost * (100 + MAINTAINER_CUT_PERCENT)) / 100;\\n        if (costWithCut > sale2pegAmount) {\\n            emit LiquidationShortfall(costWithCut - sale2pegAmount);\\n            canTakeNow =\\n                canTakeNow &&\\n                IERC20(peg).balanceOf(fund()) > costWithCut;\\n        }\\n\\n        address loser = address(0);\\n        if (!canTakeNow) {\\n            // whoever is the current responsible maintenance staker\\n            // and liable to lose their stake\\n            loser = Admin(admin()).getUpdatedCurrentStaker();\\n        }\\n\\n        // iterate over traders and send back their money\\n        // as well as giving attackers their due, in case caller isn't authorized\\n        for (\\n            uint256 traderIdx = 0;\\n            tradersToLiquidate.length > traderIdx;\\n            traderIdx++\\n        ) {\\n            address traderAddress = tradersToLiquidate[traderIdx];\\n            CrossMarginAccount storage account = marginAccounts[traderAddress];\\n\\n            uint256 holdingsValue = holdingsInPeg(account);\\n            uint256 borrowValue = loanInPeg(account);\\n\\n            // 5% of value borrowed\\n            uint256 maintainerCut4Account =\\n                (borrowValue * MAINTAINER_CUT_PERCENT) / 100;\\n            maintainerCut += maintainerCut4Account;\\n\\n            if (!canTakeNow) {\\n                // This could theoretically lead to a previous attackers\\n                // record being overwritten, but only if the trader restarts\\n                // their account and goes back into the red within the short time window\\n                // which would be a costly attack requiring collusion without upside\\n                AccountLiqRecord storage liqAttackRecord =\\n                    stakeAttackRecords[traderAddress];\\n                liqAttackRecord.amount = maintainerCut4Account;\\n                liqAttackRecord.stakeAttacker = msg.sender;\\n                liqAttackRecord.blockNum = block.number;\\n                liqAttackRecord.loser = loser;\\n            }\\n\\n            // send back trader money\\n\\n            // include 1% for protocol\\n            uint256 forfeited =\\n                maintainerCut4Account + (borrowValue * 101) / 100;\\n            if (holdingsValue > forfeited) {\\n                // send remaining funds back to trader\\n                Fund(fund()).withdraw(\\n                    PriceAware.peg,\\n                    traderAddress,\\n                    holdingsValue - forfeited\\n                );\\n            }\\n\\n            emit AccountLiquidated(traderAddress);\\n            deleteAccount(account);\\n        }\\n\\n        avgLiquidationPerCall =\\n            (avgLiquidationPerCall * 99 + maintainerCut) /\\n            100;\\n\\n        if (canTakeNow) {\\n            Fund(fund()).withdraw(PriceAware.peg, msg.sender, maintainerCut);\\n        }\\n\\n        address currentMaintainer = Admin(admin()).getUpdatedCurrentStaker();\\n        if (isAuthorized) {\\n            if (maintenanceFailures[currentMaintainer] > maintainerCut) {\\n                maintenanceFailures[currentMaintainer] -= maintainerCut;\\n            } else {\\n                maintenanceFailures[currentMaintainer] = 0;\\n            }\\n        } else {\\n            maintenanceFailures[currentMaintainer] += maintainerCut;\\n        }\\n    }\\n}\\n\"\n    },\n    \"contracts/HourlyBondSubscriptionLending.sol\": {\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./BaseLending.sol\\\";\\n\\nstruct HourlyBond {\\n    uint256 amount;\\n    uint256 yieldQuotientFP;\\n    uint256 moduloHour;\\n    uint256 incentiveAllocationStart;\\n}\\n\\n/// @title Here we offer subscriptions to auto-renewing hourly bonds\\n/// Funds are locked in for an 50 minutes per hour, while interest rates float\\nabstract contract HourlyBondSubscriptionLending is BaseLending {\\n    mapping(address => YieldAccumulator) hourlyBondYieldAccumulators;\\n\\n    uint256 constant RATE_UPDATE_WINDOW = 10 minutes;\\n    uint256 public withdrawalWindow = 20 minutes;\\n    uint256 constant MAX_HOUR_UPDATE = 4;\\n    // issuer => holder => bond record\\n    mapping(address => mapping(address => HourlyBond))\\n        public hourlyBondAccounts;\\n\\n    uint256 public borrowingFactorPercent = 200;\\n\\n    uint256 constant borrowMinAPR = 25;\\n    uint256 constant borrowMinHourlyYield =\\n        FP48 + (borrowMinAPR * FP48) / 1000 / hoursPerYear;\\n\\n    function _makeHourlyBond(\\n        address issuer,\\n        address holder,\\n        uint256 amount\\n    ) internal {\\n        HourlyBond storage bond = hourlyBondAccounts[issuer][holder];\\n        LendingMetadata storage meta = lendingMeta[issuer];\\n        addToTotalLending(meta, amount);\\n        updateHourlyBondAmount(issuer, bond, holder);\\n\\n        if (bond.amount == 0) {\\n            bond.moduloHour = block.timestamp % (1 hours);\\n        }\\n        bond.amount += amount;\\n    }\\n\\n    function updateHourlyBondAmount(\\n        address issuer,\\n        HourlyBond storage bond,\\n        address holder\\n    ) internal {\\n        uint256 yieldQuotientFP = bond.yieldQuotientFP;\\n\\n        YieldAccumulator storage yA =\\n            getUpdatedHourlyYield(\\n                issuer,\\n                hourlyBondYieldAccumulators[issuer],\\n                RATE_UPDATE_WINDOW\\n            );\\n\\n        LendingMetadata storage meta = lendingMeta[issuer];\\n\\n        if (yieldQuotientFP > 0) {\\n            disburseIncentive(bond, meta, holder);\\n            uint256 oldAmount = bond.amount;\\n\\n            bond.amount = applyInterest(\\n                bond.amount,\\n                yA.accumulatorFP,\\n                yieldQuotientFP\\n            );\\n\\n            uint256 deltaAmount = bond.amount - oldAmount;\\n            addToTotalLending(meta, deltaAmount);\\n        } else {\\n            bond.incentiveAllocationStart = meta.cumulIncentiveAllocationFP;\\n        }\\n        bond.yieldQuotientFP = yA.accumulatorFP;\\n    }\\n\\n    // Retrieves bond balance for issuer and holder\\n    function viewHourlyBondAmount(address issuer, address holder)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        HourlyBond storage bond = hourlyBondAccounts[issuer][holder];\\n        uint256 yieldQuotientFP = bond.yieldQuotientFP;\\n\\n        uint256 cumulativeYield =\\n            viewCumulativeYieldFP(\\n                hourlyBondYieldAccumulators[issuer],\\n                block.timestamp\\n            );\\n\\n        if (yieldQuotientFP > 0) {\\n            return applyInterest(bond.amount, cumulativeYield, yieldQuotientFP);\\n        } else {\\n            return bond.amount;\\n        }\\n    }\\n\\n    function _withdrawHourlyBond(\\n        address issuer,\\n        HourlyBond storage bond,\\n        uint256 amount,\\n        address holder\\n    ) internal {\\n        subtractFromTotalLending(lendingMeta[issuer], amount);\\n        updateHourlyBondAmount(issuer, bond, holder);\\n\\n        // how far the current hour has advanced (relative to acccount hourly clock)\\n        uint256 currentOffset = (block.timestamp - bond.moduloHour) % (1 hours);\\n\\n        require(\\n            withdrawalWindow >= currentOffset,\\n            \\\"Tried withdrawing outside subscription cancellation time window\\\"\\n        );\\n\\n        bond.amount -= amount;\\n    }\\n\\n    function calcCumulativeYieldFP(\\n        YieldAccumulator storage yieldAccumulator,\\n        uint256 timeDelta\\n    ) internal view returns (uint256 accumulatorFP) {\\n        uint256 secondsDelta = timeDelta % (1 hours);\\n        // linearly interpolate interest for seconds\\n        // FP * FP * 1 / (FP * 1) = FP\\n        accumulatorFP =\\n            yieldAccumulator.accumulatorFP +\\n            (yieldAccumulator.accumulatorFP *\\n                (yieldAccumulator.hourlyYieldFP - FP48) *\\n                secondsDelta) /\\n            (FP48 * 1 hours);\\n\\n        uint256 hoursDelta = timeDelta / (1 hours);\\n        if (hoursDelta > 0) {\\n            uint256 accumulatorBeforeFP = accumulatorFP;\\n            for (uint256 i = 0; hoursDelta > i && MAX_HOUR_UPDATE > i; i++) {\\n                // FP48 * FP48 / FP48 = FP48\\n                accumulatorFP =\\n                    (accumulatorFP * yieldAccumulator.hourlyYieldFP) /\\n                    FP48;\\n            }\\n\\n            // a lot of time has passed\\n            if (hoursDelta > MAX_HOUR_UPDATE) {\\n                // apply interest in non-compounding way\\n                accumulatorFP +=\\n                    ((accumulatorFP - accumulatorBeforeFP) *\\n                        (hoursDelta - MAX_HOUR_UPDATE)) /\\n                    MAX_HOUR_UPDATE;\\n            }\\n        }\\n    }\\n\\n    /// @dev updates yield accumulators for both borrowing and lending\\n    /// issuer address represents a token\\n    function updateHourlyYield(address issuer)\\n        public\\n        returns (uint256 hourlyYield)\\n    {\\n        return\\n            getUpdatedHourlyYield(\\n                issuer,\\n                hourlyBondYieldAccumulators[issuer],\\n                RATE_UPDATE_WINDOW\\n            )\\n                .hourlyYieldFP;\\n    }\\n\\n    /// @dev updates yield accumulators for both borrowing and lending\\n    function getUpdatedHourlyYield(\\n        address issuer,\\n        YieldAccumulator storage accumulator,\\n        uint256 window\\n    ) internal returns (YieldAccumulator storage) {\\n        uint256 lastUpdated = accumulator.lastUpdated;\\n        uint256 timeDelta = (block.timestamp - lastUpdated);\\n\\n        if (timeDelta > window) {\\n            YieldAccumulator storage borrowAccumulator =\\n                borrowYieldAccumulators[issuer];\\n\\n            accumulator.accumulatorFP = calcCumulativeYieldFP(\\n                accumulator,\\n                timeDelta\\n            );\\n\\n            LendingMetadata storage meta = lendingMeta[issuer];\\n\\n            accumulator.hourlyYieldFP = currentLendingRateFP(\\n                meta.totalLending,\\n                meta.totalBorrowed\\n            );\\n            accumulator.lastUpdated = block.timestamp;\\n\\n            updateBorrowYieldAccu(borrowAccumulator);\\n\\n            borrowAccumulator.hourlyYieldFP = max(\\n                borrowMinHourlyYield,\\n                FP48 +\\n                    (borrowingFactorPercent *\\n                        (accumulator.hourlyYieldFP - FP48)) /\\n                    100\\n            );\\n        }\\n\\n        return accumulator;\\n    }\\n\\n    function updateBorrowYieldAccu(YieldAccumulator storage borrowAccumulator)\\n        internal\\n    {\\n        uint256 timeDelta = block.timestamp - borrowAccumulator.lastUpdated;\\n\\n        if (timeDelta > RATE_UPDATE_WINDOW) {\\n            borrowAccumulator.accumulatorFP = calcCumulativeYieldFP(\\n                borrowAccumulator,\\n                timeDelta\\n            );\\n\\n            borrowAccumulator.lastUpdated = block.timestamp;\\n        }\\n    }\\n\\n    function getUpdatedBorrowYieldAccuFP(address issuer)\\n        external\\n        returns (uint256)\\n    {\\n        YieldAccumulator storage yA = borrowYieldAccumulators[issuer];\\n        updateBorrowYieldAccu(yA);\\n        return yA.accumulatorFP;\\n    }\\n\\n    function viewCumulativeYieldFP(\\n        YieldAccumulator storage yA,\\n        uint256 timestamp\\n    ) internal view returns (uint256) {\\n        uint256 timeDelta = (timestamp - yA.lastUpdated);\\n        if (timeDelta > RATE_UPDATE_WINDOW) {\\n            return calcCumulativeYieldFP(yA, timeDelta);\\n        } else {\\n            return yA.accumulatorFP;\\n        }\\n    }\\n\\n    function viewYearlyIncentivePer10k(address token)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        LendingMetadata storage meta = lendingMeta[token];\\n        if (\\n            meta.incentiveEnd < block.timestamp ||\\n            meta.incentiveLastUpdated > meta.incentiveEnd\\n        ) {\\n            return 0;\\n        } else {\\n            uint256 timeDelta = meta.incentiveEnd - meta.incentiveLastUpdated;\\n\\n            // scale to 1 year\\n            return\\n                (10_000 * (365 days) * meta.incentiveTarget) /\\n                (1 + meta.totalLending * timeDelta);\\n        }\\n    }\\n\\n    function updateIncentiveAllocation(LendingMetadata storage meta) internal {\\n        uint256 endTime = min(meta.incentiveEnd, block.timestamp);\\n        if (meta.incentiveTarget > 0 && endTime > meta.incentiveLastUpdated) {\\n            uint256 timeDelta = endTime - meta.incentiveLastUpdated;\\n            uint256 targetDelta =\\n                min(\\n                    meta.incentiveTarget,\\n                    (timeDelta * meta.incentiveTarget) /\\n                        (meta.incentiveEnd - meta.incentiveLastUpdated)\\n                );\\n            meta.incentiveTarget -= targetDelta;\\n            meta.cumulIncentiveAllocationFP +=\\n                (targetDelta * FP48) /\\n                (1 + meta.totalLending);\\n            meta.incentiveLastUpdated = block.timestamp;\\n        }\\n    }\\n\\n    function addToTotalLending(LendingMetadata storage meta, uint256 amount)\\n        internal\\n    {\\n        updateIncentiveAllocation(meta);\\n        meta.totalLending += amount;\\n    }\\n\\n    function subtractFromTotalLending(\\n        LendingMetadata storage meta,\\n        uint256 amount\\n    ) internal {\\n        updateIncentiveAllocation(meta);\\n        meta.totalLending -= amount;\\n    }\\n\\n    function disburseIncentive(\\n        HourlyBond storage bond,\\n        LendingMetadata storage meta,\\n        address holder\\n    ) internal virtual;\\n}\\n\"\n    },\n    \"contracts/BaseLending.sol\": {\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\nimport \\\"./RoleAware.sol\\\";\\n\\n/// @title Base lending behavior\\nabstract contract BaseLending {\\n    uint256 constant FP48 = 2**48;\\n    uint256 constant ACCUMULATOR_INIT = 10**18;\\n\\n    uint256 constant hoursPerYear = 365 days / (1 hours);\\n    uint256 constant CHANGE_POINT = 82;\\n    uint256 public normalRatePerPercent =\\n        (FP48 * 12) / hoursPerYear / CHANGE_POINT / 100;\\n    uint256 public highRatePerPercent =\\n        (FP48 * (135 - 12)) / hoursPerYear / (100 - CHANGE_POINT) / 100;\\n\\n    struct YieldAccumulator {\\n        uint256 accumulatorFP;\\n        uint256 lastUpdated;\\n        uint256 hourlyYieldFP;\\n    }\\n\\n    struct LendingMetadata {\\n        uint256 totalLending;\\n        uint256 totalBorrowed;\\n        uint256 lendingCap;\\n        uint256 cumulIncentiveAllocationFP;\\n        uint256 incentiveLastUpdated;\\n        uint256 incentiveEnd;\\n        uint256 incentiveTarget;\\n    }\\n    mapping(address => LendingMetadata) public lendingMeta;\\n\\n    /// @dev accumulate interest per issuer (like compound indices)\\n    mapping(address => YieldAccumulator) public borrowYieldAccumulators;\\n\\n    /// @dev simple formula for calculating interest relative to accumulator\\n    function applyInterest(\\n        uint256 balance,\\n        uint256 accumulatorFP,\\n        uint256 yieldQuotientFP\\n    ) internal pure returns (uint256) {\\n        // 1 * FP / FP = 1\\n        return (balance * accumulatorFP) / yieldQuotientFP;\\n    }\\n\\n    function currentLendingRateFP(uint256 totalLending, uint256 totalBorrowing)\\n        internal\\n        view\\n        returns (uint256 rate)\\n    {\\n        rate = FP48;\\n        uint256 utilizationPercent =\\n            totalLending > 0 ? (100 * totalBorrowing) / totalLending : 0;\\n        if (utilizationPercent < CHANGE_POINT) {\\n            rate += utilizationPercent * normalRatePerPercent;\\n        } else {\\n            rate +=\\n                CHANGE_POINT *\\n                normalRatePerPercent +\\n                (utilizationPercent - CHANGE_POINT) *\\n                highRatePerPercent;\\n        }\\n    }\\n\\n    /// @dev minimum\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a > b) {\\n            return b;\\n        } else {\\n            return a;\\n        }\\n    }\\n\\n    /// @dev maximum\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a > b) {\\n            return a;\\n        } else {\\n            return b;\\n        }\\n    }\\n\\n    /// Available tokens to this issuance\\n    function issuanceBalance(address issuance)\\n        internal\\n        view\\n        virtual\\n        returns (uint256);\\n}\\n\"\n    },\n    \"contracts/CrossMarginAccounts.sol\": {\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nimport \\\"./Fund.sol\\\";\\nimport \\\"./Lending.sol\\\";\\nimport \\\"./RoleAware.sol\\\";\\nimport \\\"./PriceAware.sol\\\";\\n\\n// Goal: all external functions only accessible to margintrader role\\n// except for view functions of course\\n\\nstruct CrossMarginAccount {\\n    uint256 lastDepositBlock;\\n    address[] borrowTokens;\\n    // borrowed token address => amount\\n    mapping(address => uint256) borrowed;\\n    // borrowed token => yield quotient\\n    mapping(address => uint256) borrowedYieldQuotientsFP;\\n    address[] holdingTokens;\\n    // token held in portfolio => amount\\n    mapping(address => uint256) holdings;\\n    // boolean value of whether an account holds a token\\n    mapping(address => bool) holdsToken;\\n}\\n\\nabstract contract CrossMarginAccounts is RoleAware, PriceAware {\\n    /// @dev gets used in calculating how much accounts can borrow\\n    uint256 public leveragePercent = 300;\\n\\n    /// @dev percentage of assets held per assets borrowed at which to liquidate\\n    uint256 public liquidationThresholdPercent = 115;\\n\\n    /// @dev record of all cross margin accounts\\n    mapping(address => CrossMarginAccount) internal marginAccounts;\\n    /// @dev total token caps\\n    mapping(address => uint256) public tokenCaps;\\n    /// @dev tracks total of long positions per token\\n    mapping(address => uint256) public totalLong;\\n    uint256 public coolingOffPeriod = 10;\\n\\n    /// @dev add an asset to be held by account\\n    function addHolding(\\n        CrossMarginAccount storage account,\\n        address token,\\n        uint256 depositAmount\\n    ) internal {\\n        if (!hasHoldingToken(account, token)) {\\n            account.holdingTokens.push(token);\\n            account.holdsToken[token] = true;\\n        }\\n\\n        account.holdings[token] += depositAmount;\\n    }\\n\\n    /// @dev adjust account to reflect borrowing of token amount\\n    function borrow(\\n        CrossMarginAccount storage account,\\n        address borrowToken,\\n        uint256 borrowAmount\\n    ) internal {\\n        if (!hasBorrowedToken(account, borrowToken)) {\\n            account.borrowTokens.push(borrowToken);\\n            account.borrowedYieldQuotientsFP[borrowToken] = Lending(lending())\\n                .getUpdatedBorrowYieldAccuFP(borrowToken);\\n\\n            account.borrowed[borrowToken] = borrowAmount;\\n        } else {\\n            (uint256 oldBorrowed, uint256 accumulatorFP) =\\n                Lending(lending()).applyBorrowInterest(\\n                    account.borrowed[borrowToken],\\n                    borrowToken,\\n                    account.borrowedYieldQuotientsFP[borrowToken]\\n                );\\n            account.borrowedYieldQuotientsFP[borrowToken] = accumulatorFP;\\n\\n            account.borrowed[borrowToken] = oldBorrowed + borrowAmount;\\n        }\\n\\n        require(positiveBalance(account), \\\"Insufficient balance\\\");\\n    }\\n\\n    /// @dev checks whether account is in the black, deposit + earnings relative to borrowed\\n    function positiveBalance(CrossMarginAccount storage account)\\n        internal\\n        returns (bool)\\n    {\\n        uint256 loan = loanInPeg(account);\\n        uint256 holdings = holdingsInPeg(account);\\n        // The following condition should hold:\\n        // holdings / loan >= leveragePercent / (leveragePercent - 100)\\n        // =>\\n        return holdings * (leveragePercent - 100) >= loan * leveragePercent;\\n    }\\n\\n    /// @dev internal function adjusting holding and borrow balances when debt extinguished\\n    function extinguishDebt(\\n        CrossMarginAccount storage account,\\n        address debtToken,\\n        uint256 extinguishAmount\\n    ) internal {\\n        // will throw if insufficient funds\\n        (uint256 borrowAmount, uint256 newYieldQuot) =\\n            Lending(lending()).applyBorrowInterest(\\n                account.borrowed[debtToken],\\n                debtToken,\\n                account.borrowedYieldQuotientsFP[debtToken]\\n            );\\n\\n        uint256 newBorrowAmount = borrowAmount - extinguishAmount;\\n        account.borrowed[debtToken] = newBorrowAmount;\\n\\n        if (newBorrowAmount > 0) {\\n            account.borrowedYieldQuotientsFP[debtToken] = newYieldQuot;\\n        } else {\\n            delete account.borrowedYieldQuotientsFP[debtToken];\\n\\n            bool decrement = false;\\n            uint256 len = account.borrowTokens.length;\\n            for (uint256 i; len > i; i++) {\\n                address currToken = account.borrowTokens[i];\\n                if (currToken == debtToken) {\\n                    decrement = true;\\n                } else if (decrement) {\\n                    account.borrowTokens[i - 1] = currToken;\\n                }\\n            }\\n            account.borrowTokens.pop();\\n        }\\n    }\\n\\n    /// @dev checks whether an account holds a token\\n    function hasHoldingToken(CrossMarginAccount storage account, address token)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return account.holdsToken[token];\\n    }\\n\\n    /// @dev checks whether an account has borrowed a token\\n    function hasBorrowedToken(CrossMarginAccount storage account, address token)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return account.borrowedYieldQuotientsFP[token] > 0;\\n    }\\n\\n    /// @dev calculate total loan in reference currency, including compound interest\\n    function loanInPeg(CrossMarginAccount storage account)\\n        internal\\n        returns (uint256)\\n    {\\n        return\\n            sumTokensInPegWithYield(\\n                account.borrowTokens,\\n                account.borrowed,\\n                account.borrowedYieldQuotientsFP\\n            );\\n    }\\n\\n    /// @dev total of assets of account, expressed in reference currency\\n    function holdingsInPeg(CrossMarginAccount storage account)\\n        internal\\n        returns (uint256)\\n    {\\n        return sumTokensInPeg(account.holdingTokens, account.holdings);\\n    }\\n\\n    /// @dev check whether an account can/should be liquidated\\n    function belowMaintenanceThreshold(CrossMarginAccount storage account)\\n        internal\\n        returns (bool)\\n    {\\n        uint256 loan = loanInPeg(account);\\n        uint256 holdings = holdingsInPeg(account);\\n        // The following should hold:\\n        // holdings / loan >= 1.1\\n        // => holdings >= loan * 1.1\\n        return 100 * holdings < liquidationThresholdPercent * loan;\\n    }\\n\\n    /// @dev go through list of tokens and their amounts, summing up\\n    function sumTokensInPeg(\\n        address[] storage tokens,\\n        mapping(address => uint256) storage amounts\\n    ) internal returns (uint256 totalPeg) {\\n        uint256 len = tokens.length;\\n        for (uint256 tokenId; tokenId < len; tokenId++) {\\n            address token = tokens[tokenId];\\n            totalPeg += PriceAware.getCurrentPriceInPeg(token, amounts[token]);\\n        }\\n    }\\n\\n    /// @dev go through list of tokens and their amounts, summing up\\n    function viewTokensInPeg(\\n        address[] storage tokens,\\n        mapping(address => uint256) storage amounts\\n    ) internal view returns (uint256 totalPeg) {\\n        uint256 len = tokens.length;\\n        for (uint256 tokenId; tokenId < len; tokenId++) {\\n            address token = tokens[tokenId];\\n            totalPeg += PriceAware.viewCurrentPriceInPeg(token, amounts[token]);\\n        }\\n    }\\n\\n    /// @dev go through list of tokens and ammounts, summing up with interest\\n    function sumTokensInPegWithYield(\\n        address[] storage tokens,\\n        mapping(address => uint256) storage amounts,\\n        mapping(address => uint256) storage yieldQuotientsFP\\n    ) internal returns (uint256 totalPeg) {\\n        uint256 len = tokens.length;\\n        for (uint256 tokenId; tokenId < len; tokenId++) {\\n            address token = tokens[tokenId];\\n            totalPeg += yieldTokenInPeg(\\n                token,\\n                amounts[token],\\n                yieldQuotientsFP\\n            );\\n        }\\n    }\\n\\n    /// @dev go through list of tokens and ammounts, summing up with interest\\n    function viewTokensInPegWithYield(\\n        address[] storage tokens,\\n        mapping(address => uint256) storage amounts,\\n        mapping(address => uint256) storage yieldQuotientsFP\\n    ) internal view returns (uint256 totalPeg) {\\n        uint256 len = tokens.length;\\n        for (uint256 tokenId; tokenId < len; tokenId++) {\\n            address token = tokens[tokenId];\\n            totalPeg += viewYieldTokenInPeg(\\n                token,\\n                amounts[token],\\n                yieldQuotientsFP\\n            );\\n        }\\n    }\\n\\n    /// @dev calculate yield for token amount and convert to reference currency\\n    function yieldTokenInPeg(\\n        address token,\\n        uint256 amount,\\n        mapping(address => uint256) storage yieldQuotientsFP\\n    ) internal returns (uint256) {\\n        uint256 yieldFP =\\n            Lending(lending()).viewAccumulatedBorrowingYieldFP(token);\\n        // 1 * FP / FP = 1\\n        uint256 amountInToken = (amount * yieldFP) / yieldQuotientsFP[token];\\n        return PriceAware.getCurrentPriceInPeg(token, amountInToken);\\n    }\\n\\n    /// @dev calculate yield for token amount and convert to reference currency\\n    function viewYieldTokenInPeg(\\n        address token,\\n        uint256 amount,\\n        mapping(address => uint256) storage yieldQuotientsFP\\n    ) internal view returns (uint256) {\\n        uint256 yieldFP =\\n            Lending(lending()).viewAccumulatedBorrowingYieldFP(token);\\n        // 1 * FP / FP = 1\\n        uint256 amountInToken = (amount * yieldFP) / yieldQuotientsFP[token];\\n        return PriceAware.viewCurrentPriceInPeg(token, amountInToken);\\n    }\\n\\n    /// @dev move tokens from one holding to another\\n    function adjustAmounts(\\n        CrossMarginAccount storage account,\\n        address fromToken,\\n        address toToken,\\n        uint256 soldAmount,\\n        uint256 boughtAmount\\n    ) internal {\\n        account.holdings[fromToken] = account.holdings[fromToken] - soldAmount;\\n        addHolding(account, toToken, boughtAmount);\\n    }\\n\\n    /// sets borrow and holding to zero\\n    function deleteAccount(CrossMarginAccount storage account) internal {\\n        uint256 len = account.borrowTokens.length;\\n        for (uint256 borrowIdx; len > borrowIdx; borrowIdx++) {\\n            address borrowToken = account.borrowTokens[borrowIdx];\\n            account.borrowed[borrowToken] = 0;\\n            account.borrowedYieldQuotientsFP[borrowToken] = 0;\\n        }\\n        len = account.holdingTokens.length;\\n        for (uint256 holdingIdx; len > holdingIdx; holdingIdx++) {\\n            address holdingToken = account.holdingTokens[holdingIdx];\\n            totalLong[holdingToken] -= account.holdings[holdingToken];\\n            account.holdings[holdingToken] = 0;\\n            account.holdsToken[holdingToken] = false;\\n        }\\n        delete account.borrowTokens;\\n        delete account.holdingTokens;\\n    }\\n\\n    /// @dev minimum\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a > b) {\\n            return b;\\n        } else {\\n            return a;\\n        }\\n    }\\n}\\n\"\n    },\n    \"contracts/PriceAware.sol\": {\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./RoleAware.sol\\\";\\nimport \\\"./MarginRouter.sol\\\";\\nimport \\\"../libraries/UniswapStyleLib.sol\\\";\\n\\n/// Stores how many of token you could get for 1k of peg\\nstruct TokenPrice {\\n    uint256 lastUpdated;\\n    uint256 priceFP;\\n    address[] liquidationTokens;\\n    bytes32 amms;\\n    address[] inverseLiquidationTokens;\\n    bytes32 inverseAmms;\\n}\\n\\nstruct VolatilitySetting {\\n    uint256 priceUpdateWindow;\\n    uint256 updateRatePermil;\\n    uint256 voluntaryUpdateWindow;\\n}\\n\\nstruct PairPrice {\\n    uint256 cumulative;\\n    uint256 lastUpdated;\\n    uint256 priceFP;\\n}\\n\\n/// @title The protocol features several mechanisms to prevent vulnerability to\\n/// price manipulation:\\n/// 1) global exposure caps on all tokens which need to be raised gradually\\n///    during the process of introducing a new token, making attacks unprofitable\\n///    due to lack  of scale\\n/// 2) Exponential moving average with cautious price update. Prices for estimating\\n///    how much a trader can borrow need not be extremely current and precise, mainly\\n///    they must be resilient against extreme manipulation\\n/// 3) Liquidators may not call from a contract address, to prevent extreme forms of\\n///    of front-running and other price manipulation.\\nabstract contract PriceAware is RoleAware, UniswapStyleLib {\\n    uint256 constant FP112 = 2**112;\\n    uint256 constant FP8 = 2**8;\\n    uint256 constant FP96 = 2**(112 - 2 * 8);\\n\\n    address public immutable peg;\\n\\n    mapping(address => TokenPrice) public tokenPrices;\\n    mapping(address => mapping(address => PairPrice)) public pairPrices;\\n    /// update window in blocks\\n\\n    // TODO\\n    uint256 public priceUpdateWindow = 20 minutes;\\n    uint256 public voluntaryUpdateWindow = 5 minutes;\\n\\n    uint256 public UPDATE_RATE_PERMIL = 400;\\n    VolatilitySetting[] public volatilitySettings;\\n\\n    constructor(address _peg) {\\n        peg = _peg;\\n    }\\n\\n    /// Set window for price updates\\n    function setPriceUpdateWindow(uint16 window, uint256 voluntaryWindow)\\n        external\\n        onlyOwnerExec\\n    {\\n        priceUpdateWindow = window;\\n        voluntaryUpdateWindow = voluntaryWindow;\\n    }\\n\\n    /// Add a new volatility setting\\n    function addVolatilitySetting(\\n        uint256 _priceUpdateWindow,\\n        uint256 _updateRatePermil,\\n        uint256 _voluntaryUpdateWindow\\n    ) external onlyOwnerExec {\\n        volatilitySettings.push(\\n            VolatilitySetting({\\n                priceUpdateWindow: _priceUpdateWindow,\\n                updateRatePermil: _updateRatePermil,\\n                voluntaryUpdateWindow: _voluntaryUpdateWindow\\n            })\\n        );\\n    }\\n\\n    /// Choose a volatitlity setting\\n    function chooseVolatilitySetting(uint256 index)\\n        external\\n        onlyOwnerExecDisabler\\n    {\\n        VolatilitySetting storage vs = volatilitySettings[index];\\n        if (vs.updateRatePermil > 0) {\\n            UPDATE_RATE_PERMIL = vs.updateRatePermil;\\n            priceUpdateWindow = vs.priceUpdateWindow;\\n            voluntaryUpdateWindow = vs.voluntaryUpdateWindow;\\n        }\\n    }\\n\\n    /// Set rate for updates\\n    function setUpdateRate(uint256 rate) external onlyOwnerExec {\\n        UPDATE_RATE_PERMIL = rate;\\n    }\\n\\n    function getCurrentPriceInPeg(address token, uint256 inAmount)\\n        internal\\n        returns (uint256)\\n    {\\n        return getCurrentPriceInPeg(token, inAmount, false);\\n    }\\n\\n    function getCurrentPriceInPeg(\\n        address token,\\n        uint256 inAmount,\\n        bool voluntary\\n    ) public returns (uint256 priceInPeg) {\\n        if (token == peg) {\\n            return inAmount;\\n        } else {\\n            TokenPrice storage tokenPrice = tokenPrices[token];\\n\\n            uint256 timeDelta = block.timestamp - tokenPrice.lastUpdated;\\n            if (\\n                timeDelta > priceUpdateWindow ||\\n                tokenPrice.priceFP == 0 ||\\n                (voluntary && timeDelta > voluntaryUpdateWindow)\\n            ) {\\n                // update the currently cached price\\n                uint256 priceUpdateFP;\\n                priceUpdateFP = getPriceByPairs(\\n                    tokenPrice.liquidationTokens,\\n                    tokenPrice.amms\\n                );\\n                _setPriceVal(tokenPrice, priceUpdateFP, UPDATE_RATE_PERMIL);\\n            }\\n\\n            priceInPeg = (inAmount * tokenPrice.priceFP) / FP112;\\n        }\\n    }\\n\\n    /// Get view of current price of token in peg\\n    function viewCurrentPriceInPeg(address token, uint256 inAmount)\\n        public\\n        view\\n        returns (uint256 priceInPeg)\\n    {\\n        if (token == peg) {\\n            return inAmount;\\n        } else {\\n            TokenPrice storage tokenPrice = tokenPrices[token];\\n            uint256 priceFP = tokenPrice.priceFP;\\n\\n            priceInPeg = (inAmount * priceFP) / FP112;\\n        }\\n    }\\n\\n    function _setPriceVal(\\n        TokenPrice storage tokenPrice,\\n        uint256 updateFP,\\n        uint256 weightPerMil\\n    ) internal {\\n        tokenPrice.priceFP =\\n            (tokenPrice.priceFP *\\n                (1000 - weightPerMil) +\\n                updateFP *\\n                weightPerMil) /\\n            1000;\\n\\n        tokenPrice.lastUpdated = block.timestamp;\\n    }\\n\\n    /// add path from token to current liquidation peg\\n    function setLiquidationPath(bytes32 amms, address[] memory tokens)\\n        external\\n        onlyOwnerExecActivator\\n    {\\n        address token = tokens[0];\\n\\n        if (token != peg) {\\n            TokenPrice storage tokenPrice = tokenPrices[token];\\n\\n            tokenPrice.amms = amms;\\n\\n            tokenPrice.liquidationTokens = tokens;\\n            tokenPrice.inverseLiquidationTokens = new address[](tokens.length);\\n\\n            bytes32 inverseAmms;\\n\\n            for (uint256 i = 0; tokens.length - 1 > i; i++) {\\n                initPairPrice(tokens[i], tokens[i + 1], amms[i]);\\n\\n                bytes32 shifted =\\n                    bytes32(amms[i]) >> ((tokens.length - 2 - i) * 8);\\n\\n                inverseAmms = inverseAmms | shifted;\\n            }\\n\\n            tokenPrice.inverseAmms = inverseAmms;\\n\\n            for (uint256 i = 0; tokens.length > i; i++) {\\n                tokenPrice.inverseLiquidationTokens[i] = tokens[\\n                    tokens.length - i - 1\\n                ];\\n            }\\n\\n            tokenPrice.priceFP = getPriceByPairs(tokens, amms);\\n            tokenPrice.lastUpdated = block.timestamp;\\n        }\\n    }\\n\\n    function liquidateToPeg(address token, uint256 amount)\\n        internal\\n        returns (uint256)\\n    {\\n        if (token == peg) {\\n            return amount;\\n        } else {\\n            TokenPrice storage tP = tokenPrices[token];\\n            uint256[] memory amounts =\\n                MarginRouter(marginRouter()).authorizedSwapExactT4T(\\n                    amount,\\n                    0,\\n                    tP.amms,\\n                    tP.liquidationTokens\\n                );\\n\\n            uint256 outAmount = amounts[amounts.length - 1];\\n\\n            return outAmount;\\n        }\\n    }\\n\\n    function liquidateFromPeg(address token, uint256 targetAmount)\\n        internal\\n        returns (uint256)\\n    {\\n        if (token == peg) {\\n            return targetAmount;\\n        } else {\\n            TokenPrice storage tP = tokenPrices[token];\\n            uint256[] memory amounts =\\n                MarginRouter(marginRouter()).authorizedSwapT4ExactT(\\n                    targetAmount,\\n                    type(uint256).max,\\n                    tP.amms,\\n                    tP.inverseLiquidationTokens\\n                );\\n\\n            return amounts[0];\\n        }\\n    }\\n\\n    function getPriceByPairs(address[] memory tokens, bytes32 amms)\\n        internal\\n        returns (uint256 priceFP)\\n    {\\n        priceFP = FP112;\\n        for (uint256 i; i < tokens.length - 1; i++) {\\n            address inToken = tokens[i];\\n            address outToken = tokens[i + 1];\\n\\n            address pair =\\n                amms[i] == 0\\n                    ? UniswapStyleLib.pairForAMM1(inToken, outToken)\\n                    : UniswapStyleLib.pairForAMM2(inToken, outToken);\\n\\n            PairPrice storage pairPrice = pairPrices[pair][inToken];\\n\\n            (, , uint256 pairLastUpdated) = IUniswapV2Pair(pair).getReserves();\\n            uint256 timeDelta = pairLastUpdated - pairPrice.lastUpdated;\\n\\n            if (timeDelta > voluntaryUpdateWindow) {\\n                // we are in business\\n                (address token0, ) =\\n                    UniswapStyleLib.sortTokens(inToken, outToken);\\n\\n                uint256 cumulative =\\n                    inToken == token0\\n                        ? IUniswapV2Pair(pair).price0CumulativeLast()\\n                        : IUniswapV2Pair(pair).price1CumulativeLast();\\n\\n                uint256 pairPriceFP =\\n                    (cumulative - pairPrice.cumulative) / timeDelta;\\n                priceFP = scaleMul(priceFP, pairPriceFP);\\n\\n                pairPrice.priceFP = pairPriceFP;\\n                pairPrice.cumulative = cumulative;\\n                pairPrice.lastUpdated = pairLastUpdated;\\n            } else {\\n                priceFP = scaleMul(priceFP, pairPrice.priceFP);\\n            }\\n        }\\n    }\\n\\n    function scaleMul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return ((a / FP8) * (b / FP8)) / FP96;\\n    }\\n\\n    function initPairPrice(\\n        address inToken,\\n        address outToken,\\n        bytes1 amm\\n    ) internal {\\n        address pair =\\n            amm == 0\\n                ? UniswapStyleLib.pairForAMM1(inToken, outToken)\\n                : UniswapStyleLib.pairForAMM2(inToken, outToken);\\n\\n        PairPrice storage pairPrice = pairPrices[pair][inToken];\\n\\n        if (pairPrice.lastUpdated == 0) {\\n            (uint112 reserve0, uint112 reserve1, uint256 pairLastUpdated) =\\n                IUniswapV2Pair(pair).getReserves();\\n\\n            (address token0, ) = UniswapStyleLib.sortTokens(inToken, outToken);\\n\\n            if (inToken == token0) {\\n                pairPrice.priceFP = (FP112 * reserve1) / reserve0;\\n                pairPrice.cumulative = IUniswapV2Pair(pair)\\n                    .price0CumulativeLast();\\n            } else {\\n                pairPrice.priceFP = (FP112 * reserve0) / reserve1;\\n                pairPrice.cumulative = IUniswapV2Pair(pair)\\n                    .price1CumulativeLast();\\n            }\\n\\n            pairPrice.lastUpdated = block.timestamp;\\n\\n            pairPrice.lastUpdated = pairLastUpdated;\\n        }\\n    }\\n}\\n\"\n    },\n    \"contracts/MarginRouter.sol\": {\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./RoleAware.sol\\\";\\nimport \\\"../interfaces/IMarginTrading.sol\\\";\\nimport \\\"./Lending.sol\\\";\\nimport \\\"./BaseRouter.sol\\\";\\nimport \\\"../libraries/IncentiveReporter.sol\\\";\\n\\n/// @title Top level transaction controller\\ncontract MarginRouter is RoleAware, BaseRouter {\\n    event AccountUpdated(address indexed trader);\\n    event MarginTrade(\\n        address indexed trader,\\n        address fromToken,\\n        address toToken,\\n        uint256 fromAmount,\\n        uint256 toAmount\\n    );\\n\\n    uint256 public constant mswapFeesPer10k = 10;\\n    address public immutable WETH;\\n\\n    constructor(\\n        address _WETH,\\n        address _amm1Factory,\\n        address _amm2Factory,\\n        address _amm3Factory,\\n        bytes32 _amm1InitHash,\\n        bytes32 _amm2InitHash,\\n        bytes32 _amm3InitHash,\\n        uint256 _feeBase,\\n        address _roles\\n    )\\n        UniswapStyleLib(\\n            _amm1Factory,\\n            _amm2Factory,\\n            _amm3Factory,\\n            _amm1InitHash,\\n            _amm2InitHash,\\n            _amm3InitHash,\\n            _feeBase\\n        )\\n        RoleAware(_roles)\\n    {\\n        WETH = _WETH;\\n    }\\n\\n    ///////////////////////////\\n    // Cross margin endpoints\\n    ///////////////////////////\\n\\n    /// @notice traders call this to deposit funds on cross margin\\n    function crossDeposit(address depositToken, uint256 depositAmount)\\n        external\\n    {\\n        Fund(fund()).depositFor(msg.sender, depositToken, depositAmount);\\n\\n        uint256 extinguishAmount =\\n            IMarginTrading(crossMarginTrading()).registerDeposit(\\n                msg.sender,\\n                depositToken,\\n                depositAmount\\n            );\\n        if (extinguishAmount > 0) {\\n            Lending(lending()).payOff(depositToken, extinguishAmount);\\n            IncentiveReporter.subtractFromClaimAmount(\\n                depositToken,\\n                msg.sender,\\n                extinguishAmount\\n            );\\n        }\\n        emit AccountUpdated(msg.sender);\\n    }\\n\\n    /// @notice deposit wrapped ehtereum into cross margin account\\n    function crossDepositETH() external payable {\\n        Fund(fund()).depositToWETH{value: msg.value}();\\n        uint256 extinguishAmount =\\n            IMarginTrading(crossMarginTrading()).registerDeposit(\\n                msg.sender,\\n                WETH,\\n                msg.value\\n            );\\n        if (extinguishAmount > 0) {\\n            Lending(lending()).payOff(WETH, extinguishAmount);\\n            IncentiveReporter.subtractFromClaimAmount(\\n                WETH,\\n                msg.sender,\\n                extinguishAmount\\n            );\\n        }\\n        emit AccountUpdated(msg.sender);\\n    }\\n\\n    /// @notice withdraw deposits/earnings from cross margin account\\n    function crossWithdraw(address withdrawToken, uint256 withdrawAmount)\\n        external\\n    {\\n        IMarginTrading(crossMarginTrading()).registerWithdrawal(\\n            msg.sender,\\n            withdrawToken,\\n            withdrawAmount\\n        );\\n        Fund(fund()).withdraw(withdrawToken, msg.sender, withdrawAmount);\\n        emit AccountUpdated(msg.sender);\\n    }\\n\\n    /// @notice withdraw ethereum from cross margin account\\n    function crossWithdrawETH(uint256 withdrawAmount) external {\\n        IMarginTrading(crossMarginTrading()).registerWithdrawal(\\n            msg.sender,\\n            WETH,\\n            withdrawAmount\\n        );\\n        Fund(fund()).withdrawETH(msg.sender, withdrawAmount);\\n        emit AccountUpdated(msg.sender);\\n    }\\n\\n    /// @notice borrow into cross margin trading account\\n    function crossBorrow(address borrowToken, uint256 borrowAmount) external {\\n        Lending(lending()).registerBorrow(borrowToken, borrowAmount);\\n        IMarginTrading(crossMarginTrading()).registerBorrow(\\n            msg.sender,\\n            borrowToken,\\n            borrowAmount\\n        );\\n        Lending(lending()).updateHourlyYield(borrowToken);\\n\\n        IncentiveReporter.addToClaimAmount(\\n            borrowToken,\\n            msg.sender,\\n            borrowAmount\\n        );\\n        emit AccountUpdated(msg.sender);\\n    }\\n\\n    /// @notice convenience function to perform overcollateralized borrowing\\n    /// against a cross margin account.\\n    /// @dev caution: the account still has to have a positive balaance at the end\\n    /// of the withdraw. So an underwater account may not be able to withdraw\\n    function crossOvercollateralizedBorrow(\\n        address depositToken,\\n        uint256 depositAmount,\\n        address borrowToken,\\n        uint256 withdrawAmount\\n    ) external {\\n        Fund(fund()).depositFor(msg.sender, depositToken, depositAmount);\\n\\n        Lending(lending()).registerBorrow(borrowToken, withdrawAmount);\\n        IMarginTrading(crossMarginTrading()).registerOvercollateralizedBorrow(\\n            msg.sender,\\n            depositToken,\\n            depositAmount,\\n            borrowToken,\\n            withdrawAmount\\n        );\\n        Lending(lending()).updateHourlyYield(borrowToken);\\n\\n        Fund(fund()).withdraw(borrowToken, msg.sender, withdrawAmount);\\n        IncentiveReporter.addToClaimAmount(\\n            borrowToken,\\n            msg.sender,\\n            withdrawAmount\\n        );\\n        emit AccountUpdated(msg.sender);\\n    }\\n\\n    /// @notice close an account that is no longer borrowing and return gains\\n    function crossCloseAccount() external {\\n        (address[] memory holdingTokens, uint256[] memory holdingAmounts) =\\n            IMarginTrading(crossMarginTrading()).getHoldingAmounts(msg.sender);\\n\\n        // requires all debts paid off\\n        IMarginTrading(crossMarginTrading()).registerLiquidation(msg.sender);\\n\\n        for (uint256 i; holdingTokens.length > i; i++) {\\n            Fund(fund()).withdraw(\\n                holdingTokens[i],\\n                msg.sender,\\n                holdingAmounts[i]\\n            );\\n        }\\n\\n        emit AccountUpdated(msg.sender);\\n    }\\n\\n    /// @notice entry point for swapping tokens held in cross margin account\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        bytes32 amms,\\n        address[] calldata tokens,\\n        uint256 deadline\\n    ) external ensure(deadline) returns (uint256[] memory amounts) {\\n        // calc fees\\n        uint256 fees = takeFeesFromInput(amountIn);\\n\\n        address[] memory pairs;\\n        (amounts, pairs) = UniswapStyleLib._getAmountsOut(\\n            amountIn - fees,\\n            amms,\\n            tokens\\n        );\\n\\n        // checks that trader is within allowed lending bounds\\n        registerTrade(\\n            msg.sender,\\n            tokens[0],\\n            tokens[tokens.length - 1],\\n            amountIn,\\n            amounts[amounts.length - 1]\\n        );\\n\\n        _fundSwapExactT4T(amounts, amountOutMin, pairs, tokens);\\n    }\\n\\n    /// @notice entry point for swapping tokens held in cross margin account\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        bytes32 amms,\\n        address[] calldata tokens,\\n        uint256 deadline\\n    ) external ensure(deadline) returns (uint256[] memory amounts) {\\n        address[] memory pairs;\\n        (amounts, pairs) = UniswapStyleLib._getAmountsIn(\\n            amountOut + takeFeesFromOutput(amountOut),\\n            amms,\\n            tokens\\n        );\\n\\n        // checks that trader is within allowed lending bounds\\n        registerTrade(\\n            msg.sender,\\n            tokens[0],\\n            tokens[tokens.length - 1],\\n            amounts[0],\\n            amountOut\\n        );\\n\\n        _fundSwapT4ExactT(amounts, amountInMax, pairs, tokens);\\n    }\\n\\n    /// @dev helper function does all the work of telling other contracts\\n    /// about a cross margin trade\\n    function registerTrade(\\n        address trader,\\n        address inToken,\\n        address outToken,\\n        uint256 inAmount,\\n        uint256 outAmount\\n    ) internal {\\n        (uint256 extinguishAmount, uint256 borrowAmount) =\\n            IMarginTrading(crossMarginTrading()).registerTradeAndBorrow(\\n                trader,\\n                inToken,\\n                outToken,\\n                inAmount,\\n                outAmount\\n            );\\n        if (extinguishAmount > 0) {\\n            Lending(lending()).payOff(outToken, extinguishAmount);\\n            Lending(lending()).updateHourlyYield(outToken);\\n            IncentiveReporter.subtractFromClaimAmount(\\n                outToken,\\n                trader,\\n                extinguishAmount\\n            );\\n        }\\n        if (borrowAmount > 0) {\\n            Lending(lending()).registerBorrow(inToken, borrowAmount);\\n            Lending(lending()).updateHourlyYield(inToken);\\n            IncentiveReporter.addToClaimAmount(inToken, trader, borrowAmount);\\n        }\\n\\n        emit AccountUpdated(trader);\\n        emit MarginTrade(trader, inToken, outToken, inAmount, outAmount);\\n    }\\n\\n    /////////////\\n    // Helpers\\n    /////////////\\n\\n    /// @dev internal helper swapping exact token for token on AMM\\n    function _fundSwapExactT4T(\\n        uint256[] memory amounts,\\n        uint256 amountOutMin,\\n        address[] memory pairs,\\n        address[] calldata tokens\\n    ) internal {\\n        require(\\n            amounts[amounts.length - 1] >= amountOutMin,\\n            \\\"MarginRouter: INSUFFICIENT_OUTPUT_AMOUNT\\\"\\n        );\\n        Fund(fund()).withdraw(tokens[0], pairs[0], amounts[0]);\\n        _swap(amounts, pairs, tokens, fund());\\n    }\\n\\n    /// @notice make swaps on AMM using protocol funds, only for authorized contracts\\n    function authorizedSwapExactT4T(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        bytes32 amms,\\n        address[] calldata tokens\\n    ) external returns (uint256[] memory amounts) {\\n        require(\\n            isAuthorizedFundTrader(msg.sender),\\n            \\\"Calling contract is not authorized to trade with protocl funds\\\"\\n        );\\n        address[] memory pairs;\\n        (amounts, pairs) = UniswapStyleLib._getAmountsOut(\\n            amountIn,\\n            amms,\\n            tokens\\n        );\\n        _fundSwapExactT4T(amounts, amountOutMin, pairs, tokens);\\n    }\\n\\n    // @dev internal helper swapping exact token for token on on AMM\\n    function _fundSwapT4ExactT(\\n        uint256[] memory amounts,\\n        uint256 amountInMax,\\n        address[] memory pairs,\\n        address[] calldata tokens\\n    ) internal {\\n        require(\\n            amounts[0] <= amountInMax,\\n            \\\"MarginRouter: EXCESSIVE_INPUT_AMOUNT\\\"\\n        );\\n        Fund(fund()).withdraw(tokens[0], pairs[0], amounts[0]);\\n        _swap(amounts, pairs, tokens, fund());\\n    }\\n\\n    //// @notice swap protocol funds on AMM, only for authorized\\n    function authorizedSwapT4ExactT(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        bytes32 amms,\\n        address[] calldata tokens\\n    ) external returns (uint256[] memory amounts) {\\n        require(\\n            isAuthorizedFundTrader(msg.sender),\\n            \\\"Calling contract is not authorized to trade with protocl funds\\\"\\n        );\\n\\n        address[] memory pairs;\\n        (amounts, pairs) = UniswapStyleLib._getAmountsIn(\\n            amountOut,\\n            amms,\\n            tokens\\n        );\\n        _fundSwapT4ExactT(amounts, amountInMax, pairs, tokens);\\n    }\\n\\n    function takeFeesFromOutput(uint256 amount)\\n        internal\\n        pure\\n        returns (uint256 fees)\\n    {\\n        fees = (mswapFeesPer10k * amount) / 10_000;\\n    }\\n\\n    function takeFeesFromInput(uint256 amount)\\n        internal\\n        pure\\n        returns (uint256 fees)\\n    {\\n        fees = (mswapFeesPer10k * amount) / (10_000 + mswapFeesPer10k);\\n    }\\n\\n    function getAmountsOut(\\n        uint256 inAmount,\\n        bytes32 amms,\\n        address[] calldata tokens\\n    ) external view returns (uint256[] memory amounts) {\\n        (amounts, ) = UniswapStyleLib._getAmountsOut(inAmount, amms, tokens);\\n    }\\n\\n    function getAmountsIn(\\n        uint256 outAmount,\\n        bytes32 amms,\\n        address[] calldata tokens\\n    ) external view returns (uint256[] memory amounts) {\\n        (amounts, ) = UniswapStyleLib._getAmountsIn(outAmount, amms, tokens);\\n    }\\n}\\n\"\n    },\n    \"libraries/UniswapStyleLib.sol\": {\n      \"content\": \"pragma solidity >=0.5.0;\\n\\nimport \\\"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\\\";\\nimport \\\"hardhat/console.sol\\\";\\n\\nabstract contract UniswapStyleLib {\\n    address public immutable amm1Factory;\\n    address public immutable amm2Factory;\\n    address public immutable amm3Factory;\\n    bytes32 public amm1InitHash;\\n    bytes32 public amm2InitHash;\\n    bytes32 public amm3InitHash;\\n    uint256 public immutable feeBase;\\n\\n    constructor(\\n        address _amm1Factory,\\n        address _amm2Factory,\\n        address _amm3Factory,\\n        bytes32 _amm1InitHash,\\n        bytes32 _amm2InitHash,\\n        bytes32 _amm3InitHash,\\n        uint256 _feeBase\\n    ) {\\n        amm1Factory = _amm1Factory;\\n        amm2Factory = _amm2Factory;\\n        amm3Factory = _amm3Factory;\\n        amm1InitHash = _amm1InitHash;\\n        amm2InitHash = _amm2InitHash;\\n        amm3InitHash = _amm3InitHash;\\n        feeBase = _feeBase;\\n    }\\n\\n    // returns sorted token addresses, used to handle return values from pairs sorted in this order\\n    function sortTokens(address tokenA, address tokenB)\\n        internal\\n        pure\\n        returns (address token0, address token1)\\n    {\\n        require(tokenA != tokenB, \\\"Identical address!\\\");\\n        (token0, token1) = tokenA < tokenB\\n            ? (tokenA, tokenB)\\n            : (tokenB, tokenA);\\n        require(token0 != address(0), \\\"Zero address!\\\");\\n    }\\n\\n    // fetches and sorts the reserves for a pair\\n    function getReserves(\\n        address pair,\\n        address tokenA,\\n        address tokenB\\n    ) internal view returns (uint256 reserveA, uint256 reserveB) {\\n        (address token0, ) = sortTokens(tokenA, tokenB);\\n        (uint256 reserve0, uint256 reserve1, ) =\\n            IUniswapV2Pair(pair).getReserves();\\n\\n        (reserveA, reserveB) = tokenA == token0\\n            ? (reserve0, reserve1)\\n            : (reserve1, reserve0);\\n    }\\n\\n    // given an input amount of an asset and pair reserves, returns the maximum output amount of the other asset\\n    function getAmountOut(\\n        uint256 amountIn,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) internal view returns (uint256 amountOut) {\\n        require(amountIn > 0, \\\"INSUFFICIENT_INPUT_AMOUNT\\\");\\n        require(\\n            reserveIn > 0 && reserveOut > 0,\\n            \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\"\\n        );\\n        uint256 amountInWithFee = amountIn * feeBase;\\n        uint256 numerator = amountInWithFee * reserveOut;\\n        uint256 denominator = reserveIn * 10_000 + amountInWithFee;\\n        amountOut = numerator / denominator;\\n    }\\n\\n    // given an output amount of an asset and pair reserves, returns a required input amount of the other asset\\n    function getAmountIn(\\n        uint256 amountOut,\\n        uint256 reserveIn,\\n        uint256 reserveOut\\n    ) internal view returns (uint256 amountIn) {\\n        require(amountOut > 0, \\\"INSUFFICIENT_OUTPUT_AMOUNT\\\");\\n        require(\\n            reserveIn > 0 && reserveOut > 0,\\n            \\\"UniswapV2Library: INSUFFICIENT_LIQUIDITY\\\"\\n        );\\n        uint256 numerator = reserveIn * amountOut * 10_000;\\n\\n        uint256 denominator = (reserveOut - amountOut) * feeBase;\\n        amountIn = (numerator / denominator) + 1;\\n    }\\n\\n    // performs chained getAmountOut calculations on any number of pairs\\n    function _getAmountsOut(\\n        uint256 amountIn,\\n        bytes32 amms,\\n        address[] memory tokens\\n    ) internal view returns (uint256[] memory amounts, address[] memory pairs) {\\n        require(tokens.length >= 2, \\\"token path too short\\\");\\n\\n        amounts = new uint256[](tokens.length);\\n        amounts[0] = amountIn;\\n\\n        pairs = new address[](tokens.length - 1);\\n\\n        for (uint256 i; i < tokens.length - 1; i++) {\\n            address inToken = tokens[i];\\n            address outToken = tokens[i + 1];\\n\\n            address pair =\\n                amms[i] == 0\\n                    ? pairForAMM1(inToken, outToken)\\n                    : (amms[i] == 0x01\\n                       ? pairForAMM2(inToken, outToken)\\n                       : pairForAMM3(inToken, outToken));\\n            pairs[i] = pair;\\n\\n            (uint256 reserveIn, uint256 reserveOut) =\\n                getReserves(pair, inToken, outToken);\\n\\n            amounts[i + 1] = getAmountOut(amounts[i], reserveIn, reserveOut);\\n        }\\n    }\\n\\n    // performs chained getAmountIn calculations on any number of pairs\\n    function _getAmountsIn(\\n        uint256 amountOut,\\n        bytes32 amms,\\n        address[] memory tokens\\n    ) internal view returns (uint256[] memory amounts, address[] memory pairs) {\\n        require(tokens.length >= 2, \\\"token path too short\\\");\\n\\n        amounts = new uint256[](tokens.length);\\n        amounts[amounts.length - 1] = amountOut;\\n\\n        pairs = new address[](tokens.length - 1);\\n\\n        for (uint256 i = tokens.length - 1; i > 0; i--) {\\n            address inToken = tokens[i - 1];\\n            address outToken = tokens[i];\\n\\n            address pair =\\n                amms[i - 1] == 0\\n                    ? pairForAMM1(inToken, outToken)\\n                    : (amms[i -1 ] == 0x01\\n                       ? pairForAMM2(inToken, outToken)\\n                       : pairForAMM3(inToken, outToken));\\n            pairs[i - 1] = pair;\\n\\n            (uint256 reserveIn, uint256 reserveOut) =\\n                getReserves(pair, inToken, outToken);\\n            amounts[i - 1] = getAmountIn(amounts[i], reserveIn, reserveOut);\\n        }\\n    }\\n\\n    // calculates the CREATE2 address for a pair without making any external calls\\n    function pairForAMM1(address tokenA, address tokenB)\\n        internal\\n        view\\n        returns (address pair)\\n    {\\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\\n        pair = address(\\n            uint160(\\n                uint256(\\n                    keccak256(\\n                        abi.encodePacked(\\n                            hex\\\"ff\\\",\\n                            amm1Factory,\\n                            keccak256(abi.encodePacked(token0, token1)),\\n                            amm1InitHash\\n                        )\\n                    )\\n                )\\n            )\\n        );\\n    }\\n\\n    function pairForAMM2(address tokenA, address tokenB)\\n        internal\\n        view\\n        returns (address pair)\\n    {\\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\\n        pair = address(\\n            uint160(\\n                uint256(\\n                    keccak256(\\n                        abi.encodePacked(\\n                            hex\\\"ff\\\",\\n                            amm2Factory,\\n                            keccak256(abi.encodePacked(token0, token1)),\\n                            amm2InitHash\\n                        )\\n                    )\\n                )\\n            )\\n        );\\n    }\\n\\n    function pairForAMM3(address tokenA, address tokenB)\\n        internal\\n        view\\n        returns (address pair)\\n    {\\n        (address token0, address token1) = sortTokens(tokenA, tokenB);\\n        pair = address(\\n            uint160(\\n                uint256(\\n                    keccak256(\\n                        abi.encodePacked(\\n                            hex\\\"ff\\\",\\n                            amm3Factory,\\n                            keccak256(abi.encodePacked(token0, token1)),\\n                            amm3InitHash\\n                        )\\n                    )\\n                )\\n            )\\n        );\\n    }\\n}\\n\"\n    },\n    \"interfaces/IMarginTrading.sol\": {\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\ninterface IMarginTrading {\\n    function registerDeposit(\\n        address trader,\\n        address token,\\n        uint256 amount\\n    ) external returns (uint256 extinguishAmount);\\n\\n    function registerWithdrawal(\\n        address trader,\\n        address token,\\n        uint256 amount\\n    ) external;\\n\\n    function registerBorrow(\\n        address trader,\\n        address token,\\n        uint256 amount\\n    ) external;\\n\\n    function registerTradeAndBorrow(\\n        address trader,\\n        address inToken,\\n        address outToken,\\n        uint256 inAmount,\\n        uint256 outAmount\\n    ) external returns (uint256 extinguishAmount, uint256 borrowAmount);\\n\\n    function registerOvercollateralizedBorrow(\\n        address trader,\\n        address depositToken,\\n        uint256 depositAmount,\\n        address borrowToken,\\n        uint256 withdrawAmount\\n    ) external;\\n\\n    function registerLiquidation(address trader) external;\\n\\n    function getHoldingAmounts(address trader)\\n        external\\n        view\\n        returns (\\n            address[] memory holdingTokens,\\n            uint256[] memory holdingAmounts\\n        );\\n\\n    function getBorrowAmounts(address trader)\\n        external\\n        view\\n        returns (address[] memory borrowTokens, uint256[] memory borrowAmounts);\\n}\\n\"\n    },\n    \"contracts/BaseRouter.sol\": {\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Fund.sol\\\";\\nimport \\\"../libraries/UniswapStyleLib.sol\\\";\\n\\nabstract contract BaseRouter is UniswapStyleLib {\\n    modifier ensure(uint256 deadline) {\\n        require(deadline >= block.timestamp, \\\"Trade has expired\\\");\\n        _;\\n    }\\n\\n    // **** SWAP ****\\n    /// @dev requires the initial amount to have already been sent to the first pair\\n    /// and for pairs to be vetted (which getAmountsIn / getAmountsOut do)\\n    function _swap(\\n        uint256[] memory amounts,\\n        address[] memory pairs,\\n        address[] memory tokens,\\n        address _to\\n    ) internal {\\n        for (uint256 i; i < pairs.length; i++) {\\n            (address input, address output) = (tokens[i], tokens[i + 1]);\\n            (address token0, ) = UniswapStyleLib.sortTokens(input, output);\\n\\n            uint256 amountOut = amounts[i + 1];\\n\\n            (uint256 amount0Out, uint256 amount1Out) =\\n                input == token0\\n                    ? (uint256(0), amountOut)\\n                    : (amountOut, uint256(0));\\n\\n            address to = i < pairs.length - 1 ? pairs[i + 1] : _to;\\n            IUniswapV2Pair pair = IUniswapV2Pair(pairs[i]);\\n\\n            pair.swap(amount0Out, amount1Out, to, new bytes(0));\\n        }\\n    }\\n}\\n\"\n    },\n    \"@uniswap/v2-core/contracts/interfaces/IUniswapV2Pair.sol\": {\n      \"content\": \"pragma solidity >=0.5.0;\\n\\ninterface IUniswapV2Pair {\\n    event Approval(address indexed owner, address indexed spender, uint value);\\n    event Transfer(address indexed from, address indexed to, uint value);\\n\\n    function name() external pure returns (string memory);\\n    function symbol() external pure returns (string memory);\\n    function decimals() external pure returns (uint8);\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address owner) external view returns (uint);\\n    function allowance(address owner, address spender) external view returns (uint);\\n\\n    function approve(address spender, uint value) external returns (bool);\\n    function transfer(address to, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n    function PERMIT_TYPEHASH() external pure returns (bytes32);\\n    function nonces(address owner) external view returns (uint);\\n\\n    function permit(address owner, address spender, uint value, uint deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n    event Mint(address indexed sender, uint amount0, uint amount1);\\n    event Burn(address indexed sender, uint amount0, uint amount1, address indexed to);\\n    event Swap(\\n        address indexed sender,\\n        uint amount0In,\\n        uint amount1In,\\n        uint amount0Out,\\n        uint amount1Out,\\n        address indexed to\\n    );\\n    event Sync(uint112 reserve0, uint112 reserve1);\\n\\n    function MINIMUM_LIQUIDITY() external pure returns (uint);\\n    function factory() external view returns (address);\\n    function token0() external view returns (address);\\n    function token1() external view returns (address);\\n    function getReserves() external view returns (uint112 reserve0, uint112 reserve1, uint32 blockTimestampLast);\\n    function price0CumulativeLast() external view returns (uint);\\n    function price1CumulativeLast() external view returns (uint);\\n    function kLast() external view returns (uint);\\n\\n    function mint(address to) external returns (uint liquidity);\\n    function burn(address to) external returns (uint amount0, uint amount1);\\n    function swap(uint amount0Out, uint amount1Out, address to, bytes calldata data) external;\\n    function skim(address to) external;\\n    function sync() external;\\n\\n    function initialize(address, address) external;\\n}\\n\"\n    },\n    \"hardhat/console.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\"\n    },\n    \"contracts/isolated/IsolatedMarginLiquidation.sol\": {\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IsolatedMarginAccounts.sol\\\";\\nimport \\\"../Admin.sol\\\";\\n\\n/** \\n@title Handles liquidation of accounts below maintenance threshold\\n@notice Liquidation can be called by the authorized staker, \\nas determined in the Admin contract.\\nIf the authorized staker is delinquent, other participants can jump\\nin and attack, taking their fees and potentially even their stake,\\ndepending how delinquent the responsible authorized staker is.\\n*/\\nabstract contract IsolatedMarginLiquidation is IsolatedMarginAccounts {\\n    event LiquidationShortfall(uint256 amount);\\n    event AccountLiquidated(address account);\\n\\n    /// record kept around until a stake attacker can claim their reward\\n    struct AccountLiqRecord {\\n        uint256 blockNum;\\n        address loser;\\n        uint256 amount;\\n        address stakeAttacker;\\n    }\\n\\n    address[] internal tradersToLiquidate;\\n\\n    mapping(address => uint256) public maintenanceFailures;\\n    mapping(address => AccountLiqRecord) public stakeAttackRecords;\\n    uint256 public avgLiquidationPerCall = 10;\\n\\n    uint256 public liqStakeAttackWindow = 5;\\n    uint256 public MAINTAINER_CUT_PERCENT = 5;\\n\\n    uint256 public failureThreshold = 10;\\n\\n    /// Set failure threshold\\n    function setFailureThreshold(uint256 threshFactor) external onlyOwnerExec {\\n        failureThreshold = threshFactor;\\n    }\\n\\n    /// Set liquidity stake attack window\\n    function setLiqStakeAttackWindow(uint256 window) external onlyOwnerExec {\\n        liqStakeAttackWindow = window;\\n    }\\n\\n    /// Set maintainer's percent cut\\n    function setMaintainerCutPercent(uint256 cut) external onlyOwnerExec {\\n        MAINTAINER_CUT_PERCENT = cut;\\n    }\\n\\n    /// @dev calcLiquidationAmounts does a number of tasks in this contract\\n    /// and some of them are not straightforward.\\n    /// First of all it aggregates the total amount to sell\\n    /// as well as which traders are ripe for liquidation, in storage (not in memory)\\n    /// owing to the fact that arrays can't be pushed to and hash maps don't\\n    /// exist in memory.\\n    /// Then it also returns any stake attack funds if the stake was unsuccessful\\n    /// (i.e. current caller is authorized). Also see context below.\\n    function calcLiquidationAmounts(\\n        address[] memory liquidationCandidates,\\n        bool isAuthorized\\n    )\\n        internal\\n        returns (\\n            uint256 attackReturns,\\n            uint256 sellAmount,\\n            uint256 buyTarget\\n        )\\n    {\\n        tradersToLiquidate = new address[](0);\\n\\n        for (\\n            uint256 traderIndex = 0;\\n            liquidationCandidates.length > traderIndex;\\n            traderIndex++\\n        ) {\\n            address traderAddress = liquidationCandidates[traderIndex];\\n            IsolatedMarginAccount storage account =\\n                marginAccounts[traderAddress];\\n\\n            if (belowMaintenanceThreshold(account)) {\\n                tradersToLiquidate.push(traderAddress);\\n\\n                sellAmount += account.holding;\\n\\n                updateLoan(account);\\n                buyTarget += account.borrowed;\\n\\n                // TODO pay off / extinguish that loan\\n            }\\n\\n            AccountLiqRecord storage liqAttackRecord =\\n                stakeAttackRecords[traderAddress];\\n            if (isAuthorized) {\\n                attackReturns += _disburseLiqAttack(liqAttackRecord);\\n            }\\n        }\\n    }\\n\\n    function _disburseLiqAttack(AccountLiqRecord storage liqAttackRecord)\\n        internal\\n        returns (uint256 returnAmount)\\n    {\\n        if (liqAttackRecord.amount > 0) {\\n            // validate attack records, if any\\n            uint256 blockDiff =\\n                min(\\n                    block.number - liqAttackRecord.blockNum,\\n                    liqStakeAttackWindow\\n                );\\n\\n            uint256 attackerCut =\\n                (liqAttackRecord.amount * blockDiff) / liqStakeAttackWindow;\\n\\n            Fund(fund()).withdraw(\\n                borrowToken,\\n                liqAttackRecord.stakeAttacker,\\n                attackerCut\\n            );\\n\\n            Admin a = Admin(admin());\\n            uint256 penalty =\\n                (a.maintenanceStakePerBlock() * attackerCut) /\\n                    avgLiquidationPerCall;\\n            a.penalizeMaintenanceStake(\\n                liqAttackRecord.loser,\\n                penalty,\\n                liqAttackRecord.stakeAttacker\\n            );\\n\\n            // return remainder, after cut was taken to authorized stakekr\\n            returnAmount = liqAttackRecord.amount - attackerCut;\\n        }\\n    }\\n\\n    /// Disburse liquidity stake attacks\\n    function disburseLiqStakeAttacks(address[] memory liquidatedAccounts)\\n        external\\n    {\\n        for (uint256 i = 0; liquidatedAccounts.length > i; i++) {\\n            address liqAccount = liquidatedAccounts[i];\\n            AccountLiqRecord storage liqAttackRecord =\\n                stakeAttackRecords[liqAccount];\\n            if (\\n                block.number > liqAttackRecord.blockNum + liqStakeAttackWindow\\n            ) {\\n                _disburseLiqAttack(liqAttackRecord);\\n                delete stakeAttackRecords[liqAccount];\\n            }\\n        }\\n    }\\n\\n    function maintainerIsFailing() internal view returns (bool) {\\n        (address currentMaintainer, ) =\\n            Admin(admin()).viewCurrentMaintenanceStaker();\\n        return\\n            maintenanceFailures[currentMaintainer] >\\n            failureThreshold * avgLiquidationPerCall;\\n    }\\n\\n    function liquidateToBorrow(uint256 sellAmount) internal returns (uint256) {\\n        uint256[] memory amounts =\\n            MarginRouter(marginRouter()).authorizedSwapExactT4T(\\n                sellAmount,\\n                0,\\n                amms,\\n                liquidationTokens\\n            );\\n\\n        uint256 outAmount = amounts[amounts.length - 1];\\n\\n        return outAmount;\\n    }\\n\\n    /// called by maintenance stakers to liquidate accounts below liquidation threshold\\n    function liquidate(address[] memory liquidationCandidates)\\n        external\\n        noIntermediary\\n        returns (uint256 maintainerCut)\\n    {\\n        bool isAuthorized = Admin(admin()).isAuthorizedStaker(msg.sender);\\n        bool canTakeNow = isAuthorized || maintainerIsFailing();\\n\\n        // calcLiquidationAmounts does a lot of the work here\\n        // * aggregates both sell and buy side targets to be liquidated\\n        // * returns attacker cuts to them\\n        // * aggregates any returned fees from unauthorized (attacking) attempts\\n        uint256 sellAmount;\\n        uint256 liquidationTarget;\\n        (maintainerCut, sellAmount, liquidationTarget) = calcLiquidationAmounts(\\n            liquidationCandidates,\\n            isAuthorized\\n        );\\n\\n        uint256 liquidationReturns = liquidateToBorrow(sellAmount);\\n\\n        // this may be a bit imprecise, since individual shortfalls may be obscured\\n        // by overall returns and the maintainer cut is taken out of the net total,\\n        // but it gives us the general picture\\n        liquidationTarget *= (100 + MAINTAINER_CUT_PERCENT) / 100;\\n        if (liquidationTarget > liquidationReturns) {\\n            uint256 shortfall = liquidationTarget - liquidationReturns;\\n            emit LiquidationShortfall(shortfall);\\n\\n            Lending(lending()).haircut(shortfall);\\n        }\\n\\n        address loser = address(0);\\n        if (!canTakeNow) {\\n            // whoever is the current responsible maintenance staker\\n            // and liable to lose their stake\\n            loser = Admin(admin()).getUpdatedCurrentStaker();\\n        }\\n\\n        // iterate over traders and send back their money\\n        // as well as giving attackers their due, in case caller isn't authorized\\n        for (\\n            uint256 traderIdx = 0;\\n            tradersToLiquidate.length > traderIdx;\\n            traderIdx++\\n        ) {\\n            address traderAddress = tradersToLiquidate[traderIdx];\\n            IsolatedMarginAccount storage account =\\n                marginAccounts[traderAddress];\\n\\n            // 5% of value borrowed\\n            uint256 maintainerCut4Account =\\n                (account.borrowed * MAINTAINER_CUT_PERCENT) / 100;\\n            maintainerCut += maintainerCut4Account;\\n\\n            if (!canTakeNow) {\\n                // This could theoretically lead to a previous attackers\\n                // record being overwritten, but only if the trader restarts\\n                // their account and goes back into the red within the short time window\\n                // which would be a costly attack requiring collusion without upside\\n                AccountLiqRecord storage liqAttackRecord =\\n                    stakeAttackRecords[traderAddress];\\n                liqAttackRecord.amount = maintainerCut4Account;\\n                liqAttackRecord.stakeAttacker = msg.sender;\\n                liqAttackRecord.blockNum = block.number;\\n                liqAttackRecord.loser = loser;\\n            }\\n\\n            uint256 holdingsValue =\\n                (account.holding * liquidationReturns) / sellAmount;\\n\\n            // send back trader money\\n            if (holdingsValue >= maintainerCut4Account + account.borrowed) {\\n                // send remaining funds back to trader\\n                Fund(fund()).withdraw(\\n                    borrowToken,\\n                    traderAddress,\\n                    holdingsValue - account.borrowed - maintainerCut4Account\\n                );\\n            }\\n\\n            emit AccountLiquidated(traderAddress);\\n            delete marginAccounts[traderAddress];\\n        }\\n\\n        avgLiquidationPerCall =\\n            (avgLiquidationPerCall * 99 + maintainerCut) /\\n            100;\\n\\n        if (canTakeNow) {\\n            Fund(fund()).withdraw(borrowToken, msg.sender, maintainerCut);\\n        }\\n\\n        address currentMaintainer = Admin(admin()).getUpdatedCurrentStaker();\\n        if (isAuthorized) {\\n            if (maintenanceFailures[currentMaintainer] > maintainerCut) {\\n                maintenanceFailures[currentMaintainer] -= maintainerCut;\\n            } else {\\n                maintenanceFailures[currentMaintainer] = 0;\\n            }\\n        } else {\\n            maintenanceFailures[currentMaintainer] += maintainerCut;\\n        }\\n    }\\n}\\n\"\n    },\n    \"contracts/isolated/IsolatedMarginAccounts.sol\": {\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\nimport \\\"../RoleAware.sol\\\";\\nimport \\\"../Lending.sol\\\";\\nimport \\\"../PriceAware.sol\\\";\\n\\nabstract contract IsolatedMarginAccounts is RoleAware {\\n    struct IsolatedMarginAccount {\\n        uint256 lastDepositBlock;\\n        uint256 borrowed;\\n        uint256 borrowedYieldQuotientFP;\\n        uint256 holding;\\n    }\\n\\n    address public borrowToken;\\n    address public holdingToken;\\n\\n    bytes32 public amms;\\n    address[] public liquidationTokens;\\n\\n    /// @dev percentage of assets held per assets borrowed at which to liquidate\\n    uint256 public liquidationThresholdPercent = 115;\\n\\n    mapping(address => IsolatedMarginAccount) public marginAccounts;\\n    uint256 public coolingOffPeriod = 20;\\n    uint256 public leveragePercent = 500;\\n\\n    /// @dev adjust account to reflect borrowing of token amount\\n    function borrow(IsolatedMarginAccount storage account, uint256 amount)\\n        internal\\n    {\\n        updateLoan(account);\\n        account.borrowed += amount;\\n        require(positiveBalance(account), \\\"Can't borrow: insufficient balance\\\");\\n    }\\n\\n    function updateLoan(IsolatedMarginAccount storage account) internal {\\n        (account.borrowed, account.borrowedYieldQuotientFP) = Lending(lending())\\n            .applyBorrowInterest(\\n            account.borrowed,\\n            address(this),\\n            account.borrowedYieldQuotientFP\\n        );\\n    }\\n\\n    /// @dev checks whether account is in the black, deposit + earnings relative to borrowed\\n    function positiveBalance(IsolatedMarginAccount storage account)\\n        internal\\n        returns (bool)\\n    {\\n        uint256 loan = loanInPeg(account);\\n        uint256 holdings = holdingInPeg(account);\\n\\n        // The following condition should hold:\\n        // holdings / loan >= leveragePercent / (leveragePercent - 100)\\n        // =>\\n        return holdings * (leveragePercent - 100) >= loan * leveragePercent;\\n    }\\n\\n    /// @dev internal function adjusting holding and borrow balances when debt extinguished\\n    function extinguishDebt(\\n        IsolatedMarginAccount storage account,\\n        uint256 extinguishAmount\\n    ) internal {\\n        // TODO check if underflow?\\n        // TODO TELL LENDING\\n        updateLoan(account);\\n        account.borrowed -= extinguishAmount;\\n    }\\n\\n    /// @dev check whether an account can/should be liquidated\\n    function belowMaintenanceThreshold(IsolatedMarginAccount storage account)\\n        internal\\n        returns (bool)\\n    {\\n        uint256 loan = loanInPeg(account);\\n        uint256 holdings = holdingInPeg(account);\\n        // The following should hold:\\n        // holdings / loan >= 1.1\\n        // => holdings >= loan * 1.1\\n        return 100 * holdings < liquidationThresholdPercent * loan;\\n    }\\n\\n    /// @dev calculate loan in reference currency\\n    function loanInPeg(IsolatedMarginAccount storage account)\\n        internal\\n        returns (uint256)\\n    {\\n        return\\n            PriceAware(price()).getCurrentPriceInPeg(\\n                borrowToken,\\n                account.borrowed,\\n                false\\n            );\\n    }\\n\\n    /// @dev calculate loan in reference currency\\n    function holdingInPeg(IsolatedMarginAccount storage account)\\n        internal\\n        returns (uint256)\\n    {\\n        return\\n            PriceAware(price()).getCurrentPriceInPeg(\\n                holdingToken,\\n                account.holding,\\n                false\\n            );\\n    }\\n\\n    /// @dev minimum\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a > b) {\\n            return b;\\n        } else {\\n            return a;\\n        }\\n    }\\n}\\n\"\n    },\n    \"contracts/isolated/IsolatedMarginTrading.sol\": {\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IsolatedMarginLiquidation.sol\\\";\\n\\ncontract IsolatedMarginTrading is IsolatedMarginLiquidation {\\n    constructor(\\n        address[] memory _liquidationTokens,\\n        bytes32 _amms,\\n        address _roles\\n    ) RoleAware(_roles) {\\n        liquidationTokens = _liquidationTokens;\\n        amms = _amms;\\n\\n        borrowToken = _liquidationTokens[_liquidationTokens.length - 1];\\n        holdingToken = _liquidationTokens[0];\\n    }\\n\\n    /// @dev last time this account deposited\\n    /// relevant for withdrawal window\\n    function getLastDepositBlock(address trader)\\n        external\\n        view\\n        returns (uint256)\\n    {\\n        return marginAccounts[trader].lastDepositBlock;\\n    }\\n\\n    /// @dev setter for cooling off period for withdrawing funds after deposit\\n    function setCoolingOffPeriod(uint256 blocks) external onlyOwnerExec {\\n        coolingOffPeriod = blocks;\\n    }\\n\\n    /// @dev admin function to set leverage\\n    function setLeveragePercent(uint256 _leveragePercent)\\n        external\\n        onlyOwnerExec\\n    {\\n        leveragePercent = _leveragePercent;\\n    }\\n\\n    /// @dev admin function to set liquidation threshold\\n    function setLiquidationThresholdPercent(uint256 threshold)\\n        external\\n        onlyOwnerExec\\n    {\\n        liquidationThresholdPercent = threshold;\\n    }\\n\\n    /// @dev gets called by router to affirm trader taking position\\n    function registerPosition(\\n        address trader,\\n        uint256 borrowed,\\n        uint256 holdingsAdded,\\n        bool deposited\\n    ) external {\\n        require(\\n            isMarginTrader(msg.sender),\\n            \\\"Calling contract not authorized to deposit\\\"\\n        );\\n\\n        IsolatedMarginAccount storage account = marginAccounts[trader];\\n\\n        account.holding += holdingsAdded;\\n        borrow(account, borrowed);\\n\\n        if (deposited) {\\n            account.lastDepositBlock = block.number;\\n        }\\n    }\\n\\n    /// @dev gets called by router to affirm unwinding of position\\n    function registerUnwind(\\n        address trader,\\n        uint256 extinguished,\\n        uint256 holdingsSold\\n    ) external {\\n        require(\\n            isMarginTrader(msg.sender),\\n            \\\"Calling contract not authorized to withdraw\\\"\\n        );\\n\\n        IsolatedMarginAccount storage account = marginAccounts[trader];\\n        require(\\n            block.number > account.lastDepositBlock + coolingOffPeriod,\\n            \\\"To prevent attacks you must wait until your cooling off period is over to withdraw\\\"\\n        );\\n\\n        account.holding -= holdingsSold;\\n        extinguishDebt(account, extinguished);\\n        require(positiveBalance(account), \\\"Insufficient remaining balance\\\");\\n    }\\n\\n    /// @dev gets called by router to close account\\n    function registerCloseAccount(address trader)\\n        external\\n        returns (uint256 holdingAmount)\\n    {\\n        require(\\n            isMarginTrader(msg.sender),\\n            \\\"Calling contract not authorized to deposit\\\"\\n        );\\n\\n        IsolatedMarginAccount storage account = marginAccounts[trader];\\n        require(\\n            block.number > account.lastDepositBlock + coolingOffPeriod,\\n            \\\"To prevent attacks you must wait until your cooling off period is over to withdraw\\\"\\n        );\\n\\n        require(account.borrowed == 0, \\\"Can't close account that's borrowing\\\");\\n\\n        holdingAmount = account.holding;\\n\\n        delete marginAccounts[trader];\\n    }\\n}\\n\"\n    },\n    \"contracts/isolated/IsolatedMarginRouter.sol\": {\n      \"content\": \"import \\\"../RoleAware.sol\\\";\\n\\nimport \\\"../Lending.sol\\\";\\n\\nimport \\\"../BaseRouter.sol\\\";\\nimport \\\"../../libraries/IncentiveReporter.sol\\\";\\n\\nimport \\\"./IsolatedMarginTrading.sol\\\";\\n\\ncontract IsolatedMarginRouter is RoleAware, BaseRouter {\\n    event IsolatedAccountUpdated(address indexed trader, address isolatedPair);\\n    event IsolatedMarginTrade(\\n        address indexed trader,\\n        address fromToken,\\n        address toToken,\\n        uint256 fromAmount,\\n        uint256 toAmount\\n    );\\n\\n    uint256 public constant mswapFeesPer10k = 10;\\n    address public immutable WETH;\\n\\n    constructor(\\n        address _WETH,\\n        address _amm1Factory,\\n        address _amm2Factory,\\n        address _amm3Factory,\\n        bytes32 _amm1InitHash,\\n        bytes32 _amm2InitHash,\\n        bytes32 _amm3InitHash,\\n        uint256 _feeBase,\\n        address _roles\\n    )\\n        UniswapStyleLib(\\n            _amm1Factory,\\n            _amm2Factory,\\n            _amm3Factory,\\n            _amm1InitHash,\\n            _amm2InitHash,\\n            _amm3InitHash,\\n            _feeBase\\n        )\\n        RoleAware(_roles)\\n    {\\n        WETH = _WETH;\\n    }\\n\\n    /// @notice entry point for swapping tokens into isolated pair\\n    function swapExactTokensForTokensPosition(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        bytes32 amms,\\n        address[] calldata tokens,\\n        address _isolatedPair,\\n        uint256 depositFrom,\\n        uint256 depositTo,\\n        uint256 deadline\\n    ) external ensure(deadline) returns (uint256[] memory amounts) {\\n        require(\\n            tokens[0] == IsolatedMarginTrading(_isolatedPair).borrowToken() &&\\n                tokens[tokens.length - 1] ==\\n                IsolatedMarginTrading(_isolatedPair).holdingToken(),\\n            \\\"Path does not match isolated pair\\\"\\n        );\\n\\n        // calc fees\\n        uint256 fees = takeFeesFromInput(amountIn);\\n\\n        address[] memory pairs;\\n        (amounts, pairs) = UniswapStyleLib._getAmountsOut(\\n            amountIn - fees,\\n            amms,\\n            tokens\\n        );\\n\\n        getDeposits(\\n            msg.sender,\\n            tokens[0],\\n            tokens[tokens.length - 1],\\n            depositFrom,\\n            depositTo\\n        );\\n\\n        // checks that trader is within allowed lending bounds\\n        registerPosition(\\n            msg.sender,\\n            IsolatedMarginTrading(_isolatedPair),\\n            amountIn,\\n            amounts[amounts.length - 1],\\n            depositFrom,\\n            depositTo\\n        );\\n\\n        _fundSwapExactT4T(amounts, amountOutMin, pairs, tokens);\\n        emit IsolatedAccountUpdated(msg.sender, _isolatedPair);\\n        emit IsolatedMarginTrade(\\n            msg.sender,\\n            tokens[0],\\n            tokens[tokens.length - 1],\\n            amounts[0],\\n            amounts[amounts.length - 1]\\n        );\\n    }\\n\\n    /// @notice entry point for swapping tokens into isolated pair\\n    function swapTokensForExactTokensPosition(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        bytes32 amms,\\n        address[] calldata tokens,\\n        address _isolatedPair,\\n        uint256 depositFrom,\\n        uint256 depositTo,\\n        uint256 deadline\\n    ) external ensure(deadline) returns (uint256[] memory amounts) {\\n        require(\\n            tokens[0] == IsolatedMarginTrading(_isolatedPair).borrowToken() &&\\n                tokens[tokens.length - 1] ==\\n                IsolatedMarginTrading(_isolatedPair).holdingToken(),\\n            \\\"Path does not match isolated pair\\\"\\n        );\\n        address[] memory pairs;\\n        (amounts, pairs) = UniswapStyleLib._getAmountsIn(\\n            amountOut + takeFeesFromOutput(amountOut),\\n            amms,\\n            tokens\\n        );\\n\\n        getDeposits(\\n            msg.sender,\\n            tokens[0],\\n            tokens[tokens.length - 1],\\n            depositFrom,\\n            depositTo\\n        );\\n\\n        // checks that trader is within allowed lending bounds\\n        registerPosition(\\n            msg.sender,\\n            IsolatedMarginTrading(_isolatedPair),\\n            amounts[0],\\n            amountOut,\\n            depositFrom,\\n            depositTo\\n        );\\n\\n        _fundSwapT4ExactT(amounts, amountInMax, pairs, tokens);\\n        emit IsolatedAccountUpdated(msg.sender, _isolatedPair);\\n        emit IsolatedMarginTrade(\\n            msg.sender,\\n            tokens[0],\\n            tokens[tokens.length - 1],\\n            amounts[0],\\n            amounts[amounts.length - 1]\\n        );\\n    }\\n\\n    /// @notice entry point for swapping tokens out of isolated pair\\n    function swapExactTokensForTokensUnwind(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        bytes32 amms,\\n        address[] calldata tokens,\\n        address _isolatedPair,\\n        uint256 withdrawFrom,\\n        uint256 withdrawTo,\\n        uint256 deadline\\n    ) external ensure(deadline) returns (uint256[] memory amounts) {\\n        require(\\n            tokens[tokens.length - 1] ==\\n                IsolatedMarginTrading(_isolatedPair).borrowToken() &&\\n                tokens[0] ==\\n                IsolatedMarginTrading(_isolatedPair).holdingToken(),\\n            \\\"Path does not match isolated pair\\\"\\n        );\\n\\n        // calc fees\\n        uint256 fees = takeFeesFromInput(amountIn);\\n\\n        address[] memory pairs;\\n        (amounts, pairs) = UniswapStyleLib._getAmountsOut(\\n            amountIn - fees,\\n            amms,\\n            tokens\\n        );\\n\\n        // checks that trader is within allowed lending bounds\\n        registerUnwind(\\n            msg.sender,\\n            IsolatedMarginTrading(_isolatedPair),\\n            amountIn,\\n            amounts[amounts.length - 1],\\n            withdrawFrom,\\n            withdrawTo\\n        );\\n\\n        getWithdrawals(\\n            msg.sender,\\n            tokens[0],\\n            tokens[tokens.length - 1],\\n            withdrawFrom,\\n            withdrawTo\\n        );\\n\\n        _fundSwapExactT4T(amounts, amountOutMin, pairs, tokens);\\n        emit IsolatedAccountUpdated(msg.sender, _isolatedPair);\\n        emit IsolatedMarginTrade(\\n            msg.sender,\\n            tokens[0],\\n            tokens[tokens.length - 1],\\n            amounts[0],\\n            amounts[amounts.length - 1]\\n        );\\n    }\\n\\n    /// @notice entry point for swapping tokens out of isolated pair\\n    function swapTokensForExactTokensUnwind(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        bytes32 amms,\\n        address[] calldata tokens,\\n        address _isolatedPair,\\n        uint256 withdrawFrom,\\n        uint256 withdrawTo,\\n        uint256 deadline\\n    ) external ensure(deadline) returns (uint256[] memory amounts) {\\n        require(\\n            tokens[tokens.length - 1] ==\\n                IsolatedMarginTrading(_isolatedPair).borrowToken() &&\\n                tokens[0] ==\\n                IsolatedMarginTrading(_isolatedPair).holdingToken(),\\n            \\\"Path does not match isolated pair\\\"\\n        );\\n        address[] memory pairs;\\n        (amounts, pairs) = UniswapStyleLib._getAmountsIn(\\n            amountOut + takeFeesFromOutput(amountOut),\\n            amms,\\n            tokens\\n        );\\n\\n        // checks that trader is within allowed lending bounds\\n        registerUnwind(\\n            msg.sender,\\n            IsolatedMarginTrading(_isolatedPair),\\n            amounts[0],\\n            amountOut,\\n            withdrawFrom,\\n            withdrawTo\\n        );\\n\\n        getWithdrawals(\\n            msg.sender,\\n            tokens[0],\\n            tokens[tokens.length - 1],\\n            withdrawFrom,\\n            withdrawTo\\n        );\\n\\n        _fundSwapT4ExactT(amounts, amountInMax, pairs, tokens);\\n        emit IsolatedAccountUpdated(msg.sender, _isolatedPair);\\n        emit IsolatedMarginTrade(\\n            msg.sender,\\n            tokens[0],\\n            tokens[tokens.length - 1],\\n            amounts[0],\\n            amounts[amounts.length - 1]\\n        );\\n    }\\n\\n    function registerPosition(\\n        address trader,\\n        IsolatedMarginTrading isolatedPair,\\n        uint256 inAmount,\\n        uint256 outAmount,\\n        uint256 depositFrom,\\n        uint256 depositTo\\n    ) internal {\\n        uint256 borrowAmount = inAmount - depositFrom;\\n\\n        isolatedPair.registerPosition(\\n            trader,\\n            borrowAmount,\\n            outAmount + depositTo,\\n            depositFrom > 0 || depositTo > 0\\n        );\\n\\n        Lending(lending()).registerBorrow(address(isolatedPair), borrowAmount);\\n        Lending(lending()).updateHourlyYield(address(isolatedPair));\\n    }\\n\\n    function registerUnwind(\\n        address trader,\\n        IsolatedMarginTrading isolatedPair,\\n        uint256 inAmount,\\n        uint256 outAmount,\\n        uint256 withdrawFrom,\\n        uint256 withdrawTo\\n    ) internal {\\n        uint256 extinguishAmount = outAmount - withdrawTo;\\n\\n        isolatedPair.registerUnwind(\\n            trader,\\n            extinguishAmount,\\n            inAmount - withdrawFrom\\n        );\\n\\n        Lending(lending()).payOff(address(isolatedPair), extinguishAmount);\\n        Lending(lending()).updateHourlyYield(address(isolatedPair));\\n    }\\n\\n    function getDeposits(\\n        address trader,\\n        address fromToken,\\n        address toToken,\\n        uint256 depositFrom,\\n        uint256 depositTo\\n    ) internal {\\n        if (depositFrom > 0) {\\n            Fund(fund()).depositFor(trader, fromToken, depositFrom);\\n        }\\n\\n        if (depositTo > 0) {\\n            Fund(fund()).depositFor(trader, toToken, depositTo);\\n        }\\n    }\\n\\n    function getWithdrawals(\\n        address trader,\\n        address fromToken,\\n        address toToken,\\n        uint256 withdrawalFrom,\\n        uint256 withdrawalTo\\n    ) internal {\\n        if (withdrawalFrom > 0) {\\n            Fund(fund()).withdraw(fromToken, trader, withdrawalFrom);\\n        }\\n        if (withdrawalTo > 0) {\\n            Fund(fund()).withdraw(toToken, trader, withdrawalTo);\\n        }\\n    }\\n\\n    /// @dev internal helper swapping exact token for token on AMM\\n    function _fundSwapExactT4T(\\n        uint256[] memory amounts,\\n        uint256 amountOutMin,\\n        address[] memory pairs,\\n        address[] calldata tokens\\n    ) internal {\\n        require(\\n            amounts[amounts.length - 1] >= amountOutMin,\\n            \\\"MarginRouter: INSUFFICIENT_OUTPUT_AMOUNT\\\"\\n        );\\n        Fund(fund()).withdraw(tokens[0], pairs[0], amounts[0]);\\n        _swap(amounts, pairs, tokens, fund());\\n    }\\n\\n    // @dev internal helper swapping exact token for token on on AMM\\n    function _fundSwapT4ExactT(\\n        uint256[] memory amounts,\\n        uint256 amountInMax,\\n        address[] memory pairs,\\n        address[] calldata tokens\\n    ) internal {\\n        require(\\n            amounts[0] <= amountInMax,\\n            \\\"MarginRouter: EXCESSIVE_INPUT_AMOUNT\\\"\\n        );\\n        Fund(fund()).withdraw(tokens[0], pairs[0], amounts[0]);\\n        _swap(amounts, pairs, tokens, fund());\\n    }\\n\\n    function takeFeesFromOutput(uint256 amount)\\n        internal\\n        pure\\n        returns (uint256 fees)\\n    {\\n        fees = (mswapFeesPer10k * amount) / 10_000;\\n    }\\n\\n    function takeFeesFromInput(uint256 amount)\\n        internal\\n        pure\\n        returns (uint256 fees)\\n    {\\n        fees = (mswapFeesPer10k * amount) / (10_000 + mswapFeesPer10k);\\n    }\\n}\\n\"\n    },\n    \"contracts/controller-actions/TokenActivation.sol\": {\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Executor.sol\\\";\\n\\nimport \\\"../CrossMarginTrading.sol\\\";\\nimport \\\"../MarginRouter.sol\\\";\\n\\ncontract TokenActivation is Executor {\\n    address[] public tokens;\\n    uint256[] public exposureCaps;\\n\\n    uint256 constant initHourlyYieldAPRPercent = 0;\\n\\n    bytes32[] public amms;\\n    address[][] public liquidationTokens;\\n\\n    constructor(\\n        address _roles,\\n        address[] memory tokens2activate,\\n        uint256[] memory _exposureCaps,\\n        bytes32[] memory _amms,\\n        address[][] memory _liquidationTokens\\n    ) RoleAware(_roles) {\\n        tokens = tokens2activate;\\n        exposureCaps = _exposureCaps;\\n\\n        amms = _amms;\\n        liquidationTokens = _liquidationTokens;\\n    }\\n\\n    function requiredRoles()\\n        external\\n        override\\n        returns (uint256[] memory required)\\n    {}\\n\\n    function execute() external override {\\n        for (uint24 i = 0; tokens.length > i; i++) {\\n            address token = tokens[i];\\n            uint256 exposureCap = exposureCaps[i];\\n\\n            bytes32 ammPath = amms[i];\\n            address[] memory liquidationTokenPath = liquidationTokens[i];\\n\\n            require(\\n                !Lending(lending()).activeIssuers(token),\\n                \\\"Token already is active\\\"\\n            );\\n\\n            Lending(lending()).activateIssuer(token);\\n            CrossMarginTrading(crossMarginTrading()).setTokenCap(\\n                token,\\n                exposureCap\\n            );\\n            Lending(lending()).setLendingCap(token, exposureCap);\\n            Lending(lending()).setHourlyYieldAPR(\\n                token,\\n                initHourlyYieldAPRPercent\\n            );\\n            Lending(lending()).initBorrowYieldAccumulator(token);\\n\\n            require(\\n                liquidationTokenPath[0] == token &&\\n                    liquidationTokenPath[liquidationTokenPath.length - 1] ==\\n                    CrossMarginTrading(crossMarginTrading()).peg(),\\n                \\\"Invalid liquidationTokens -- should go from token to peg\\\"\\n            );\\n            CrossMarginTrading(crossMarginTrading()).setLiquidationPath(\\n                ammPath,\\n                liquidationTokenPath\\n            );\\n        }\\n\\n        delete tokens;\\n        delete exposureCaps;\\n        delete amms;\\n        delete liquidationTokens;\\n        selfdestruct(payable(tx.origin));\\n    }\\n}\\n\"\n    },\n    \"contracts/Executor.sol\": {\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./RoleAware.sol\\\";\\n\\nabstract contract Executor is RoleAware {\\n    function requiredRoles() external virtual returns (uint256[] memory);\\n\\n    function execute() external virtual;\\n}\\n\"\n    },\n    \"contracts/Relender.sol\": {\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\nimport \\\"./RoleAware.sol\\\";\\nimport \\\"./Lending.sol\\\";\\nimport \\\"./CrossMarginTrading.sol\\\";\\n\\n/// @title anyone can call this contract to update relending levels\\ncontract Relender is RoleAware {\\n    uint256 public relendPercent = 10;\\n\\n    constructor(address _roles) RoleAware(_roles) {}\\n\\n    function setRelendPercent(uint256 newRelendPercent) external onlyOwnerExec {\\n        relendPercent = newRelendPercent;\\n    }\\n\\n    /// @dev relend from cross margin holdings\\n    function crossRelend(address token) external {\\n        uint256 relendBalance =\\n            Lending(lending()).viewHourlyBondAmount(token, address(this));\\n        uint256 relendTarget =\\n            CrossMarginTrading(crossMarginTrading()).totalLong(token);\\n        if (relendBalance > relendTarget) {\\n            Lending(lending()).withdrawHourlyBond(\\n                token,\\n                relendBalance - relendTarget\\n            );\\n        } else {\\n            Lending(lending()).buyHourlyBondSubscription(\\n                token,\\n                relendTarget - relendBalance\\n            );\\n        }\\n    }\\n}\\n\"\n    },\n    \"contracts/SpotRouter.sol\": {\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"../libraries/UniswapStyleLib.sol\\\";\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"../interfaces/IWETH.sol\\\";\\nimport \\\"./BaseRouter.sol\\\";\\n\\n/// @title Router for spot trading on uniswap and sushiswap jointly\\n/// the paramater amms represents the choice of amm pair along the route\\n/// it is a bytes32 value where amms[i] == 0 for uniswap and amms[i] == 1 for sushi\\ncontract SpotRouter is BaseRouter {\\n    using SafeERC20 for IERC20;\\n    address public immutable WETH;\\n    event SpotTrade(\\n        address indexed trader,\\n        address fromToken,\\n        address toToken,\\n        uint256 fromAmount,\\n        uint256 toAmount\\n    );\\n\\n    constructor(\\n        address _WETH,\\n        address _amm1Factory,\\n        address _amm2Factory,\\n        address _amm3Factory,\\n        bytes32 _amm1InitHash,\\n        bytes32 _amm2InitHash,\\n        bytes32 _amm3InitHash,\\n        uint256 _feeBase\\n    )\\n        UniswapStyleLib(\\n            _amm1Factory,\\n            _amm2Factory,\\n            _amm3Factory,\\n            _amm1InitHash,\\n            _amm2InitHash,\\n            _amm3InitHash,\\n            _feeBase\\n        )\\n    {\\n        WETH = _WETH;\\n    }\\n\\n    receive() external payable {\\n        assert(msg.sender == WETH); // only accept ETH via fallback from the WETH contract\\n    }\\n\\n    function swapExactTokensForTokens(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        bytes32 amms,\\n        address[] calldata tokens,\\n        address to,\\n        uint256 deadline\\n    ) external ensure(deadline) returns (uint256[] memory amounts) {\\n        address[] memory pairs;\\n        (amounts, pairs) = UniswapStyleLib._getAmountsOut(\\n            amountIn,\\n            amms,\\n            tokens\\n        );\\n\\n        require(\\n            amounts[amounts.length - 1] >= amountOutMin,\\n            \\\"SpotRouter: INSUFFICIENT_OUTPUT_AMOUNT\\\"\\n        );\\n\\n        IERC20(tokens[0]).safeTransferFrom(msg.sender, pairs[0], amounts[0]);\\n\\n        _swap(amounts, pairs, tokens, to);\\n        emit SpotTrade(msg.sender, tokens[0], tokens[tokens.length - 1], amounts[0], amounts[amounts.length - 1]);\\n    }\\n\\n    function swapTokensForExactTokens(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        bytes32 amms,\\n        address[] calldata tokens,\\n        address to,\\n        uint256 deadline\\n    ) external ensure(deadline) returns (uint256[] memory amounts) {\\n        address[] memory pairs;\\n        (amounts, pairs) = UniswapStyleLib._getAmountsIn(\\n            amountOut,\\n            amms,\\n            tokens\\n        );\\n\\n        require(\\n            amounts[0] <= amountInMax,\\n            \\\"SpotRouter: EXCESSIVE_INPUT_AMOUNT\\\"\\n        );\\n\\n        IERC20(tokens[0]).safeTransferFrom(msg.sender, pairs[0], amounts[0]);\\n\\n        _swap(amounts, pairs, tokens, to);\\n        emit SpotTrade(msg.sender, tokens[0], tokens[tokens.length - 1], amounts[0], amounts[amounts.length - 1]);\\n    }\\n\\n    function swapExactETHForTokens(\\n        uint256 amountOutMin,\\n        bytes32 amms,\\n        address[] calldata tokens,\\n        address to,\\n        uint256 deadline\\n    ) external payable ensure(deadline) returns (uint256[] memory amounts) {\\n        require(tokens[0] == WETH, \\\"SpotRouter: INVALID_PATH\\\");\\n\\n        address[] memory pairs;\\n        (amounts, pairs) = UniswapStyleLib._getAmountsOut(\\n            msg.value,\\n            amms,\\n            tokens\\n        );\\n        require(\\n            amounts[amounts.length - 1] >= amountOutMin,\\n            \\\"SpotRouter: INSUFFICIENT_OUTPUT_AMOUNT\\\"\\n        );\\n\\n        IWETH(WETH).deposit{value: amounts[0]}();\\n        assert(IWETH(WETH).transfer(pairs[0], msg.value));\\n\\n        _swap(amounts, pairs, tokens, to);\\n        emit SpotTrade(msg.sender, tokens[0], tokens[tokens.length - 1], amounts[0], amounts[amounts.length - 1]);\\n    }\\n\\n    function swapTokensForExactETH(\\n        uint256 amountOut,\\n        uint256 amountInMax,\\n        bytes32 amms,\\n        address[] calldata tokens,\\n        address to,\\n        uint256 deadline\\n    ) external ensure(deadline) returns (uint256[] memory amounts) {\\n        require(tokens[tokens.length - 1] == WETH, \\\"SpotRouter: INVALID_PATH\\\");\\n\\n        address[] memory pairs;\\n        (amounts, pairs) = UniswapStyleLib._getAmountsIn(\\n            amountOut,\\n            amms,\\n            tokens\\n        );\\n\\n        require(\\n            amounts[0] <= amountInMax,\\n            \\\"SpotRouter: EXCESSIVE_INPUT_AMOUNT\\\"\\n        );\\n\\n        IERC20(tokens[0]).safeTransferFrom(msg.sender, pairs[0], amounts[0]);\\n        _swap(amounts, pairs, tokens, address(this));\\n\\n        IWETH(WETH).withdraw(amounts[amounts.length - 1]);\\n        Address.sendValue(payable(to), amounts[amounts.length - 1]);\\n        emit SpotTrade(msg.sender, tokens[0], tokens[tokens.length - 1], amounts[0], amounts[amounts.length - 1]);\\n    }\\n\\n    function swapExactTokensForETH(\\n        uint256 amountIn,\\n        uint256 amountOutMin,\\n        bytes32 amms,\\n        address[] calldata tokens,\\n        address to,\\n        uint256 deadline\\n    ) external ensure(deadline) returns (uint256[] memory amounts) {\\n        require(tokens[tokens.length - 1] == WETH, \\\"SpotRouter: INVALID_PATH\\\");\\n\\n        address[] memory pairs;\\n        (amounts, pairs) = UniswapStyleLib._getAmountsOut(\\n            amountIn,\\n            amms,\\n            tokens\\n        );\\n\\n        require(\\n            amounts[amounts.length - 1] >= amountOutMin,\\n            \\\"SpotRouter: INSUFFICIENT_OUTPUT_AMOUNT\\\"\\n        );\\n\\n        IERC20(tokens[0]).safeTransferFrom(msg.sender, pairs[0], amounts[0]);\\n        _swap(amounts, pairs, tokens, address(this));\\n\\n        IWETH(WETH).withdraw(amounts[amounts.length - 1]);\\n        Address.sendValue(payable(to), amounts[amounts.length - 1]);\\n        emit SpotTrade(msg.sender, tokens[0], tokens[tokens.length - 1], amounts[0], amounts[amounts.length - 1]);\\n    }\\n\\n    function swapETHForExactTokens(\\n        uint256 amountOut,\\n        bytes32 amms,\\n        address[] calldata tokens,\\n        address to,\\n        uint256 deadline\\n    ) external payable ensure(deadline) returns (uint256[] memory amounts) {\\n        require(tokens[0] == WETH, \\\"SpotRouter: INVALID_PATH\\\");\\n\\n        address[] memory pairs;\\n        (amounts, pairs) = UniswapStyleLib._getAmountsIn(\\n            amountOut,\\n            amms,\\n            tokens\\n        );\\n\\n        require(amounts[0] <= msg.value, \\\"SpotRouter: EXCESSIVE_INPUT_AMOUNT\\\");\\n\\n        IWETH(WETH).deposit{value: amounts[0]}();\\n        assert(IWETH(WETH).transfer(pairs[0], amounts[0]));\\n\\n        _swap(amounts, pairs, tokens, to);\\n        // refund dust eth, if any\\n        if (msg.value > amounts[0])\\n            Address.sendValue(payable(msg.sender), msg.value - amounts[0]);\\n        emit SpotTrade(msg.sender, tokens[0], tokens[tokens.length - 1], amounts[0], amounts[amounts.length - 1]);\\n    }\\n\\n    function getAmountsOut(\\n        uint256 inAmount,\\n        bytes32 amms,\\n        address[] calldata tokens\\n    ) external view returns (uint256[] memory amounts) {\\n        (amounts, ) = UniswapStyleLib._getAmountsOut(inAmount, amms, tokens);\\n    }\\n\\n    function getAmountsIn(\\n        uint256 outAmount,\\n        bytes32 amms,\\n        address[] calldata tokens\\n    ) external view returns (uint256[] memory amounts) {\\n        (amounts, ) = UniswapStyleLib._getAmountsIn(outAmount, amms, tokens);\\n    }\\n}\\n\"\n    },\n    \"contracts/IncentiveDistribution.sol\": {\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./RoleAware.sol\\\";\\nimport \\\"./Fund.sol\\\";\\n\\n/// @title Manage distribution of liquidity stake incentives\\n/// Some efforts have been made to reduce gas cost at claim time\\n/// and shift gas burden onto those who would want to withdraw\\ncontract IncentiveDistribution is RoleAware {\\n    mapping(address => uint256) public rewardAmount;\\n    address immutable MFI;\\n\\n    constructor(address _MFI, address _roles) RoleAware(_roles) {\\n        MFI = _MFI;\\n    }\\n\\n    /// Input rewards\\n    function inputRewards(\\n        address[] calldata claimants,\\n        uint256[] calldata rewards\\n    ) external onlyOwnerExecDisabler {\\n        for (uint256 i; claimants.length > i; i++) {\\n            rewardAmount[claimants[i]] += rewards[i];\\n        }\\n    }\\n\\n    /// Withdraw current reward amount\\n    function withdrawReward() external returns (uint256 withdrawAmount) {\\n        withdrawAmount = rewardAmount[msg.sender];\\n        delete rewardAmount[msg.sender];\\n\\n        Fund(fund()).withdraw(MFI, msg.sender, withdrawAmount);\\n    }\\n}\\n\"\n    },\n    \"contracts/DependencyController.sol\": {\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./RoleAware.sol\\\";\\nimport \\\"./Executor.sol\\\";\\nimport \\\"../interfaces/IDependencyController.sol\\\";\\n\\n/// @title Provides a single point of reference to verify integrity\\n/// of the roles structure and facilitate governance actions\\n/// within our system as well as performing cache invalidation for\\n/// roles and inter-contract relationships\\ncontract DependencyController is RoleAware, IDependencyController {\\n    constructor(address _roles) RoleAware(_roles) {}\\n\\n    address public override currentExecutor;\\n\\n    address[] public managedContracts;\\n    mapping(uint256 => bool) public knownCharacters;\\n    mapping(uint256 => bool) public knownRoles;\\n\\n    uint256[] public allCharacters;\\n    uint256[] public allRoles;\\n\\n    function executeAsOwner(address executor) external onlyOwnerExec {\\n        uint256[] memory requiredRoles = Executor(executor).requiredRoles();\\n\\n        for (uint256 i = 0; requiredRoles.length > i; i++) {\\n            _giveRole(requiredRoles[i], executor);\\n        }\\n\\n        updateCaches(executor);\\n        currentExecutor = executor;\\n        Executor(executor).execute();\\n        currentExecutor = address(0);\\n\\n        uint256 len = requiredRoles.length;\\n        for (uint256 i = 0; len > i; i++) {\\n            _removeRole(requiredRoles[i], executor);\\n        }\\n    }\\n\\n    /// Orchestrate roles and permission for contract\\n    function manageContract(\\n        address contr,\\n        uint256[] memory charactersPlayed,\\n        uint256[] memory rolesPlayed\\n    ) external onlyOwnerExec {\\n        managedContracts.push(contr);\\n\\n        // set up all characters this contract plays\\n        uint256 len = charactersPlayed.length;\\n        for (uint256 i = 0; len > i; i++) {\\n            uint256 character = charactersPlayed[i];\\n            _setMainCharacter(character, contr);\\n        }\\n\\n        // all roles this contract plays\\n        len = rolesPlayed.length;\\n        for (uint256 i = 0; len > i; i++) {\\n            uint256 role = rolesPlayed[i];\\n            _giveRole(role, contr);\\n        }\\n\\n        updateCaches(contr);\\n    }\\n\\n    ///  Remove roles and permissions for contract\\n    function disableContract(address contr) external onlyOwnerExecDisabler {\\n        _disableContract(contr);\\n    }\\n\\n    function _disableContract(address contr) internal {\\n        uint256 len = allRoles.length;\\n        for (uint256 i = 0; len > i; i++) {\\n            if (roles.getRole(allRoles[i], contr)) {\\n                _removeRole(allRoles[i], contr);\\n            }\\n        }\\n\\n        len = allCharacters.length;\\n        for (uint256 i = 0; len > i; i++) {\\n            if (roles.mainCharacters(allCharacters[i]) == contr) {\\n                _setMainCharacter(allCharacters[i], address(0));\\n            }\\n        }\\n    }\\n\\n    /// Activate role\\n    function giveRole(uint256 role, address actor) external onlyOwnerExec {\\n        _giveRole(role, actor);\\n    }\\n\\n    /// Disable role\\n    function removeRole(uint256 role, address actor)\\n        external\\n        onlyOwnerExecDisabler\\n    {\\n        _removeRole(role, actor);\\n    }\\n\\n    function _removeRole(uint256 role, address actor) internal {\\n        roles.removeRole(role, actor);\\n        updateRoleCache(role, actor);\\n    }\\n\\n    function setMainCharacter(uint256 role, address actor)\\n        external\\n        onlyOwnerExec\\n    {\\n        _setMainCharacter(role, actor);\\n    }\\n\\n    function _giveRole(uint256 role, address actor) internal {\\n        if (!knownRoles[role]) {\\n            knownRoles[role] = true;\\n            allRoles.push(role);\\n        }\\n        roles.giveRole(role, actor);\\n        updateRoleCache(role, actor);\\n    }\\n\\n    function _setMainCharacter(uint256 character, address actor) internal {\\n        if (!knownCharacters[character]) {\\n            knownCharacters[character] = true;\\n            allCharacters.push(character);\\n        }\\n        roles.setMainCharacter(character, actor);\\n        updateMainCharacterCache(character);\\n    }\\n\\n    function updateMainCharacterCache(uint256 character) public override {\\n        uint256 len = managedContracts.length;\\n        for (uint256 i = 0; len > i; i++) {\\n            RoleAware(managedContracts[i]).updateMainCharacterCache(character);\\n        }\\n    }\\n\\n    function updateRoleCache(uint256 role, address contr) public override {\\n        uint256 len = managedContracts.length;\\n        for (uint256 i = 0; len > i; i++) {\\n            RoleAware(managedContracts[i]).updateRoleCache(role, contr);\\n        }\\n    }\\n\\n    function updateCaches(address contr) public {\\n        // update this contract with all characters we know about\\n        uint256 len = allCharacters.length;\\n        for (uint256 i = 0; len > i; i++) {\\n            RoleAware(contr).updateMainCharacterCache(allCharacters[i]);\\n        }\\n\\n        // update this contract with all roles for all contracts we know about\\n        len = allRoles.length;\\n        for (uint256 i = 0; len > i; i++) {\\n            for (uint256 j = 0; managedContracts.length > j; j++) {\\n                RoleAware(contr).updateRoleCache(\\n                    allRoles[i],\\n                    managedContracts[j]\\n                );\\n            }\\n        }\\n    }\\n\\n    function allManagedContracts() external view returns (address[] memory) {\\n        return managedContracts;\\n    }\\n}\\n\"\n    },\n    \"contracts/controller-actions/SpecialMigration.sol\": {\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Executor.sol\\\";\\n\\nimport \\\"../DependencyController.sol\\\";\\n\\nabstract contract SpecialMigration is Executor {\\n    address oldContract;\\n    address[] accounts;\\n    address[] tokens;\\n    uint256[] amounts;\\n\\n    constructor(\\n        address _oldContract,\\n        address[] memory _accounts,\\n        address[] memory _tokens,\\n        uint256[] memory _amounts,\\n        address _roles\\n    ) RoleAware(_roles) {\\n        oldContract = _oldContract;\\n        accounts = _accounts;\\n        tokens = _tokens;\\n        amounts = _amounts;\\n    }\\n\\n    function requiredRoles()\\n        external\\n        pure\\n        override\\n        returns (uint256[] memory required)\\n    {\\n        required = new uint256[](2);\\n\\n        required[0] = MARGIN_TRADER;\\n        required[1] = LENDER;\\n    }\\n\\n    function execute() external override {\\n        _execute();\\n\\n        delete accounts;\\n        delete tokens;\\n        delete amounts;\\n\\n        if (oldContract != address(0)) {\\n            DependencyController(msg.sender).disableContract(oldContract);\\n        }\\n        selfdestruct(payable(tx.origin));\\n    }\\n\\n    function _execute() internal virtual;\\n}\\n\"\n    },\n    \"contracts/controller-actions/MarginLoansMigration.sol\": {\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\nimport \\\"./SpecialMigration.sol\\\";\\nimport \\\"../CrossMarginTrading.sol\\\";\\n\\ncontract MarginLoansMigration is SpecialMigration {\\n    constructor(\\n        address _oldContract,\\n        address[] memory _accounts,\\n        address[] memory _tokens,\\n        uint256[] memory _amounts,\\n        address _roles\\n    ) SpecialMigration(_oldContract, _accounts, _tokens, _amounts, _roles) {}\\n\\n    function _execute() internal override {\\n        for (uint256 i; accounts.length > i; i++) {\\n            CrossMarginTrading(crossMarginTrading()).registerRawBorrow(\\n                accounts[i],\\n                tokens[i],\\n                amounts[i]\\n            );\\n        }\\n    }\\n}\\n\"\n    },\n    \"contracts/controller-actions/MarginHoldingsMigration.sol\": {\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\nimport \\\"./SpecialMigration.sol\\\";\\nimport \\\"../CrossMarginTrading.sol\\\";\\n\\ncontract MarginHoldingsMigration is SpecialMigration {\\n    constructor(\\n        address _oldContract,\\n        address[] memory _accounts,\\n        address[] memory _tokens,\\n        uint256[] memory _amounts,\\n        address _roles\\n    ) SpecialMigration(_oldContract, _accounts, _tokens, _amounts, _roles) {}\\n\\n    function _execute() internal override {\\n        for (uint256 i; accounts.length > i; i++) {\\n            CrossMarginTrading(crossMarginTrading()).registerDeposit(\\n                accounts[i],\\n                tokens[i],\\n                amounts[i]\\n            );\\n        }\\n    }\\n}\\n\"\n    },\n    \"contracts/controller-actions/IncentivizeLending.sol\": {\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Executor.sol\\\";\\n\\nimport \\\"../Lending.sol\\\";\\n\\ncontract IncentivizeLending is Executor {\\n    address[] tokens;\\n    uint256[] amounts;\\n    uint256 endTimestamp;\\n\\n    constructor(\\n        address[] memory _tokens,\\n        uint256[] memory _amounts,\\n        uint256 _endTimestamp,\\n        address _roles\\n    ) RoleAware(_roles) {\\n        tokens = _tokens;\\n        amounts = _amounts;\\n        endTimestamp = _endTimestamp;\\n    }\\n\\n\\n    function requiredRoles()\\n        external\\n        override\\n        returns (uint256[] memory required)\\n    {}\\n\\n    function execute() external override {\\n        uint256 tstamp = endTimestamp;\\n        for (uint256 i; tokens.length > i; i++) {\\n            Lending(lending()).addIncentive(tokens[i], amounts[i], tstamp);\\n        }\\n    }\\n}\"\n    },\n    \"contracts/controller-actions/DependencyCleaner.sol\": {\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Executor.sol\\\";\\n\\nimport \\\"../DependencyController.sol\\\";\\n\\ncontract DependencyCleaner is Executor {\\n    address[] contracts;\\n    uint256[] roles2nix;\\n\\n    constructor(address[] memory _contracts, uint256[] memory _roles2nix, address _roles) RoleAware(_roles) {\\n        contracts = _contracts;\\n        roles2nix = _roles2nix;\\n    }\\n\\n    function requiredRoles() external pure override returns (uint256[] memory required) {\\n        return new uint256[](0);\\n    }\\n\\n    function execute() external override {\\n        DependencyController dc = DependencyController(msg.sender);\\n        for (uint256 i; contracts.length > i; i++) {\\n            dc.removeRole(roles2nix[i], contracts[i]);\\n        }\\n\\n        delete contracts;\\n        delete roles2nix;\\n        selfdestruct(payable(tx.origin));\\n    }\\n}\"\n    },\n    \"contracts/controller-actions/LendingMigration.sol\": {\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\nimport \\\"./SpecialMigration.sol\\\";\\nimport \\\"../Lending.sol\\\";\\n\\ncontract LendingMigration is SpecialMigration {\\n    constructor(\\n        address _oldContract,\\n        address[] memory _accounts,\\n        address[] memory _tokens,\\n        uint256[] memory _amounts,\\n        address _roles\\n    ) SpecialMigration(_oldContract, _accounts, _tokens, _amounts, _roles) {}\\n\\n    function _execute() internal override {\\n        for (uint256 j; accounts.length > j; j++) {\\n            Lending(lending()).makeFallbackBond(\\n                tokens[j],\\n                accounts[j],\\n                amounts[j]\\n            );\\n        }\\n    }\\n}\\n\"\n    },\n    \"contracts/TokenStaking.sol\": {\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./Roles.sol\\\";\\n\\nstruct StakeAccount {\\n    uint256 stakeAmount;\\n    uint256 stakeWeight;\\n    uint256 cumulativeStart;\\n    uint256 lockEnd;\\n}\\n\\nabstract contract TokenStaking {\\n    using SafeERC20 for IERC20;\\n\\n    IERC20 public immutable stakeToken;\\n    /// Margenswap (MFI) token address\\n    IERC20 public immutable MFI;\\n    Roles roles;\\n\\n    mapping(address => StakeAccount) public stakeAccounts;\\n\\n    uint256 public cumulativeReward;\\n    uint256 public lastCumulativeUpdateBlock;\\n    uint256 public totalCurrentWeights;\\n    uint256 public totalCurrentRewardPerBlock;\\n    uint256 public rewardTarget;\\n\\n    constructor(\\n        address _MFI,\\n        address _stakeToken,\\n        uint256 initialRewardPerBlock,\\n        address _roles\\n    ) {\\n        MFI = IERC20(_MFI);\\n        stakeToken = IERC20(_stakeToken);\\n        roles = Roles(_roles);\\n\\n        lastCumulativeUpdateBlock = block.number;\\n        totalCurrentRewardPerBlock = initialRewardPerBlock;\\n    }\\n\\n    // TODO: function to load up with MFI\\n\\n    function setTotalRewardPerBlock(uint256 rewardPerBlock) external {\\n        require(msg.sender == roles.owner() || msg.sender == roles.executor(), \\\"Not authorized\\\");\\n        updateCumulativeReward();\\n        totalCurrentRewardPerBlock = rewardPerBlock;\\n    }\\n\\n    function add2RewardTarget(uint256 amount) external {\\n        MFI.safeTransferFrom(msg.sender, address(this), amount);\\n        updateCumulativeReward();\\n        rewardTarget += amount;\\n    }\\n\\n    function removeFromRewardTarget(uint256 amount, address recipient) external {\\n        require(msg.sender == roles.owner() || msg.sender == roles.executor(), \\\"Not authorized\\\");\\n        MFI.safeTransfer(recipient, amount);\\n        updateCumulativeReward();\\n        rewardTarget -= amount;\\n        require(rewardTarget >= cumulativeReward, \\\"Trying to remove too much\\\");\\n    }\\n\\n    function stake(uint256 amount, uint256 duration) external {\\n        stakeToken.safeTransferFrom(msg.sender, address(this), amount);\\n\\n        StakeAccount storage account = stakeAccounts[msg.sender];\\n        uint256 extantAmount = account.stakeAmount;\\n\\n        if (extantAmount > 0) {\\n            _withdrawReward(msg.sender, account);\\n        }\\n\\n        account.stakeAmount = extantAmount + amount;\\n        uint256 w =\\n            duration >= 90 days\\n                ? 3\\n                : (duration >= 30 days ? 2 : (duration >= 1 weeks ? 1 : 0));\\n        account.stakeWeight += w * amount;\\n        totalCurrentWeights += w * amount;\\n        account.cumulativeStart = updateCumulativeReward();\\n\\n        account.lockEnd = max(block.timestamp + duration, account.lockEnd);\\n    }\\n\\n    function withdrawStake(uint256 amount) external {\\n        StakeAccount storage account = stakeAccounts[msg.sender];\\n        require(block.timestamp >= account.lockEnd, \\\"Stake is still locked\\\");\\n        _withdrawReward(msg.sender, account);\\n        uint256 weightDiff =\\n            (amount * account.stakeWeight) / account.stakeAmount;\\n        account.stakeWeight -= weightDiff;\\n        totalCurrentWeights -= weightDiff;\\n        account.stakeAmount -= amount;\\n        account.cumulativeStart = updateCumulativeReward();\\n    }\\n\\n    function viewUpdatedCumulativeReward() public view returns (uint256) {\\n        return\\n            min(\\n                rewardTarget,\\n                cumulativeReward +\\n                    (block.number - lastCumulativeUpdateBlock) *\\n                    totalCurrentRewardPerBlock\\n            );\\n    }\\n\\n    function updateCumulativeReward() public returns (uint256) {\\n        if (block.number > lastCumulativeUpdateBlock) {\\n            cumulativeReward = viewUpdatedCumulativeReward();\\n            lastCumulativeUpdateBlock = block.number;\\n        }\\n        return cumulativeReward;\\n    }\\n\\n    function _viewRewardAmount(StakeAccount storage account)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 totalReward = viewUpdatedCumulativeReward();\\n        return\\n            ((totalReward - account.cumulativeStart) * account.stakeWeight) /\\n            (totalCurrentWeights + 1);\\n    }\\n\\n    function viewRewardAmount(address account) external view returns (uint256) {\\n        return _viewRewardAmount(stakeAccounts[account]);\\n    }\\n\\n    function _withdrawReward(address recipient, StakeAccount storage account)\\n        internal\\n    {\\n        if (account.stakeWeight > 0) {\\n            uint256 reward =\\n                min(_viewRewardAmount(account), MFI.balanceOf(address(this)));\\n\\n            MFI.safeTransfer(recipient, reward);\\n        }\\n    }\\n\\n    function withdrawReward() external {\\n        StakeAccount storage account = stakeAccounts[msg.sender];\\n        _withdrawReward(msg.sender, account);\\n        account.cumulativeStart = cumulativeReward;\\n    }\\n\\n    /// @dev minimum\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a > b) {\\n            return b;\\n        } else {\\n            return a;\\n        }\\n    }\\n\\n    /// @dev maximum\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a > b) {\\n            return a;\\n        } else {\\n            return b;\\n        }\\n    }\\n}\\n\"\n    },\n    \"contracts/Staking.sol\": {\n      \"content\": \"pragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nimport \\\"./TokenStaking.sol\\\";\\n\\n// https://docs.synthetix.io/contracts/source/contracts/stakingrewards\\ncontract Staking is ReentrancyGuard, Ownable {\\n    using SafeMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    /* ========== STATE VARIABLES ========== */\\n\\n    TokenStaking legacy;\\n\\n    IERC20 public rewardsToken;\\n    IERC20 public stakingToken;\\n    uint256 public periodFinish = 0;\\n    uint256 public rewardRate = 0;\\n    uint256 public rewardsDuration = 30 days;\\n    uint256 public lastUpdateTime;\\n    uint256 public rewardPerTokenStored;\\n\\n    uint256 public lockTime = 30 days;\\n\\n    mapping(address => uint256) public userRewardPerTokenPaid;\\n    mapping(address => uint256) public rewards;\\n\\n    mapping(address => uint256) public stakeStart;\\n    mapping(address => bool) public migrated;\\n    uint256 constant MAX_WEIGHT = 3 * 10**19;\\n    uint256 public startingWeights;\\n    mapping(address => StakeAccount) public legacyStakeAccounts;\\n\\n    uint256 public legacyCarry;\\n\\n    uint256 private _totalSupply;\\n    mapping(address => uint256) private _balances;\\n\\n    /* ========== CONSTRUCTOR ========== */\\n\\n    constructor(\\n        address _rewardsToken,\\n        address _stakingToken,\\n        address legacyContract\\n    ) Ownable() {\\n        rewardsToken = IERC20(_rewardsToken);\\n        stakingToken = IERC20(_stakingToken);\\n        legacy = TokenStaking(legacyContract);\\n    }\\n\\n    /* ========== VIEWS ========== */\\n\\n    function totalSupply() external view returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function balanceOf(address account) external view returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    function lastTimeRewardApplicable() public view returns (uint256) {\\n        return Math.min(block.timestamp, periodFinish);\\n    }\\n\\n    function rewardPerToken() public view returns (uint256) {\\n        if (_totalSupply == 0) {\\n            return rewardPerTokenStored;\\n        }\\n        return\\n            rewardPerTokenStored.add(\\n                lastTimeRewardApplicable()\\n                    .sub(lastUpdateTime)\\n                    .mul(rewardRate)\\n                    .mul(1e18)\\n                    .div(_totalSupply)\\n            );\\n    }\\n\\n    function viewRewardAmount(address account) public view returns (uint256) {\\n        return\\n            _balances[account]\\n                .mul(rewardPerToken().sub(userRewardPerTokenPaid[account]))\\n                .div(1e18)\\n                .add(rewards[account]);\\n    }\\n\\n    function getRewardForDuration() external view returns (uint256) {\\n        return rewardRate.mul(rewardsDuration);\\n    }\\n\\n    function _rewardDiff(StakeAccount memory account)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 totalReward = legacy.viewUpdatedCumulativeReward();\\n\\n        uint256 startingReward =\\n            ((totalReward - account.cumulativeStart) * account.stakeWeight) /\\n                (startingWeights + 1);\\n\\n        uint256 currentReward =\\n            ((totalReward - account.cumulativeStart) * account.stakeWeight) /\\n                (legacy.totalCurrentWeights() + 1);\\n\\n        if (startingReward >= currentReward) {\\n            return 0;\\n        } else {\\n            return currentReward - startingReward;\\n        }\\n    }\\n\\n    /* ========== MUTATIVE FUNCTIONS ========== */\\n\\n    function stake(uint256 amount)\\n        external\\n        nonReentrant\\n        updateReward(msg.sender)\\n    {\\n        require(amount > 0, \\\"Cannot stake 0\\\");\\n        _totalSupply = _totalSupply.add(amount);\\n        _balances[msg.sender] = _balances[msg.sender].add(amount);\\n        stakingToken.safeTransferFrom(msg.sender, address(this), amount);\\n        emit Staked(msg.sender, amount);\\n        if (stakeStart[msg.sender] == 0) {\\n            stakeStart[msg.sender] = block.timestamp;\\n        }\\n    }\\n\\n    function withdrawStake(uint256 amount)\\n        external\\n        nonReentrant\\n        updateReward(msg.sender)\\n    {\\n        require(amount > 0, \\\"Cannot withdraw 0\\\");\\n        require(block.timestamp >= stakeStart[msg.sender] + lockTime);\\n\\n        _totalSupply = _totalSupply.sub(amount);\\n        _balances[msg.sender] = _balances[msg.sender].sub(amount);\\n\\n        if (migrated[msg.sender]) {\\n            uint256 w;\\n            uint256 __;\\n            (__, w, __, __) = legacy.stakeAccounts(msg.sender);\\n            require(w < MAX_WEIGHT, \\\"Migrate account first\\\");\\n\\n            uint256 rewardDiff = _rewardDiff(legacyStakeAccounts[msg.sender]);\\n            if (rewardDiff >= amount) {\\n                amount = 0;\\n            } else {\\n                amount -= rewardDiff;\\n            }\\n        }\\n\\n        stakingToken.safeTransfer(msg.sender, amount);\\n        emit Withdrawn(msg.sender, amount);\\n    }\\n\\n    function withdrawReward() public nonReentrant updateReward(msg.sender) {\\n        uint256 reward = rewards[msg.sender];\\n        if (reward > 0) {\\n            rewards[msg.sender] = 0;\\n            rewardsToken.safeTransfer(msg.sender, reward);\\n            emit RewardPaid(msg.sender, reward);\\n        }\\n    }\\n\\n    /* ========== RESTRICTED FUNCTIONS ========== */\\n\\n    function notifyRewardAmount(uint256 reward)\\n        external\\n        onlyOwner\\n        updateReward(address(0))\\n    {\\n        if (legacyCarry > 0) {\\n            reward -= legacyCarry;\\n            legacyCarry = 0;\\n        }\\n        if (block.timestamp >= periodFinish) {\\n            rewardRate = reward.div(rewardsDuration);\\n        } else {\\n            uint256 remaining = periodFinish.sub(block.timestamp);\\n            uint256 leftover = remaining.mul(rewardRate);\\n            rewardRate = reward.add(leftover).div(rewardsDuration);\\n        }\\n\\n        // Ensure the provided reward amount is not more than the balance in the contract.\\n        // This keeps the reward rate in the right range, preventing overflows due to\\n        // very high values of rewardRate in the earned and rewardsPerToken functions;\\n        // Reward + leftover must be less than 2^256 / 10^18 to avoid overflow.\\n        uint256 balance = rewardsToken.balanceOf(address(this));\\n        require(\\n            rewardRate <= balance.div(rewardsDuration),\\n            \\\"Provided reward too high\\\"\\n        );\\n\\n        lastUpdateTime = block.timestamp;\\n        periodFinish = block.timestamp.add(rewardsDuration);\\n        emit RewardAdded(reward);\\n    }\\n\\n    // End rewards emission earlier\\n    function updatePeriodFinish(uint256 timestamp)\\n        external\\n        onlyOwner\\n        updateReward(address(0))\\n    {\\n        periodFinish = timestamp;\\n    }\\n\\n    // Added to support recovering LP Rewards from other systems such as BAL to be distributed to holders\\n    function recoverERC20(address tokenAddress, uint256 tokenAmount)\\n        external\\n        onlyOwner\\n    {\\n        IERC20(tokenAddress).safeTransfer(owner(), tokenAmount);\\n        emit Recovered(tokenAddress, tokenAmount);\\n    }\\n\\n    function setRewardsDuration(uint256 _rewardsDuration) external onlyOwner {\\n        require(\\n            block.timestamp > periodFinish,\\n            \\\"Previous rewards period must be complete before changing the duration for the new period\\\"\\n        );\\n        rewardsDuration = _rewardsDuration;\\n        emit RewardsDurationUpdated(rewardsDuration);\\n    }\\n\\n    function setLockTime(uint256 t) external onlyOwner {\\n        lockTime = t;\\n    }\\n\\n    function migrate(address[] calldata accounts) external onlyOwner {\\n        startingWeights = legacy.totalCurrentWeights();\\n        uint256 _startingWeights = startingWeights;\\n        uint256 _rewardTarget = legacy.rewardTarget();\\n\\n        uint256 _legacyCarry;\\n        for (uint256 i; accounts.length > i; i++) {\\n            address accountAddress = accounts[i];\\n            StakeAccount memory account;\\n            (\\n                account.stakeAmount,\\n                account.stakeWeight,\\n                account.cumulativeStart,\\n                account.lockEnd\\n            ) = legacy.stakeAccounts(accountAddress);\\n            uint256 amount = account.stakeAmount;\\n\\n            _totalSupply = _totalSupply.add(amount);\\n            _balances[accountAddress] = _balances[accountAddress].add(amount);\\n            stakeStart[accountAddress] = account.lockEnd - lockTime;\\n            migrated[accountAddress] = true;\\n            legacyStakeAccounts[accountAddress] = account;\\n\\n            if (account.lockEnd > block.timestamp) {\\n                uint256 remaining = account.lockEnd - block.timestamp;\\n                if (remaining > 30 days) {\\n                    // bonus is the additional 1 / 3 of reward that a 3 month should get relative to standard\\n                    // 1 month lockup\\n                    // calculated for their remaining reward period\\n                    uint256 bonus =\\n                        (((_rewardTarget * account.stakeWeight) /\\n                            _startingWeights) * (90 days - remaining)) /\\n                            (90 days) /\\n                            3;\\n                    rewards[accountAddress] += bonus;\\n                    _legacyCarry += bonus;\\n                }\\n            }\\n            legacyCarry += _legacyCarry;\\n        }\\n    }\\n\\n    /* ========== MODIFIERS ========== */\\n\\n    modifier updateReward(address account) {\\n        rewardPerTokenStored = rewardPerToken();\\n        lastUpdateTime = lastTimeRewardApplicable();\\n        if (account != address(0)) {\\n            rewards[account] = viewRewardAmount(account);\\n            userRewardPerTokenPaid[account] = rewardPerTokenStored;\\n        }\\n        _;\\n    }\\n\\n    /* ========== EVENTS ========== */\\n\\n    event RewardAdded(uint256 reward);\\n    event Staked(address indexed user, uint256 amount);\\n    event Withdrawn(address indexed user, uint256 amount);\\n    event RewardPaid(address indexed user, uint256 reward);\\n    event RewardsDurationUpdated(uint256 newDuration);\\n    event Recovered(address token, uint256 amount);\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/security/ReentrancyGuard.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor () {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/math/SafeMath.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is no longer needed starting with Solidity 0.8. The compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\"\n    },\n    \"@openzeppelin/contracts/utils/math/Math.sol\": {\n      \"content\": \"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\"\n    },\n    \"contracts/MFIStaking.sol\": {\n      \"content\": \"import \\\"./TokenStaking.sol\\\";\\n\\ncontract MFIStaking is TokenStaking {\\n    constructor(address _MFI, uint256 initialRewardPerBlock, address _roles)\\n        TokenStaking(_MFI, _MFI, initialRewardPerBlock, _roles)\\n    {}\\n}\\n\"\n    },\n    \"contracts/LiquidityMiningReward.sol\": {\n      \"content\": \"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity ^0.8.0;\\n\\nimport \\\"./TokenStaking.sol\\\";\\n\\n/// @title Manaage rewards for liquidity mining\\ncontract LiquidityMiningReward is TokenStaking {\\n    constructor(\\n        address _MFI,\\n        address LiquidityToken,\\n        uint256 initialRewardPerBlock,\\n        address _roles\\n    ) TokenStaking(_MFI, LiquidityToken, initialRewardPerBlock, _roles) {}\\n}\\n\\n// USDC - MFI pair token\\n// 0x9d640080af7c81911d87632a7d09cc4ab6b133ac\\n\\n// on ropsten:\\n// 0xc4c79A0e1C7A9c79f1e943E3a5bEc65396a5434a\\n\"\n    }\n  },\n  \"settings\": {\n    \"optimizer\": {\n      \"enabled\": true,\n      \"runs\": 5000\n    },\n    \"outputSelection\": {\n      \"*\": {\n        \"*\": [\n          \"abi\",\n          \"evm.bytecode\",\n          \"evm.deployedBytecode\",\n          \"evm.methodIdentifiers\",\n          \"metadata\",\n          \"devdoc\",\n          \"userdoc\",\n          \"storageLayout\",\n          \"evm.gasEstimates\"\n        ],\n        \"\": [\n          \"ast\"\n        ]\n      }\n    },\n    \"metadata\": {\n      \"useLiteralContent\": true\n    }\n  }\n}",
      "solcInputHash": "fd35843ab470d3c36ea3bbd2f8bd3ba5",
      "transactionHash": "0xf00cea88a5fff2e8ea9d0cb9b6aa51746d664432720ef29bb287ccb650f3b878",
      "args": [
        "0x7Bc429a2fA7d71C4693424FDcaB5a2521b9FD343",
        "0x7Bc429a2fA7d71C4693424FDcaB5a2521b9FD343",
        "0x6002830D2f02D987B18d01A1CCce842ae09899d5"
      ]
    },
    "decoded": {
      "from": "0x23292e9BA8434e59E6BAC1907bA7425211c4DE27",
      "gasPrice": "1100000000",
      "gasLimit": "2020284",
      "to": null,
      "value": "0",
      "nonce": 181,
      "data": "0x60806040526000600555600060065562278d0060075562278d00600a553480156200002957600080fd5b50604051620021f2380380620021f28339810160408190526200004c91620000f2565b6001600081815581546001600160a01b031916339081179092556040518291907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a350600380546001600160a01b039485166001600160a01b0319918216179091556004805493851693821693909317909255600280549190931691161790556200013b565b80516001600160a01b0381168114620000ed57600080fd5b919050565b60008060006060848603121562000107578283fd5b6200011284620000d5565b92506200012260208501620000d5565b91506200013260408501620000d5565b90509250925092565b6120a7806200014b6000396000f3fe608060405234801561001057600080fd5b506004361061020b5760003560e01c806380faa57d1161012a578063c885bc58116100bd578063d1af0c7d1161008c578063df136d6511610071578063df136d6514610480578063ebe2b12b14610489578063f2fde38b146104925761020b565b8063d1af0c7d1461045a578063dbe85f701461046d5761020b565b8063c885bc581461042e578063c8f33c9114610436578063cc1a378f1461043f578063cd3daf9d146104525761020b565b8063a204cf85116100f9578063a204cf85146103f6578063a694fc3a146103ff578063ae04d45d14610412578063be7b51cc146104255761020b565b806380faa57d146103aa5780638980f11f146103b25780638b876347146103c55780638da5cb5b146103e55761020b565b80633c6b16ab116101a257806370a082311161017157806370a082311461035b578063715018a61461036e57806372f702f3146103765780637b0a47ee146103a15761020b565b80633c6b16ab146102ad5780634ba0a5ee146102c0578063556f6e6b146102f3578063568a2d98146103065761020b565b80631c1f78eb116101de5780631c1f78eb1461027457806325d5971f1461027c5780632e558d6914610291578063386a9525146102a45761020b565b80630700037d146102105780630d6680871461024357806312a7f6611461024c57806318160ddd1461026c575b600080fd5b61023061021e366004611d93565b600c6020526000908152604090205481565b6040519081526020015b60405180910390f35b610230600a5481565b61023061025a366004611d93565b600d6020526000908152604090205481565b6102306104a5565b6102306104ac565b61028f61028a366004611e66565b6104ca565b005b61028f61029f366004611dd6565b610803565b61023060075481565b61028f6102bb366004611e66565b610c79565b6102e36102ce366004611d93565b600e6020526000908152604090205460ff1681565b604051901515815260200161023a565b61028f610301366004611e66565b610eff565b61033b610314366004611d93565b60106020526000908152604090208054600182015460028301546003909301549192909184565b60408051948552602085019390935291830152606082015260800161023a565b610230610369366004611d93565b610fbb565b61028f610fda565b600454610389906001600160a01b031681565b6040516001600160a01b03909116815260200161023a565b61023060065481565b610230611096565b61028f6103c0366004611dad565b6110a4565b6102306103d3366004611d93565b600b6020526000908152604090205481565b6001546001600160a01b0316610389565b610230600f5481565b61028f61040d366004611e66565b61116a565b61028f610420366004611e66565b611329565b61023060115481565b61028f611388565b61023060085481565b61028f61044d366004611e66565b6114ac565b6102306115de565b600354610389906001600160a01b031681565b61023061047b366004611d93565b611632565b61023060095481565b61023060055481565b61028f6104a0366004611d93565b6116a4565b6012545b90565b60006104c56007546006546117ee90919063ffffffff16565b905090565b600260005414156105225760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c0060448201526064015b60405180910390fd5b6002600055336105306115de565b60095561053b611096565b6008556001600160a01b038116156105825761055681611632565b6001600160a01b0382166000908152600c6020908152604080832093909355600954600b909152919020555b600082116105d25760405162461bcd60e51b815260206004820152601160248201527f43616e6e6f7420776974686472617720300000000000000000000000000000006044820152606401610519565b600a54336000908152600d60205260409020546105ef9190611f38565b4210156105fb57600080fd5b6012546106089083611801565b601255336000908152601360205260409020546106259083611801565b33600090815260136020908152604080832093909355600e9052205460ff16156107ad576002546040517fe57466fd00000000000000000000000000000000000000000000000000000000815233600482015260009182916001600160a01b039091169063e57466fd9060240160806040518083038186803b1580156106aa57600080fd5b505afa1580156106be573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106e29190611e96565b50909350909150506801a055690d9db8000082106107425760405162461bcd60e51b815260206004820152601560248201527f4d696772617465206163636f756e7420666972737400000000000000000000006044820152606401610519565b33600090815260106020908152604080832081516080810183528154815260018201549381019390935260028101549183019190915260030154606082015261078a9061180d565b905084811061079c57600094506107a9565b6107a68186611fc6565b94505b5050505b6004546107c4906001600160a01b031633846119b7565b60405182815233907f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5906020015b60405180910390a250506001600055565b6001546001600160a01b0316331461085d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610519565b600260009054906101000a90046001600160a01b03166001600160a01b031663fb3935ee6040518163ffffffff1660e01b815260040160206040518083038186803b1580156108ab57600080fd5b505afa1580156108bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108e39190611e7e565b600f819055600254604080517f8275198200000000000000000000000000000000000000000000000000000000815290516000926001600160a01b0316916382751982916004808301926020929190829003018186803b15801561094657600080fd5b505afa15801561095a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061097e9190611e7e565b90506000805b80851115610c715760008686838181106109c7577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90506020020160208101906109dc9190611d93565b9050610a096040518060800160405280600081526020016000815260200160008152602001600081525090565b6002546040517fe57466fd0000000000000000000000000000000000000000000000000000000081526001600160a01b0384811660048301529091169063e57466fd9060240160806040518083038186803b158015610a6757600080fd5b505afa158015610a7b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a9f9190611e96565b606085015260408401526020830152808252601254610abe9082611a83565b6012556001600160a01b038316600090815260136020526040902054610ae49082611a83565b6001600160a01b038416600090815260136020526040902055600a546060830151610b0f9190611fc6565b6001600160a01b0384166000908152600d6020908152604080832093909355600e815282822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001908117909155601082529183902085518155908501519181019190915590830151600282015560608301516003909101819055421015610c42576000428360600151610ba79190611fc6565b905062278d00811115610c4057600060036276a700610bc68482611fc6565b8b87602001518c610bd79190611f89565b610be19190611f50565b610beb9190611f89565b610bf59190611f50565b610bff9190611f50565b6001600160a01b0386166000908152600c6020526040812080549293508392909190610c2c908490611f38565b90915550610c3c90508188611f38565b9650505b505b8460116000828254610c549190611f38565b925050819055505050508080610c6990612009565b915050610984565b505050505050565b6001546001600160a01b03163314610cd35760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610519565b6000610cdd6115de565b600955610ce8611096565b6008556001600160a01b03811615610d2f57610d0381611632565b6001600160a01b0382166000908152600c6020908152604080832093909355600954600b909152919020555b60115415610d4c57601154610d449083611fc6565b600060115591505b6005544210610d6b57600754610d63908390611a8f565b600655610db4565b600554600090610d7b9042611801565b90506000610d94600654836117ee90919063ffffffff16565b600754909150610dae90610da88684611a83565b90611a8f565b60065550505b6003546040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526000916001600160a01b0316906370a082319060240160206040518083038186803b158015610e1157600080fd5b505afa158015610e25573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e499190611e7e565b9050610e6060075482611a8f90919063ffffffff16565b6006541115610eb15760405162461bcd60e51b815260206004820152601860248201527f50726f76696465642072657761726420746f6f206869676800000000000000006044820152606401610519565b426008819055600754610ec49190611a83565b6005556040518381527fde88a922e0d3b88b24e9623efeb464919c6bf9f66857a65e2bfcf2ce87a9433d9060200160405180910390a1505050565b6001546001600160a01b03163314610f595760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610519565b6000610f636115de565b600955610f6e611096565b6008556001600160a01b03811615610fb557610f8981611632565b6001600160a01b0382166000908152600c6020908152604080832093909355600954600b909152919020555b50600555565b6001600160a01b0381166000908152601360205260409020545b919050565b6001546001600160a01b031633146110345760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610519565b6001546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3600180547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055565b60006104c542600554611a9b565b6001546001600160a01b031633146110fe5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610519565b6111246111136001546001600160a01b031690565b6001600160a01b03841690836119b7565b604080516001600160a01b0384168152602081018390527f8c1256b8896378cd5044f80c202f9772b9d77dc85c8a6eb51967210b09bfaa28910160405180910390a15050565b600260005414156111bd5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610519565b6002600055336111cb6115de565b6009556111d6611096565b6008556001600160a01b0381161561121d576111f181611632565b6001600160a01b0382166000908152600c6020908152604080832093909355600954600b909152919020555b6000821161126d5760405162461bcd60e51b815260206004820152600e60248201527f43616e6e6f74207374616b6520300000000000000000000000000000000000006044820152606401610519565b60125461127a9083611a83565b601255336000908152601360205260409020546112979083611a83565b336000818152601360205260409020919091556004546112c4916001600160a01b03909116903085611ab1565b60405182815233907f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d9060200160405180910390a2336000908152600d602052604090205461132057336000908152600d602052604090204290555b50506001600055565b6001546001600160a01b031633146113835760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610519565b600a55565b600260005414156113db5760405162461bcd60e51b815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610519565b6002600055336113e96115de565b6009556113f4611096565b6008556001600160a01b0381161561143b5761140f81611632565b6001600160a01b0382166000908152600c6020908152604080832093909355600954600b909152919020555b336000908152600c6020526040902054801561132057336000818152600c602052604081205560035461147a916001600160a01b0390911690836119b7565b60405181815233907fe2403640ba68fed3a2f88b7557551d1993f84b99bb10ff833f0cf8db0c5e0486906020016107f2565b6001546001600160a01b031633146115065760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610519565b60055442116115a35760405162461bcd60e51b815260206004820152605860248201527f50726576696f7573207265776172647320706572696f64206d7573742062652060448201527f636f6d706c657465206265666f7265206368616e67696e67207468652064757260648201527f6174696f6e20666f7220746865206e657720706572696f640000000000000000608482015260a401610519565b60078190556040518181527ffb46ca5a5e06d4540d6387b930a7c978bce0db5f449ec6b3f5d07c6e1d44f2d39060200160405180910390a150565b6000601254600014156115f457506009546104a9565b6104c5611629601254610da8670de0b6b3a764000061162360065461162360085461161d611096565b90611801565b906117ee565b60095490611a83565b6001600160a01b0381166000908152600c6020908152604080832054600b90925282205461169e919061169890670de0b6b3a764000090610da8906116799061161d6115de565b6001600160a01b038816600090815260136020526040902054906117ee565b90611a83565b92915050565b6001546001600160a01b031633146116fe5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610519565b6001600160a01b03811661177a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610519565b6001546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3600180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b60006117fa8284611f89565b9392505050565b60006117fa8284611fc6565b600080600260009054906101000a90046001600160a01b03166001600160a01b031663c8d65d596040518163ffffffff1660e01b815260040160206040518083038186803b15801561185e57600080fd5b505afa158015611872573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118969190611e7e565b90506000600f5460016118a99190611f38565b602085015160408601516118bd9085611fc6565b6118c79190611f89565b6118d19190611f50565b90506000600260009054906101000a90046001600160a01b03166001600160a01b031663fb3935ee6040518163ffffffff1660e01b815260040160206040518083038186803b15801561192357600080fd5b505afa158015611937573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061195b9190611e7e565b611966906001611f38565b6020860151604087015161197a9086611fc6565b6119849190611f89565b61198e9190611f50565b90508082106119a35760009350505050610fd5565b6119ad8282611fc6565b9350505050610fd5565b6040516001600160a01b038316602482015260448101829052611a7e9084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152611b08565b505050565b60006117fa8284611f38565b60006117fa8284611f50565b6000818310611aaa57816117fa565b5090919050565b6040516001600160a01b0380851660248301528316604482015260648101829052611b029085907f23b872dd00000000000000000000000000000000000000000000000000000000906084016119fc565b50505050565b6000611b5d826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b0316611bed9092919063ffffffff16565b805190915015611a7e5780806020019051810190611b7b9190611e46565b611a7e5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610519565b6060611bfc8484600085611c04565b949350505050565b606082471015611c7c5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610519565b843b611cca5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610519565b600080866001600160a01b03168587604051611ce69190611ecb565b60006040518083038185875af1925050503d8060008114611d23576040519150601f19603f3d011682016040523d82523d6000602084013e611d28565b606091505b5091509150611d38828286611d43565b979650505050505050565b60608315611d525750816117fa565b825115611d625782518084602001fd5b8160405162461bcd60e51b81526004016105199190611ee7565b80356001600160a01b0381168114610fd557600080fd5b600060208284031215611da4578081fd5b6117fa82611d7c565b60008060408385031215611dbf578081fd5b611dc883611d7c565b946020939093013593505050565b60008060208385031215611de8578182fd5b823567ffffffffffffffff80821115611dff578384fd5b818501915085601f830112611e12578384fd5b813581811115611e20578485fd5b8660208260051b8501011115611e34578485fd5b60209290920196919550909350505050565b600060208284031215611e57578081fd5b815180151581146117fa578182fd5b600060208284031215611e77578081fd5b5035919050565b600060208284031215611e8f578081fd5b5051919050565b60008060008060808587031215611eab578182fd5b505082516020840151604085015160609095015191969095509092509050565b60008251611edd818460208701611fdd565b9190910192915050565b6000602082528251806020840152611f06816040850160208701611fdd565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b60008219821115611f4b57611f4b612042565b500190565b600082611f84577f4e487b710000000000000000000000000000000000000000000000000000000081526012600452602481fd5b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615611fc157611fc1612042565b500290565b600082821015611fd857611fd8612042565b500390565b60005b83811015611ff8578181015183820152602001611fe0565b83811115611b025750506000910152565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82141561203b5761203b612042565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fdfea2646970667358221220665e6045dc536be3860da71f2d7e42195dcc7eac1bd466680666ec319b53076464736f6c634300080300330000000000000000000000007bc429a2fa7d71c4693424fdcab5a2521b9fd3430000000000000000000000007bc429a2fa7d71c4693424fdcab5a2521b9fd3430000000000000000000000006002830d2f02d987b18d01a1ccce842ae09899d5",
      "r": "0x949e269fc5748f9b20c847573f1b74f5e5e58fcebe19fa1cb3593f704a305f11",
      "s": "0x4dd6c5bd8c2c75248dfd43f085b0f3aa7ae3deab10fc7cd8af74dc824b458f33",
      "v": 310,
      "chainId": 137
    }
  }
}